// Generated from GQLParser.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';
import GQLParserListener from './GQLParserListener.js';
const serializedATN = [4,1,366,4368,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,
2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,7,153,
2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,2,159,7,159,
2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,2,165,7,165,
2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,2,171,7,171,
2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,2,177,7,177,
2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,2,183,7,183,
2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,
2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,
2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,
2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,
2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,7,219,
2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,2,225,7,225,
2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,7,230,2,231,7,231,
2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,7,236,2,237,7,237,
2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,7,242,2,243,7,243,
2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,7,248,2,249,7,249,
2,250,7,250,2,251,7,251,2,252,7,252,2,253,7,253,2,254,7,254,2,255,7,255,
2,256,7,256,2,257,7,257,2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,
2,262,7,262,2,263,7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,
2,268,7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,
2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,7,285,
2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,2,291,7,291,
2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,7,296,2,297,7,297,
2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,2,302,7,302,2,303,7,303,
2,304,7,304,2,305,7,305,2,306,7,306,2,307,7,307,2,308,7,308,2,309,7,309,
2,310,7,310,2,311,7,311,2,312,7,312,2,313,7,313,2,314,7,314,2,315,7,315,
2,316,7,316,2,317,7,317,2,318,7,318,2,319,7,319,2,320,7,320,2,321,7,321,
2,322,7,322,2,323,7,323,2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,
2,328,7,328,2,329,7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,
2,334,7,334,2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,
2,340,7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,7,345,
2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,2,351,7,351,
2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,2,357,7,357,
2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,7,362,2,363,7,363,
2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,2,368,7,368,2,369,7,369,
2,370,7,370,2,371,7,371,2,372,7,372,2,373,7,373,2,374,7,374,2,375,7,375,
2,376,7,376,2,377,7,377,2,378,7,378,2,379,7,379,2,380,7,380,2,381,7,381,
2,382,7,382,2,383,7,383,2,384,7,384,2,385,7,385,2,386,7,386,2,387,7,387,
2,388,7,388,2,389,7,389,2,390,7,390,2,391,7,391,2,392,7,392,2,393,7,393,
2,394,7,394,2,395,7,395,2,396,7,396,2,397,7,397,2,398,7,398,2,399,7,399,
2,400,7,400,2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,2,405,7,405,
2,406,7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,2,411,7,411,
2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,2,417,7,417,
2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,7,422,2,423,7,423,
2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,2,428,7,428,2,429,7,429,
2,430,7,430,2,431,7,431,2,432,7,432,2,433,7,433,2,434,7,434,2,435,7,435,
2,436,7,436,2,437,7,437,2,438,7,438,2,439,7,439,2,440,7,440,2,441,7,441,
2,442,7,442,2,443,7,443,2,444,7,444,2,445,7,445,2,446,7,446,2,447,7,447,
2,448,7,448,2,449,7,449,2,450,7,450,2,451,7,451,2,452,7,452,2,453,7,453,
2,454,7,454,2,455,7,455,2,456,7,456,2,457,7,457,2,458,7,458,2,459,7,459,
2,460,7,460,2,461,7,461,2,462,7,462,2,463,7,463,2,464,7,464,2,465,7,465,
2,466,7,466,2,467,7,467,2,468,7,468,2,469,7,469,2,470,7,470,2,471,7,471,
2,472,7,472,2,473,7,473,2,474,7,474,2,475,7,475,2,476,7,476,2,477,7,477,
2,478,7,478,2,479,7,479,2,480,7,480,2,481,7,481,2,482,7,482,2,483,7,483,
2,484,7,484,2,485,7,485,2,486,7,486,2,487,7,487,2,488,7,488,2,489,7,489,
2,490,7,490,2,491,7,491,2,492,7,492,2,493,7,493,2,494,7,494,2,495,7,495,
2,496,7,496,2,497,7,497,2,498,7,498,2,499,7,499,2,500,7,500,2,501,7,501,
2,502,7,502,2,503,7,503,2,504,7,504,2,505,7,505,2,506,7,506,2,507,7,507,
2,508,7,508,2,509,7,509,2,510,7,510,2,511,7,511,2,512,7,512,2,513,7,513,
1,0,1,0,3,0,1031,8,0,1,0,1,0,1,1,1,1,3,1,1037,8,1,1,1,3,1,1040,8,1,1,2,1,
2,3,2,1044,8,2,1,3,4,3,1047,8,3,11,3,12,3,1048,1,4,1,4,3,4,1053,8,4,1,5,
1,5,1,5,3,5,1058,8,5,3,5,1060,8,5,1,5,1,5,3,5,1064,8,5,1,5,3,5,1067,8,5,
1,6,1,6,3,6,1071,8,6,1,7,1,7,1,7,1,7,1,7,1,7,3,7,1079,8,7,1,8,1,8,1,8,1,
9,3,9,1085,8,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,12,
3,12,1099,8,12,1,13,3,13,1102,8,13,1,13,1,13,1,13,1,13,1,14,3,14,1109,8,
14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,3,16,1122,8,16,
1,16,1,16,1,17,1,17,1,17,3,17,1129,8,17,1,18,3,18,1132,8,18,1,18,1,18,1,
18,3,18,1137,8,18,1,18,1,18,1,18,1,18,3,18,1143,8,18,1,18,3,18,1146,8,18,
1,19,1,19,1,19,1,20,1,20,1,20,3,20,1154,8,20,1,21,1,21,1,21,5,21,1159,8,
21,10,21,12,21,1162,9,21,1,22,1,22,3,22,1166,8,22,1,23,1,23,1,23,1,23,3,
23,1172,8,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,
1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,32,1,32,1,32,1,32,1,33,1,33,1,
34,1,34,3,34,1202,8,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,
1,40,1,40,1,40,5,40,1217,8,40,10,40,12,40,1220,9,40,1,41,1,41,1,41,5,41,
1225,8,41,10,41,12,41,1228,9,41,1,42,1,42,1,42,5,42,1233,8,42,10,42,12,42,
1236,9,42,1,43,1,43,3,43,1240,8,43,1,44,1,44,1,45,1,45,1,45,1,45,3,45,1248,
8,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,
46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,
46,1292,8,46,1,47,1,47,1,47,1,48,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,50,
3,50,1306,8,50,1,51,1,51,1,51,1,52,1,52,1,53,1,53,3,53,1315,8,53,1,54,1,
54,3,54,1319,8,54,1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,3,59,
1331,8,59,1,60,1,60,1,61,1,61,1,62,1,62,1,63,1,63,3,63,1341,8,63,1,64,1,
64,1,65,1,65,1,66,1,66,1,67,1,67,1,68,1,68,1,69,1,69,1,70,1,70,1,70,3,70,
1358,8,70,1,71,1,71,1,72,1,72,1,73,1,73,3,73,1366,8,73,1,74,1,74,3,74,1370,
8,74,1,75,1,75,1,76,1,76,1,77,1,77,1,78,1,78,1,79,1,79,1,80,1,80,1,81,1,
81,1,81,1,81,1,81,1,81,3,81,1390,8,81,1,82,1,82,1,83,1,83,3,83,1396,8,83,
1,84,1,84,1,85,3,85,1401,8,85,1,85,3,85,1404,8,85,1,85,1,85,1,86,4,86,1409,
8,86,11,86,12,86,1410,1,87,1,87,1,87,3,87,1416,8,87,1,88,1,88,5,88,1420,
8,88,10,88,12,88,1423,9,88,1,89,1,89,1,89,3,89,1428,8,89,1,90,1,90,3,90,
1432,8,90,1,90,1,90,1,91,3,91,1437,8,91,1,91,1,91,1,91,1,91,1,92,3,92,1444,
8,92,1,92,3,92,1447,8,92,1,92,1,92,1,93,1,93,1,93,1,94,3,94,1455,8,94,1,
94,1,94,1,94,1,94,1,95,3,95,1462,8,95,1,95,3,95,1465,8,95,1,95,1,95,1,96,
1,96,1,96,1,97,1,97,1,97,1,97,1,98,3,98,1477,8,98,1,98,3,98,1480,8,98,1,
98,1,98,1,98,1,99,1,99,1,99,1,99,1,99,3,99,1490,8,99,1,100,1,100,1,101,1,
101,1,102,1,102,1,102,1,102,3,102,1500,8,102,1,103,1,103,1,104,1,104,1,104,
1,104,1,104,1,104,1,104,3,104,1511,8,104,1,105,4,105,1514,8,105,11,105,12,
105,1515,1,106,1,106,3,106,1520,8,106,1,107,1,107,1,107,1,107,1,107,1,107,
3,107,1528,8,107,1,108,1,108,1,108,1,108,1,108,3,108,1535,8,108,1,108,1,
108,1,109,1,109,1,109,1,109,3,109,1543,8,109,1,109,1,109,1,110,1,110,3,110,
1549,8,110,1,110,1,110,1,110,1,110,3,110,1555,8,110,1,110,1,110,1,110,3,
110,1560,8,110,1,110,3,110,1563,8,110,1,110,1,110,1,110,3,110,1568,8,110,
1,110,3,110,1571,8,110,1,111,3,111,1574,8,111,1,111,1,111,3,111,1578,8,111,
1,111,3,111,1581,8,111,1,112,1,112,3,112,1585,8,112,1,112,1,112,3,112,1589,
8,112,1,112,3,112,1592,8,112,1,112,3,112,1595,8,112,1,112,3,112,1598,8,112,
1,113,1,113,1,113,1,114,1,114,1,114,1,114,1,114,1,115,1,115,3,115,1610,8,
115,1,115,1,115,1,115,3,115,1615,8,115,1,115,1,115,1,116,1,116,3,116,1621,
8,116,1,116,1,116,1,116,1,116,1,116,3,116,1628,8,116,1,116,1,116,1,116,3,
116,1633,8,116,1,116,1,116,3,116,1637,8,116,1,116,1,116,1,116,1,117,3,117,
1643,8,117,1,117,1,117,1,117,3,117,1648,8,117,1,117,3,117,1651,8,117,1,118,
1,118,1,118,1,118,3,118,1657,8,118,1,119,1,119,3,119,1661,8,119,1,119,1,
119,1,119,1,119,3,119,1667,8,119,1,119,1,119,1,120,1,120,1,121,1,121,3,121,
1675,8,121,1,122,1,122,3,122,1679,8,122,1,123,1,123,1,123,3,123,1684,8,123,
1,124,1,124,1,124,1,125,1,125,3,125,1691,8,125,1,126,1,126,3,126,1695,8,
126,1,127,4,127,1698,8,127,11,127,12,127,1699,1,128,1,128,3,128,1704,8,128,
1,129,1,129,3,129,1708,8,129,1,130,1,130,1,130,1,130,3,130,1714,8,130,1,
131,1,131,1,131,1,132,1,132,1,132,1,133,1,133,1,133,5,133,1725,8,133,10,
133,12,133,1728,9,133,1,134,1,134,1,134,3,134,1733,8,134,1,135,1,135,1,135,
1,135,1,135,1,135,1,136,1,136,1,136,1,136,3,136,1745,8,136,1,136,1,136,1,
137,1,137,1,137,1,137,1,138,1,138,1,138,5,138,1756,8,138,10,138,12,138,1759,
9,138,1,139,1,139,1,139,1,140,1,140,1,140,5,140,1767,8,140,10,140,12,140,
1770,9,140,1,141,1,141,3,141,1774,8,141,1,142,1,142,1,142,1,142,1,143,1,
143,1,143,1,143,1,144,3,144,1785,8,144,1,144,1,144,1,144,1,145,1,145,1,145,
5,145,1793,8,145,10,145,12,145,1796,9,145,1,146,1,146,1,147,1,147,1,148,
1,148,1,149,1,149,1,149,1,149,1,149,1,149,1,149,5,149,1811,8,149,10,149,
12,149,1814,9,149,1,150,1,150,3,150,1818,8,150,1,151,1,151,3,151,1822,8,
151,1,151,1,151,3,151,1826,8,151,1,151,1,151,3,151,1830,8,151,3,151,1832,
8,151,1,152,1,152,1,153,1,153,3,153,1838,8,153,1,154,5,154,1841,8,154,10,
154,12,154,1844,9,154,1,154,1,154,1,154,1,154,3,154,1850,8,154,1,155,1,155,
1,155,1,156,1,156,1,156,1,156,1,157,1,157,1,157,1,158,1,158,1,158,1,159,
3,159,1866,8,159,1,159,1,159,3,159,1870,8,159,1,160,4,160,1873,8,160,11,
160,12,160,1874,1,161,1,161,3,161,1879,8,161,1,162,1,162,1,162,1,162,1,162,
3,162,1886,8,162,1,163,1,163,3,163,1890,8,163,1,164,1,164,1,164,1,165,1,
165,1,165,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,1,166,3,166,1907,
8,166,1,167,4,167,1910,8,167,11,167,12,167,1911,1,168,1,168,1,169,1,169,
1,169,3,169,1919,8,169,1,170,1,170,1,170,1,171,1,171,1,171,5,171,1927,8,
171,10,171,12,171,1930,9,171,1,172,1,172,1,172,1,172,1,172,3,172,1937,8,
172,1,173,1,173,1,173,3,173,1942,8,173,1,174,1,174,1,174,1,175,1,175,1,175,
1,176,1,176,1,176,1,176,1,177,1,177,3,177,1956,8,177,1,177,3,177,1959,8,
177,1,177,1,177,3,177,1963,8,177,1,177,3,177,1966,8,177,1,178,1,178,3,178,
1970,8,178,1,178,3,178,1973,8,178,1,179,1,179,1,179,1,180,3,180,1979,8,180,
1,180,1,180,3,180,1983,8,180,1,180,3,180,1986,8,180,1,180,1,180,3,180,1990,
8,180,1,181,1,181,1,181,5,181,1995,8,181,10,181,12,181,1998,9,181,1,182,
1,182,3,182,2002,8,182,1,183,1,183,1,183,1,184,1,184,3,184,2009,8,184,1,
184,1,184,3,184,2013,8,184,1,184,1,184,3,184,2017,8,184,1,184,3,184,2020,
8,184,1,184,3,184,2023,8,184,1,184,3,184,2026,8,184,1,184,3,184,2029,8,184,
1,184,3,184,2032,8,184,3,184,2034,8,184,1,185,1,185,1,185,5,185,2039,8,185,
10,185,12,185,2042,9,185,1,186,1,186,3,186,2046,8,186,1,187,1,187,1,187,
1,188,1,188,1,188,1,189,1,189,1,189,1,189,3,189,2058,8,189,1,190,1,190,1,
190,5,190,2063,8,190,10,190,12,190,2066,9,190,1,191,1,191,1,191,1,192,1,
192,1,192,1,192,3,192,2075,8,192,1,193,3,193,2078,8,193,1,193,1,193,1,193,
1,194,1,194,3,194,2085,8,194,1,195,3,195,2088,8,195,1,195,1,195,1,196,1,
196,3,196,2094,8,196,1,196,1,196,1,197,1,197,1,197,5,197,2101,8,197,10,197,
12,197,2104,9,197,1,198,1,198,1,198,3,198,2109,8,198,1,198,1,198,3,198,2113,
8,198,1,199,1,199,1,199,5,199,2118,8,199,10,199,12,199,2121,9,199,1,200,
1,200,1,201,1,201,1,201,1,202,1,202,1,202,1,203,1,203,1,204,1,204,1,205,
1,205,1,206,1,206,1,207,1,207,3,207,2141,8,207,1,208,1,208,1,208,1,209,1,
209,1,209,5,209,2149,8,209,10,209,12,209,2152,9,209,1,209,1,209,3,209,2156,
8,209,1,210,1,210,3,210,2160,8,210,1,211,3,211,2163,8,211,1,211,1,211,3,
211,2167,8,211,1,211,3,211,2170,8,211,1,212,1,212,3,212,2174,8,212,1,213,
1,213,1,213,1,214,1,214,1,214,1,215,1,215,3,215,2184,8,215,1,215,3,215,2187,
8,215,1,216,1,216,3,216,2191,8,216,1,216,3,216,2194,8,216,1,217,1,217,1,
217,5,217,2199,8,217,10,217,12,217,2202,9,217,1,218,3,218,2205,8,218,1,218,
3,218,2208,8,218,1,218,1,218,1,219,1,219,1,219,1,220,1,220,1,220,1,221,1,
221,1,221,1,222,1,222,3,222,2223,8,222,1,223,1,223,3,223,2227,8,223,1,224,
1,224,1,225,1,225,1,225,3,225,2234,8,225,1,226,1,226,3,226,2238,8,226,1,
226,3,226,2241,8,226,1,227,1,227,1,228,1,228,3,228,2247,8,228,1,228,3,228,
2250,8,228,1,228,3,228,2253,8,228,1,229,1,229,1,230,1,230,1,230,1,230,3,
230,2261,8,230,1,231,1,231,1,231,3,231,2266,8,231,1,231,3,231,2269,8,231,
1,232,1,232,1,232,3,232,2274,8,232,1,232,3,232,2277,8,232,1,233,1,233,1,
233,3,233,2282,8,233,1,233,3,233,2285,8,233,1,234,1,234,1,234,3,234,2290,
8,234,1,234,3,234,2293,8,234,1,234,1,234,1,235,1,235,1,236,1,236,1,236,3,
236,2302,8,236,1,237,1,237,1,237,1,237,1,237,5,237,2309,8,237,10,237,12,
237,2312,9,237,1,238,1,238,1,238,1,238,1,238,5,238,2319,8,238,10,238,12,
238,2322,9,238,1,239,4,239,2325,8,239,11,239,12,239,2326,1,240,1,240,1,240,
3,240,2332,8,240,1,241,1,241,1,241,1,242,1,242,1,242,1,243,1,243,1,243,3,
243,2343,8,243,1,244,1,244,3,244,2347,8,244,1,245,1,245,1,245,1,245,1,246,
3,246,2354,8,246,1,246,3,246,2357,8,246,1,246,3,246,2360,8,246,1,247,3,247,
2363,8,247,1,247,1,247,1,248,1,248,1,248,1,249,1,249,1,250,1,250,3,250,2374,
8,250,1,251,1,251,1,251,1,252,1,252,1,252,1,252,1,253,1,253,1,253,5,253,
2386,8,253,10,253,12,253,2389,9,253,1,254,1,254,1,254,1,254,1,255,1,255,
3,255,2397,8,255,1,256,1,256,1,256,1,256,1,256,1,256,1,256,3,256,2406,8,
256,1,257,1,257,1,257,1,257,1,257,1,257,1,257,1,258,1,258,1,258,1,258,1,
258,1,258,1,259,1,259,1,259,1,259,1,259,1,259,1,260,1,260,1,260,1,260,1,
260,1,260,1,260,1,261,1,261,1,261,1,261,1,261,1,261,1,262,1,262,1,262,1,
262,1,262,1,262,1,262,1,263,1,263,1,263,1,263,1,263,1,263,1,264,1,264,1,
264,1,264,1,264,1,264,1,264,1,264,1,264,3,264,2462,8,264,1,265,1,265,3,265,
2466,8,265,1,265,3,265,2469,8,265,1,265,1,265,3,265,2473,8,265,1,265,1,265,
1,266,1,266,1,266,1,267,1,267,1,267,1,268,1,268,1,269,1,269,1,269,5,269,
2488,8,269,10,269,12,269,2491,9,269,1,270,1,270,1,270,1,270,5,270,2497,8,
270,10,270,12,270,2500,9,270,1,271,1,271,3,271,2504,8,271,1,271,1,271,1,
272,1,272,1,272,3,272,2511,8,272,1,273,1,273,1,273,1,273,3,273,2517,8,273,
1,273,1,273,1,273,1,274,1,274,1,274,3,274,2525,8,274,1,274,1,274,1,274,1,
275,1,275,1,275,3,275,2533,8,275,1,275,1,275,1,275,1,276,1,276,1,276,1,276,
1,276,3,276,2543,8,276,1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,3,
277,2553,8,277,1,278,1,278,1,278,5,278,2558,8,278,10,278,12,278,2561,9,278,
1,279,1,279,1,279,5,279,2566,8,279,10,279,12,279,2569,9,279,1,280,3,280,
2572,8,280,1,280,1,280,1,281,1,281,1,281,3,281,2579,8,281,1,282,1,282,1,
283,1,283,1,283,1,283,1,284,1,284,1,284,1,284,3,284,2591,8,284,1,285,1,285,
1,285,1,285,1,286,1,286,3,286,2599,8,286,1,286,1,286,3,286,2603,8,286,1,
286,1,286,1,287,1,287,1,288,1,288,1,289,1,289,1,289,1,289,1,289,1,289,1,
289,3,289,2618,8,289,1,290,1,290,1,290,1,290,1,290,1,291,1,291,1,291,1,291,
1,291,1,292,1,292,1,292,1,292,1,293,1,293,1,293,1,293,1,293,1,294,1,294,
1,294,1,294,1,295,1,295,1,295,1,295,1,296,1,296,1,296,1,296,1,296,1,297,
1,297,1,297,3,297,2655,8,297,1,298,1,298,1,298,1,298,1,298,5,298,2662,8,
298,10,298,12,298,2665,9,298,1,299,1,299,1,299,1,299,1,299,5,299,2672,8,
299,10,299,12,299,2675,9,299,1,300,4,300,2678,8,300,11,300,12,300,2679,1,
301,1,301,1,301,5,301,2685,8,301,10,301,12,301,2688,9,301,1,302,1,302,1,
302,3,302,2693,8,302,1,303,1,303,1,303,1,304,1,304,1,304,1,305,1,305,3,305,
2703,8,305,1,306,1,306,1,306,1,306,1,306,1,306,1,306,3,306,2712,8,306,1,
307,1,307,1,307,1,308,1,308,1,308,1,309,1,309,1,309,1,310,1,310,1,310,1,
310,1,311,1,311,1,311,1,311,1,312,1,312,1,312,1,312,1,313,1,313,1,313,1,
314,1,314,3,314,2740,8,314,1,315,1,315,1,315,1,316,1,316,1,316,1,316,1,316,
3,316,2750,8,316,1,317,1,317,1,317,1,318,1,318,1,318,1,319,1,319,1,319,5,
319,2761,8,319,10,319,12,319,2764,9,319,1,320,1,320,3,320,2768,8,320,1,321,
1,321,1,322,1,322,1,322,1,323,1,323,1,323,1,323,1,324,1,324,1,324,3,324,
2782,8,324,1,324,3,324,2785,8,324,1,325,1,325,1,326,1,326,1,326,1,327,1,
327,1,327,1,327,1,328,1,328,1,328,1,328,1,328,1,328,1,328,3,328,2803,8,328,
1,328,1,328,1,328,1,328,1,328,1,328,3,328,2811,8,328,1,328,1,328,1,328,1,
328,1,328,3,328,2818,8,328,1,329,1,329,1,330,1,330,1,331,1,331,1,332,1,332,
1,332,5,332,2829,8,332,10,332,12,332,2832,9,332,1,333,1,333,3,333,2836,8,
333,1,333,3,333,2839,8,333,1,334,1,334,1,335,1,335,1,336,1,336,1,336,1,336,
3,336,2849,8,336,1,337,1,337,1,337,1,338,1,338,1,338,1,339,1,339,1,340,1,
340,1,340,1,340,1,341,1,341,1,342,1,342,1,342,5,342,2868,8,342,10,342,12,
342,2871,9,342,1,343,1,343,3,343,2875,8,343,1,344,1,344,1,344,3,344,2880,
8,344,1,345,1,345,3,345,2884,8,345,1,345,3,345,2887,8,345,1,345,1,345,1,
346,3,346,2892,8,346,1,346,1,346,3,346,2896,8,346,1,346,3,346,2899,8,346,
1,347,1,347,1,348,1,348,1,348,1,348,1,348,3,348,2908,8,348,1,349,1,349,1,
350,1,350,1,351,1,351,3,351,2916,8,351,1,351,1,351,3,351,2920,8,351,1,352,
1,352,3,352,2924,8,352,1,353,3,353,2927,8,353,1,353,1,353,1,353,1,353,3,
353,2933,8,353,1,353,1,353,1,353,3,353,2938,8,353,1,354,1,354,1,355,1,355,
1,355,1,355,1,355,3,355,2947,8,355,1,356,1,356,1,357,1,357,1,358,1,358,1,
358,3,358,2956,8,358,1,359,1,359,1,359,1,359,1,360,1,360,1,360,1,360,1,361,
1,361,1,361,1,361,1,362,1,362,1,362,1,362,1,362,1,362,1,363,1,363,1,363,
1,363,1,363,1,363,1,363,1,364,1,364,1,364,1,364,1,364,1,364,1,365,3,365,
2990,8,365,1,365,3,365,2993,8,365,1,366,1,366,1,366,3,366,2998,8,366,1,367,
1,367,1,367,1,367,1,368,1,368,1,368,1,368,1,368,1,369,1,369,1,369,1,369,
1,370,1,370,3,370,3015,8,370,1,371,1,371,1,371,1,371,1,371,1,371,3,371,3023,
8,371,1,371,3,371,3026,8,371,1,372,1,372,1,372,1,372,1,372,1,372,3,372,3034,
8,372,1,372,3,372,3037,8,372,1,373,1,373,1,374,1,374,1,374,1,375,1,375,1,
375,1,375,3,375,3048,8,375,1,376,1,376,1,376,1,376,1,376,1,376,1,377,1,377,
1,377,1,377,1,377,1,377,1,377,1,378,1,378,1,378,1,378,1,378,1,378,1,379,
1,379,1,380,1,380,1,381,1,381,1,382,1,382,1,383,1,383,1,383,1,383,1,383,
1,383,1,383,3,383,3084,8,383,1,384,1,384,3,384,3088,8,384,1,384,1,384,1,
385,1,385,1,385,5,385,3095,8,385,10,385,12,385,3098,9,385,1,386,1,386,3,
386,3102,8,386,1,386,1,386,1,387,1,387,1,388,3,388,3109,8,388,1,388,1,388,
1,388,1,389,1,389,1,389,1,389,1,389,1,389,1,389,1,389,1,389,1,389,1,389,
3,389,3125,8,389,1,389,3,389,3128,8,389,1,389,3,389,3131,8,389,1,389,1,389,
3,389,3135,8,389,1,389,3,389,3138,8,389,1,389,1,389,3,389,3142,8,389,1,389,
1,389,3,389,3146,8,389,1,389,3,389,3149,8,389,1,389,3,389,3152,8,389,1,389,
1,389,1,389,3,389,3157,8,389,1,389,1,389,3,389,3161,8,389,1,389,1,389,1,
389,1,389,5,389,3167,8,389,10,389,12,389,3170,9,389,1,389,1,389,3,389,3174,
8,389,1,389,1,389,1,389,1,389,1,389,1,389,3,389,3182,8,389,1,389,3,389,3185,
8,389,1,389,1,389,1,389,4,389,3190,8,389,11,389,12,389,3191,5,389,3194,8,
389,10,389,12,389,3197,9,389,1,390,1,390,1,391,1,391,1,391,1,391,1,391,1,
391,3,391,3207,8,391,1,392,1,392,3,392,3211,8,392,1,393,1,393,1,393,1,393,
1,393,3,393,3218,8,393,1,393,3,393,3221,8,393,1,394,1,394,1,394,1,394,1,
394,3,394,3228,8,394,1,394,1,394,1,394,3,394,3233,8,394,1,394,3,394,3236,
8,394,1,394,1,394,1,394,1,394,1,394,3,394,3243,8,394,1,394,3,394,3246,8,
394,1,394,1,394,1,394,1,394,1,394,3,394,3253,8,394,1,394,3,394,3256,8,394,
3,394,3258,8,394,1,395,1,395,1,396,1,396,1,397,1,397,1,398,1,398,3,398,3268,
8,398,1,399,1,399,3,399,3272,8,399,1,400,1,400,3,400,3276,8,400,1,401,1,
401,3,401,3280,8,401,1,401,1,401,3,401,3284,8,401,1,401,1,401,3,401,3288,
8,401,1,401,1,401,3,401,3292,8,401,1,401,1,401,3,401,3296,8,401,1,401,1,
401,3,401,3300,8,401,1,401,1,401,3,401,3304,8,401,1,401,1,401,1,401,1,401,
1,401,3,401,3311,8,401,1,401,3,401,3314,8,401,1,401,1,401,3,401,3318,8,401,
1,401,1,401,3,401,3322,8,401,3,401,3324,8,401,1,402,1,402,3,402,3328,8,402,
1,402,1,402,3,402,3332,8,402,1,402,1,402,3,402,3336,8,402,1,402,1,402,3,
402,3340,8,402,1,402,1,402,3,402,3344,8,402,1,402,1,402,3,402,3348,8,402,
1,402,1,402,3,402,3352,8,402,1,402,1,402,1,402,1,402,1,402,3,402,3359,8,
402,1,402,3,402,3362,8,402,1,402,1,402,3,402,3366,8,402,1,402,1,402,1,402,
3,402,3371,8,402,3,402,3373,8,402,1,403,1,403,3,403,3377,8,403,1,403,1,403,
3,403,3381,8,403,1,403,1,403,3,403,3385,8,403,1,403,1,403,3,403,3389,8,403,
1,403,1,403,3,403,3393,8,403,1,403,1,403,3,403,3397,8,403,1,403,1,403,1,
403,3,403,3402,8,403,1,403,1,403,1,403,1,403,1,403,3,403,3409,8,403,1,403,
3,403,3412,8,403,1,403,1,403,1,403,3,403,3417,8,403,3,403,3419,8,403,1,404,
1,404,1,404,1,404,1,404,3,404,3426,8,404,1,404,1,404,3,404,3430,8,404,3,
404,3432,8,404,1,405,1,405,1,406,1,406,1,407,1,407,3,407,3440,8,407,1,407,
1,407,3,407,3444,8,407,1,407,1,407,3,407,3448,8,407,1,407,1,407,3,407,3452,
8,407,1,407,1,407,3,407,3456,8,407,1,407,1,407,1,407,1,407,1,407,3,407,3463,
8,407,1,407,1,407,3,407,3467,8,407,1,407,3,407,3470,8,407,1,407,1,407,3,
407,3474,8,407,1,407,1,407,3,407,3478,8,407,1,407,3,407,3481,8,407,3,407,
3483,8,407,1,408,1,408,3,408,3487,8,408,1,409,1,409,1,409,1,409,1,409,3,
409,3494,8,409,1,410,1,410,1,411,1,411,1,411,3,411,3501,8,411,1,411,1,411,
1,411,1,411,3,411,3507,8,411,3,411,3509,8,411,1,412,1,412,1,412,3,412,3514,
8,412,1,412,1,412,1,412,3,412,3519,8,412,1,412,3,412,3522,8,412,3,412,3524,
8,412,1,413,1,413,3,413,3528,8,413,1,414,1,414,1,414,3,414,3533,8,414,1,
414,1,414,1,414,1,414,3,414,3539,8,414,3,414,3541,8,414,1,415,1,415,1,415,
3,415,3546,8,415,1,415,1,415,1,415,1,415,3,415,3552,8,415,3,415,3554,8,415,
1,416,1,416,3,416,3558,8,416,1,417,1,417,1,417,1,417,3,417,3564,8,417,1,
418,1,418,3,418,3568,8,418,1,419,3,419,3571,8,419,1,419,1,419,1,419,3,419,
3576,8,419,1,420,1,420,3,420,3580,8,420,1,420,1,420,3,420,3584,8,420,1,421,
1,421,3,421,3588,8,421,1,422,1,422,3,422,3592,8,422,1,423,1,423,3,423,3596,
8,423,1,424,3,424,3599,8,424,1,424,1,424,3,424,3603,8,424,1,425,1,425,3,
425,3607,8,425,1,426,1,426,3,426,3611,8,426,1,427,3,427,3614,8,427,1,427,
1,427,3,427,3618,8,427,1,428,3,428,3621,8,428,1,428,1,428,1,429,1,429,1,
430,1,430,3,430,3629,8,430,1,430,1,430,1,431,1,431,1,431,5,431,3636,8,431,
10,431,12,431,3639,9,431,1,432,1,432,3,432,3643,8,432,1,433,1,433,1,433,
1,434,1,434,3,434,3650,8,434,1,434,1,434,1,435,1,435,1,435,3,435,3657,8,
435,1,436,1,436,1,436,1,436,3,436,3663,8,436,1,437,1,437,1,437,1,438,1,438,
1,438,1,438,3,438,3672,8,438,1,439,1,439,1,440,1,440,3,440,3678,8,440,1,
441,1,441,1,441,5,441,3683,8,441,10,441,12,441,3686,9,441,1,441,1,441,3,
441,3690,8,441,3,441,3692,8,441,1,442,1,442,1,442,4,442,3697,8,442,11,442,
12,442,3698,1,443,1,443,1,443,1,443,1,443,1,443,3,443,3707,8,443,1,444,3,
444,3710,8,444,1,444,1,444,1,445,1,445,1,446,1,446,3,446,3718,8,446,1,447,
3,447,3721,8,447,1,447,1,447,1,448,1,448,1,448,1,448,1,448,3,448,3730,8,
448,1,449,3,449,3733,8,449,1,449,1,449,1,450,1,450,3,450,3739,8,450,1,451,
3,451,3742,8,451,1,451,1,451,1,452,1,452,3,452,3748,8,452,1,452,1,452,1,
452,5,452,3753,8,452,10,452,12,452,3756,9,452,1,452,1,452,1,452,4,452,3761,
8,452,11,452,12,452,3762,3,452,3765,8,452,1,453,1,453,1,454,1,454,1,455,
1,455,1,455,1,456,1,456,1,457,1,457,3,457,3778,8,457,1,457,1,457,1,458,1,
458,3,458,3784,8,458,1,458,3,458,3787,8,458,1,458,1,458,1,459,1,459,3,459,
3793,8,459,1,459,1,459,1,460,1,460,3,460,3799,8,460,1,460,1,460,3,460,3803,
8,460,1,460,1,460,1,461,1,461,3,461,3809,8,461,1,461,1,461,1,461,1,461,1,
462,1,462,3,462,3817,8,462,1,463,1,463,3,463,3821,8,463,1,464,1,464,3,464,
3825,8,464,1,465,1,465,1,466,1,466,1,466,1,466,3,466,3833,8,466,1,466,1,
466,1,466,1,466,1,466,1,466,1,466,1,466,1,466,5,466,3844,8,466,10,466,12,
466,3847,9,466,1,467,1,467,1,467,1,467,1,467,1,467,1,467,1,467,1,467,1,467,
1,467,1,467,1,467,1,467,1,467,1,467,1,467,1,467,1,467,3,467,3868,8,467,1,
467,1,467,1,467,1,467,1,467,1,467,1,467,1,467,1,467,1,467,1,467,1,467,1,
467,1,467,4,467,3884,8,467,11,467,12,467,3885,1,467,1,467,1,467,1,467,1,
467,1,467,1,467,4,467,3895,8,467,11,467,12,467,3896,1,467,1,467,1,467,1,
467,1,467,1,467,1,467,1,467,1,467,1,467,3,467,3909,8,467,1,467,1,467,1,467,
3,467,3914,8,467,1,467,1,467,1,467,1,467,1,467,1,467,1,467,1,467,1,467,3,
467,3925,8,467,1,467,1,467,1,467,1,467,1,467,1,467,1,467,3,467,3934,8,467,
1,467,1,467,1,467,1,467,1,467,5,467,3941,8,467,10,467,12,467,3944,9,467,
1,468,1,468,1,468,1,468,1,468,1,468,1,468,1,468,1,468,1,468,1,468,1,468,
1,468,1,468,1,468,3,468,3961,8,468,1,468,1,468,1,468,1,468,1,468,1,468,1,
468,1,468,1,468,1,468,1,468,1,468,5,468,3975,8,468,10,468,12,468,3978,9,
468,1,469,1,469,1,470,1,470,1,471,1,471,1,471,1,471,1,471,1,471,1,471,1,
471,1,471,3,471,3993,8,471,1,472,1,472,1,472,1,472,1,472,1,472,1,472,1,472,
1,472,1,472,1,472,1,472,3,472,4007,8,472,1,473,1,473,1,473,1,473,1,473,3,
473,4014,8,473,1,474,1,474,1,474,1,474,1,475,1,475,1,476,1,476,1,477,1,477,
1,477,1,477,1,477,1,477,1,477,1,477,1,477,1,477,1,477,1,477,1,477,1,477,
1,477,3,477,4039,8,477,1,477,3,477,4042,8,477,1,477,3,477,4045,8,477,1,477,
1,477,1,477,1,477,1,477,1,477,1,477,1,477,3,477,4055,8,477,1,477,1,477,1,
477,1,477,1,477,1,477,1,477,3,477,4064,8,477,1,477,1,477,3,477,4068,8,477,
1,478,1,478,1,478,1,478,1,478,1,478,1,478,1,478,1,478,1,478,1,478,1,478,
3,478,4082,8,478,1,479,1,479,1,479,1,479,1,479,1,479,1,479,1,479,1,479,1,
479,1,479,1,479,4,479,4096,8,479,11,479,12,479,4097,1,479,1,479,1,479,1,
479,1,479,4,479,4105,8,479,11,479,12,479,4106,1,479,3,479,4110,8,479,1,479,
1,479,1,479,1,479,4,479,4116,8,479,11,479,12,479,4117,1,479,3,479,4121,8,
479,1,479,1,479,3,479,4125,8,479,1,480,1,480,1,480,1,480,5,480,4131,8,480,
10,480,12,480,4134,9,480,1,480,1,480,1,480,1,481,1,481,1,481,1,481,1,481,
1,482,1,482,1,482,1,483,1,483,1,483,1,483,1,483,1,483,3,483,4153,8,483,1,
484,1,484,1,484,1,484,1,484,1,484,1,484,1,485,1,485,1,485,1,485,1,485,1,
486,1,486,1,486,1,486,1,486,3,486,4172,8,486,1,487,1,487,1,487,1,487,3,487,
4178,8,487,1,487,3,487,4181,8,487,1,488,1,488,1,488,1,488,3,488,4187,8,488,
1,488,3,488,4190,8,488,1,489,1,489,1,489,3,489,4195,8,489,1,489,3,489,4198,
8,489,1,490,1,490,1,490,1,490,3,490,4204,8,490,1,490,3,490,4207,8,490,1,
491,1,491,1,491,1,491,3,491,4213,8,491,1,491,3,491,4216,8,491,1,492,1,492,
3,492,4220,8,492,1,493,1,493,3,493,4224,8,493,1,494,1,494,3,494,4228,8,494,
1,495,1,495,1,496,1,496,1,497,1,497,1,498,1,498,1,498,1,498,1,498,1,498,
1,498,1,498,1,498,1,498,1,498,1,498,3,498,4248,8,498,1,499,1,499,3,499,4252,
8,499,1,500,1,500,1,501,1,501,1,501,3,501,4259,8,501,1,501,1,501,1,502,1,
502,1,502,3,502,4266,8,502,1,503,1,503,1,504,1,504,1,505,3,505,4273,8,505,
1,505,1,505,1,505,1,505,5,505,4279,8,505,10,505,12,505,4282,9,505,3,505,
4284,8,505,1,505,1,505,1,506,3,506,4289,8,506,1,506,1,506,1,506,1,506,5,
506,4295,8,506,10,506,12,506,4298,9,506,3,506,4300,8,506,1,506,1,506,1,507,
1,507,1,507,1,507,1,508,1,508,1,508,1,508,1,508,1,508,1,508,1,508,5,508,
4316,8,508,10,508,12,508,4319,9,508,1,508,1,508,1,509,1,509,3,509,4325,8,
509,1,510,1,510,1,510,3,510,4330,8,510,1,511,3,511,4333,8,511,1,511,1,511,
1,511,1,511,5,511,4339,8,511,10,511,12,511,4342,9,511,3,511,4344,8,511,1,
511,1,511,1,512,3,512,4349,8,512,1,512,1,512,1,512,1,512,5,512,4355,8,512,
10,512,12,512,4358,9,512,3,512,4360,8,512,1,512,1,512,1,513,1,513,1,513,
1,513,1,513,0,5,298,778,932,934,936,514,0,2,4,6,8,10,12,14,16,18,20,22,24,
26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,
74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,
118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,
154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,
190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,
226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,
262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,
298,300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,
334,336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,
370,372,374,376,378,380,382,384,386,388,390,392,394,396,398,400,402,404,
406,408,410,412,414,416,418,420,422,424,426,428,430,432,434,436,438,440,
442,444,446,448,450,452,454,456,458,460,462,464,466,468,470,472,474,476,
478,480,482,484,486,488,490,492,494,496,498,500,502,504,506,508,510,512,
514,516,518,520,522,524,526,528,530,532,534,536,538,540,542,544,546,548,
550,552,554,556,558,560,562,564,566,568,570,572,574,576,578,580,582,584,
586,588,590,592,594,596,598,600,602,604,606,608,610,612,614,616,618,620,
622,624,626,628,630,632,634,636,638,640,642,644,646,648,650,652,654,656,
658,660,662,664,666,668,670,672,674,676,678,680,682,684,686,688,690,692,
694,696,698,700,702,704,706,708,710,712,714,716,718,720,722,724,726,728,
730,732,734,736,738,740,742,744,746,748,750,752,754,756,758,760,762,764,
766,768,770,772,774,776,778,780,782,784,786,788,790,792,794,796,798,800,
802,804,806,808,810,812,814,816,818,820,822,824,826,828,830,832,834,836,
838,840,842,844,846,848,850,852,854,856,858,860,862,864,866,868,870,872,
874,876,878,880,882,884,886,888,890,892,894,896,898,900,902,904,906,908,
910,912,914,916,918,920,922,924,926,928,930,932,934,936,938,940,942,944,
946,948,950,952,954,956,958,960,962,964,966,968,970,972,974,976,978,980,
982,984,986,988,990,992,994,996,998,1000,1002,1004,1006,1008,1010,1012,1014,
1016,1018,1020,1022,1024,1026,0,40,2,0,62,62,199,199,1,0,328,331,1,0,332,
333,2,0,82,82,246,246,1,0,287,290,3,0,106,106,253,253,266,266,1,0,75,76,
2,0,90,90,180,180,2,0,189,189,196,196,4,0,30,30,228,228,249,249,275,275,
2,0,200,200,202,202,1,0,120,121,2,0,4,4,149,149,6,0,42,42,65,65,72,72,171,
172,236,237,239,239,2,0,31,31,93,93,1,0,203,204,2,0,37,38,87,88,1,0,189,
190,2,0,92,92,264,264,2,0,248,248,309,309,2,0,25,25,248,248,2,0,255,255,
300,300,1,0,48,49,2,0,238,238,273,273,1,0,83,84,2,0,35,35,160,160,3,0,16,
16,77,77,125,125,1,0,123,124,6,0,7,7,9,9,13,13,302,302,306,306,308,308,2,
0,89,89,233,233,2,0,2,2,24,24,2,0,14,14,17,17,3,0,8,8,14,14,17,17,17,0,28,
29,39,39,41,41,53,53,58,61,69,71,85,85,105,105,116,116,161,161,167,167,187,
187,201,201,209,209,229,230,234,234,241,242,3,0,166,166,173,173,205,205,
2,0,156,156,220,220,2,0,168,168,268,268,3,0,51,51,169,169,219,219,3,0,50,
50,155,155,250,250,1,0,175,178,4531,0,1028,1,0,0,0,2,1039,1,0,0,0,4,1043,
1,0,0,0,6,1046,1,0,0,0,8,1052,1,0,0,0,10,1066,1,0,0,0,12,1070,1,0,0,0,14,
1072,1,0,0,0,16,1080,1,0,0,0,18,1084,1,0,0,0,20,1089,1,0,0,0,22,1093,1,0,
0,0,24,1098,1,0,0,0,26,1101,1,0,0,0,28,1108,1,0,0,0,30,1114,1,0,0,0,32,1121,
1,0,0,0,34,1125,1,0,0,0,36,1145,1,0,0,0,38,1147,1,0,0,0,40,1150,1,0,0,0,
42,1155,1,0,0,0,44,1165,1,0,0,0,46,1171,1,0,0,0,48,1173,1,0,0,0,50,1175,
1,0,0,0,52,1177,1,0,0,0,54,1179,1,0,0,0,56,1183,1,0,0,0,58,1185,1,0,0,0,
60,1187,1,0,0,0,62,1191,1,0,0,0,64,1193,1,0,0,0,66,1197,1,0,0,0,68,1201,
1,0,0,0,70,1203,1,0,0,0,72,1205,1,0,0,0,74,1207,1,0,0,0,76,1209,1,0,0,0,
78,1211,1,0,0,0,80,1213,1,0,0,0,82,1221,1,0,0,0,84,1229,1,0,0,0,86,1239,
1,0,0,0,88,1241,1,0,0,0,90,1247,1,0,0,0,92,1291,1,0,0,0,94,1293,1,0,0,0,
96,1296,1,0,0,0,98,1299,1,0,0,0,100,1305,1,0,0,0,102,1307,1,0,0,0,104,1310,
1,0,0,0,106,1314,1,0,0,0,108,1318,1,0,0,0,110,1320,1,0,0,0,112,1322,1,0,
0,0,114,1324,1,0,0,0,116,1326,1,0,0,0,118,1330,1,0,0,0,120,1332,1,0,0,0,
122,1334,1,0,0,0,124,1336,1,0,0,0,126,1340,1,0,0,0,128,1342,1,0,0,0,130,
1344,1,0,0,0,132,1346,1,0,0,0,134,1348,1,0,0,0,136,1350,1,0,0,0,138,1352,
1,0,0,0,140,1354,1,0,0,0,142,1359,1,0,0,0,144,1361,1,0,0,0,146,1365,1,0,
0,0,148,1369,1,0,0,0,150,1371,1,0,0,0,152,1373,1,0,0,0,154,1375,1,0,0,0,
156,1377,1,0,0,0,158,1379,1,0,0,0,160,1381,1,0,0,0,162,1389,1,0,0,0,164,
1391,1,0,0,0,166,1395,1,0,0,0,168,1397,1,0,0,0,170,1400,1,0,0,0,172,1408,
1,0,0,0,174,1415,1,0,0,0,176,1417,1,0,0,0,178,1427,1,0,0,0,180,1429,1,0,
0,0,182,1436,1,0,0,0,184,1446,1,0,0,0,186,1450,1,0,0,0,188,1454,1,0,0,0,
190,1464,1,0,0,0,192,1468,1,0,0,0,194,1471,1,0,0,0,196,1479,1,0,0,0,198,
1489,1,0,0,0,200,1491,1,0,0,0,202,1493,1,0,0,0,204,1499,1,0,0,0,206,1501,
1,0,0,0,208,1510,1,0,0,0,210,1513,1,0,0,0,212,1519,1,0,0,0,214,1527,1,0,
0,0,216,1529,1,0,0,0,218,1538,1,0,0,0,220,1546,1,0,0,0,222,1573,1,0,0,0,
224,1597,1,0,0,0,226,1599,1,0,0,0,228,1602,1,0,0,0,230,1607,1,0,0,0,232,
1618,1,0,0,0,234,1650,1,0,0,0,236,1652,1,0,0,0,238,1658,1,0,0,0,240,1670,
1,0,0,0,242,1674,1,0,0,0,244,1678,1,0,0,0,246,1680,1,0,0,0,248,1685,1,0,
0,0,250,1690,1,0,0,0,252,1692,1,0,0,0,254,1697,1,0,0,0,256,1703,1,0,0,0,
258,1707,1,0,0,0,260,1713,1,0,0,0,262,1715,1,0,0,0,264,1718,1,0,0,0,266,
1721,1,0,0,0,268,1732,1,0,0,0,270,1734,1,0,0,0,272,1740,1,0,0,0,274,1748,
1,0,0,0,276,1752,1,0,0,0,278,1760,1,0,0,0,280,1763,1,0,0,0,282,1773,1,0,
0,0,284,1775,1,0,0,0,286,1779,1,0,0,0,288,1784,1,0,0,0,290,1789,1,0,0,0,
292,1797,1,0,0,0,294,1799,1,0,0,0,296,1801,1,0,0,0,298,1803,1,0,0,0,300,
1817,1,0,0,0,302,1831,1,0,0,0,304,1833,1,0,0,0,306,1837,1,0,0,0,308,1849,
1,0,0,0,310,1851,1,0,0,0,312,1854,1,0,0,0,314,1858,1,0,0,0,316,1861,1,0,
0,0,318,1869,1,0,0,0,320,1872,1,0,0,0,322,1878,1,0,0,0,324,1885,1,0,0,0,
326,1889,1,0,0,0,328,1891,1,0,0,0,330,1894,1,0,0,0,332,1906,1,0,0,0,334,
1909,1,0,0,0,336,1913,1,0,0,0,338,1915,1,0,0,0,340,1920,1,0,0,0,342,1923,
1,0,0,0,344,1936,1,0,0,0,346,1938,1,0,0,0,348,1943,1,0,0,0,350,1946,1,0,
0,0,352,1949,1,0,0,0,354,1965,1,0,0,0,356,1972,1,0,0,0,358,1974,1,0,0,0,
360,1989,1,0,0,0,362,1991,1,0,0,0,364,1999,1,0,0,0,366,2003,1,0,0,0,368,
2006,1,0,0,0,370,2035,1,0,0,0,372,2043,1,0,0,0,374,2047,1,0,0,0,376,2050,
1,0,0,0,378,2057,1,0,0,0,380,2059,1,0,0,0,382,2067,1,0,0,0,384,2074,1,0,
0,0,386,2077,1,0,0,0,388,2084,1,0,0,0,390,2087,1,0,0,0,392,2091,1,0,0,0,
394,2097,1,0,0,0,396,2105,1,0,0,0,398,2114,1,0,0,0,400,2122,1,0,0,0,402,
2124,1,0,0,0,404,2127,1,0,0,0,406,2130,1,0,0,0,408,2132,1,0,0,0,410,2134,
1,0,0,0,412,2136,1,0,0,0,414,2138,1,0,0,0,416,2142,1,0,0,0,418,2155,1,0,
0,0,420,2159,1,0,0,0,422,2162,1,0,0,0,424,2173,1,0,0,0,426,2175,1,0,0,0,
428,2178,1,0,0,0,430,2186,1,0,0,0,432,2193,1,0,0,0,434,2195,1,0,0,0,436,
2204,1,0,0,0,438,2211,1,0,0,0,440,2214,1,0,0,0,442,2217,1,0,0,0,444,2222,
1,0,0,0,446,2224,1,0,0,0,448,2228,1,0,0,0,450,2233,1,0,0,0,452,2235,1,0,
0,0,454,2242,1,0,0,0,456,2244,1,0,0,0,458,2254,1,0,0,0,460,2260,1,0,0,0,
462,2262,1,0,0,0,464,2270,1,0,0,0,466,2278,1,0,0,0,468,2286,1,0,0,0,470,
2296,1,0,0,0,472,2301,1,0,0,0,474,2303,1,0,0,0,476,2313,1,0,0,0,478,2324,
1,0,0,0,480,2331,1,0,0,0,482,2333,1,0,0,0,484,2336,1,0,0,0,486,2342,1,0,
0,0,488,2346,1,0,0,0,490,2348,1,0,0,0,492,2353,1,0,0,0,494,2362,1,0,0,0,
496,2366,1,0,0,0,498,2369,1,0,0,0,500,2373,1,0,0,0,502,2375,1,0,0,0,504,
2378,1,0,0,0,506,2382,1,0,0,0,508,2390,1,0,0,0,510,2396,1,0,0,0,512,2405,
1,0,0,0,514,2407,1,0,0,0,516,2414,1,0,0,0,518,2420,1,0,0,0,520,2426,1,0,
0,0,522,2433,1,0,0,0,524,2439,1,0,0,0,526,2446,1,0,0,0,528,2461,1,0,0,0,
530,2463,1,0,0,0,532,2476,1,0,0,0,534,2479,1,0,0,0,536,2482,1,0,0,0,538,
2484,1,0,0,0,540,2492,1,0,0,0,542,2501,1,0,0,0,544,2510,1,0,0,0,546,2512,
1,0,0,0,548,2521,1,0,0,0,550,2529,1,0,0,0,552,2542,1,0,0,0,554,2552,1,0,
0,0,556,2554,1,0,0,0,558,2562,1,0,0,0,560,2571,1,0,0,0,562,2578,1,0,0,0,
564,2580,1,0,0,0,566,2582,1,0,0,0,568,2590,1,0,0,0,570,2592,1,0,0,0,572,
2596,1,0,0,0,574,2606,1,0,0,0,576,2608,1,0,0,0,578,2617,1,0,0,0,580,2619,
1,0,0,0,582,2624,1,0,0,0,584,2629,1,0,0,0,586,2633,1,0,0,0,588,2638,1,0,
0,0,590,2642,1,0,0,0,592,2646,1,0,0,0,594,2654,1,0,0,0,596,2656,1,0,0,0,
598,2666,1,0,0,0,600,2677,1,0,0,0,602,2681,1,0,0,0,604,2692,1,0,0,0,606,
2694,1,0,0,0,608,2697,1,0,0,0,610,2702,1,0,0,0,612,2711,1,0,0,0,614,2713,
1,0,0,0,616,2716,1,0,0,0,618,2719,1,0,0,0,620,2722,1,0,0,0,622,2726,1,0,
0,0,624,2730,1,0,0,0,626,2734,1,0,0,0,628,2739,1,0,0,0,630,2741,1,0,0,0,
632,2749,1,0,0,0,634,2751,1,0,0,0,636,2754,1,0,0,0,638,2757,1,0,0,0,640,
2765,1,0,0,0,642,2769,1,0,0,0,644,2771,1,0,0,0,646,2774,1,0,0,0,648,2784,
1,0,0,0,650,2786,1,0,0,0,652,2788,1,0,0,0,654,2791,1,0,0,0,656,2817,1,0,
0,0,658,2819,1,0,0,0,660,2821,1,0,0,0,662,2823,1,0,0,0,664,2825,1,0,0,0,
666,2833,1,0,0,0,668,2840,1,0,0,0,670,2842,1,0,0,0,672,2848,1,0,0,0,674,
2850,1,0,0,0,676,2853,1,0,0,0,678,2856,1,0,0,0,680,2858,1,0,0,0,682,2862,
1,0,0,0,684,2864,1,0,0,0,686,2874,1,0,0,0,688,2879,1,0,0,0,690,2881,1,0,
0,0,692,2898,1,0,0,0,694,2900,1,0,0,0,696,2907,1,0,0,0,698,2909,1,0,0,0,
700,2911,1,0,0,0,702,2919,1,0,0,0,704,2923,1,0,0,0,706,2937,1,0,0,0,708,
2939,1,0,0,0,710,2946,1,0,0,0,712,2948,1,0,0,0,714,2950,1,0,0,0,716,2955,
1,0,0,0,718,2957,1,0,0,0,720,2961,1,0,0,0,722,2965,1,0,0,0,724,2969,1,0,
0,0,726,2975,1,0,0,0,728,2982,1,0,0,0,730,2989,1,0,0,0,732,2997,1,0,0,0,
734,2999,1,0,0,0,736,3003,1,0,0,0,738,3008,1,0,0,0,740,3014,1,0,0,0,742,
3025,1,0,0,0,744,3036,1,0,0,0,746,3038,1,0,0,0,748,3040,1,0,0,0,750,3047,
1,0,0,0,752,3049,1,0,0,0,754,3055,1,0,0,0,756,3062,1,0,0,0,758,3068,1,0,
0,0,760,3070,1,0,0,0,762,3072,1,0,0,0,764,3074,1,0,0,0,766,3083,1,0,0,0,
768,3085,1,0,0,0,770,3091,1,0,0,0,772,3099,1,0,0,0,774,3105,1,0,0,0,776,
3108,1,0,0,0,778,3173,1,0,0,0,780,3198,1,0,0,0,782,3206,1,0,0,0,784,3208,
1,0,0,0,786,3212,1,0,0,0,788,3257,1,0,0,0,790,3259,1,0,0,0,792,3261,1,0,
0,0,794,3263,1,0,0,0,796,3267,1,0,0,0,798,3271,1,0,0,0,800,3275,1,0,0,0,
802,3323,1,0,0,0,804,3372,1,0,0,0,806,3418,1,0,0,0,808,3420,1,0,0,0,810,
3433,1,0,0,0,812,3435,1,0,0,0,814,3482,1,0,0,0,816,3486,1,0,0,0,818,3493,
1,0,0,0,820,3495,1,0,0,0,822,3508,1,0,0,0,824,3523,1,0,0,0,826,3525,1,0,
0,0,828,3540,1,0,0,0,830,3553,1,0,0,0,832,3555,1,0,0,0,834,3563,1,0,0,0,
836,3567,1,0,0,0,838,3570,1,0,0,0,840,3577,1,0,0,0,842,3585,1,0,0,0,844,
3591,1,0,0,0,846,3593,1,0,0,0,848,3598,1,0,0,0,850,3606,1,0,0,0,852,3608,
1,0,0,0,854,3613,1,0,0,0,856,3620,1,0,0,0,858,3624,1,0,0,0,860,3626,1,0,
0,0,862,3632,1,0,0,0,864,3640,1,0,0,0,866,3644,1,0,0,0,868,3647,1,0,0,0,
870,3656,1,0,0,0,872,3662,1,0,0,0,874,3664,1,0,0,0,876,3671,1,0,0,0,878,
3673,1,0,0,0,880,3675,1,0,0,0,882,3679,1,0,0,0,884,3696,1,0,0,0,886,3706,
1,0,0,0,888,3709,1,0,0,0,890,3713,1,0,0,0,892,3717,1,0,0,0,894,3720,1,0,
0,0,896,3729,1,0,0,0,898,3732,1,0,0,0,900,3738,1,0,0,0,902,3741,1,0,0,0,
904,3764,1,0,0,0,906,3766,1,0,0,0,908,3768,1,0,0,0,910,3770,1,0,0,0,912,
3773,1,0,0,0,914,3775,1,0,0,0,916,3781,1,0,0,0,918,3790,1,0,0,0,920,3802,
1,0,0,0,922,3806,1,0,0,0,924,3816,1,0,0,0,926,3820,1,0,0,0,928,3824,1,0,
0,0,930,3826,1,0,0,0,932,3832,1,0,0,0,934,3924,1,0,0,0,936,3960,1,0,0,0,
938,3979,1,0,0,0,940,3981,1,0,0,0,942,3992,1,0,0,0,944,4006,1,0,0,0,946,
4013,1,0,0,0,948,4015,1,0,0,0,950,4019,1,0,0,0,952,4021,1,0,0,0,954,4067,
1,0,0,0,956,4081,1,0,0,0,958,4124,1,0,0,0,960,4126,1,0,0,0,962,4138,1,0,
0,0,964,4143,1,0,0,0,966,4152,1,0,0,0,968,4154,1,0,0,0,970,4161,1,0,0,0,
972,4171,1,0,0,0,974,4180,1,0,0,0,976,4189,1,0,0,0,978,4191,1,0,0,0,980,
4206,1,0,0,0,982,4215,1,0,0,0,984,4219,1,0,0,0,986,4223,1,0,0,0,988,4227,
1,0,0,0,990,4229,1,0,0,0,992,4231,1,0,0,0,994,4233,1,0,0,0,996,4247,1,0,
0,0,998,4251,1,0,0,0,1000,4253,1,0,0,0,1002,4255,1,0,0,0,1004,4265,1,0,0,
0,1006,4267,1,0,0,0,1008,4269,1,0,0,0,1010,4272,1,0,0,0,1012,4288,1,0,0,
0,1014,4303,1,0,0,0,1016,4307,1,0,0,0,1018,4324,1,0,0,0,1020,4329,1,0,0,
0,1022,4332,1,0,0,0,1024,4348,1,0,0,0,1026,4363,1,0,0,0,1028,1030,3,2,1,
0,1029,1031,5,23,0,0,1030,1029,1,0,0,0,1030,1031,1,0,0,0,1031,1032,1,0,0,
0,1032,1033,5,0,0,1,1033,1,1,0,0,0,1034,1036,3,4,2,0,1035,1037,3,38,19,0,
1036,1035,1,0,0,0,1036,1037,1,0,0,0,1037,1040,1,0,0,0,1038,1040,3,38,19,
0,1039,1034,1,0,0,0,1039,1038,1,0,0,0,1040,3,1,0,0,0,1041,1044,3,6,3,0,1042,
1044,3,10,5,0,1043,1041,1,0,0,0,1043,1042,1,0,0,0,1044,5,1,0,0,0,1045,1047,
3,8,4,0,1046,1045,1,0,0,0,1047,1048,1,0,0,0,1048,1046,1,0,0,0,1048,1049,
1,0,0,0,1049,7,1,0,0,0,1050,1053,3,14,7,0,1051,1053,3,34,17,0,1052,1050,
1,0,0,0,1052,1051,1,0,0,0,1053,9,1,0,0,0,1054,1059,3,40,20,0,1055,1057,3,
56,28,0,1056,1058,3,12,6,0,1057,1056,1,0,0,0,1057,1058,1,0,0,0,1058,1060,
1,0,0,0,1059,1055,1,0,0,0,1059,1060,1,0,0,0,1060,1067,1,0,0,0,1061,1063,
3,56,28,0,1062,1064,3,12,6,0,1063,1062,1,0,0,0,1063,1064,1,0,0,0,1064,1067,
1,0,0,0,1065,1067,3,12,6,0,1066,1054,1,0,0,0,1066,1061,1,0,0,0,1066,1065,
1,0,0,0,1067,11,1,0,0,0,1068,1071,3,50,25,0,1069,1071,3,52,26,0,1070,1068,
1,0,0,0,1070,1069,1,0,0,0,1071,13,1,0,0,0,1072,1073,5,224,0,0,1073,1078,
5,225,0,0,1074,1079,3,16,8,0,1075,1079,3,18,9,0,1076,1079,3,20,10,0,1077,
1079,3,24,12,0,1078,1074,1,0,0,0,1078,1075,1,0,0,0,1078,1076,1,0,0,0,1078,
1077,1,0,0,0,1079,15,1,0,0,0,1080,1081,5,222,0,0,1081,1082,3,870,435,0,1082,
17,1,0,0,0,1083,1085,5,207,0,0,1084,1083,1,0,0,0,1084,1085,1,0,0,0,1085,
1086,1,0,0,0,1086,1087,5,119,0,0,1087,1088,3,198,99,0,1088,19,1,0,0,0,1089,
1090,5,245,0,0,1090,1091,5,283,0,0,1091,1092,3,22,11,0,1092,21,1,0,0,0,1093,
1094,3,936,468,0,1094,23,1,0,0,0,1095,1099,3,26,13,0,1096,1099,3,28,14,0,
1097,1099,3,30,15,0,1098,1095,1,0,0,0,1098,1096,1,0,0,0,1098,1097,1,0,0,
0,1099,25,1,0,0,0,1100,1102,5,207,0,0,1101,1100,1,0,0,0,1101,1102,1,0,0,
0,1102,1103,1,0,0,0,1103,1104,5,119,0,0,1104,1105,3,32,16,0,1105,1106,3,
184,92,0,1106,27,1,0,0,0,1107,1109,5,46,0,0,1108,1107,1,0,0,0,1108,1109,
1,0,0,0,1109,1110,1,0,0,0,1110,1111,5,240,0,0,1111,1112,3,32,16,0,1112,1113,
3,190,95,0,1113,29,1,0,0,0,1114,1115,5,271,0,0,1115,1116,3,32,16,0,1116,
1117,3,196,98,0,1117,31,1,0,0,0,1118,1119,5,131,0,0,1119,1120,5,183,0,0,
1120,1122,5,104,0,0,1121,1118,1,0,0,0,1121,1122,1,0,0,0,1122,1123,1,0,0,
0,1123,1124,3,140,70,0,1124,33,1,0,0,0,1125,1126,5,224,0,0,1126,1128,5,216,
0,0,1127,1129,3,36,18,0,1128,1127,1,0,0,0,1128,1129,1,0,0,0,1129,35,1,0,
0,0,1130,1132,5,31,0,0,1131,1130,1,0,0,0,1131,1132,1,0,0,0,1132,1133,1,0,
0,0,1133,1146,7,0,0,0,1134,1146,5,222,0,0,1135,1137,5,207,0,0,1136,1135,
1,0,0,0,1136,1137,1,0,0,0,1137,1138,1,0,0,0,1138,1146,5,119,0,0,1139,1140,
5,245,0,0,1140,1146,5,283,0,0,1141,1143,5,198,0,0,1142,1141,1,0,0,0,1142,
1143,1,0,0,0,1143,1144,1,0,0,0,1144,1146,3,140,70,0,1145,1131,1,0,0,0,1145,
1134,1,0,0,0,1145,1136,1,0,0,0,1145,1139,1,0,0,0,1145,1142,1,0,0,0,1146,
37,1,0,0,0,1147,1148,5,224,0,0,1148,1149,5,63,0,0,1149,39,1,0,0,0,1150,1151,
5,235,0,0,1151,1153,5,251,0,0,1152,1154,3,42,21,0,1153,1152,1,0,0,0,1153,
1154,1,0,0,0,1154,41,1,0,0,0,1155,1160,3,44,22,0,1156,1157,5,5,0,0,1157,
1159,3,44,22,0,1158,1156,1,0,0,0,1159,1162,1,0,0,0,1160,1158,1,0,0,0,1160,
1161,1,0,0,0,1161,43,1,0,0,0,1162,1160,1,0,0,0,1163,1166,3,46,23,0,1164,
1166,3,48,24,0,1165,1163,1,0,0,0,1165,1164,1,0,0,0,1166,45,1,0,0,0,1167,
1168,5,210,0,0,1168,1172,5,191,0,0,1169,1170,5,210,0,0,1170,1172,5,280,0,
0,1171,1167,1,0,0,0,1171,1169,1,0,0,0,1172,47,1,0,0,0,1173,1174,5,126,0,
0,1174,49,1,0,0,0,1175,1176,5,218,0,0,1176,51,1,0,0,0,1177,1178,5,66,0,0,
1178,53,1,0,0,0,1179,1180,5,10,0,0,1180,1181,3,56,28,0,1181,1182,5,20,0,
0,1182,55,1,0,0,0,1183,1184,3,170,85,0,1184,57,1,0,0,0,1185,1186,3,170,85,
0,1186,59,1,0,0,0,1187,1188,5,10,0,0,1188,1189,3,62,31,0,1189,1190,5,20,
0,0,1190,61,1,0,0,0,1191,1192,3,170,85,0,1192,63,1,0,0,0,1193,1194,5,10,
0,0,1194,1195,3,56,28,0,1195,1196,5,20,0,0,1196,65,1,0,0,0,1197,1198,3,170,
85,0,1198,67,1,0,0,0,1199,1202,3,70,35,0,1200,1202,3,72,36,0,1201,1199,1,
0,0,0,1201,1200,1,0,0,0,1202,69,1,0,0,0,1203,1204,7,1,0,0,1204,71,1,0,0,
0,1205,1206,7,2,0,0,1206,73,1,0,0,0,1207,1208,5,336,0,0,1208,75,1,0,0,0,
1209,1210,5,337,0,0,1210,77,1,0,0,0,1211,1212,5,338,0,0,1212,79,1,0,0,0,
1213,1218,3,74,37,0,1214,1215,5,27,0,0,1215,1217,3,74,37,0,1216,1214,1,0,
0,0,1217,1220,1,0,0,0,1218,1216,1,0,0,0,1218,1219,1,0,0,0,1219,81,1,0,0,
0,1220,1218,1,0,0,0,1221,1226,3,76,38,0,1222,1223,5,27,0,0,1223,1225,3,76,
38,0,1224,1222,1,0,0,0,1225,1228,1,0,0,0,1226,1224,1,0,0,0,1226,1227,1,0,
0,0,1227,83,1,0,0,0,1228,1226,1,0,0,0,1229,1234,3,78,39,0,1230,1231,5,27,
0,0,1231,1233,3,78,39,0,1232,1230,1,0,0,0,1233,1236,1,0,0,0,1234,1232,1,
0,0,0,1234,1235,1,0,0,0,1235,85,1,0,0,0,1236,1234,1,0,0,0,1237,1240,3,74,
37,0,1238,1240,3,76,38,0,1239,1237,1,0,0,0,1239,1238,1,0,0,0,1240,87,1,0,
0,0,1241,1242,5,184,0,0,1242,89,1,0,0,0,1243,1248,3,94,47,0,1244,1248,3,
96,48,0,1245,1248,3,98,49,0,1246,1248,3,92,46,0,1247,1243,1,0,0,0,1247,1244,
1,0,0,0,1247,1245,1,0,0,0,1247,1246,1,0,0,0,1248,91,1,0,0,0,1249,1250,5,
81,0,0,1250,1251,5,340,0,0,1251,1252,5,334,0,0,1252,1253,5,14,0,0,1253,1254,
5,335,0,0,1254,1255,5,14,0,0,1255,1256,5,335,0,0,1256,1292,5,340,0,0,1257,
1258,5,245,0,0,1258,1259,5,340,0,0,1259,1260,5,335,0,0,1260,1261,5,4,0,0,
1261,1262,5,335,0,0,1262,1263,5,4,0,0,1263,1264,5,335,0,0,1264,1292,5,340,
0,0,1265,1266,5,246,0,0,1266,1267,5,340,0,0,1267,1268,5,334,0,0,1268,1269,
5,14,0,0,1269,1270,5,335,0,0,1270,1271,5,14,0,0,1271,1272,5,335,0,0,1272,
1273,5,335,0,0,1273,1274,5,4,0,0,1274,1275,5,335,0,0,1275,1276,5,4,0,0,1276,
1277,5,335,0,0,1277,1292,5,340,0,0,1278,1279,5,82,0,0,1279,1280,5,340,0,
0,1280,1281,5,334,0,0,1281,1282,5,14,0,0,1282,1283,5,335,0,0,1283,1284,5,
14,0,0,1284,1285,5,335,0,0,1285,1286,5,335,0,0,1286,1287,5,4,0,0,1287,1288,
5,335,0,0,1288,1289,5,4,0,0,1289,1290,5,335,0,0,1290,1292,5,340,0,0,1291,
1249,1,0,0,0,1291,1257,1,0,0,0,1291,1265,1,0,0,0,1291,1278,1,0,0,0,1292,
93,1,0,0,0,1293,1294,5,81,0,0,1294,1295,3,86,43,0,1295,95,1,0,0,0,1296,1297,
5,245,0,0,1297,1298,3,86,43,0,1298,97,1,0,0,0,1299,1300,7,3,0,0,1300,1301,
3,86,43,0,1301,99,1,0,0,0,1302,1303,5,96,0,0,1303,1306,3,86,43,0,1304,1306,
3,102,51,0,1305,1302,1,0,0,0,1305,1304,1,0,0,0,1306,101,1,0,0,0,1307,1308,
5,328,0,0,1308,1309,3,104,52,0,1309,103,1,0,0,0,1310,1311,7,4,0,0,1311,105,
1,0,0,0,1312,1315,5,343,0,0,1313,1315,3,108,54,0,1314,1312,1,0,0,0,1314,
1313,1,0,0,0,1315,107,1,0,0,0,1316,1319,3,82,41,0,1317,1319,3,84,42,0,1318,
1316,1,0,0,0,1318,1317,1,0,0,0,1319,109,1,0,0,0,1320,1321,3,106,53,0,1321,
111,1,0,0,0,1322,1323,5,343,0,0,1323,113,1,0,0,0,1324,1325,3,106,53,0,1325,
115,1,0,0,0,1326,1327,3,106,53,0,1327,117,1,0,0,0,1328,1331,5,343,0,0,1329,
1331,3,120,60,0,1330,1328,1,0,0,0,1330,1329,1,0,0,0,1331,119,1,0,0,0,1332,
1333,3,108,54,0,1333,121,1,0,0,0,1334,1335,3,106,53,0,1335,123,1,0,0,0,1336,
1337,3,106,53,0,1337,125,1,0,0,0,1338,1341,5,343,0,0,1339,1341,3,128,64,
0,1340,1338,1,0,0,0,1340,1339,1,0,0,0,1341,127,1,0,0,0,1342,1343,3,108,54,
0,1343,129,1,0,0,0,1344,1345,3,106,53,0,1345,131,1,0,0,0,1346,1347,3,106,
53,0,1347,133,1,0,0,0,1348,1349,3,106,53,0,1349,135,1,0,0,0,1350,1351,3,
106,53,0,1351,137,1,0,0,0,1352,1353,3,106,53,0,1353,139,1,0,0,0,1354,1357,
5,6,0,0,1355,1358,3,68,34,0,1356,1358,3,106,53,0,1357,1355,1,0,0,0,1357,
1356,1,0,0,0,1358,141,1,0,0,0,1359,1360,3,160,80,0,1360,143,1,0,0,0,1361,
1362,3,160,80,0,1362,145,1,0,0,0,1363,1366,3,150,75,0,1364,1366,3,148,74,
0,1365,1363,1,0,0,0,1365,1364,1,0,0,0,1366,147,1,0,0,0,1367,1370,3,152,76,
0,1368,1370,3,154,77,0,1369,1367,1,0,0,0,1369,1368,1,0,0,0,1370,149,1,0,
0,0,1371,1372,3,160,80,0,1372,151,1,0,0,0,1373,1374,3,160,80,0,1374,153,
1,0,0,0,1375,1376,3,106,53,0,1376,155,1,0,0,0,1377,1378,3,160,80,0,1378,
157,1,0,0,0,1379,1380,3,160,80,0,1380,159,1,0,0,0,1381,1382,3,106,53,0,1382,
161,1,0,0,0,1383,1390,3,164,82,0,1384,1390,3,166,83,0,1385,1390,3,168,84,
0,1386,1390,3,90,45,0,1387,1390,3,100,50,0,1388,1390,3,88,44,0,1389,1383,
1,0,0,0,1389,1384,1,0,0,0,1389,1385,1,0,0,0,1389,1386,1,0,0,0,1389,1387,
1,0,0,0,1389,1388,1,0,0,0,1390,163,1,0,0,0,1391,1392,7,5,0,0,1392,165,1,
0,0,0,1393,1396,3,80,40,0,1394,1396,3,82,41,0,1395,1393,1,0,0,0,1395,1394,
1,0,0,0,1396,167,1,0,0,0,1397,1398,5,339,0,0,1398,169,1,0,0,0,1399,1401,
3,404,202,0,1400,1399,1,0,0,0,1400,1401,1,0,0,0,1401,1403,1,0,0,0,1402,1404,
3,172,86,0,1403,1402,1,0,0,0,1403,1404,1,0,0,0,1404,1405,1,0,0,0,1405,1406,
3,176,88,0,1406,171,1,0,0,0,1407,1409,3,174,87,0,1408,1407,1,0,0,0,1409,
1410,1,0,0,0,1410,1408,1,0,0,0,1410,1411,1,0,0,0,1411,173,1,0,0,0,1412,1416,
3,182,91,0,1413,1416,3,188,94,0,1414,1416,3,194,97,0,1415,1412,1,0,0,0,1415,
1413,1,0,0,0,1415,1414,1,0,0,0,1416,175,1,0,0,0,1417,1421,3,178,89,0,1418,
1420,3,180,90,0,1419,1418,1,0,0,0,1420,1423,1,0,0,0,1421,1419,1,0,0,0,1421,
1422,1,0,0,0,1422,177,1,0,0,0,1423,1421,1,0,0,0,1424,1428,3,210,105,0,1425,
1428,3,242,121,0,1426,1428,3,296,148,0,1427,1424,1,0,0,0,1427,1425,1,0,0,
0,1427,1426,1,0,0,0,1428,179,1,0,0,0,1429,1431,5,174,0,0,1430,1432,3,636,
318,0,1431,1430,1,0,0,0,1431,1432,1,0,0,0,1432,1433,1,0,0,0,1433,1434,3,
178,89,0,1434,181,1,0,0,0,1435,1437,5,207,0,0,1436,1435,1,0,0,0,1436,1437,
1,0,0,0,1437,1438,1,0,0,0,1438,1439,5,119,0,0,1439,1440,3,144,72,0,1440,
1441,3,184,92,0,1441,183,1,0,0,0,1442,1444,3,780,390,0,1443,1442,1,0,0,0,
1443,1444,1,0,0,0,1444,1445,1,0,0,0,1445,1447,3,836,418,0,1446,1443,1,0,
0,0,1446,1447,1,0,0,0,1447,1448,1,0,0,0,1448,1449,3,186,93,0,1449,185,1,
0,0,0,1450,1451,5,7,0,0,1451,1452,3,198,99,0,1452,187,1,0,0,0,1453,1455,
5,46,0,0,1454,1453,1,0,0,0,1454,1455,1,0,0,0,1455,1456,1,0,0,0,1456,1457,
5,240,0,0,1457,1458,3,156,78,0,1458,1459,3,190,95,0,1459,189,1,0,0,0,1460,
1462,3,780,390,0,1461,1460,1,0,0,0,1461,1462,1,0,0,0,1462,1463,1,0,0,0,1463,
1465,3,842,421,0,1464,1461,1,0,0,0,1464,1465,1,0,0,0,1465,1466,1,0,0,0,1466,
1467,3,192,96,0,1467,191,1,0,0,0,1468,1469,5,7,0,0,1469,1470,3,204,102,0,
1470,193,1,0,0,0,1471,1472,5,271,0,0,1472,1473,3,158,79,0,1473,1474,3,196,
98,0,1474,195,1,0,0,0,1475,1477,3,780,390,0,1476,1475,1,0,0,0,1476,1477,
1,0,0,0,1477,1478,1,0,0,0,1478,1480,3,778,389,0,1479,1476,1,0,0,0,1479,1480,
1,0,0,0,1480,1481,1,0,0,0,1481,1482,5,7,0,0,1482,1483,3,932,466,0,1483,197,
1,0,0,0,1484,1490,3,202,101,0,1485,1490,3,208,104,0,1486,1490,3,886,443,
0,1487,1490,3,112,56,0,1488,1490,3,200,100,0,1489,1484,1,0,0,0,1489,1485,
1,0,0,0,1489,1486,1,0,0,0,1489,1487,1,0,0,0,1489,1488,1,0,0,0,1490,199,1,
0,0,0,1491,1492,7,6,0,0,1492,201,1,0,0,0,1493,1494,3,64,32,0,1494,203,1,
0,0,0,1495,1500,3,206,103,0,1496,1500,3,208,104,0,1497,1500,3,896,448,0,
1498,1500,3,112,56,0,1499,1495,1,0,0,0,1499,1496,1,0,0,0,1499,1497,1,0,0,
0,1499,1498,1,0,0,0,1500,205,1,0,0,0,1501,1502,3,64,32,0,1502,207,1,0,0,
0,1503,1504,5,274,0,0,1504,1511,3,936,468,0,1505,1506,5,12,0,0,1506,1507,
3,932,466,0,1507,1508,5,22,0,0,1508,1511,1,0,0,0,1509,1511,3,936,468,0,1510,
1503,1,0,0,0,1510,1505,1,0,0,0,1510,1509,1,0,0,0,1511,209,1,0,0,0,1512,1514,
3,212,106,0,1513,1512,1,0,0,0,1514,1515,1,0,0,0,1515,1513,1,0,0,0,1515,1516,
1,0,0,0,1516,211,1,0,0,0,1517,1520,3,214,107,0,1518,1520,3,240,120,0,1519,
1517,1,0,0,0,1519,1518,1,0,0,0,1520,213,1,0,0,0,1521,1528,3,216,108,0,1522,
1528,3,220,110,0,1523,1528,3,232,116,0,1524,1528,3,218,109,0,1525,1528,3,
230,115,0,1526,1528,3,238,119,0,1527,1521,1,0,0,0,1527,1522,1,0,0,0,1527,
1523,1,0,0,0,1527,1524,1,0,0,0,1527,1525,1,0,0,0,1527,1526,1,0,0,0,1528,
215,1,0,0,0,1529,1530,5,73,0,0,1530,1534,5,222,0,0,1531,1532,5,131,0,0,1532,
1533,5,183,0,0,1533,1535,5,104,0,0,1534,1531,1,0,0,0,1534,1535,1,0,0,0,1535,
1536,1,0,0,0,1536,1537,3,874,437,0,1537,217,1,0,0,0,1538,1539,5,95,0,0,1539,
1542,5,222,0,0,1540,1541,5,131,0,0,1541,1543,5,104,0,0,1542,1540,1,0,0,0,
1542,1543,1,0,0,0,1543,1544,1,0,0,0,1544,1545,3,874,437,0,1545,219,1,0,0,
0,1546,1562,5,73,0,0,1547,1549,5,207,0,0,1548,1547,1,0,0,0,1548,1549,1,0,
0,0,1549,1550,1,0,0,0,1550,1554,5,119,0,0,1551,1552,5,131,0,0,1552,1553,
5,183,0,0,1553,1555,5,104,0,0,1554,1551,1,0,0,0,1554,1555,1,0,0,0,1555,1563,
1,0,0,0,1556,1557,5,194,0,0,1557,1559,5,215,0,0,1558,1560,5,207,0,0,1559,
1558,1,0,0,0,1559,1560,1,0,0,0,1560,1561,1,0,0,0,1561,1563,5,119,0,0,1562,
1548,1,0,0,0,1562,1556,1,0,0,0,1563,1564,1,0,0,0,1564,1567,3,888,444,0,1565,
1568,3,222,111,0,1566,1568,3,224,112,0,1567,1565,1,0,0,0,1567,1566,1,0,0,
0,1568,1570,1,0,0,0,1569,1571,3,228,114,0,1570,1569,1,0,0,0,1570,1571,1,
0,0,0,1571,221,1,0,0,0,1572,1574,3,780,390,0,1573,1572,1,0,0,0,1573,1574,
1,0,0,0,1574,1575,1,0,0,0,1575,1580,5,34,0,0,1576,1578,5,207,0,0,1577,1576,
1,0,0,0,1577,1578,1,0,0,0,1578,1579,1,0,0,0,1579,1581,5,119,0,0,1580,1577,
1,0,0,0,1580,1581,1,0,0,0,1581,223,1,0,0,0,1582,1598,3,226,113,0,1583,1585,
3,780,390,0,1584,1583,1,0,0,0,1584,1585,1,0,0,0,1585,1586,1,0,0,0,1586,1598,
3,892,446,0,1587,1589,3,780,390,0,1588,1587,1,0,0,0,1588,1589,1,0,0,0,1589,
1594,1,0,0,0,1590,1592,5,207,0,0,1591,1590,1,0,0,0,1591,1592,1,0,0,0,1592,
1593,1,0,0,0,1593,1595,5,119,0,0,1594,1591,1,0,0,0,1594,1595,1,0,0,0,1595,
1596,1,0,0,0,1596,1598,3,680,340,0,1597,1582,1,0,0,0,1597,1584,1,0,0,0,1597,
1588,1,0,0,0,1598,225,1,0,0,0,1599,1600,5,158,0,0,1600,1601,3,198,99,0,1601,
227,1,0,0,0,1602,1603,5,36,0,0,1603,1604,5,68,0,0,1604,1605,5,188,0,0,1605,
1606,3,198,99,0,1606,229,1,0,0,0,1607,1609,5,95,0,0,1608,1610,5,207,0,0,
1609,1608,1,0,0,0,1609,1610,1,0,0,0,1610,1611,1,0,0,0,1611,1614,5,119,0,
0,1612,1613,5,131,0,0,1613,1615,5,104,0,0,1614,1612,1,0,0,0,1614,1615,1,
0,0,0,1615,1616,1,0,0,0,1616,1617,3,888,444,0,1617,231,1,0,0,0,1618,1636,
5,73,0,0,1619,1621,5,207,0,0,1620,1619,1,0,0,0,1620,1621,1,0,0,0,1621,1622,
1,0,0,0,1622,1623,5,119,0,0,1623,1627,5,254,0,0,1624,1625,5,131,0,0,1625,
1626,5,183,0,0,1626,1628,5,104,0,0,1627,1624,1,0,0,0,1627,1628,1,0,0,0,1628,
1637,1,0,0,0,1629,1630,5,194,0,0,1630,1632,5,215,0,0,1631,1633,5,207,0,0,
1632,1631,1,0,0,0,1632,1633,1,0,0,0,1633,1634,1,0,0,0,1634,1635,5,119,0,
0,1635,1637,5,254,0,0,1636,1620,1,0,0,0,1636,1629,1,0,0,0,1637,1638,1,0,
0,0,1638,1639,3,894,447,0,1639,1640,3,234,117,0,1640,233,1,0,0,0,1641,1643,
5,36,0,0,1642,1641,1,0,0,0,1642,1643,1,0,0,0,1643,1644,1,0,0,0,1644,1651,
3,236,118,0,1645,1651,3,226,113,0,1646,1648,5,36,0,0,1647,1646,1,0,0,0,1647,
1648,1,0,0,0,1648,1649,1,0,0,0,1649,1651,3,680,340,0,1650,1642,1,0,0,0,1650,
1645,1,0,0,0,1650,1647,1,0,0,0,1651,235,1,0,0,0,1652,1653,5,68,0,0,1653,
1656,5,188,0,0,1654,1657,3,892,446,0,1655,1657,3,908,454,0,1656,1654,1,0,
0,0,1656,1655,1,0,0,0,1657,237,1,0,0,0,1658,1660,5,95,0,0,1659,1661,5,207,
0,0,1660,1659,1,0,0,0,1660,1661,1,0,0,0,1661,1662,1,0,0,0,1662,1663,5,119,
0,0,1663,1666,5,254,0,0,1664,1665,5,131,0,0,1665,1667,5,104,0,0,1666,1664,
1,0,0,0,1666,1667,1,0,0,0,1667,1668,1,0,0,0,1668,1669,3,894,447,0,1669,239,
1,0,0,0,1670,1671,3,386,193,0,1671,241,1,0,0,0,1672,1675,3,244,122,0,1673,
1675,3,250,125,0,1674,1672,1,0,0,0,1674,1673,1,0,0,0,1675,243,1,0,0,0,1676,
1679,3,246,123,0,1677,1679,3,248,124,0,1678,1676,1,0,0,0,1678,1677,1,0,0,
0,1679,245,1,0,0,0,1680,1681,3,402,201,0,1681,1683,3,254,127,0,1682,1684,
3,356,178,0,1683,1682,1,0,0,0,1683,1684,1,0,0,0,1684,247,1,0,0,0,1685,1686,
3,402,201,0,1686,1687,3,60,30,0,1687,249,1,0,0,0,1688,1691,3,252,126,0,1689,
1691,3,60,30,0,1690,1688,1,0,0,0,1690,1689,1,0,0,0,1691,251,1,0,0,0,1692,
1694,3,254,127,0,1693,1695,3,356,178,0,1694,1693,1,0,0,0,1694,1695,1,0,0,
0,1695,253,1,0,0,0,1696,1698,3,256,128,0,1697,1696,1,0,0,0,1698,1699,1,0,
0,0,1699,1697,1,0,0,0,1699,1700,1,0,0,0,1700,255,1,0,0,0,1701,1704,3,322,
161,0,1702,1704,3,258,129,0,1703,1701,1,0,0,0,1703,1702,1,0,0,0,1704,257,
1,0,0,0,1705,1708,3,260,130,0,1706,1708,3,294,147,0,1707,1705,1,0,0,0,1707,
1706,1,0,0,0,1708,259,1,0,0,0,1709,1714,3,262,131,0,1710,1714,3,264,132,
0,1711,1714,3,278,139,0,1712,1714,3,288,144,0,1713,1709,1,0,0,0,1713,1710,
1,0,0,0,1713,1711,1,0,0,0,1713,1712,1,0,0,0,1714,261,1,0,0,0,1715,1716,5,
133,0,0,1716,1717,3,536,268,0,1717,263,1,0,0,0,1718,1719,5,225,0,0,1719,
1720,3,266,133,0,1720,265,1,0,0,0,1721,1726,3,268,134,0,1722,1723,5,5,0,
0,1723,1725,3,268,134,0,1724,1722,1,0,0,0,1725,1728,1,0,0,0,1726,1724,1,
0,0,0,1726,1727,1,0,0,0,1727,267,1,0,0,0,1728,1726,1,0,0,0,1729,1733,3,270,
135,0,1730,1733,3,272,136,0,1731,1733,3,274,137,0,1732,1729,1,0,0,0,1732,
1730,1,0,0,0,1732,1731,1,0,0,0,1733,269,1,0,0,0,1734,1735,3,406,203,0,1735,
1736,5,16,0,0,1736,1737,3,136,68,0,1737,1738,5,7,0,0,1738,1739,3,932,466,
0,1739,271,1,0,0,0,1740,1741,3,406,203,0,1741,1742,5,7,0,0,1742,1744,5,10,
0,0,1743,1745,3,506,253,0,1744,1743,1,0,0,0,1744,1745,1,0,0,0,1745,1746,
1,0,0,0,1746,1747,5,20,0,0,1747,273,1,0,0,0,1748,1749,3,406,203,0,1749,1750,
3,498,249,0,1750,1751,3,132,66,0,1751,275,1,0,0,0,1752,1757,3,132,66,0,1753,
1754,5,1,0,0,1754,1756,3,132,66,0,1755,1753,1,0,0,0,1756,1759,1,0,0,0,1757,
1755,1,0,0,0,1757,1758,1,0,0,0,1758,277,1,0,0,0,1759,1757,1,0,0,0,1760,1761,
5,213,0,0,1761,1762,3,280,140,0,1762,279,1,0,0,0,1763,1768,3,282,141,0,1764,
1765,5,5,0,0,1765,1767,3,282,141,0,1766,1764,1,0,0,0,1767,1770,1,0,0,0,1768,
1766,1,0,0,0,1768,1769,1,0,0,0,1769,281,1,0,0,0,1770,1768,1,0,0,0,1771,1774,
3,284,142,0,1772,1774,3,286,143,0,1773,1771,1,0,0,0,1773,1772,1,0,0,0,1774,
283,1,0,0,0,1775,1776,3,406,203,0,1776,1777,5,16,0,0,1777,1778,3,136,68,
0,1778,285,1,0,0,0,1779,1780,3,406,203,0,1780,1781,3,498,249,0,1781,1782,
3,132,66,0,1782,287,1,0,0,0,1783,1785,7,7,0,0,1784,1783,1,0,0,0,1784,1785,
1,0,0,0,1785,1786,1,0,0,0,1786,1787,5,86,0,0,1787,1788,3,290,145,0,1788,
289,1,0,0,0,1789,1794,3,292,146,0,1790,1791,5,5,0,0,1791,1793,3,292,146,
0,1792,1790,1,0,0,0,1793,1796,1,0,0,0,1794,1792,1,0,0,0,1794,1795,1,0,0,
0,1795,291,1,0,0,0,1796,1794,1,0,0,0,1797,1798,3,932,466,0,1798,293,1,0,
0,0,1799,1800,3,386,193,0,1800,295,1,0,0,0,1801,1802,3,298,149,0,1802,297,
1,0,0,0,1803,1804,6,149,-1,0,1804,1805,3,304,152,0,1805,1812,1,0,0,0,1806,
1807,10,2,0,0,1807,1808,3,300,150,0,1808,1809,3,304,152,0,1809,1811,1,0,
0,0,1810,1806,1,0,0,0,1811,1814,1,0,0,0,1812,1810,1,0,0,0,1812,1813,1,0,
0,0,1813,299,1,0,0,0,1814,1812,1,0,0,0,1815,1818,3,302,151,0,1816,1818,5,
197,0,0,1817,1815,1,0,0,0,1817,1816,1,0,0,0,1818,301,1,0,0,0,1819,1821,5,
265,0,0,1820,1822,3,660,330,0,1821,1820,1,0,0,0,1821,1822,1,0,0,0,1822,1832,
1,0,0,0,1823,1825,5,103,0,0,1824,1826,3,660,330,0,1825,1824,1,0,0,0,1825,
1826,1,0,0,0,1826,1832,1,0,0,0,1827,1829,5,148,0,0,1828,1830,3,660,330,0,
1829,1828,1,0,0,0,1829,1830,1,0,0,0,1830,1832,1,0,0,0,1831,1819,1,0,0,0,
1831,1823,1,0,0,0,1831,1827,1,0,0,0,1832,303,1,0,0,0,1833,1834,3,306,153,
0,1834,305,1,0,0,0,1835,1838,3,308,154,0,1836,1838,3,318,159,0,1837,1835,
1,0,0,0,1837,1836,1,0,0,0,1838,307,1,0,0,0,1839,1841,3,310,155,0,1840,1839,
1,0,0,0,1841,1844,1,0,0,0,1842,1840,1,0,0,0,1842,1843,1,0,0,0,1843,1845,
1,0,0,0,1844,1842,1,0,0,0,1845,1850,3,312,156,0,1846,1850,3,314,157,0,1847,
1850,3,316,158,0,1848,1850,3,368,184,0,1849,1842,1,0,0,0,1849,1846,1,0,0,
0,1849,1847,1,0,0,0,1849,1848,1,0,0,0,1850,309,1,0,0,0,1851,1852,3,402,201,
0,1852,1853,3,320,160,0,1853,311,1,0,0,0,1854,1855,3,402,201,0,1855,1856,
3,320,160,0,1856,1857,3,356,178,0,1857,313,1,0,0,0,1858,1859,3,402,201,0,
1859,1860,3,356,178,0,1860,315,1,0,0,0,1861,1862,3,402,201,0,1862,1863,3,
64,32,0,1863,317,1,0,0,0,1864,1866,3,320,160,0,1865,1864,1,0,0,0,1865,1866,
1,0,0,0,1866,1867,1,0,0,0,1867,1870,3,356,178,0,1868,1870,3,64,32,0,1869,
1865,1,0,0,0,1869,1868,1,0,0,0,1870,319,1,0,0,0,1871,1873,3,322,161,0,1872,
1871,1,0,0,0,1873,1874,1,0,0,0,1874,1872,1,0,0,0,1874,1875,1,0,0,0,1875,
321,1,0,0,0,1876,1879,3,324,162,0,1877,1879,3,336,168,0,1878,1876,1,0,0,
0,1878,1877,1,0,0,0,1879,323,1,0,0,0,1880,1886,3,326,163,0,1881,1886,3,340,
170,0,1882,1886,3,346,173,0,1883,1886,3,338,169,0,1884,1886,3,354,177,0,
1885,1880,1,0,0,0,1885,1881,1,0,0,0,1885,1882,1,0,0,0,1885,1883,1,0,0,0,
1885,1884,1,0,0,0,1886,325,1,0,0,0,1887,1890,3,328,164,0,1888,1890,3,330,
165,0,1889,1887,1,0,0,0,1889,1888,1,0,0,0,1890,327,1,0,0,0,1891,1892,5,170,
0,0,1892,1893,3,414,207,0,1893,329,1,0,0,0,1894,1895,5,193,0,0,1895,1896,
3,332,166,0,1896,331,1,0,0,0,1897,1907,3,328,164,0,1898,1899,5,10,0,0,1899,
1900,3,334,167,0,1900,1901,5,20,0,0,1901,1907,1,0,0,0,1902,1903,5,12,0,0,
1903,1904,3,334,167,0,1904,1905,5,22,0,0,1905,1907,1,0,0,0,1906,1897,1,0,
0,0,1906,1898,1,0,0,0,1906,1902,1,0,0,0,1907,333,1,0,0,0,1908,1910,3,326,
163,0,1909,1908,1,0,0,0,1910,1911,1,0,0,0,1911,1909,1,0,0,0,1911,1912,1,
0,0,0,1912,335,1,0,0,0,1913,1914,3,386,193,0,1914,337,1,0,0,0,1915,1918,
5,107,0,0,1916,1919,3,634,317,0,1917,1919,3,932,466,0,1918,1916,1,0,0,0,
1918,1917,1,0,0,0,1919,339,1,0,0,0,1920,1921,5,157,0,0,1921,1922,3,342,171,
0,1922,341,1,0,0,0,1923,1928,3,344,172,0,1924,1925,5,5,0,0,1925,1927,3,344,
172,0,1926,1924,1,0,0,0,1927,1930,1,0,0,0,1928,1926,1,0,0,0,1928,1929,1,
0,0,0,1929,343,1,0,0,0,1930,1928,1,0,0,0,1931,1937,3,194,97,0,1932,1933,
3,158,79,0,1933,1934,5,7,0,0,1934,1935,3,932,466,0,1935,1937,1,0,0,0,1936,
1931,1,0,0,0,1936,1932,1,0,0,0,1937,345,1,0,0,0,1938,1939,5,117,0,0,1939,
1941,3,348,174,0,1940,1942,3,352,176,0,1941,1940,1,0,0,0,1941,1942,1,0,0,
0,1942,347,1,0,0,0,1943,1944,3,350,175,0,1944,1945,3,936,468,0,1945,349,
1,0,0,0,1946,1947,3,106,53,0,1947,1948,5,132,0,0,1948,351,1,0,0,0,1949,1950,
5,278,0,0,1950,1951,7,8,0,0,1951,1952,3,106,53,0,1952,353,1,0,0,0,1953,1955,
3,654,327,0,1954,1956,3,676,338,0,1955,1954,1,0,0,0,1955,1956,1,0,0,0,1956,
1958,1,0,0,0,1957,1959,3,674,337,0,1958,1957,1,0,0,0,1958,1959,1,0,0,0,1959,
1966,1,0,0,0,1960,1962,3,676,338,0,1961,1963,3,674,337,0,1962,1961,1,0,0,
0,1962,1963,1,0,0,0,1963,1966,1,0,0,0,1964,1966,3,674,337,0,1965,1953,1,
0,0,0,1965,1960,1,0,0,0,1965,1964,1,0,0,0,1966,355,1,0,0,0,1967,1969,3,358,
179,0,1968,1970,3,354,177,0,1969,1968,1,0,0,0,1969,1970,1,0,0,0,1970,1973,
1,0,0,0,1971,1973,5,108,0,0,1972,1967,1,0,0,0,1972,1971,1,0,0,0,1973,357,
1,0,0,0,1974,1975,5,217,0,0,1975,1976,3,360,180,0,1976,359,1,0,0,0,1977,
1979,3,660,330,0,1978,1977,1,0,0,0,1978,1979,1,0,0,0,1979,1982,1,0,0,0,1980,
1983,5,2,0,0,1981,1983,3,362,181,0,1982,1980,1,0,0,0,1982,1981,1,0,0,0,1983,
1985,1,0,0,0,1984,1986,3,646,323,0,1985,1984,1,0,0,0,1985,1986,1,0,0,0,1986,
1990,1,0,0,0,1987,1988,5,179,0,0,1988,1990,5,47,0,0,1989,1978,1,0,0,0,1989,
1987,1,0,0,0,1990,361,1,0,0,0,1991,1996,3,364,182,0,1992,1993,5,5,0,0,1993,
1995,3,364,182,0,1994,1992,1,0,0,0,1995,1998,1,0,0,0,1996,1994,1,0,0,0,1996,
1997,1,0,0,0,1997,363,1,0,0,0,1998,1996,1,0,0,0,1999,2001,3,932,466,0,2000,
2002,3,366,183,0,2001,2000,1,0,0,0,2001,2002,1,0,0,0,2002,365,1,0,0,0,2003,
2004,5,36,0,0,2004,2005,3,106,53,0,2005,367,1,0,0,0,2006,2008,5,223,0,0,
2007,2009,3,660,330,0,2008,2007,1,0,0,0,2008,2009,1,0,0,0,2009,2012,1,0,
0,0,2010,2013,5,2,0,0,2011,2013,3,370,185,0,2012,2010,1,0,0,0,2012,2011,
1,0,0,0,2013,2033,1,0,0,0,2014,2016,3,378,189,0,2015,2017,3,634,317,0,2016,
2015,1,0,0,0,2016,2017,1,0,0,0,2017,2019,1,0,0,0,2018,2020,3,646,323,0,2019,
2018,1,0,0,0,2019,2020,1,0,0,0,2020,2022,1,0,0,0,2021,2023,3,376,188,0,2022,
2021,1,0,0,0,2022,2023,1,0,0,0,2023,2025,1,0,0,0,2024,2026,3,654,327,0,2025,
2024,1,0,0,0,2025,2026,1,0,0,0,2026,2028,1,0,0,0,2027,2029,3,676,338,0,2028,
2027,1,0,0,0,2028,2029,1,0,0,0,2029,2031,1,0,0,0,2030,2032,3,674,337,0,2031,
2030,1,0,0,0,2031,2032,1,0,0,0,2032,2034,1,0,0,0,2033,2014,1,0,0,0,2033,
2034,1,0,0,0,2034,369,1,0,0,0,2035,2040,3,372,186,0,2036,2037,5,5,0,0,2037,
2039,3,372,186,0,2038,2036,1,0,0,0,2039,2042,1,0,0,0,2040,2038,1,0,0,0,2040,
2041,1,0,0,0,2041,371,1,0,0,0,2042,2040,1,0,0,0,2043,2045,3,932,466,0,2044,
2046,3,374,187,0,2045,2044,1,0,0,0,2045,2046,1,0,0,0,2046,373,1,0,0,0,2047,
2048,5,36,0,0,2048,2049,3,106,53,0,2049,375,1,0,0,0,2050,2051,5,122,0,0,
2051,2052,3,932,466,0,2052,377,1,0,0,0,2053,2054,5,118,0,0,2054,2058,3,380,
190,0,2055,2056,5,118,0,0,2056,2058,3,384,192,0,2057,2053,1,0,0,0,2057,2055,
1,0,0,0,2058,379,1,0,0,0,2059,2064,3,382,191,0,2060,2061,5,5,0,0,2061,2063,
3,382,191,0,2062,2060,1,0,0,0,2063,2066,1,0,0,0,2064,2062,1,0,0,0,2064,2065,
1,0,0,0,2065,381,1,0,0,0,2066,2064,1,0,0,0,2067,2068,3,198,99,0,2068,2069,
3,326,163,0,2069,383,1,0,0,0,2070,2075,3,64,32,0,2071,2072,3,198,99,0,2072,
2073,3,64,32,0,2073,2075,1,0,0,0,2074,2070,1,0,0,0,2074,2071,1,0,0,0,2075,
385,1,0,0,0,2076,2078,5,193,0,0,2077,2076,1,0,0,0,2077,2078,1,0,0,0,2078,
2079,1,0,0,0,2079,2080,5,55,0,0,2080,2081,3,388,194,0,2081,387,1,0,0,0,2082,
2085,3,390,195,0,2083,2085,3,396,198,0,2084,2082,1,0,0,0,2084,2083,1,0,0,
0,2085,389,1,0,0,0,2086,2088,3,392,196,0,2087,2086,1,0,0,0,2087,2088,1,0,
0,0,2088,2089,1,0,0,0,2089,2090,3,54,27,0,2090,391,1,0,0,0,2091,2093,5,12,
0,0,2092,2094,3,394,197,0,2093,2092,1,0,0,0,2093,2094,1,0,0,0,2094,2095,
1,0,0,0,2095,2096,5,22,0,0,2096,393,1,0,0,0,2097,2102,3,406,203,0,2098,2099,
5,5,0,0,2099,2101,3,406,203,0,2100,2098,1,0,0,0,2101,2104,1,0,0,0,2102,2100,
1,0,0,0,2102,2103,1,0,0,0,2103,395,1,0,0,0,2104,2102,1,0,0,0,2105,2106,3,
900,450,0,2106,2108,5,12,0,0,2107,2109,3,398,199,0,2108,2107,1,0,0,0,2108,
2109,1,0,0,0,2109,2110,1,0,0,0,2110,2112,5,22,0,0,2111,2113,3,636,318,0,
2112,2111,1,0,0,0,2112,2113,1,0,0,0,2113,397,1,0,0,0,2114,2119,3,400,200,
0,2115,2116,5,5,0,0,2116,2118,3,400,200,0,2117,2115,1,0,0,0,2118,2121,1,
0,0,0,2119,2117,1,0,0,0,2119,2120,1,0,0,0,2120,399,1,0,0,0,2121,2119,1,0,
0,0,2122,2123,3,932,466,0,2123,401,1,0,0,0,2124,2125,5,269,0,0,2125,2126,
3,198,99,0,2126,403,1,0,0,0,2127,2128,5,40,0,0,2128,2129,3,870,435,0,2129,
405,1,0,0,0,2130,2131,3,160,80,0,2131,407,1,0,0,0,2132,2133,3,406,203,0,
2133,409,1,0,0,0,2134,2135,3,406,203,0,2135,411,1,0,0,0,2136,2137,3,140,
70,0,2137,413,1,0,0,0,2138,2140,3,422,211,0,2139,2141,3,416,208,0,2140,2139,
1,0,0,0,2140,2141,1,0,0,0,2141,415,1,0,0,0,2142,2143,5,282,0,0,2143,2144,
3,418,209,0,2144,417,1,0,0,0,2145,2150,3,420,210,0,2146,2147,5,5,0,0,2147,
2149,3,420,210,0,2148,2146,1,0,0,0,2149,2152,1,0,0,0,2150,2148,1,0,0,0,2150,
2151,1,0,0,0,2151,2156,1,0,0,0,2152,2150,1,0,0,0,2153,2154,5,179,0,0,2154,
2156,5,47,0,0,2155,2145,1,0,0,0,2155,2153,1,0,0,0,2156,419,1,0,0,0,2157,
2160,3,408,204,0,2158,2160,3,410,205,0,2159,2157,1,0,0,0,2159,2158,1,0,0,
0,2160,421,1,0,0,0,2161,2163,3,424,212,0,2162,2161,1,0,0,0,2162,2163,1,0,
0,0,2163,2164,1,0,0,0,2164,2166,3,434,217,0,2165,2167,3,440,220,0,2166,2165,
1,0,0,0,2166,2167,1,0,0,0,2167,2169,1,0,0,0,2168,2170,3,442,221,0,2169,2168,
1,0,0,0,2169,2170,1,0,0,0,2170,423,1,0,0,0,2171,2174,3,426,213,0,2172,2174,
3,428,214,0,2173,2171,1,0,0,0,2173,2172,1,0,0,0,2174,425,1,0,0,0,2175,2176,
5,214,0,0,2176,2177,3,430,215,0,2177,427,1,0,0,0,2178,2179,5,91,0,0,2179,
2180,3,432,216,0,2180,429,1,0,0,0,2181,2183,5,98,0,0,2182,2184,5,47,0,0,
2183,2182,1,0,0,0,2183,2184,1,0,0,0,2184,2187,1,0,0,0,2185,2187,5,100,0,
0,2186,2181,1,0,0,0,2186,2185,1,0,0,0,2187,431,1,0,0,0,2188,2190,5,291,0,
0,2189,2191,5,47,0,0,2190,2189,1,0,0,0,2190,2191,1,0,0,0,2191,2194,1,0,0,
0,2192,2194,5,292,0,0,2193,2188,1,0,0,0,2193,2192,1,0,0,0,2194,433,1,0,0,
0,2195,2200,3,436,218,0,2196,2197,5,5,0,0,2197,2199,3,436,218,0,2198,2196,
1,0,0,0,2199,2202,1,0,0,0,2200,2198,1,0,0,0,2200,2201,1,0,0,0,2201,435,1,
0,0,0,2202,2200,1,0,0,0,2203,2205,3,438,219,0,2204,2203,1,0,0,0,2204,2205,
1,0,0,0,2205,2207,1,0,0,0,2206,2208,3,444,222,0,2207,2206,1,0,0,0,2207,2208,
1,0,0,0,2208,2209,1,0,0,0,2209,2210,3,472,236,0,2210,437,1,0,0,0,2211,2212,
3,152,76,0,2212,2213,5,7,0,0,2213,439,1,0,0,0,2214,2215,5,150,0,0,2215,2216,
3,444,222,0,2216,441,1,0,0,0,2217,2218,5,277,0,0,2218,2219,3,932,466,0,2219,
443,1,0,0,0,2220,2223,3,446,223,0,2221,2223,3,450,225,0,2222,2220,1,0,0,
0,2222,2221,1,0,0,0,2223,445,1,0,0,0,2224,2226,3,448,224,0,2225,2227,3,454,
227,0,2226,2225,1,0,0,0,2226,2227,1,0,0,0,2227,447,1,0,0,0,2228,2229,7,9,
0,0,2229,449,1,0,0,0,2230,2234,3,452,226,0,2231,2234,3,456,228,0,2232,2234,
3,460,230,0,2233,2230,1,0,0,0,2233,2231,1,0,0,0,2233,2232,1,0,0,0,2234,451,
1,0,0,0,2235,2237,5,31,0,0,2236,2238,3,448,224,0,2237,2236,1,0,0,0,2237,
2238,1,0,0,0,2238,2240,1,0,0,0,2239,2241,3,454,227,0,2240,2239,1,0,0,0,2240,
2241,1,0,0,0,2241,453,1,0,0,0,2242,2243,7,10,0,0,2243,455,1,0,0,0,2244,2246,
5,34,0,0,2245,2247,3,458,229,0,2246,2245,1,0,0,0,2246,2247,1,0,0,0,2247,
2249,1,0,0,0,2248,2250,3,448,224,0,2249,2248,1,0,0,0,2249,2250,1,0,0,0,2250,
2252,1,0,0,0,2251,2253,3,454,227,0,2252,2251,1,0,0,0,2252,2253,1,0,0,0,2253,
457,1,0,0,0,2254,2255,3,926,463,0,2255,459,1,0,0,0,2256,2261,3,462,231,0,
2257,2261,3,464,232,0,2258,2261,3,466,233,0,2259,2261,3,468,234,0,2260,2256,
1,0,0,0,2260,2257,1,0,0,0,2260,2258,1,0,0,0,2260,2259,1,0,0,0,2261,461,1,
0,0,0,2262,2263,5,31,0,0,2263,2265,5,226,0,0,2264,2266,3,448,224,0,2265,
2264,1,0,0,0,2265,2266,1,0,0,0,2266,2268,1,0,0,0,2267,2269,3,454,227,0,2268,
2267,1,0,0,0,2268,2269,1,0,0,0,2269,463,1,0,0,0,2270,2271,5,34,0,0,2271,
2273,5,226,0,0,2272,2274,3,448,224,0,2273,2272,1,0,0,0,2273,2274,1,0,0,0,
2274,2276,1,0,0,0,2275,2277,3,454,227,0,2276,2275,1,0,0,0,2276,2277,1,0,
0,0,2277,465,1,0,0,0,2278,2279,5,226,0,0,2279,2281,3,458,229,0,2280,2282,
3,448,224,0,2281,2280,1,0,0,0,2281,2282,1,0,0,0,2282,2284,1,0,0,0,2283,2285,
3,454,227,0,2284,2283,1,0,0,0,2284,2285,1,0,0,0,2285,467,1,0,0,0,2286,2287,
5,226,0,0,2287,2289,3,470,235,0,2288,2290,3,448,224,0,2289,2288,1,0,0,0,
2289,2290,1,0,0,0,2290,2292,1,0,0,0,2291,2293,3,454,227,0,2292,2291,1,0,
0,0,2292,2293,1,0,0,0,2293,2294,1,0,0,0,2294,2295,7,11,0,0,2295,469,1,0,
0,0,2296,2297,3,926,463,0,2297,471,1,0,0,0,2298,2302,3,478,239,0,2299,2302,
3,474,237,0,2300,2302,3,476,238,0,2301,2298,1,0,0,0,2301,2299,1,0,0,0,2301,
2300,1,0,0,0,2302,473,1,0,0,0,2303,2304,3,478,239,0,2304,2305,5,298,0,0,
2305,2310,3,478,239,0,2306,2307,5,298,0,0,2307,2309,3,478,239,0,2308,2306,
1,0,0,0,2309,2312,1,0,0,0,2310,2308,1,0,0,0,2310,2311,1,0,0,0,2311,475,1,
0,0,0,2312,2310,1,0,0,0,2313,2314,3,478,239,0,2314,2315,5,27,0,0,2315,2320,
3,478,239,0,2316,2317,5,27,0,0,2317,2319,3,478,239,0,2318,2316,1,0,0,0,2319,
2322,1,0,0,0,2320,2318,1,0,0,0,2320,2321,1,0,0,0,2321,477,1,0,0,0,2322,2320,
1,0,0,0,2323,2325,3,480,240,0,2324,2323,1,0,0,0,2325,2326,1,0,0,0,2326,2324,
1,0,0,0,2326,2327,1,0,0,0,2327,479,1,0,0,0,2328,2332,3,486,243,0,2329,2332,
3,482,241,0,2330,2332,3,484,242,0,2331,2328,1,0,0,0,2331,2329,1,0,0,0,2331,
2330,1,0,0,0,2332,481,1,0,0,0,2333,2334,3,486,243,0,2334,2335,3,568,284,
0,2335,483,1,0,0,0,2336,2337,3,486,243,0,2337,2338,5,18,0,0,2338,485,1,0,
0,0,2339,2343,3,488,244,0,2340,2343,3,530,265,0,2341,2343,3,578,289,0,2342,
2339,1,0,0,0,2342,2340,1,0,0,0,2342,2341,1,0,0,0,2343,487,1,0,0,0,2344,2347,
3,490,245,0,2345,2347,3,510,255,0,2346,2344,1,0,0,0,2346,2345,1,0,0,0,2347,
489,1,0,0,0,2348,2349,5,12,0,0,2349,2350,3,492,246,0,2350,2351,5,22,0,0,
2351,491,1,0,0,0,2352,2354,3,494,247,0,2353,2352,1,0,0,0,2353,2354,1,0,0,
0,2354,2356,1,0,0,0,2355,2357,3,496,248,0,2356,2355,1,0,0,0,2356,2357,1,
0,0,0,2357,2359,1,0,0,0,2358,2360,3,500,250,0,2359,2358,1,0,0,0,2359,2360,
1,0,0,0,2360,493,1,0,0,0,2361,2363,5,243,0,0,2362,2361,1,0,0,0,2362,2363,
1,0,0,0,2363,2364,1,0,0,0,2364,2365,3,150,75,0,2365,495,1,0,0,0,2366,2367,
3,498,249,0,2367,2368,3,556,278,0,2368,497,1,0,0,0,2369,2370,7,12,0,0,2370,
499,1,0,0,0,2371,2374,3,502,251,0,2372,2374,3,504,252,0,2373,2371,1,0,0,
0,2373,2372,1,0,0,0,2374,501,1,0,0,0,2375,2376,5,277,0,0,2376,2377,3,932,
466,0,2377,503,1,0,0,0,2378,2379,5,10,0,0,2379,2380,3,506,253,0,2380,2381,
5,20,0,0,2381,505,1,0,0,0,2382,2387,3,508,254,0,2383,2384,5,5,0,0,2384,2386,
3,508,254,0,2385,2383,1,0,0,0,2386,2389,1,0,0,0,2387,2385,1,0,0,0,2387,2388,
1,0,0,0,2388,507,1,0,0,0,2389,2387,1,0,0,0,2390,2391,3,136,68,0,2391,2392,
5,4,0,0,2392,2393,3,932,466,0,2393,509,1,0,0,0,2394,2397,3,512,256,0,2395,
2397,3,528,264,0,2396,2394,1,0,0,0,2396,2395,1,0,0,0,2397,511,1,0,0,0,2398,
2406,3,514,257,0,2399,2406,3,516,258,0,2400,2406,3,518,259,0,2401,2406,3,
520,260,0,2402,2406,3,522,261,0,2403,2406,3,524,262,0,2404,2406,3,526,263,
0,2405,2398,1,0,0,0,2405,2399,1,0,0,0,2405,2400,1,0,0,0,2405,2401,1,0,0,
0,2405,2402,1,0,0,0,2405,2403,1,0,0,0,2405,2404,1,0,0,0,2406,513,1,0,0,0,
2407,2408,5,13,0,0,2408,2409,5,14,0,0,2409,2410,5,11,0,0,2410,2411,3,492,
246,0,2411,2412,5,21,0,0,2412,2413,5,14,0,0,2413,515,1,0,0,0,2414,2415,5,
25,0,0,2415,2416,5,11,0,0,2416,2417,3,492,246,0,2417,2418,5,21,0,0,2418,
2419,5,25,0,0,2419,517,1,0,0,0,2420,2421,5,14,0,0,2421,2422,5,11,0,0,2422,
2423,3,492,246,0,2423,2424,5,21,0,0,2424,2425,5,309,0,0,2425,519,1,0,0,0,
2426,2427,5,13,0,0,2427,2428,5,25,0,0,2428,2429,5,11,0,0,2429,2430,3,492,
246,0,2430,2431,5,21,0,0,2431,2432,5,25,0,0,2432,521,1,0,0,0,2433,2434,5,
25,0,0,2434,2435,5,11,0,0,2435,2436,3,492,246,0,2436,2437,5,21,0,0,2437,
2438,5,312,0,0,2438,523,1,0,0,0,2439,2440,5,13,0,0,2440,2441,5,14,0,0,2441,
2442,5,11,0,0,2442,2443,3,492,246,0,2443,2444,5,21,0,0,2444,2445,5,309,0,
0,2445,525,1,0,0,0,2446,2447,5,14,0,0,2447,2448,5,11,0,0,2448,2449,3,492,
246,0,2449,2450,5,21,0,0,2450,2451,5,14,0,0,2451,527,1,0,0,0,2452,2453,5,
13,0,0,2453,2462,5,14,0,0,2454,2462,5,25,0,0,2455,2462,5,309,0,0,2456,2457,
5,13,0,0,2457,2462,5,25,0,0,2458,2462,5,312,0,0,2459,2462,5,303,0,0,2460,
2462,5,14,0,0,2461,2452,1,0,0,0,2461,2454,1,0,0,0,2461,2455,1,0,0,0,2461,
2456,1,0,0,0,2461,2458,1,0,0,0,2461,2459,1,0,0,0,2461,2460,1,0,0,0,2462,
529,1,0,0,0,2463,2465,5,12,0,0,2464,2466,3,532,266,0,2465,2464,1,0,0,0,2465,
2466,1,0,0,0,2466,2468,1,0,0,0,2467,2469,3,446,223,0,2468,2467,1,0,0,0,2468,
2469,1,0,0,0,2469,2470,1,0,0,0,2470,2472,3,472,236,0,2471,2473,3,534,267,
0,2472,2471,1,0,0,0,2472,2473,1,0,0,0,2473,2474,1,0,0,0,2474,2475,5,22,0,
0,2475,531,1,0,0,0,2476,2477,3,154,77,0,2477,2478,5,7,0,0,2478,533,1,0,0,
0,2479,2480,5,277,0,0,2480,2481,3,932,466,0,2481,535,1,0,0,0,2482,2483,3,
538,269,0,2483,537,1,0,0,0,2484,2489,3,540,270,0,2485,2486,5,5,0,0,2486,
2488,3,540,270,0,2487,2485,1,0,0,0,2488,2491,1,0,0,0,2489,2487,1,0,0,0,2489,
2490,1,0,0,0,2490,539,1,0,0,0,2491,2489,1,0,0,0,2492,2498,3,542,271,0,2493,
2494,3,544,272,0,2494,2495,3,542,271,0,2495,2497,1,0,0,0,2496,2493,1,0,0,
0,2497,2500,1,0,0,0,2498,2496,1,0,0,0,2498,2499,1,0,0,0,2499,541,1,0,0,0,
2500,2498,1,0,0,0,2501,2503,5,12,0,0,2502,2504,3,552,276,0,2503,2502,1,0,
0,0,2503,2504,1,0,0,0,2504,2505,1,0,0,0,2505,2506,5,22,0,0,2506,543,1,0,
0,0,2507,2511,3,546,273,0,2508,2511,3,548,274,0,2509,2511,3,550,275,0,2510,
2507,1,0,0,0,2510,2508,1,0,0,0,2510,2509,1,0,0,0,2511,545,1,0,0,0,2512,2513,
5,13,0,0,2513,2514,5,14,0,0,2514,2516,5,11,0,0,2515,2517,3,552,276,0,2516,
2515,1,0,0,0,2516,2517,1,0,0,0,2517,2518,1,0,0,0,2518,2519,5,21,0,0,2519,
2520,5,14,0,0,2520,547,1,0,0,0,2521,2522,5,14,0,0,2522,2524,5,11,0,0,2523,
2525,3,552,276,0,2524,2523,1,0,0,0,2524,2525,1,0,0,0,2525,2526,1,0,0,0,2526,
2527,5,21,0,0,2527,2528,5,309,0,0,2528,549,1,0,0,0,2529,2530,5,25,0,0,2530,
2532,5,11,0,0,2531,2533,3,552,276,0,2532,2531,1,0,0,0,2532,2533,1,0,0,0,
2533,2534,1,0,0,0,2534,2535,5,21,0,0,2535,2536,5,25,0,0,2536,551,1,0,0,0,
2537,2538,3,494,247,0,2538,2539,3,554,277,0,2539,2543,1,0,0,0,2540,2543,
3,494,247,0,2541,2543,3,554,277,0,2542,2537,1,0,0,0,2542,2540,1,0,0,0,2542,
2541,1,0,0,0,2543,553,1,0,0,0,2544,2545,3,498,249,0,2545,2546,3,276,138,
0,2546,2553,1,0,0,0,2547,2548,3,498,249,0,2548,2549,3,276,138,0,2549,2550,
3,504,252,0,2550,2553,1,0,0,0,2551,2553,3,504,252,0,2552,2544,1,0,0,0,2552,
2547,1,0,0,0,2552,2551,1,0,0,0,2553,555,1,0,0,0,2554,2559,3,558,279,0,2555,
2556,5,27,0,0,2556,2558,3,558,279,0,2557,2555,1,0,0,0,2558,2561,1,0,0,0,
2559,2557,1,0,0,0,2559,2560,1,0,0,0,2560,557,1,0,0,0,2561,2559,1,0,0,0,2562,
2567,3,560,280,0,2563,2564,5,1,0,0,2564,2566,3,560,280,0,2565,2563,1,0,0,
0,2566,2569,1,0,0,0,2567,2565,1,0,0,0,2567,2568,1,0,0,0,2568,559,1,0,0,0,
2569,2567,1,0,0,0,2570,2572,5,8,0,0,2571,2570,1,0,0,0,2571,2572,1,0,0,0,
2572,2573,1,0,0,0,2573,2574,3,562,281,0,2574,561,1,0,0,0,2575,2579,3,132,
66,0,2576,2579,3,564,282,0,2577,2579,3,566,283,0,2578,2575,1,0,0,0,2578,
2576,1,0,0,0,2578,2577,1,0,0,0,2579,563,1,0,0,0,2580,2581,5,15,0,0,2581,
565,1,0,0,0,2582,2583,5,12,0,0,2583,2584,3,556,278,0,2584,2585,5,22,0,0,
2585,567,1,0,0,0,2586,2591,5,2,0,0,2587,2591,5,17,0,0,2588,2591,3,570,285,
0,2589,2591,3,572,286,0,2590,2586,1,0,0,0,2590,2587,1,0,0,0,2590,2588,1,
0,0,0,2590,2589,1,0,0,0,2591,569,1,0,0,0,2592,2593,5,10,0,0,2593,2594,5,
328,0,0,2594,2595,5,20,0,0,2595,571,1,0,0,0,2596,2598,5,10,0,0,2597,2599,
3,574,287,0,2598,2597,1,0,0,0,2598,2599,1,0,0,0,2599,2600,1,0,0,0,2600,2602,
5,5,0,0,2601,2603,3,576,288,0,2602,2601,1,0,0,0,2602,2603,1,0,0,0,2603,2604,
1,0,0,0,2604,2605,5,20,0,0,2605,573,1,0,0,0,2606,2607,5,328,0,0,2607,575,
1,0,0,0,2608,2609,5,328,0,0,2609,577,1,0,0,0,2610,2618,3,580,290,0,2611,
2618,3,582,291,0,2612,2618,3,584,292,0,2613,2618,3,586,293,0,2614,2618,3,
588,294,0,2615,2618,3,590,295,0,2616,2618,3,592,296,0,2617,2610,1,0,0,0,
2617,2611,1,0,0,0,2617,2612,1,0,0,0,2617,2613,1,0,0,0,2617,2614,1,0,0,0,
2617,2615,1,0,0,0,2617,2616,1,0,0,0,2618,579,1,0,0,0,2619,2620,5,304,0,0,
2620,2621,3,594,297,0,2621,2622,5,24,0,0,2622,2623,5,14,0,0,2623,581,1,0,
0,0,2624,2625,5,313,0,0,2625,2626,3,594,297,0,2626,2627,5,24,0,0,2627,2628,
5,25,0,0,2628,583,1,0,0,0,2629,2630,5,307,0,0,2630,2631,3,594,297,0,2631,
2632,5,310,0,0,2632,585,1,0,0,0,2633,2634,5,305,0,0,2634,2635,3,594,297,
0,2635,2636,5,24,0,0,2636,2637,5,25,0,0,2637,587,1,0,0,0,2638,2639,5,313,
0,0,2639,2640,3,594,297,0,2640,2641,5,311,0,0,2641,589,1,0,0,0,2642,2643,
5,304,0,0,2643,2644,3,594,297,0,2644,2645,5,310,0,0,2645,591,1,0,0,0,2646,
2647,5,307,0,0,2647,2648,3,594,297,0,2648,2649,5,24,0,0,2649,2650,5,14,0,
0,2650,593,1,0,0,0,2651,2655,3,600,300,0,2652,2655,3,596,298,0,2653,2655,
3,598,299,0,2654,2651,1,0,0,0,2654,2652,1,0,0,0,2654,2653,1,0,0,0,2655,595,
1,0,0,0,2656,2657,3,600,300,0,2657,2658,5,27,0,0,2658,2663,3,600,300,0,2659,
2660,5,27,0,0,2660,2662,3,600,300,0,2661,2659,1,0,0,0,2662,2665,1,0,0,0,
2663,2661,1,0,0,0,2663,2664,1,0,0,0,2664,597,1,0,0,0,2665,2663,1,0,0,0,2666,
2667,3,600,300,0,2667,2668,5,298,0,0,2668,2673,3,600,300,0,2669,2670,5,298,
0,0,2670,2672,3,600,300,0,2671,2669,1,0,0,0,2672,2675,1,0,0,0,2673,2671,
1,0,0,0,2673,2674,1,0,0,0,2674,599,1,0,0,0,2675,2673,1,0,0,0,2676,2678,3,
602,301,0,2677,2676,1,0,0,0,2678,2679,1,0,0,0,2679,2677,1,0,0,0,2679,2680,
1,0,0,0,2680,601,1,0,0,0,2681,2686,3,604,302,0,2682,2683,5,1,0,0,2683,2685,
3,604,302,0,2684,2682,1,0,0,0,2685,2688,1,0,0,0,2686,2684,1,0,0,0,2686,2687,
1,0,0,0,2687,603,1,0,0,0,2688,2686,1,0,0,0,2689,2693,3,610,305,0,2690,2693,
3,606,303,0,2691,2693,3,608,304,0,2692,2689,1,0,0,0,2692,2690,1,0,0,0,2692,
2691,1,0,0,0,2693,605,1,0,0,0,2694,2695,3,610,305,0,2695,2696,3,568,284,
0,2696,607,1,0,0,0,2697,2698,3,610,305,0,2698,2699,5,18,0,0,2699,609,1,0,
0,0,2700,2703,3,612,306,0,2701,2703,3,628,314,0,2702,2700,1,0,0,0,2702,2701,
1,0,0,0,2703,611,1,0,0,0,2704,2712,3,614,307,0,2705,2712,3,616,308,0,2706,
2712,3,618,309,0,2707,2712,3,620,310,0,2708,2712,3,622,311,0,2709,2712,3,
624,312,0,2710,2712,3,626,313,0,2711,2704,1,0,0,0,2711,2705,1,0,0,0,2711,
2706,1,0,0,0,2711,2707,1,0,0,0,2711,2708,1,0,0,0,2711,2709,1,0,0,0,2711,
2710,1,0,0,0,2712,613,1,0,0,0,2713,2714,5,13,0,0,2714,2715,3,628,314,0,2715,
615,1,0,0,0,2716,2717,5,25,0,0,2717,2718,3,628,314,0,2718,617,1,0,0,0,2719,
2720,3,628,314,0,2720,2721,5,9,0,0,2721,619,1,0,0,0,2722,2723,5,13,0,0,2723,
2724,5,25,0,0,2724,2725,3,628,314,0,2725,621,1,0,0,0,2726,2727,5,25,0,0,
2727,2728,3,628,314,0,2728,2729,5,9,0,0,2729,623,1,0,0,0,2730,2731,5,13,
0,0,2731,2732,3,628,314,0,2732,2733,5,9,0,0,2733,625,1,0,0,0,2734,2735,5,
14,0,0,2735,2736,3,628,314,0,2736,627,1,0,0,0,2737,2740,3,632,316,0,2738,
2740,3,630,315,0,2739,2737,1,0,0,0,2739,2738,1,0,0,0,2740,629,1,0,0,0,2741,
2742,5,8,0,0,2742,2743,3,632,316,0,2743,631,1,0,0,0,2744,2750,3,132,66,0,
2745,2746,5,12,0,0,2746,2747,3,594,297,0,2747,2748,5,22,0,0,2748,2750,1,
0,0,0,2749,2744,1,0,0,0,2749,2745,1,0,0,0,2750,633,1,0,0,0,2751,2752,5,277,
0,0,2752,2753,3,932,466,0,2753,635,1,0,0,0,2754,2755,5,282,0,0,2755,2756,
3,638,319,0,2756,637,1,0,0,0,2757,2762,3,640,320,0,2758,2759,5,5,0,0,2759,
2761,3,640,320,0,2760,2758,1,0,0,0,2761,2764,1,0,0,0,2762,2760,1,0,0,0,2762,
2763,1,0,0,0,2763,639,1,0,0,0,2764,2762,1,0,0,0,2765,2767,3,642,321,0,2766,
2768,3,644,322,0,2767,2766,1,0,0,0,2767,2768,1,0,0,0,2768,641,1,0,0,0,2769,
2770,3,138,69,0,2770,643,1,0,0,0,2771,2772,5,36,0,0,2772,2773,3,160,80,0,
2773,645,1,0,0,0,2774,2775,5,120,0,0,2775,2776,5,52,0,0,2776,2777,3,648,
324,0,2777,647,1,0,0,0,2778,2781,3,650,325,0,2779,2780,5,5,0,0,2780,2782,
3,650,325,0,2781,2779,1,0,0,0,2781,2782,1,0,0,0,2782,2785,1,0,0,0,2783,2785,
3,652,326,0,2784,2778,1,0,0,0,2784,2783,1,0,0,0,2785,649,1,0,0,0,2786,2787,
3,406,203,0,2787,651,1,0,0,0,2788,2789,5,12,0,0,2789,2790,5,22,0,0,2790,
653,1,0,0,0,2791,2792,5,195,0,0,2792,2793,5,52,0,0,2793,2794,3,664,332,0,
2794,655,1,0,0,0,2795,2796,5,72,0,0,2796,2797,5,12,0,0,2797,2798,5,2,0,0,
2798,2818,5,22,0,0,2799,2800,3,658,329,0,2800,2802,5,12,0,0,2801,2803,3,
660,330,0,2802,2801,1,0,0,0,2802,2803,1,0,0,0,2803,2804,1,0,0,0,2804,2805,
3,932,466,0,2805,2806,5,22,0,0,2806,2818,1,0,0,0,2807,2808,3,662,331,0,2808,
2810,5,12,0,0,2809,2811,3,660,330,0,2810,2809,1,0,0,0,2810,2811,1,0,0,0,
2811,2812,1,0,0,0,2812,2813,3,932,466,0,2813,2814,5,5,0,0,2814,2815,3,932,
466,0,2815,2816,5,22,0,0,2816,2818,1,0,0,0,2817,2795,1,0,0,0,2817,2799,1,
0,0,0,2817,2807,1,0,0,0,2818,657,1,0,0,0,2819,2820,7,13,0,0,2820,659,1,0,
0,0,2821,2822,7,14,0,0,2822,661,1,0,0,0,2823,2824,7,15,0,0,2824,663,1,0,
0,0,2825,2830,3,666,333,0,2826,2827,5,5,0,0,2827,2829,3,666,333,0,2828,2826,
1,0,0,0,2829,2832,1,0,0,0,2830,2828,1,0,0,0,2830,2831,1,0,0,0,2831,665,1,
0,0,0,2832,2830,1,0,0,0,2833,2835,3,668,334,0,2834,2836,3,670,335,0,2835,
2834,1,0,0,0,2835,2836,1,0,0,0,2836,2838,1,0,0,0,2837,2839,3,672,336,0,2838,
2837,1,0,0,0,2838,2839,1,0,0,0,2839,667,1,0,0,0,2840,2841,3,932,466,0,2841,
669,1,0,0,0,2842,2843,7,16,0,0,2843,671,1,0,0,0,2844,2845,5,186,0,0,2845,
2849,5,109,0,0,2846,2847,5,186,0,0,2847,2849,5,154,0,0,2848,2844,1,0,0,0,
2848,2846,1,0,0,0,2849,673,1,0,0,0,2850,2851,5,159,0,0,2851,2852,3,926,463,
0,2852,675,1,0,0,0,2853,2854,3,678,339,0,2854,2855,3,926,463,0,2855,677,
1,0,0,0,2856,2857,7,17,0,0,2857,679,1,0,0,0,2858,2859,5,10,0,0,2859,2860,
3,682,341,0,2860,2861,5,20,0,0,2861,681,1,0,0,0,2862,2863,3,684,342,0,2863,
683,1,0,0,0,2864,2869,3,686,343,0,2865,2866,5,5,0,0,2866,2868,3,686,343,
0,2867,2865,1,0,0,0,2868,2871,1,0,0,0,2869,2867,1,0,0,0,2869,2870,1,0,0,
0,2870,685,1,0,0,0,2871,2869,1,0,0,0,2872,2875,3,688,344,0,2873,2875,3,702,
351,0,2874,2872,1,0,0,0,2874,2873,1,0,0,0,2875,687,1,0,0,0,2876,2880,3,690,
345,0,2877,2878,5,293,0,0,2878,2880,3,692,346,0,2879,2876,1,0,0,0,2879,2877,
1,0,0,0,2880,689,1,0,0,0,2881,2883,5,12,0,0,2882,2884,3,694,347,0,2883,2882,
1,0,0,0,2883,2884,1,0,0,0,2884,2886,1,0,0,0,2885,2887,3,696,348,0,2886,2885,
1,0,0,0,2886,2887,1,0,0,0,2887,2888,1,0,0,0,2888,2889,5,22,0,0,2889,691,
1,0,0,0,2890,2892,5,254,0,0,2891,2890,1,0,0,0,2891,2892,1,0,0,0,2892,2893,
1,0,0,0,2893,2895,3,694,347,0,2894,2896,3,696,348,0,2895,2894,1,0,0,0,2895,
2896,1,0,0,0,2896,2899,1,0,0,0,2897,2899,3,696,348,0,2898,2891,1,0,0,0,2898,
2897,1,0,0,0,2899,693,1,0,0,0,2900,2901,3,124,62,0,2901,695,1,0,0,0,2902,
2908,3,698,349,0,2903,2908,3,700,350,0,2904,2905,3,698,349,0,2905,2906,3,
700,350,0,2906,2908,1,0,0,0,2907,2902,1,0,0,0,2907,2903,1,0,0,0,2907,2904,
1,0,0,0,2908,697,1,0,0,0,2909,2910,3,766,383,0,2910,699,1,0,0,0,2911,2912,
3,768,384,0,2912,701,1,0,0,0,2913,2920,3,704,352,0,2914,2916,3,746,373,0,
2915,2914,1,0,0,0,2915,2916,1,0,0,0,2916,2917,1,0,0,0,2917,2918,5,291,0,
0,2918,2920,3,706,353,0,2919,2913,1,0,0,0,2919,2915,1,0,0,0,2920,703,1,0,
0,0,2921,2924,3,716,358,0,2922,2924,3,732,366,0,2923,2921,1,0,0,0,2923,2922,
1,0,0,0,2924,705,1,0,0,0,2925,2927,5,254,0,0,2926,2925,1,0,0,0,2926,2927,
1,0,0,0,2927,2928,1,0,0,0,2928,2932,3,708,354,0,2929,2930,3,710,355,0,2930,
2931,3,748,374,0,2931,2933,1,0,0,0,2932,2929,1,0,0,0,2932,2933,1,0,0,0,2933,
2938,1,0,0,0,2934,2935,3,710,355,0,2935,2936,3,748,374,0,2936,2938,1,0,0,
0,2937,2926,1,0,0,0,2937,2934,1,0,0,0,2938,707,1,0,0,0,2939,2940,3,124,62,
0,2940,709,1,0,0,0,2941,2947,3,712,356,0,2942,2947,3,714,357,0,2943,2944,
3,712,356,0,2944,2945,3,714,357,0,2945,2947,1,0,0,0,2946,2941,1,0,0,0,2946,
2942,1,0,0,0,2946,2943,1,0,0,0,2947,711,1,0,0,0,2948,2949,3,766,383,0,2949,
713,1,0,0,0,2950,2951,3,768,384,0,2951,715,1,0,0,0,2952,2956,3,718,359,0,
2953,2956,3,720,360,0,2954,2956,3,722,361,0,2955,2952,1,0,0,0,2955,2953,
1,0,0,0,2955,2954,1,0,0,0,2956,717,1,0,0,0,2957,2958,3,742,371,0,2958,2959,
3,724,362,0,2959,2960,3,744,372,0,2960,719,1,0,0,0,2961,2962,3,744,372,0,
2962,2963,3,726,363,0,2963,2964,3,742,371,0,2964,721,1,0,0,0,2965,2966,3,
742,371,0,2966,2967,3,728,364,0,2967,2968,3,744,372,0,2968,723,1,0,0,0,2969,
2970,5,14,0,0,2970,2971,5,11,0,0,2971,2972,3,730,365,0,2972,2973,5,21,0,
0,2973,2974,5,309,0,0,2974,725,1,0,0,0,2975,2976,5,13,0,0,2976,2977,5,14,
0,0,2977,2978,5,11,0,0,2978,2979,3,730,365,0,2979,2980,5,21,0,0,2980,2981,
5,14,0,0,2981,727,1,0,0,0,2982,2983,5,25,0,0,2983,2984,5,11,0,0,2984,2985,
3,730,365,0,2985,2986,5,21,0,0,2986,2987,5,25,0,0,2987,729,1,0,0,0,2988,
2990,3,708,354,0,2989,2988,1,0,0,0,2989,2990,1,0,0,0,2990,2992,1,0,0,0,2991,
2993,3,710,355,0,2992,2991,1,0,0,0,2992,2993,1,0,0,0,2993,731,1,0,0,0,2994,
2998,3,734,367,0,2995,2998,3,736,368,0,2996,2998,3,738,369,0,2997,2994,1,
0,0,0,2997,2995,1,0,0,0,2997,2996,1,0,0,0,2998,733,1,0,0,0,2999,3000,3,742,
371,0,3000,3001,5,309,0,0,3001,3002,3,744,372,0,3002,735,1,0,0,0,3003,3004,
3,744,372,0,3004,3005,5,13,0,0,3005,3006,5,14,0,0,3006,3007,3,742,371,0,
3007,737,1,0,0,0,3008,3009,3,742,371,0,3009,3010,5,25,0,0,3010,3011,3,744,
372,0,3011,739,1,0,0,0,3012,3015,3,742,371,0,3013,3015,3,744,372,0,3014,
3012,1,0,0,0,3014,3013,1,0,0,0,3015,741,1,0,0,0,3016,3017,5,12,0,0,3017,
3018,3,762,381,0,3018,3019,5,22,0,0,3019,3026,1,0,0,0,3020,3022,5,12,0,0,
3021,3023,3,696,348,0,3022,3021,1,0,0,0,3022,3023,1,0,0,0,3023,3024,1,0,
0,0,3024,3026,5,22,0,0,3025,3016,1,0,0,0,3025,3020,1,0,0,0,3026,743,1,0,
0,0,3027,3028,5,12,0,0,3028,3029,3,764,382,0,3029,3030,5,22,0,0,3030,3037,
1,0,0,0,3031,3033,5,12,0,0,3032,3034,3,696,348,0,3033,3032,1,0,0,0,3033,
3034,1,0,0,0,3034,3035,1,0,0,0,3035,3037,5,22,0,0,3036,3027,1,0,0,0,3036,
3031,1,0,0,0,3037,745,1,0,0,0,3038,3039,7,18,0,0,3039,747,1,0,0,0,3040,3041,
5,67,0,0,3041,3042,3,750,375,0,3042,749,1,0,0,0,3043,3048,3,752,376,0,3044,
3048,3,754,377,0,3045,3048,3,756,378,0,3046,3048,3,732,366,0,3047,3043,1,
0,0,0,3047,3044,1,0,0,0,3047,3045,1,0,0,0,3047,3046,1,0,0,0,3048,751,1,0,
0,0,3049,3050,5,12,0,0,3050,3051,3,762,381,0,3051,3052,3,758,379,0,3052,
3053,3,764,382,0,3053,3054,5,22,0,0,3054,753,1,0,0,0,3055,3056,5,12,0,0,
3056,3057,3,764,382,0,3057,3058,5,13,0,0,3058,3059,5,14,0,0,3059,3060,3,
762,381,0,3060,3061,5,22,0,0,3061,755,1,0,0,0,3062,3063,5,12,0,0,3063,3064,
3,762,381,0,3064,3065,3,760,380,0,3065,3066,3,764,382,0,3066,3067,5,22,0,
0,3067,757,1,0,0,0,3068,3069,7,19,0,0,3069,759,1,0,0,0,3070,3071,7,20,0,
0,3071,761,1,0,0,0,3072,3073,3,124,62,0,3073,763,1,0,0,0,3074,3075,3,124,
62,0,3075,765,1,0,0,0,3076,3077,5,151,0,0,3077,3084,3,132,66,0,3078,3079,
5,153,0,0,3079,3084,3,276,138,0,3080,3081,3,498,249,0,3081,3082,3,276,138,
0,3082,3084,1,0,0,0,3083,3076,1,0,0,0,3083,3078,1,0,0,0,3083,3080,1,0,0,
0,3084,767,1,0,0,0,3085,3087,5,10,0,0,3086,3088,3,770,385,0,3087,3086,1,
0,0,0,3087,3088,1,0,0,0,3088,3089,1,0,0,0,3089,3090,5,20,0,0,3090,769,1,
0,0,0,3091,3096,3,772,386,0,3092,3093,5,5,0,0,3093,3095,3,772,386,0,3094,
3092,1,0,0,0,3095,3098,1,0,0,0,3096,3094,1,0,0,0,3096,3097,1,0,0,0,3097,
771,1,0,0,0,3098,3096,1,0,0,0,3099,3101,3,136,68,0,3100,3102,3,780,390,0,
3101,3100,1,0,0,0,3101,3102,1,0,0,0,3102,3103,1,0,0,0,3103,3104,3,774,387,
0,3104,773,1,0,0,0,3105,3106,3,778,389,0,3106,775,1,0,0,0,3107,3109,5,46,
0,0,3108,3107,1,0,0,0,3108,3109,1,0,0,0,3109,3110,1,0,0,0,3110,3111,5,240,
0,0,3111,3112,3,860,430,0,3112,777,1,0,0,0,3113,3114,6,389,-1,0,3114,3174,
3,782,391,0,3115,3174,3,864,432,0,3116,3117,3,856,428,0,3117,3118,5,13,0,
0,3118,3119,3,778,389,0,3119,3124,5,9,0,0,3120,3121,5,11,0,0,3121,3122,3,
792,396,0,3122,3123,5,21,0,0,3123,3125,1,0,0,0,3124,3120,1,0,0,0,3124,3125,
1,0,0,0,3125,3127,1,0,0,0,3126,3128,3,866,433,0,3127,3126,1,0,0,0,3127,3128,
1,0,0,0,3128,3174,1,0,0,0,3129,3131,5,34,0,0,3130,3129,1,0,0,0,3130,3131,
1,0,0,0,3131,3132,1,0,0,0,3132,3134,5,212,0,0,3133,3135,3,866,433,0,3134,
3133,1,0,0,0,3134,3135,1,0,0,0,3135,3174,1,0,0,0,3136,3138,5,212,0,0,3137,
3136,1,0,0,0,3137,3138,1,0,0,0,3138,3139,1,0,0,0,3139,3141,3,860,430,0,3140,
3142,3,866,433,0,3141,3140,1,0,0,0,3141,3142,1,0,0,0,3142,3174,1,0,0,0,3143,
3145,5,34,0,0,3144,3146,5,271,0,0,3145,3144,1,0,0,0,3145,3146,1,0,0,0,3146,
3148,1,0,0,0,3147,3149,3,866,433,0,3148,3147,1,0,0,0,3148,3149,1,0,0,0,3149,
3174,1,0,0,0,3150,3152,5,34,0,0,3151,3150,1,0,0,0,3151,3152,1,0,0,0,3152,
3153,1,0,0,0,3153,3154,5,207,0,0,3154,3156,5,271,0,0,3155,3157,3,866,433,
0,3156,3155,1,0,0,0,3156,3157,1,0,0,0,3157,3174,1,0,0,0,3158,3160,5,34,0,
0,3159,3161,5,271,0,0,3160,3159,1,0,0,0,3160,3161,1,0,0,0,3161,3162,1,0,
0,0,3162,3163,5,13,0,0,3163,3168,3,778,389,0,3164,3165,5,27,0,0,3165,3167,
3,778,389,0,3166,3164,1,0,0,0,3167,3170,1,0,0,0,3168,3166,1,0,0,0,3168,3169,
1,0,0,0,3169,3171,1,0,0,0,3170,3168,1,0,0,0,3171,3172,5,9,0,0,3172,3174,
1,0,0,0,3173,3113,1,0,0,0,3173,3115,1,0,0,0,3173,3116,1,0,0,0,3173,3130,
1,0,0,0,3173,3137,1,0,0,0,3173,3143,1,0,0,0,3173,3151,1,0,0,0,3173,3158,
1,0,0,0,3174,3195,1,0,0,0,3175,3176,10,7,0,0,3176,3181,3,856,428,0,3177,
3178,5,11,0,0,3178,3179,3,792,396,0,3179,3180,5,21,0,0,3180,3182,1,0,0,0,
3181,3177,1,0,0,0,3181,3182,1,0,0,0,3182,3184,1,0,0,0,3183,3185,3,866,433,
0,3184,3183,1,0,0,0,3184,3185,1,0,0,0,3185,3194,1,0,0,0,3186,3189,10,1,0,
0,3187,3188,5,27,0,0,3188,3190,3,778,389,0,3189,3187,1,0,0,0,3190,3191,1,
0,0,0,3191,3189,1,0,0,0,3191,3192,1,0,0,0,3192,3194,1,0,0,0,3193,3175,1,
0,0,0,3193,3186,1,0,0,0,3194,3197,1,0,0,0,3195,3193,1,0,0,0,3195,3196,1,
0,0,0,3196,779,1,0,0,0,3197,3195,1,0,0,0,3198,3199,7,21,0,0,3199,781,1,0,
0,0,3200,3207,3,784,392,0,3201,3207,3,786,393,0,3202,3207,3,788,394,0,3203,
3207,3,796,398,0,3204,3207,3,816,408,0,3205,3207,3,834,417,0,3206,3200,1,
0,0,0,3206,3201,1,0,0,0,3206,3202,1,0,0,0,3206,3203,1,0,0,0,3206,3204,1,
0,0,0,3206,3205,1,0,0,0,3207,783,1,0,0,0,3208,3210,7,22,0,0,3209,3211,3,
866,433,0,3210,3209,1,0,0,0,3210,3211,1,0,0,0,3211,785,1,0,0,0,3212,3217,
7,23,0,0,3213,3214,5,12,0,0,3214,3215,3,792,396,0,3215,3216,5,22,0,0,3216,
3218,1,0,0,0,3217,3213,1,0,0,0,3217,3218,1,0,0,0,3218,3220,1,0,0,0,3219,
3221,3,866,433,0,3220,3219,1,0,0,0,3220,3221,1,0,0,0,3221,787,1,0,0,0,3222,
3232,5,54,0,0,3223,3227,5,12,0,0,3224,3225,3,790,395,0,3225,3226,5,5,0,0,
3226,3228,1,0,0,0,3227,3224,1,0,0,0,3227,3228,1,0,0,0,3228,3229,1,0,0,0,
3229,3230,3,792,396,0,3230,3231,5,22,0,0,3231,3233,1,0,0,0,3232,3223,1,0,
0,0,3232,3233,1,0,0,0,3233,3235,1,0,0,0,3234,3236,3,866,433,0,3235,3234,
1,0,0,0,3235,3236,1,0,0,0,3236,3258,1,0,0,0,3237,3242,5,45,0,0,3238,3239,
5,12,0,0,3239,3240,3,794,397,0,3240,3241,5,22,0,0,3241,3243,1,0,0,0,3242,
3238,1,0,0,0,3242,3243,1,0,0,0,3243,3245,1,0,0,0,3244,3246,3,866,433,0,3245,
3244,1,0,0,0,3245,3246,1,0,0,0,3246,3258,1,0,0,0,3247,3252,5,272,0,0,3248,
3249,5,12,0,0,3249,3250,3,792,396,0,3250,3251,5,22,0,0,3251,3253,1,0,0,0,
3252,3248,1,0,0,0,3252,3253,1,0,0,0,3253,3255,1,0,0,0,3254,3256,3,866,433,
0,3255,3254,1,0,0,0,3255,3256,1,0,0,0,3256,3258,1,0,0,0,3257,3222,1,0,0,
0,3257,3237,1,0,0,0,3257,3247,1,0,0,0,3258,789,1,0,0,0,3259,3260,5,328,0,
0,3260,791,1,0,0,0,3261,3262,5,328,0,0,3262,793,1,0,0,0,3263,3264,5,328,
0,0,3264,795,1,0,0,0,3265,3268,3,798,399,0,3266,3268,3,814,407,0,3267,3265,
1,0,0,0,3267,3266,1,0,0,0,3268,797,1,0,0,0,3269,3272,3,800,400,0,3270,3272,
3,808,404,0,3271,3269,1,0,0,0,3271,3270,1,0,0,0,3272,799,1,0,0,0,3273,3276,
3,802,401,0,3274,3276,3,804,402,0,3275,3273,1,0,0,0,3275,3274,1,0,0,0,3276,
801,1,0,0,0,3277,3279,5,135,0,0,3278,3280,3,866,433,0,3279,3278,1,0,0,0,
3279,3280,1,0,0,0,3280,3324,1,0,0,0,3281,3283,5,136,0,0,3282,3284,3,866,
433,0,3283,3282,1,0,0,0,3283,3284,1,0,0,0,3284,3324,1,0,0,0,3285,3287,5,
137,0,0,3286,3288,3,866,433,0,3287,3286,1,0,0,0,3287,3288,1,0,0,0,3288,3324,
1,0,0,0,3289,3291,5,138,0,0,3290,3292,3,866,433,0,3291,3290,1,0,0,0,3291,
3292,1,0,0,0,3292,3324,1,0,0,0,3293,3295,5,139,0,0,3294,3296,3,866,433,0,
3295,3294,1,0,0,0,3295,3296,1,0,0,0,3296,3324,1,0,0,0,3297,3299,5,140,0,
0,3298,3300,3,866,433,0,3299,3298,1,0,0,0,3299,3300,1,0,0,0,3300,3324,1,
0,0,0,3301,3303,5,232,0,0,3302,3304,3,866,433,0,3303,3302,1,0,0,0,3303,3304,
1,0,0,0,3304,3324,1,0,0,0,3305,3310,5,134,0,0,3306,3307,5,12,0,0,3307,3308,
3,810,405,0,3308,3309,5,22,0,0,3309,3311,1,0,0,0,3310,3306,1,0,0,0,3310,
3311,1,0,0,0,3311,3313,1,0,0,0,3312,3314,3,866,433,0,3313,3312,1,0,0,0,3313,
3314,1,0,0,0,3314,3324,1,0,0,0,3315,3324,5,44,0,0,3316,3318,5,227,0,0,3317,
3316,1,0,0,0,3317,3318,1,0,0,0,3318,3319,1,0,0,0,3319,3321,3,806,403,0,3320,
3322,3,866,433,0,3321,3320,1,0,0,0,3321,3322,1,0,0,0,3322,3324,1,0,0,0,3323,
3277,1,0,0,0,3323,3281,1,0,0,0,3323,3285,1,0,0,0,3323,3289,1,0,0,0,3323,
3293,1,0,0,0,3323,3297,1,0,0,0,3323,3301,1,0,0,0,3323,3305,1,0,0,0,3323,
3315,1,0,0,0,3323,3317,1,0,0,0,3324,803,1,0,0,0,3325,3327,5,263,0,0,3326,
3328,3,866,433,0,3327,3326,1,0,0,0,3327,3328,1,0,0,0,3328,3373,1,0,0,0,3329,
3331,5,259,0,0,3330,3332,3,866,433,0,3331,3330,1,0,0,0,3331,3332,1,0,0,0,
3332,3373,1,0,0,0,3333,3335,5,261,0,0,3334,3336,3,866,433,0,3335,3334,1,
0,0,0,3335,3336,1,0,0,0,3336,3373,1,0,0,0,3337,3339,5,262,0,0,3338,3340,
3,866,433,0,3339,3338,1,0,0,0,3339,3340,1,0,0,0,3340,3373,1,0,0,0,3341,3343,
5,258,0,0,3342,3344,3,866,433,0,3343,3342,1,0,0,0,3343,3344,1,0,0,0,3344,
3373,1,0,0,0,3345,3347,5,260,0,0,3346,3348,3,866,433,0,3347,3346,1,0,0,0,
3347,3348,1,0,0,0,3348,3373,1,0,0,0,3349,3351,5,270,0,0,3350,3352,3,866,
433,0,3351,3350,1,0,0,0,3351,3352,1,0,0,0,3352,3373,1,0,0,0,3353,3358,5,
257,0,0,3354,3355,5,12,0,0,3355,3356,3,810,405,0,3356,3357,5,22,0,0,3357,
3359,1,0,0,0,3358,3354,1,0,0,0,3358,3359,1,0,0,0,3359,3361,1,0,0,0,3360,
3362,3,866,433,0,3361,3360,1,0,0,0,3361,3362,1,0,0,0,3362,3373,1,0,0,0,3363,
3365,5,256,0,0,3364,3366,3,866,433,0,3365,3364,1,0,0,0,3365,3366,1,0,0,0,
3366,3373,1,0,0,0,3367,3368,5,267,0,0,3368,3370,3,806,403,0,3369,3371,3,
866,433,0,3370,3369,1,0,0,0,3370,3371,1,0,0,0,3371,3373,1,0,0,0,3372,3325,
1,0,0,0,3372,3329,1,0,0,0,3372,3333,1,0,0,0,3372,3337,1,0,0,0,3372,3341,
1,0,0,0,3372,3345,1,0,0,0,3372,3349,1,0,0,0,3372,3353,1,0,0,0,3372,3363,
1,0,0,0,3372,3367,1,0,0,0,3373,805,1,0,0,0,3374,3376,5,142,0,0,3375,3377,
3,866,433,0,3376,3375,1,0,0,0,3376,3377,1,0,0,0,3377,3419,1,0,0,0,3378,3380,
5,143,0,0,3379,3381,3,866,433,0,3380,3379,1,0,0,0,3380,3381,1,0,0,0,3381,
3419,1,0,0,0,3382,3384,5,144,0,0,3383,3385,3,866,433,0,3384,3383,1,0,0,0,
3384,3385,1,0,0,0,3385,3419,1,0,0,0,3386,3388,5,145,0,0,3387,3389,3,866,
433,0,3388,3387,1,0,0,0,3388,3389,1,0,0,0,3389,3419,1,0,0,0,3390,3392,5,
146,0,0,3391,3393,3,866,433,0,3392,3391,1,0,0,0,3392,3393,1,0,0,0,3393,3419,
1,0,0,0,3394,3396,5,147,0,0,3395,3397,3,866,433,0,3396,3395,1,0,0,0,3396,
3397,1,0,0,0,3397,3419,1,0,0,0,3398,3399,5,231,0,0,3399,3401,5,141,0,0,3400,
3402,3,866,433,0,3401,3400,1,0,0,0,3401,3402,1,0,0,0,3402,3419,1,0,0,0,3403,
3408,5,141,0,0,3404,3405,5,12,0,0,3405,3406,3,810,405,0,3406,3407,5,22,0,
0,3407,3409,1,0,0,0,3408,3404,1,0,0,0,3408,3409,1,0,0,0,3409,3411,1,0,0,
0,3410,3412,3,866,433,0,3411,3410,1,0,0,0,3411,3412,1,0,0,0,3412,3419,1,
0,0,0,3413,3414,5,43,0,0,3414,3416,5,141,0,0,3415,3417,3,866,433,0,3416,
3415,1,0,0,0,3416,3417,1,0,0,0,3417,3419,1,0,0,0,3418,3374,1,0,0,0,3418,
3378,1,0,0,0,3418,3382,1,0,0,0,3418,3386,1,0,0,0,3418,3390,1,0,0,0,3418,
3394,1,0,0,0,3418,3398,1,0,0,0,3418,3403,1,0,0,0,3418,3413,1,0,0,0,3419,
807,1,0,0,0,3420,3431,7,24,0,0,3421,3422,5,12,0,0,3422,3425,3,810,405,0,
3423,3424,5,5,0,0,3424,3426,3,812,406,0,3425,3423,1,0,0,0,3425,3426,1,0,
0,0,3426,3427,1,0,0,0,3427,3429,5,22,0,0,3428,3430,3,866,433,0,3429,3428,
1,0,0,0,3429,3430,1,0,0,0,3430,3432,1,0,0,0,3431,3421,1,0,0,0,3431,3432,
1,0,0,0,3432,809,1,0,0,0,3433,3434,5,328,0,0,3434,811,1,0,0,0,3435,3436,
5,328,0,0,3436,813,1,0,0,0,3437,3439,5,112,0,0,3438,3440,3,866,433,0,3439,
3438,1,0,0,0,3439,3440,1,0,0,0,3440,3483,1,0,0,0,3441,3443,5,114,0,0,3442,
3444,3,866,433,0,3443,3442,1,0,0,0,3443,3444,1,0,0,0,3444,3483,1,0,0,0,3445,
3447,5,115,0,0,3446,3448,3,866,433,0,3447,3446,1,0,0,0,3447,3448,1,0,0,0,
3448,3483,1,0,0,0,3449,3451,5,111,0,0,3450,3452,3,866,433,0,3451,3450,1,
0,0,0,3451,3452,1,0,0,0,3452,3483,1,0,0,0,3453,3455,5,113,0,0,3454,3456,
3,866,433,0,3455,3454,1,0,0,0,3455,3456,1,0,0,0,3456,3483,1,0,0,0,3457,3466,
5,110,0,0,3458,3459,5,12,0,0,3459,3462,3,810,405,0,3460,3461,5,5,0,0,3461,
3463,3,812,406,0,3462,3460,1,0,0,0,3462,3463,1,0,0,0,3463,3464,1,0,0,0,3464,
3465,5,22,0,0,3465,3467,1,0,0,0,3466,3458,1,0,0,0,3466,3467,1,0,0,0,3467,
3469,1,0,0,0,3468,3470,3,866,433,0,3469,3468,1,0,0,0,3469,3470,1,0,0,0,3470,
3483,1,0,0,0,3471,3473,5,211,0,0,3472,3474,3,866,433,0,3473,3472,1,0,0,0,
3473,3474,1,0,0,0,3474,3483,1,0,0,0,3475,3477,5,94,0,0,3476,3478,5,206,0,
0,3477,3476,1,0,0,0,3477,3478,1,0,0,0,3478,3480,1,0,0,0,3479,3481,3,866,
433,0,3480,3479,1,0,0,0,3480,3481,1,0,0,0,3481,3483,1,0,0,0,3482,3437,1,
0,0,0,3482,3441,1,0,0,0,3482,3445,1,0,0,0,3482,3449,1,0,0,0,3482,3453,1,
0,0,0,3482,3457,1,0,0,0,3482,3471,1,0,0,0,3482,3475,1,0,0,0,3483,815,1,0,
0,0,3484,3487,3,818,409,0,3485,3487,3,820,410,0,3486,3484,1,0,0,0,3486,3485,
1,0,0,0,3487,817,1,0,0,0,3488,3494,3,822,411,0,3489,3494,3,824,412,0,3490,
3494,3,826,413,0,3491,3494,3,828,414,0,3492,3494,3,830,415,0,3493,3488,1,
0,0,0,3493,3489,1,0,0,0,3493,3490,1,0,0,0,3493,3491,1,0,0,0,3493,3492,1,
0,0,0,3494,819,1,0,0,0,3495,3496,3,832,416,0,3496,821,1,0,0,0,3497,3498,
5,284,0,0,3498,3500,5,82,0,0,3499,3501,3,866,433,0,3500,3499,1,0,0,0,3500,
3501,1,0,0,0,3501,3509,1,0,0,0,3502,3503,5,246,0,0,3503,3504,5,278,0,0,3504,
3506,5,247,0,0,3505,3507,3,866,433,0,3506,3505,1,0,0,0,3506,3507,1,0,0,0,
3507,3509,1,0,0,0,3508,3497,1,0,0,0,3508,3502,1,0,0,0,3509,823,1,0,0,0,3510,
3511,5,162,0,0,3511,3513,5,82,0,0,3512,3514,3,866,433,0,3513,3512,1,0,0,
0,3513,3514,1,0,0,0,3514,3524,1,0,0,0,3515,3518,5,246,0,0,3516,3517,5,279,
0,0,3517,3519,5,247,0,0,3518,3516,1,0,0,0,3518,3519,1,0,0,0,3519,3521,1,
0,0,0,3520,3522,3,866,433,0,3521,3520,1,0,0,0,3521,3522,1,0,0,0,3522,3524,
1,0,0,0,3523,3510,1,0,0,0,3523,3515,1,0,0,0,3524,825,1,0,0,0,3525,3527,5,
81,0,0,3526,3528,3,866,433,0,3527,3526,1,0,0,0,3527,3528,1,0,0,0,3528,827,
1,0,0,0,3529,3530,5,284,0,0,3530,3532,5,245,0,0,3531,3533,3,866,433,0,3532,
3531,1,0,0,0,3532,3533,1,0,0,0,3533,3541,1,0,0,0,3534,3535,5,245,0,0,3535,
3536,5,278,0,0,3536,3538,5,247,0,0,3537,3539,3,866,433,0,3538,3537,1,0,0,
0,3538,3539,1,0,0,0,3539,3541,1,0,0,0,3540,3529,1,0,0,0,3540,3534,1,0,0,
0,3541,829,1,0,0,0,3542,3543,5,162,0,0,3543,3545,5,245,0,0,3544,3546,3,866,
433,0,3545,3544,1,0,0,0,3545,3546,1,0,0,0,3546,3554,1,0,0,0,3547,3548,5,
245,0,0,3548,3549,5,279,0,0,3549,3551,5,247,0,0,3550,3552,3,866,433,0,3551,
3550,1,0,0,0,3551,3552,1,0,0,0,3552,3554,1,0,0,0,3553,3542,1,0,0,0,3553,
3547,1,0,0,0,3554,831,1,0,0,0,3555,3557,5,96,0,0,3556,3558,3,866,433,0,3557,
3556,1,0,0,0,3557,3558,1,0,0,0,3558,833,1,0,0,0,3559,3564,3,836,418,0,3560,
3564,3,842,421,0,3561,3564,3,844,422,0,3562,3564,3,850,425,0,3563,3559,1,
0,0,0,3563,3560,1,0,0,0,3563,3561,1,0,0,0,3563,3562,1,0,0,0,3564,835,1,0,
0,0,3565,3568,3,840,420,0,3566,3568,3,838,419,0,3567,3565,1,0,0,0,3567,3566,
1,0,0,0,3568,837,1,0,0,0,3569,3571,5,207,0,0,3570,3569,1,0,0,0,3570,3571,
1,0,0,0,3571,3572,1,0,0,0,3572,3573,5,119,0,0,3573,3575,3,680,340,0,3574,
3576,3,866,433,0,3575,3574,1,0,0,0,3575,3576,1,0,0,0,3576,839,1,0,0,0,3577,
3579,5,34,0,0,3578,3580,5,207,0,0,3579,3578,1,0,0,0,3579,3580,1,0,0,0,3580,
3581,1,0,0,0,3581,3583,5,119,0,0,3582,3584,3,866,433,0,3583,3582,1,0,0,0,
3583,3584,1,0,0,0,3584,841,1,0,0,0,3585,3587,3,776,388,0,3586,3588,3,866,
433,0,3587,3586,1,0,0,0,3587,3588,1,0,0,0,3588,843,1,0,0,0,3589,3592,3,848,
424,0,3590,3592,3,846,423,0,3591,3589,1,0,0,0,3591,3590,1,0,0,0,3592,845,
1,0,0,0,3593,3595,3,688,344,0,3594,3596,3,866,433,0,3595,3594,1,0,0,0,3595,
3596,1,0,0,0,3596,847,1,0,0,0,3597,3599,5,34,0,0,3598,3597,1,0,0,0,3598,
3599,1,0,0,0,3599,3600,1,0,0,0,3600,3602,5,293,0,0,3601,3603,3,866,433,0,
3602,3601,1,0,0,0,3602,3603,1,0,0,0,3603,849,1,0,0,0,3604,3607,3,854,427,
0,3605,3607,3,852,426,0,3606,3604,1,0,0,0,3606,3605,1,0,0,0,3607,851,1,0,
0,0,3608,3610,3,702,351,0,3609,3611,3,866,433,0,3610,3609,1,0,0,0,3610,3611,
1,0,0,0,3611,853,1,0,0,0,3612,3614,5,34,0,0,3613,3612,1,0,0,0,3613,3614,
1,0,0,0,3614,3615,1,0,0,0,3615,3617,5,291,0,0,3616,3618,3,866,433,0,3617,
3616,1,0,0,0,3617,3618,1,0,0,0,3618,855,1,0,0,0,3619,3621,5,120,0,0,3620,
3619,1,0,0,0,3620,3621,1,0,0,0,3621,3622,1,0,0,0,3622,3623,3,858,429,0,3623,
857,1,0,0,0,3624,3625,7,25,0,0,3625,859,1,0,0,0,3626,3628,5,10,0,0,3627,
3629,3,862,431,0,3628,3627,1,0,0,0,3628,3629,1,0,0,0,3629,3630,1,0,0,0,3630,
3631,5,20,0,0,3631,861,1,0,0,0,3632,3637,3,868,434,0,3633,3634,5,5,0,0,3634,
3636,3,868,434,0,3635,3633,1,0,0,0,3636,3639,1,0,0,0,3637,3635,1,0,0,0,3637,
3638,1,0,0,0,3638,863,1,0,0,0,3639,3637,1,0,0,0,3640,3642,5,200,0,0,3641,
3643,3,866,433,0,3642,3641,1,0,0,0,3642,3643,1,0,0,0,3643,865,1,0,0,0,3644,
3645,5,183,0,0,3645,3646,5,184,0,0,3646,867,1,0,0,0,3647,3649,3,138,69,0,
3648,3650,3,780,390,0,3649,3648,1,0,0,0,3649,3650,1,0,0,0,3650,3651,1,0,
0,0,3651,3652,3,778,389,0,3652,869,1,0,0,0,3653,3657,3,872,436,0,3654,3657,
3,876,438,0,3655,3657,3,906,453,0,3656,3653,1,0,0,0,3656,3654,1,0,0,0,3656,
3655,1,0,0,0,3657,871,1,0,0,0,3658,3663,5,24,0,0,3659,3660,3,880,440,0,3660,
3661,3,116,58,0,3661,3663,1,0,0,0,3662,3658,1,0,0,0,3662,3659,1,0,0,0,3663,
873,1,0,0,0,3664,3665,3,880,440,0,3665,3666,3,116,58,0,3666,875,1,0,0,0,
3667,3672,3,878,439,0,3668,3669,3,882,441,0,3669,3670,3,116,58,0,3670,3672,
1,0,0,0,3671,3667,1,0,0,0,3671,3668,1,0,0,0,3672,877,1,0,0,0,3673,3674,7,
26,0,0,3674,879,1,0,0,0,3675,3677,5,24,0,0,3676,3678,3,884,442,0,3677,3676,
1,0,0,0,3677,3678,1,0,0,0,3678,881,1,0,0,0,3679,3691,5,301,0,0,3680,3681,
5,24,0,0,3681,3683,5,301,0,0,3682,3680,1,0,0,0,3683,3686,1,0,0,0,3684,3682,
1,0,0,0,3684,3685,1,0,0,0,3685,3687,1,0,0,0,3686,3684,1,0,0,0,3687,3689,
5,24,0,0,3688,3690,3,884,442,0,3689,3688,1,0,0,0,3689,3690,1,0,0,0,3690,
3692,1,0,0,0,3691,3684,1,0,0,0,3691,3692,1,0,0,0,3692,883,1,0,0,0,3693,3694,
3,114,57,0,3694,3695,5,24,0,0,3695,3697,1,0,0,0,3696,3693,1,0,0,0,3697,3698,
1,0,0,0,3698,3696,1,0,0,0,3698,3699,1,0,0,0,3699,885,1,0,0,0,3700,3701,3,
904,452,0,3701,3702,3,118,59,0,3702,3707,1,0,0,0,3703,3707,3,120,60,0,3704,
3707,3,890,445,0,3705,3707,3,906,453,0,3706,3700,1,0,0,0,3706,3703,1,0,0,
0,3706,3704,1,0,0,0,3706,3705,1,0,0,0,3707,887,1,0,0,0,3708,3710,3,904,452,
0,3709,3708,1,0,0,0,3709,3710,1,0,0,0,3710,3711,1,0,0,0,3711,3712,3,118,
59,0,3712,889,1,0,0,0,3713,3714,7,27,0,0,3714,891,1,0,0,0,3715,3718,3,894,
447,0,3716,3718,3,906,453,0,3717,3715,1,0,0,0,3717,3716,1,0,0,0,3718,893,
1,0,0,0,3719,3721,3,904,452,0,3720,3719,1,0,0,0,3720,3721,1,0,0,0,3721,3722,
1,0,0,0,3722,3723,3,122,61,0,3723,895,1,0,0,0,3724,3725,3,904,452,0,3725,
3726,3,126,63,0,3726,3730,1,0,0,0,3727,3730,3,128,64,0,3728,3730,3,906,453,
0,3729,3724,1,0,0,0,3729,3727,1,0,0,0,3729,3728,1,0,0,0,3730,897,1,0,0,0,
3731,3733,3,904,452,0,3732,3731,1,0,0,0,3732,3733,1,0,0,0,3733,3734,1,0,
0,0,3734,3735,3,126,63,0,3735,899,1,0,0,0,3736,3739,3,902,451,0,3737,3739,
3,906,453,0,3738,3736,1,0,0,0,3738,3737,1,0,0,0,3739,901,1,0,0,0,3740,3742,
3,904,452,0,3741,3740,1,0,0,0,3741,3742,1,0,0,0,3742,3743,1,0,0,0,3743,3744,
3,130,65,0,3744,903,1,0,0,0,3745,3747,3,870,435,0,3746,3748,5,24,0,0,3747,
3746,1,0,0,0,3747,3748,1,0,0,0,3748,3754,1,0,0,0,3749,3750,3,110,55,0,3750,
3751,5,16,0,0,3751,3753,1,0,0,0,3752,3749,1,0,0,0,3753,3756,1,0,0,0,3754,
3752,1,0,0,0,3754,3755,1,0,0,0,3755,3765,1,0,0,0,3756,3754,1,0,0,0,3757,
3758,3,110,55,0,3758,3759,5,16,0,0,3759,3761,1,0,0,0,3760,3757,1,0,0,0,3761,
3762,1,0,0,0,3762,3760,1,0,0,0,3762,3763,1,0,0,0,3763,3765,1,0,0,0,3764,
3745,1,0,0,0,3764,3760,1,0,0,0,3765,905,1,0,0,0,3766,3767,3,412,206,0,3767,
907,1,0,0,0,3768,3769,5,128,0,0,3769,909,1,0,0,0,3770,3771,3,912,456,0,3771,
3772,3,932,466,0,3772,911,1,0,0,0,3773,3774,7,28,0,0,3774,913,1,0,0,0,3775,
3777,5,149,0,0,3776,3778,5,183,0,0,3777,3776,1,0,0,0,3777,3778,1,0,0,0,3778,
3779,1,0,0,0,3779,3780,5,184,0,0,3780,915,1,0,0,0,3781,3783,5,149,0,0,3782,
3784,5,183,0,0,3783,3782,1,0,0,0,3783,3784,1,0,0,0,3784,3786,1,0,0,0,3785,
3787,3,1008,504,0,3786,3785,1,0,0,0,3786,3787,1,0,0,0,3787,3788,1,0,0,0,
3788,3789,5,182,0,0,3789,917,1,0,0,0,3790,3792,5,149,0,0,3791,3793,5,183,
0,0,3792,3791,1,0,0,0,3792,3793,1,0,0,0,3793,3794,1,0,0,0,3794,3795,5,92,
0,0,3795,919,1,0,0,0,3796,3798,5,149,0,0,3797,3799,5,183,0,0,3798,3797,1,
0,0,0,3798,3799,1,0,0,0,3799,3800,1,0,0,0,3800,3803,5,152,0,0,3801,3803,
5,4,0,0,3802,3796,1,0,0,0,3802,3801,1,0,0,0,3803,3804,1,0,0,0,3804,3805,
3,556,278,0,3805,921,1,0,0,0,3806,3808,5,149,0,0,3807,3809,5,183,0,0,3808,
3807,1,0,0,0,3808,3809,1,0,0,0,3809,3810,1,0,0,0,3810,3811,7,29,0,0,3811,
3812,5,188,0,0,3812,3813,3,408,204,0,3813,923,1,0,0,0,3814,3817,3,1018,509,
0,3815,3817,3,928,464,0,3816,3814,1,0,0,0,3816,3815,1,0,0,0,3817,925,1,0,
0,0,3818,3821,3,70,35,0,3819,3821,3,412,206,0,3820,3818,1,0,0,0,3820,3819,
1,0,0,0,3821,927,1,0,0,0,3822,3825,3,412,206,0,3823,3825,3,930,465,0,3824,
3822,1,0,0,0,3824,3823,1,0,0,0,3825,929,1,0,0,0,3826,3827,5,80,0,0,3827,
931,1,0,0,0,3828,3829,6,466,-1,0,3829,3830,5,183,0,0,3830,3833,3,932,466,
5,3831,3833,3,934,467,0,3832,3828,1,0,0,0,3832,3831,1,0,0,0,3833,3845,1,
0,0,0,3834,3835,10,4,0,0,3835,3836,5,33,0,0,3836,3844,3,932,466,5,3837,3838,
10,3,0,0,3838,3839,5,281,0,0,3839,3844,3,932,466,4,3840,3841,10,2,0,0,3841,
3842,5,194,0,0,3842,3844,3,932,466,3,3843,3834,1,0,0,0,3843,3837,1,0,0,0,
3843,3840,1,0,0,0,3844,3847,1,0,0,0,3845,3843,1,0,0,0,3845,3846,1,0,0,0,
3846,933,1,0,0,0,3847,3845,1,0,0,0,3848,3849,6,467,-1,0,3849,3867,5,104,
0,0,3850,3851,5,10,0,0,3851,3852,3,422,211,0,3852,3853,5,20,0,0,3853,3868,
1,0,0,0,3854,3855,5,12,0,0,3855,3856,3,422,211,0,3856,3857,5,22,0,0,3857,
3868,1,0,0,0,3858,3859,5,10,0,0,3859,3860,3,334,167,0,3860,3861,5,20,0,0,
3861,3868,1,0,0,0,3862,3863,5,12,0,0,3863,3864,3,334,167,0,3864,3865,5,22,
0,0,3865,3868,1,0,0,0,3866,3868,3,64,32,0,3867,3850,1,0,0,0,3867,3854,1,
0,0,0,3867,3858,1,0,0,0,3867,3862,1,0,0,0,3867,3866,1,0,0,0,3868,3925,1,
0,0,0,3869,3870,3,408,204,0,3870,3871,3,918,459,0,3871,3925,1,0,0,0,3872,
3873,3,408,204,0,3873,3874,3,920,460,0,3874,3925,1,0,0,0,3875,3876,3,408,
204,0,3876,3877,3,922,461,0,3877,3925,1,0,0,0,3878,3879,5,32,0,0,3879,3880,
5,12,0,0,3880,3883,3,408,204,0,3881,3882,5,5,0,0,3882,3884,3,408,204,0,3883,
3881,1,0,0,0,3884,3885,1,0,0,0,3885,3883,1,0,0,0,3885,3886,1,0,0,0,3886,
3887,1,0,0,0,3887,3888,5,22,0,0,3888,3925,1,0,0,0,3889,3890,5,221,0,0,3890,
3891,5,12,0,0,3891,3894,3,408,204,0,3892,3893,5,5,0,0,3893,3895,3,408,204,
0,3894,3892,1,0,0,0,3895,3896,1,0,0,0,3896,3894,1,0,0,0,3896,3897,1,0,0,
0,3897,3898,1,0,0,0,3898,3899,5,22,0,0,3899,3925,1,0,0,0,3900,3901,5,208,
0,0,3901,3902,5,12,0,0,3902,3903,3,408,204,0,3903,3904,5,5,0,0,3904,3905,
3,136,68,0,3905,3906,5,22,0,0,3906,3925,1,0,0,0,3907,3909,5,207,0,0,3908,
3907,1,0,0,0,3908,3909,1,0,0,0,3909,3910,1,0,0,0,3910,3911,5,119,0,0,3911,
3925,3,198,99,0,3912,3914,5,46,0,0,3913,3912,1,0,0,0,3913,3914,1,0,0,0,3914,
3915,1,0,0,0,3915,3916,5,240,0,0,3916,3925,3,204,102,0,3917,3918,5,157,0,
0,3918,3919,3,342,171,0,3919,3920,5,132,0,0,3920,3921,3,932,466,0,3921,3922,
5,102,0,0,3922,3925,1,0,0,0,3923,3925,3,936,468,0,3924,3848,1,0,0,0,3924,
3869,1,0,0,0,3924,3872,1,0,0,0,3924,3875,1,0,0,0,3924,3878,1,0,0,0,3924,
3889,1,0,0,0,3924,3900,1,0,0,0,3924,3908,1,0,0,0,3924,3913,1,0,0,0,3924,
3917,1,0,0,0,3924,3923,1,0,0,0,3925,3942,1,0,0,0,3926,3927,10,14,0,0,3927,
3928,3,912,456,0,3928,3929,3,934,467,15,3929,3941,1,0,0,0,3930,3931,10,15,
0,0,3931,3933,5,149,0,0,3932,3934,5,183,0,0,3933,3932,1,0,0,0,3933,3934,
1,0,0,0,3934,3935,1,0,0,0,3935,3941,3,938,469,0,3936,3937,10,12,0,0,3937,
3941,3,914,457,0,3938,3939,10,11,0,0,3939,3941,3,916,458,0,3940,3926,1,0,
0,0,3940,3930,1,0,0,0,3940,3936,1,0,0,0,3940,3938,1,0,0,0,3941,3944,1,0,
0,0,3942,3940,1,0,0,0,3942,3943,1,0,0,0,3943,935,1,0,0,0,3944,3942,1,0,0,
0,3945,3946,6,468,-1,0,3946,3947,5,12,0,0,3947,3948,3,932,466,0,3948,3949,
5,22,0,0,3949,3961,1,0,0,0,3950,3961,3,1018,509,0,3951,3952,3,940,470,0,
3952,3953,3,936,468,8,3953,3961,1,0,0,0,3954,3961,3,942,471,0,3955,3961,
3,1004,502,0,3956,3957,5,271,0,0,3957,3961,3,64,32,0,3958,3961,3,928,464,
0,3959,3961,3,142,71,0,3960,3945,1,0,0,0,3960,3950,1,0,0,0,3960,3951,1,0,
0,0,3960,3954,1,0,0,0,3960,3955,1,0,0,0,3960,3956,1,0,0,0,3960,3958,1,0,
0,0,3960,3959,1,0,0,0,3961,3976,1,0,0,0,3962,3963,10,10,0,0,3963,3964,5,
299,0,0,3964,3975,3,936,468,11,3965,3966,10,4,0,0,3966,3967,7,30,0,0,3967,
3975,3,936,468,5,3968,3969,10,3,0,0,3969,3970,7,31,0,0,3970,3975,3,936,468,
4,3971,3972,10,11,0,0,3972,3973,5,16,0,0,3973,3975,3,136,68,0,3974,3962,
1,0,0,0,3974,3965,1,0,0,0,3974,3968,1,0,0,0,3974,3971,1,0,0,0,3975,3978,
1,0,0,0,3976,3974,1,0,0,0,3976,3977,1,0,0,0,3977,937,1,0,0,0,3978,3976,1,
0,0,0,3979,3980,7,5,0,0,3980,939,1,0,0,0,3981,3982,7,32,0,0,3982,941,1,0,
0,0,3983,3993,3,944,472,0,3984,3993,3,656,328,0,3985,3993,3,958,479,0,3986,
3993,3,968,484,0,3987,3993,3,970,485,0,3988,3993,3,972,486,0,3989,3993,3,
996,498,0,3990,3993,3,956,478,0,3991,3993,3,954,477,0,3992,3983,1,0,0,0,
3992,3984,1,0,0,0,3992,3985,1,0,0,0,3992,3986,1,0,0,0,3992,3987,1,0,0,0,
3992,3988,1,0,0,0,3992,3989,1,0,0,0,3992,3990,1,0,0,0,3992,3991,1,0,0,0,
3993,943,1,0,0,0,3994,3995,3,950,475,0,3995,3996,5,12,0,0,3996,3997,3,946,
473,0,3997,3998,5,22,0,0,3998,4007,1,0,0,0,3999,4000,3,952,476,0,4000,4001,
5,12,0,0,4001,4002,3,946,473,0,4002,4003,5,5,0,0,4003,4004,3,946,473,0,4004,
4005,5,22,0,0,4005,4007,1,0,0,0,4006,3994,1,0,0,0,4006,3999,1,0,0,0,4007,
945,1,0,0,0,4008,4014,3,1018,509,0,4009,4014,3,142,71,0,4010,4014,3,948,
474,0,4011,4014,3,942,471,0,4012,4014,3,932,466,0,4013,4008,1,0,0,0,4013,
4009,1,0,0,0,4013,4010,1,0,0,0,4013,4011,1,0,0,0,4013,4012,1,0,0,0,4014,
947,1,0,0,0,4015,4016,3,142,71,0,4016,4017,5,16,0,0,4017,4018,3,136,68,0,
4018,949,1,0,0,0,4019,4020,7,33,0,0,4020,951,1,0,0,0,4021,4022,7,34,0,0,
4022,953,1,0,0,0,4023,4024,7,35,0,0,4024,4025,5,12,0,0,4025,4026,3,936,468,
0,4026,4027,5,5,0,0,4027,4028,3,936,468,0,4028,4029,5,22,0,0,4029,4068,1,
0,0,0,4030,4031,7,36,0,0,4031,4032,5,12,0,0,4032,4033,3,936,468,0,4033,4034,
5,22,0,0,4034,4068,1,0,0,0,4035,4036,5,252,0,0,4036,4044,5,12,0,0,4037,4039,
3,1006,503,0,4038,4037,1,0,0,0,4038,4039,1,0,0,0,4039,4041,1,0,0,0,4040,
4042,3,936,468,0,4041,4040,1,0,0,0,4041,4042,1,0,0,0,4042,4043,1,0,0,0,4043,
4045,5,118,0,0,4044,4038,1,0,0,0,4044,4045,1,0,0,0,4045,4046,1,0,0,0,4046,
4047,3,936,468,0,4047,4048,5,22,0,0,4048,4068,1,0,0,0,4049,4050,7,37,0,0,
4050,4051,5,12,0,0,4051,4054,3,936,468,0,4052,4053,5,5,0,0,4053,4055,3,936,
468,0,4054,4052,1,0,0,0,4054,4055,1,0,0,0,4055,4056,1,0,0,0,4056,4057,5,
22,0,0,4057,4068,1,0,0,0,4058,4059,5,181,0,0,4059,4060,5,12,0,0,4060,4063,
3,936,468,0,4061,4062,5,5,0,0,4062,4064,3,1008,504,0,4063,4061,1,0,0,0,4063,
4064,1,0,0,0,4064,4065,1,0,0,0,4065,4066,5,22,0,0,4066,4068,1,0,0,0,4067,
4023,1,0,0,0,4067,4030,1,0,0,0,4067,4035,1,0,0,0,4067,4049,1,0,0,0,4067,
4058,1,0,0,0,4068,955,1,0,0,0,4069,4070,5,252,0,0,4070,4071,5,12,0,0,4071,
4072,3,936,468,0,4072,4073,5,5,0,0,4073,4074,3,936,468,0,4074,4075,5,22,
0,0,4075,4082,1,0,0,0,4076,4077,5,100,0,0,4077,4078,5,12,0,0,4078,4079,3,
936,468,0,4079,4080,5,22,0,0,4080,4082,1,0,0,0,4081,4069,1,0,0,0,4081,4076,
1,0,0,0,4082,957,1,0,0,0,4083,4084,5,185,0,0,4084,4085,5,12,0,0,4085,4086,
3,932,466,0,4086,4087,5,5,0,0,4087,4088,3,932,466,0,4088,4089,5,22,0,0,4089,
4125,1,0,0,0,4090,4091,5,64,0,0,4091,4092,5,12,0,0,4092,4095,3,932,466,0,
4093,4094,5,5,0,0,4094,4096,3,932,466,0,4095,4093,1,0,0,0,4096,4097,1,0,
0,0,4097,4095,1,0,0,0,4097,4098,1,0,0,0,4098,4099,1,0,0,0,4099,4100,5,22,
0,0,4100,4125,1,0,0,0,4101,4102,5,56,0,0,4102,4104,3,936,468,0,4103,4105,
3,960,480,0,4104,4103,1,0,0,0,4105,4106,1,0,0,0,4106,4104,1,0,0,0,4106,4107,
1,0,0,0,4107,4109,1,0,0,0,4108,4110,3,964,482,0,4109,4108,1,0,0,0,4109,4110,
1,0,0,0,4110,4111,1,0,0,0,4111,4112,5,102,0,0,4112,4125,1,0,0,0,4113,4115,
5,56,0,0,4114,4116,3,962,481,0,4115,4114,1,0,0,0,4116,4117,1,0,0,0,4117,
4115,1,0,0,0,4117,4118,1,0,0,0,4118,4120,1,0,0,0,4119,4121,3,964,482,0,4120,
4119,1,0,0,0,4120,4121,1,0,0,0,4121,4122,1,0,0,0,4122,4123,5,102,0,0,4123,
4125,1,0,0,0,4124,4083,1,0,0,0,4124,4090,1,0,0,0,4124,4101,1,0,0,0,4124,
4113,1,0,0,0,4125,959,1,0,0,0,4126,4127,5,276,0,0,4127,4132,3,966,483,0,
4128,4129,5,5,0,0,4129,4131,3,966,483,0,4130,4128,1,0,0,0,4131,4134,1,0,
0,0,4132,4130,1,0,0,0,4132,4133,1,0,0,0,4133,4135,1,0,0,0,4134,4132,1,0,
0,0,4135,4136,5,244,0,0,4136,4137,3,932,466,0,4137,961,1,0,0,0,4138,4139,
5,276,0,0,4139,4140,3,932,466,0,4140,4141,5,244,0,0,4141,4142,3,932,466,
0,4142,963,1,0,0,0,4143,4144,5,101,0,0,4144,4145,3,932,466,0,4145,965,1,
0,0,0,4146,4153,3,936,468,0,4147,4153,3,910,455,0,4148,4153,3,914,457,0,
4149,4153,3,918,459,0,4150,4153,3,920,460,0,4151,4153,3,922,461,0,4152,4146,
1,0,0,0,4152,4147,1,0,0,0,4152,4148,1,0,0,0,4152,4149,1,0,0,0,4152,4150,
1,0,0,0,4152,4151,1,0,0,0,4153,967,1,0,0,0,4154,4155,5,57,0,0,4155,4156,
5,12,0,0,4156,4157,3,932,466,0,4157,4158,5,36,0,0,4158,4159,3,778,389,0,
4159,4160,5,22,0,0,4160,969,1,0,0,0,4161,4162,5,99,0,0,4162,4163,5,12,0,
0,4163,4164,3,142,71,0,4164,4165,5,22,0,0,4165,971,1,0,0,0,4166,4172,3,974,
487,0,4167,4172,3,976,488,0,4168,4172,3,980,490,0,4169,4172,3,978,489,0,
4170,4172,3,982,491,0,4171,4166,1,0,0,0,4171,4167,1,0,0,0,4171,4168,1,0,
0,0,4171,4169,1,0,0,0,4171,4170,1,0,0,0,4172,973,1,0,0,0,4173,4181,5,74,
0,0,4174,4175,5,81,0,0,4175,4177,5,12,0,0,4176,4178,3,984,492,0,4177,4176,
1,0,0,0,4177,4178,1,0,0,0,4178,4179,1,0,0,0,4179,4181,5,22,0,0,4180,4173,
1,0,0,0,4180,4174,1,0,0,0,4181,975,1,0,0,0,4182,4190,5,78,0,0,4183,4184,
5,286,0,0,4184,4186,5,12,0,0,4185,4187,3,986,493,0,4186,4185,1,0,0,0,4186,
4187,1,0,0,0,4187,4188,1,0,0,0,4188,4190,5,22,0,0,4189,4182,1,0,0,0,4189,
4183,1,0,0,0,4190,977,1,0,0,0,4191,4197,5,164,0,0,4192,4194,5,12,0,0,4193,
4195,3,986,493,0,4194,4193,1,0,0,0,4194,4195,1,0,0,0,4195,4196,1,0,0,0,4196,
4198,5,22,0,0,4197,4192,1,0,0,0,4197,4198,1,0,0,0,4198,979,1,0,0,0,4199,
4207,5,79,0,0,4200,4201,5,285,0,0,4201,4203,5,12,0,0,4202,4204,3,988,494,
0,4203,4202,1,0,0,0,4203,4204,1,0,0,0,4204,4205,1,0,0,0,4205,4207,5,22,0,
0,4206,4199,1,0,0,0,4206,4200,1,0,0,0,4207,981,1,0,0,0,4208,4216,5,165,0,
0,4209,4210,5,163,0,0,4210,4212,5,12,0,0,4211,4213,3,988,494,0,4212,4211,
1,0,0,0,4212,4213,1,0,0,0,4213,4214,1,0,0,0,4214,4216,5,22,0,0,4215,4208,
1,0,0,0,4215,4209,1,0,0,0,4216,983,1,0,0,0,4217,4220,3,990,495,0,4218,4220,
3,1012,506,0,4219,4217,1,0,0,0,4219,4218,1,0,0,0,4220,985,1,0,0,0,4221,4224,
3,992,496,0,4222,4224,3,1012,506,0,4223,4221,1,0,0,0,4223,4222,1,0,0,0,4224,
987,1,0,0,0,4225,4228,3,994,497,0,4226,4228,3,1012,506,0,4227,4225,1,0,0,
0,4227,4226,1,0,0,0,4228,989,1,0,0,0,4229,4230,3,86,43,0,4230,991,1,0,0,
0,4231,4232,3,86,43,0,4232,993,1,0,0,0,4233,4234,3,86,43,0,4234,995,1,0,
0,0,4235,4236,5,97,0,0,4236,4237,5,12,0,0,4237,4238,3,936,468,0,4238,4239,
5,5,0,0,4239,4240,3,936,468,0,4240,4241,5,22,0,0,4241,4248,1,0,0,0,4242,
4243,5,96,0,0,4243,4244,5,12,0,0,4244,4245,3,998,499,0,4245,4246,5,22,0,
0,4246,4248,1,0,0,0,4247,4235,1,0,0,0,4247,4242,1,0,0,0,4248,997,1,0,0,0,
4249,4252,3,1000,500,0,4250,4252,3,1012,506,0,4251,4249,1,0,0,0,4251,4250,
1,0,0,0,4252,999,1,0,0,0,4253,4254,3,86,43,0,4254,1001,1,0,0,0,4255,4256,
3,134,67,0,4256,4258,5,12,0,0,4257,4259,3,398,199,0,4258,4257,1,0,0,0,4258,
4259,1,0,0,0,4259,4260,1,0,0,0,4260,4261,5,22,0,0,4261,1003,1,0,0,0,4262,
4266,3,1010,505,0,4263,4266,3,1012,506,0,4264,4266,3,1016,508,0,4265,4262,
1,0,0,0,4265,4263,1,0,0,0,4265,4264,1,0,0,0,4266,1005,1,0,0,0,4267,4268,
7,38,0,0,4268,1007,1,0,0,0,4269,4270,7,39,0,0,4270,1009,1,0,0,0,4271,4273,
3,856,428,0,4272,4271,1,0,0,0,4272,4273,1,0,0,0,4273,4274,1,0,0,0,4274,4283,
5,11,0,0,4275,4280,3,932,466,0,4276,4277,5,5,0,0,4277,4279,3,932,466,0,4278,
4276,1,0,0,0,4279,4282,1,0,0,0,4280,4278,1,0,0,0,4280,4281,1,0,0,0,4281,
4284,1,0,0,0,4282,4280,1,0,0,0,4283,4275,1,0,0,0,4283,4284,1,0,0,0,4284,
4285,1,0,0,0,4285,4286,5,21,0,0,4286,1011,1,0,0,0,4287,4289,5,212,0,0,4288,
4287,1,0,0,0,4288,4289,1,0,0,0,4289,4290,1,0,0,0,4290,4299,5,10,0,0,4291,
4296,3,1014,507,0,4292,4293,5,5,0,0,4293,4295,3,1014,507,0,4294,4292,1,0,
0,0,4295,4298,1,0,0,0,4296,4294,1,0,0,0,4296,4297,1,0,0,0,4297,4300,1,0,
0,0,4298,4296,1,0,0,0,4299,4291,1,0,0,0,4299,4300,1,0,0,0,4300,4301,1,0,
0,0,4301,4302,5,20,0,0,4302,1013,1,0,0,0,4303,4304,3,138,69,0,4304,4305,
5,4,0,0,4305,4306,3,932,466,0,4306,1015,1,0,0,0,4307,4308,5,200,0,0,4308,
4309,5,11,0,0,4309,4317,3,936,468,0,4310,4311,5,5,0,0,4311,4312,3,936,468,
0,4312,4313,5,5,0,0,4313,4314,3,936,468,0,4314,4316,1,0,0,0,4315,4310,1,
0,0,0,4316,4319,1,0,0,0,4317,4315,1,0,0,0,4317,4318,1,0,0,0,4318,4320,1,
0,0,0,4319,4317,1,0,0,0,4320,4321,5,21,0,0,4321,1017,1,0,0,0,4322,4325,3,
68,34,0,4323,4325,3,1020,510,0,4324,4322,1,0,0,0,4324,4323,1,0,0,0,4325,
1019,1,0,0,0,4326,4330,3,162,81,0,4327,4330,3,1022,511,0,4328,4330,3,1024,
512,0,4329,4326,1,0,0,0,4329,4327,1,0,0,0,4329,4328,1,0,0,0,4330,1021,1,
0,0,0,4331,4333,3,856,428,0,4332,4331,1,0,0,0,4332,4333,1,0,0,0,4333,4334,
1,0,0,0,4334,4343,5,11,0,0,4335,4340,3,1020,510,0,4336,4337,5,5,0,0,4337,
4339,3,1020,510,0,4338,4336,1,0,0,0,4339,4342,1,0,0,0,4340,4338,1,0,0,0,
4340,4341,1,0,0,0,4341,4344,1,0,0,0,4342,4340,1,0,0,0,4343,4335,1,0,0,0,
4343,4344,1,0,0,0,4344,4345,1,0,0,0,4345,4346,5,21,0,0,4346,1023,1,0,0,0,
4347,4349,5,212,0,0,4348,4347,1,0,0,0,4348,4349,1,0,0,0,4349,4350,1,0,0,
0,4350,4359,5,10,0,0,4351,4356,3,1026,513,0,4352,4353,5,5,0,0,4353,4355,
3,1026,513,0,4354,4352,1,0,0,0,4355,4358,1,0,0,0,4356,4354,1,0,0,0,4356,
4357,1,0,0,0,4357,4360,1,0,0,0,4358,4356,1,0,0,0,4359,4351,1,0,0,0,4359,
4360,1,0,0,0,4360,4361,1,0,0,0,4361,4362,5,20,0,0,4362,1025,1,0,0,0,4363,
4364,3,142,71,0,4364,4365,5,4,0,0,4365,4366,3,1020,510,0,4366,1027,1,0,0,
0,500,1030,1036,1039,1043,1048,1052,1057,1059,1063,1066,1070,1078,1084,1098,
1101,1108,1121,1128,1131,1136,1142,1145,1153,1160,1165,1171,1201,1218,1226,
1234,1239,1247,1291,1305,1314,1318,1330,1340,1357,1365,1369,1389,1395,1400,
1403,1410,1415,1421,1427,1431,1436,1443,1446,1454,1461,1464,1476,1479,1489,
1499,1510,1515,1519,1527,1534,1542,1548,1554,1559,1562,1567,1570,1573,1577,
1580,1584,1588,1591,1594,1597,1609,1614,1620,1627,1632,1636,1642,1647,1650,
1656,1660,1666,1674,1678,1683,1690,1694,1699,1703,1707,1713,1726,1732,1744,
1757,1768,1773,1784,1794,1812,1817,1821,1825,1829,1831,1837,1842,1849,1865,
1869,1874,1878,1885,1889,1906,1911,1918,1928,1936,1941,1955,1958,1962,1965,
1969,1972,1978,1982,1985,1989,1996,2001,2008,2012,2016,2019,2022,2025,2028,
2031,2033,2040,2045,2057,2064,2074,2077,2084,2087,2093,2102,2108,2112,2119,
2140,2150,2155,2159,2162,2166,2169,2173,2183,2186,2190,2193,2200,2204,2207,
2222,2226,2233,2237,2240,2246,2249,2252,2260,2265,2268,2273,2276,2281,2284,
2289,2292,2301,2310,2320,2326,2331,2342,2346,2353,2356,2359,2362,2373,2387,
2396,2405,2461,2465,2468,2472,2489,2498,2503,2510,2516,2524,2532,2542,2552,
2559,2567,2571,2578,2590,2598,2602,2617,2654,2663,2673,2679,2686,2692,2702,
2711,2739,2749,2762,2767,2781,2784,2802,2810,2817,2830,2835,2838,2848,2869,
2874,2879,2883,2886,2891,2895,2898,2907,2915,2919,2923,2926,2932,2937,2946,
2955,2989,2992,2997,3014,3022,3025,3033,3036,3047,3083,3087,3096,3101,3108,
3124,3127,3130,3134,3137,3141,3145,3148,3151,3156,3160,3168,3173,3181,3184,
3191,3193,3195,3206,3210,3217,3220,3227,3232,3235,3242,3245,3252,3255,3257,
3267,3271,3275,3279,3283,3287,3291,3295,3299,3303,3310,3313,3317,3321,3323,
3327,3331,3335,3339,3343,3347,3351,3358,3361,3365,3370,3372,3376,3380,3384,
3388,3392,3396,3401,3408,3411,3416,3418,3425,3429,3431,3439,3443,3447,3451,
3455,3462,3466,3469,3473,3477,3480,3482,3486,3493,3500,3506,3508,3513,3518,
3521,3523,3527,3532,3538,3540,3545,3551,3553,3557,3563,3567,3570,3575,3579,
3583,3587,3591,3595,3598,3602,3606,3610,3613,3617,3620,3628,3637,3642,3649,
3656,3662,3671,3677,3684,3689,3691,3698,3706,3709,3717,3720,3729,3732,3738,
3741,3747,3754,3762,3764,3777,3783,3786,3792,3798,3802,3808,3816,3820,3824,
3832,3843,3845,3867,3885,3896,3908,3913,3924,3933,3940,3942,3960,3974,3976,
3992,4006,4013,4038,4041,4044,4054,4063,4067,4081,4097,4106,4109,4117,4120,
4124,4132,4152,4171,4177,4180,4186,4189,4194,4197,4203,4206,4212,4215,4219,
4223,4227,4247,4251,4258,4265,4272,4280,4283,4288,4296,4299,4317,4324,4329,
4332,4340,4343,4348,4356,4359];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class GQLParser extends antlr4.Parser {

    static grammarFileName = "GQLParser.g4";
    static literalNames = [ null, "'&'", "'*'", "'^'", "':'", "','", "'$'", 
                            "'='", "'!'", "'>'", "'{'", "'['", "'('", "'<'", 
                            "'-'", "'%'", "'.'", "'+'", "'?'", "'\\'", "'}'", 
                            "']'", "')'", "';'", "'/'", "'~'", "'_'", "'|'", 
                            "'ABS'", "'ACOS'", "'ACYCLIC'", "'ALL'", "'ALL_DIFFERENT'", 
                            "'AND'", "'ANY'", "'ARRAY'", "'AS'", "'ASC'", 
                            "'ASCENDING'", "'ASIN'", "'AT'", "'ATAN'", "'AVG'", 
                            "'BIG'", "'BIGINT'", "'BINARY'", "'BINDING'", 
                            "'BINDINGS'", "'BOOL'", "'BOOLEAN'", "'BOTH'", 
                            "'BTRIM'", "'BY'", "'BYTE_LENGTH'", "'BYTES'", 
                            "'CALL'", "'CASE'", "'CAST'", "'CEIL'", "'CEILING'", 
                            "'CHAR_LENGTH'", "'CHARACTER_LENGTH'", "'CHARACTERISTICS'", 
                            "'CLOSE'", "'COALESCE'", "'COLLECT'", "'COMMIT'", 
                            "'CONNECTING'", "'COPY'", "'COS'", "'COSH'", 
                            "'COT'", "'COUNT'", "'CREATE'", "'CURRENT_DATE'", 
                            "'CURRENT_GRAPH'", "'CURRENT_PROPERTY_GRAPH'", 
                            "'CURRENT_SCHEMA'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", 
                            "'CURRENT_USER'", "'DATE'", "'DATETIME'", "'DEC'", 
                            "'DECIMAL'", "'DEGREES'", "'DELETE'", "'DESC'", 
                            "'DESCENDING'", "'DESTINATION'", "'DETACH'", 
                            "'DIFFERENT'", "'DIRECTED'", "'DISTINCT'", "'DOUBLE'", 
                            "'DROP'", "'DURATION'", "'DURATION_BETWEEN'", 
                            "'ELEMENT'", "'ELEMENT_ID'", "'ELEMENTS'", "'ELSE'", 
                            "'END'", "'EXCEPT'", "'EXISTS'", "'EXP'", "'FALSE'", 
                            "'FILTER'", "'FINISH'", "'FIRST'", "'FLOAT'", 
                            "'FLOAT128'", "'FLOAT16'", "'FLOAT256'", "'FLOAT32'", 
                            "'FLOAT64'", "'FLOOR'", "'FOR'", "'FROM'", "'GRAPH'", 
                            "'GROUP'", "'GROUPS'", "'HAVING'", "'HOME_GRAPH'", 
                            "'HOME_PROPERTY_GRAPH'", "'HOME_SCHEMA'", "'I_DONT_KNOW_1'", 
                            "'I_DONT_KNOW_2'", "'I_DONT_KNOW_3'", "'I_DONT_KNOW_4'", 
                            "'I_DONT_KNOW_5'", "'IF'", "'IN'", "'INSERT'", 
                            "'INT'", "'INT8'", "'INT16'", "'INT32'", "'INT64'", 
                            "'INT128'", "'INT256'", "'INTEGER'", "'INTEGER8'", 
                            "'INTEGER16'", "'INTEGER32'", "'INTEGER64'", 
                            "'INTEGER128'", "'INTEGER256'", "'INTERSECT'", 
                            "'IS'", "'KEEP'", "'LABEL'", "'LABELED'", "'LABELS'", 
                            "'LAST'", "'LEADING'", "'LEFT'", "'LET'", "'LIKE'", 
                            "'LIMIT'", "'LIST'", "'LN'", "'LOCAL'", "'LOCAL_DATETIME'", 
                            "'LOCAL_TIME'", "'LOCAL_TIMESTAMP'", "'LOG'", 
                            "'LOG10'", "'LOWER'", "'LTRIM'", "'MATCH'", 
                            "'MAX'", "'MIN'", "'MOD'", "'NEXT'", "'NFC'", 
                            "'NFD'", "'NFKC'", "'NFKD'", "'NO'", "'NODETACH'", 
                            "'NORMALIZE'", "'NORMALIZED'", "'NOT'", "'NULL'", 
                            "'NULLIF'", "'NULLS'", "'OCTET_LENGTH'", "'OF'", 
                            "'OFFSET'", "'SKIP'", "'ONLY'", "'OPEN'", "'OPTIONAL'", 
                            "'OR'", "'ORDER'", "'ORDINALITY'", "'OTHERWISE'", 
                            "'PARAMETER'", "'PARAMETERS'", "'PATH'", "'PATH_LENGTH'", 
                            "'PATHS'", "'PERCENTILE_CONT'", "'PERCENTILE_DISC'", 
                            "'POWER'", "'PRECISION'", "'PROPERTY'", "'PROPERTY_EXISTS'", 
                            "'RADIANS'", "'READ'", "'REAL'", "'RECORD'", 
                            "'REMOVE'", "'REPEATABLE'", "'REPLACE'", "'RESET'", 
                            "'RETURN'", "'ROLLBACK'", "'RTRIM'", "'RIGHT'", 
                            "'SAME'", "'SCHEMA'", "'SELECT'", "'SESSION'", 
                            "'SET'", "'SHORTEST'", "'SIGNED'", "'SIMPLE'", 
                            "'SIN'", "'SINH'", "'SMALL'", "'SMALLINT'", 
                            "'SOURCE'", "'SQRT'", "'START'", "'STDDEV_POP'", 
                            "'STDDEV_SAMP'", "'STRING'", "'SUM'", "'TABLE'", 
                            "'TAN'", "'TANH'", "'TEMP'", "'THEN'", "'TIME'", 
                            "'TIMESTAMP'", "'TIMEZONE'", "'TO'", "'TRAIL'", 
                            "'TRAILING'", "'TRANSACTION'", "'TRIM'", "'TRUE'", 
                            "'TYPE'", "'TYPED'", "'UBIGINT'", "'UINT'", 
                            "'UINT128'", "'UINT16'", "'UINT256'", "'UINT32'", 
                            "'UINT64'", "'UINT8'", "'UNDIRECTED'", "'UNION'", 
                            "'UNKNOWN'", "'UNSIGNED'", "'UPPER'", "'USE'", 
                            "'USMALLINT'", "'VALUE'", "'VARBINARY'", "'VARCHAR'", 
                            "'VARIABLE'", "'WALK'", "'WHEN'", "'WHERE'", 
                            "'WITH'", "'WITHOUT'", "'WRITE'", "'XOR'", "'YIELD'", 
                            "'ZONE'", "'ZONED'", "'ZONED_DATETIME'", "'ZONED_TIME'", 
                            null, null, null, null, null, null, null, null, 
                            "'I_DONT_KNOW_12'", null, null, "'|+|'", "'||'", 
                            "'::'", "'..'", "'>='", "'<->'", "'<-/'", "'<~/'", 
                            "'<='", "'-/'", "'<>'", "'->'", "'/->'", "'/~>'", 
                            "'~>'", "'~/'", "'//'", null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, "'''", "'\"'", 
                            "'`'", null, null, null, null, null, null, null, 
                            "'\\u202A'", null, null, null, "'I_DONT_KNOW_15'", 
                            null, "'/*'", "'*/'", "'I_DONT_KNOW_16'", null, 
                            null, null, null, null, "'I_DONT_KNOW_18'", 
                            null, "'I_DONT_KNOW_20'" ];
    static symbolicNames = [ null, "AMPERSAND", "ASTERISK", "CIRCUMFLEX", 
                             "COLON", "COMMA", "DOLLAR_SIGN", "EQUALS_OPERATOR", 
                             "EXCLAMATION_MARK", "RIGHT_ANGLE_BRACKET", 
                             "LEFT_BRACE", "LEFT_BRACKET", "LEFT_PAREN", 
                             "LEFT_ANGLE_BRACKET", "MINUS_SIGN", "PERCENT", 
                             "PERIOD", "PLUS_SIGN", "QUESTION_MARK", "REVERSE_SOLIDUS", 
                             "RIGHT_BRACE", "RIGHT_BRACKET", "RIGHT_PAREN", 
                             "SEMICOLON", "SOLIDUS", "TILDE", "UNDERSCORE", 
                             "VERTICAL_BAR", "ABS", "ACOS", "ACYCLIC", "ALL", 
                             "ALL_DIFFERENT", "AND", "ANY", "ARRAY", "AS", 
                             "ASC", "ASCENDING", "ASIN", "AT", "ATAN", "AVG", 
                             "BIG", "BIGINT", "BINARY", "BINDING", "BINDINGS", 
                             "BOOL", "BOOLEAN", "BOTH", "BTRIM", "BY", "BYTE_LENGTH", 
                             "BYTES", "CALL", "CASE", "CAST", "CEIL", "CEILING", 
                             "CHAR_LENGTH", "CHARACTER_LENGTH", "CHARACTERISTICS", 
                             "CLOSE", "COALESCE", "COLLECT", "COMMIT", "CONNECTING", 
                             "COPY", "COS", "COSH", "COT", "COUNT", "CREATE", 
                             "CURRENT_DATE", "CURRENT_GRAPH", "CURRENT_PROPERTY_GRAPH", 
                             "CURRENT_SCHEMA", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
                             "CURRENT_USER", "DATE", "DATETIME", "DEC", 
                             "DECIMAL", "DEGREES", "DELETE", "DESC", "DESCENDING", 
                             "DESTINATION", "DETACH", "DIFFERENT", "DIRECTED", 
                             "DISTINCT", "DOUBLE", "DROP", "DURATION", "DURATION_BETWEEN", 
                             "ELEMENT", "ELEMENT_ID", "ELEMENTS", "ELSE", 
                             "END", "EXCEPT", "EXISTS", "EXP", "FALSE", 
                             "FILTER", "FINISH", "FIRST", "FLOAT", "FLOAT128", 
                             "FLOAT16", "FLOAT256", "FLOAT32", "FLOAT64", 
                             "FLOOR", "FOR", "FROM", "GRAPH", "GROUP", "GROUPS", 
                             "HAVING", "HOME_GRAPH", "HOME_PROPERTY_GRAPH", 
                             "HOME_SCHEMA", "I_DONT_KNOW_1", "I_DONT_KNOW_2", 
                             "I_DONT_KNOW_3", "I_DONT_KNOW_4", "I_DONT_KNOW_5", 
                             "IF", "IN", "INSERT", "INT", "INT8", "INT16", 
                             "INT32", "INT64", "INT128", "INT256", "INTEGER", 
                             "INTEGER8", "INTEGER16", "INTEGER32", "INTEGER64", 
                             "INTEGER128", "INTEGER256", "INTERSECT", "IS", 
                             "KEEP", "LABEL", "LABELED", "LABELS", "LAST", 
                             "LEADING", "LEFT", "LET", "LIKE", "LIMIT", 
                             "LIST", "LN", "LOCAL", "LOCAL_DATETIME", "LOCAL_TIME", 
                             "LOCAL_TIMESTAMP", "LOG", "LOG10", "LOWER", 
                             "LTRIM", "MATCH", "MAX", "MIN", "MOD", "NEXT", 
                             "NFC", "NFD", "NFKC", "NFKD", "NO", "NODETACH", 
                             "NORMALIZE", "NORMALIZED", "NOT", "NULL", "NULLIF", 
                             "NULLS", "OCTET_LENGTH", "OF", "OFFSET", "SKIP_", 
                             "ONLY", "OPEN", "OPTIONAL", "OR", "ORDER", 
                             "ORDINALITY", "OTHERWISE", "PARAMETER", "PARAMETERS", 
                             "PATH", "PATH_LENGTH", "PATHS", "PERCENTILE_CONT", 
                             "PERCENTILE_DISC", "POWER", "PRECISION", "PROPERTY", 
                             "PROPERTY_EXISTS", "RADIANS", "READ", "REAL", 
                             "RECORD", "REMOVE", "REPEATABLE", "REPLACE", 
                             "RESET", "RETURN", "ROLLBACK", "RTRIM", "RIGHT", 
                             "SAME", "SCHEMA", "SELECT", "SESSION", "SET", 
                             "SHORTEST", "SIGNED", "SIMPLE", "SIN", "SINH", 
                             "SMALL", "SMALLINT", "SOURCE", "SQRT", "START", 
                             "STDDEV_POP", "STDDEV_SAMP", "STRING", "SUM", 
                             "TABLE", "TAN", "TANH", "TEMP", "THEN", "TIME", 
                             "TIMESTAMP", "TIMEZONE", "TO", "TRAIL", "TRAILING", 
                             "TRANSACTION", "TRIM", "TRUE", "TYPE", "TYPED", 
                             "UBIGINT", "UINT", "UINT128", "UINT16", "UINT256", 
                             "UINT32", "UINT64", "UINT8", "UNDIRECTED", 
                             "UNION", "UNKNOWN", "UNSIGNED", "UPPER", "USE", 
                             "USMALLINT", "VALUE", "VARBINARY", "VARCHAR", 
                             "VARIABLE", "WALK", "WHEN", "WHERE", "WITH", 
                             "WITHOUT", "WRITE", "XOR", "YIELD", "ZONE", 
                             "ZONED", "ZONED_DATETIME", "ZONED_TIME", "INTERVAL_DAY", 
                             "INTERVAL_WEEK", "INTERVAL_MONTH", "INTERVAL_YEAR", 
                             "EDGE_SYNONYM", "EDGES_SYNONYM", "NODE_SYNONYM", 
                             "KEY_WORD", "RESERVED_WORD", "PRE_RESERVED_WORD", 
                             "NON_RESERVED_WORD", "MULTISET_ALTERNATION_OPERATOR", 
                             "CONCATENATION_OPERATOR", "DOUBLE_COLON", "DOUBLE_PERIOD", 
                             "GREATER_THAN_OR_EQUALS_OPERATOR", "LEFT_MINUS_RIGHT", 
                             "LEFT_MINUS_SLASH", "LEFT_TILDE_SLASH", "LESS_THAN_OR_EQUALS_OPERATOR", 
                             "MINUS_SLASH", "NOT_EQUALS_OPERATOR", "RIGHT_ARROW", 
                             "SLASH_MINUS_RIGHT", "SLASH_TILDE_RIGHT", "TILDE_RIGHT_ARROW", 
                             "TILDE_SLASH", "DOUBLE_SOLIDUS", "ESCAPED_CHARACTER", 
                             "ESCAPED_REVERSE_SOLIDUS", "ESCAPED_QUOTE", 
                             "ESCAPED_DOUBLE_QUOTE", "ESCAPED_GRAVE_ACCENT", 
                             "ESCAPED_TAB", "ESCAPED_BACKSPACE", "ESCAPED_NEWLINE", 
                             "ESCAPED_CARRIAGE_RETURN", "ESCAPED_FORM_FEED", 
                             "UNICODE_ESCAPE_VALUE", "UNICODE_4_DIGIT_ESCAPE_VALUE", 
                             "UNICODE_6_DIGIT_ESCAPE_VALUE", "UNSIGNED_DECIMAL_INTEGER", 
                             "UNSIGNED_HEXADECIMAL_INTEGER", "UNSIGNED_OCTAL_INTEGER", 
                             "UNSIGNED_BINARY_INTEGER", "UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION", 
                             "UNSIGNED_DECIMAL_IN_COMMON_NOTATION", "FOUR_DIGIT", 
                             "DOUBLE_DIGIT", "SINGLE_QUOTED_STRING_LITERAL", 
                             "DOUBLE_QUOTED_STRING_LITERAL", "ACCENT_QUOTED_STRING_LITERAL", 
                             "BYTE_STRING_LITERAL", "QUOTE", "DOUBLE_QUOTE", 
                             "GRAVE_ACCENT", "REGULAR_IDENTIFIER", "IDENTIFIER_START", 
                             "IDENTIFIER_EXTEND", "SP", "SEPARATOR", "WHITESPACE", 
                             "Comment", "BIDIRECTIONAL_CONTROL_CHARACTER", 
                             "COMMENT", "SIMPLE_COMMENT", "SIMPLE_COMMENT_INTRODUCER", 
                             "SIMPLE_COMMENT_CHARACTER", "BRACKETED_COMMENT", 
                             "BRACKETED_COMMENT_INTRODUCER", "BRACKETED_COMMENT_TERMINATOR", 
                             "BRACKETED_COMMENT_CONTENTS", "GQL_TERMINAL_CHARACTER", 
                             "GQL_LANGUAGE_CHARACTER", "SIMPLE_LATIN_LETTER", 
                             "SIMPLE_LATIN_LOWER_CASE_LETTER", "SIMPLE_LATIN_UPPER_CASE_LETTER", 
                             "OTHER_DIGIT", "GQL_SPECIAL_CHARACTER", "OTHER_LANGUAGE_CHARACTER" ];
    static ruleNames = [ "root", "gqlProgram", "programActivity", "sessionActivity", 
                         "sessionActivityCommand", "transactionActivity", 
                         "endTransactionCommand", "sessionSetCommand", "sessionSetSchemaClause", 
                         "sessionSetGraphClause", "sessionSetTimeZoneClause", 
                         "setTimeZoneValue", "sessionSetParameterClause", 
                         "sessionSetGraphParameterClause", "sessionSetBindingTableParameterClause", 
                         "sessionSetValueParameterClause", "sessionSetParameterName", 
                         "sessionResetCommand", "sessionResetArguments", 
                         "sessionCloseCommand", "startTransactionCommand", 
                         "transactionCharacteristics", "transactionMode", 
                         "transactionAccessMode", "implementationDefinedAccessMode", 
                         "rollbackCommand", "commitCommand", "nestedProcedureSpecification", 
                         "procedureSpecification", "catalogModifyingProcedureSpecification", 
                         "nestedDataModifyingProcedureSpecification", "dataModifyingProcedureSpecification", 
                         "nestedQuerySpecification", "querySpecification", 
                         "unsignedNumericLiteral", "integerLiteral", "floatLiteral", 
                         "unbrokenSingleQuotedCharacterSequence", "unbrokenDoubleQuotedCharacterSequence", 
                         "unbrokenAccentQuotedCharacterSequence", "singleQuotedCharacterSequence", 
                         "doubleQuotedCharacterSequence", "accentQuotedCharacterSequence", 
                         "unbrokenCharacterStringLiteral", "nullLiteral", 
                         "temporalLiteral", "sqlDatetimeLiteral", "dateLiteral", 
                         "timeLiteral", "datetimeLiteral", "durationLiteral", 
                         "sqlIntervalLiteral", "sqlIntervalType", "identifier", 
                         "delimitedIdentifier", "objectName", "objectNameOrBindingVariable", 
                         "directoryName", "schemaName", "graphName", "delimitedGraphName", 
                         "graphTypeName", "elementTypeName", "bindingTableName", 
                         "delimitedBindingTableName", "procedureName", "labelName", 
                         "functionName", "propertyName", "fieldName", "parameterName", 
                         "variable", "graphVariable", "graphPatternVariable", 
                         "pathOrSubpathVariable", "elementVariable", "pathVariable", 
                         "subpathVariable", "bindingTableVariable", "valueVariable", 
                         "bindingVariable", "predefinedTypeLiteral", "booleanLiteral", 
                         "characterStringLiteral", "byteStringLiteral", 
                         "procedureBody", "bindingVariableDefinitionBlock", 
                         "bindingVariableDefinition", "statementBlock", 
                         "statement", "nextStatement", "graphVariableDefinition", 
                         "optTypedGraphInitializer", "graphInitializer", 
                         "bindingTableVariableDefinition", "optTypedBindingTableInitializer", 
                         "bindingTableInitializer", "valueVariableDefinition", 
                         "optTypedValueInitializer", "graphExpression", 
                         "currentGraph", "nestedGraphQuerySpecification", 
                         "bindingTableExpression", "nestedBindingTableQuerySpecification", 
                         "objectExpressionPrimary", "linearCatalogModifyingStatement", 
                         "simpleCatalogModifyingStatement", "primitiveCatalogModifyingStatement", 
                         "createSchemaStatement", "dropSchemaStatement", 
                         "createGraphStatement", "openGraphType", "ofGraphType", 
                         "graphTypeLikeGraph", "graphSource", "dropGraphStatement", 
                         "createGraphTypeStatement", "graphTypeSource", 
                         "copyOfGraphType", "dropGraphTypeStatement", "callCatalogModifyingProcedureStatement", 
                         "linearDataModifyingStatement", "focusedLinearDataModifyingStatement", 
                         "focusedLinearDataModifyingStatementBody", "focusedNestedDataModifyingProcedureSpecification", 
                         "ambientLinearDataModifyingStatement", "ambientLinearDataModifyingStatementBody", 
                         "simpleLinearDataAccessingStatement", "simpleDataAccessingStatement", 
                         "simpleDataModifyingStatement", "primitiveDataModifyingStatement", 
                         "insertStatement", "setStatement", "setItemList", 
                         "setItem", "setPropertyItem", "setAllPropertiesItem", 
                         "setLabelItem", "labelSetSpecification", "removeStatement", 
                         "removeItemList", "removeItem", "removePropertyItem", 
                         "removeLabelItem", "deleteStatement", "deleteItemList", 
                         "deleteItem", "callDataModifyingProcedureStatement", 
                         "compositeQueryStatement", "compositeQueryExpression", 
                         "queryConjunction", "setOperator", "compositeQueryPrimary", 
                         "linearQueryStatement", "focusedLinearQueryStatement", 
                         "focusedLinearQueryStatementPart", "focusedLinearQueryAndPrimitiveResultStatementPart", 
                         "focusedPrimitiveResultStatement", "focusedNestedQuerySpecification", 
                         "ambientLinearQueryStatement", "simpleLinearQueryStatement", 
                         "simpleQueryStatement", "primitiveQueryStatement", 
                         "matchStatement", "simpleMatchStatement", "optionalMatchStatement", 
                         "optionalOperand", "matchStatementBlock", "callQueryStatement", 
                         "filterStatement", "letStatement", "letVariableDefinitionList", 
                         "letVariableDefinition", "forStatement", "forItem", 
                         "forItemAlias", "forOrdinalityOrOffset", "orderByAndPageStatement", 
                         "primitiveResultStatement", "returnStatement", 
                         "returnStatementBody", "returnItemList", "returnItem", 
                         "returnItemAlias", "selectStatement", "selectItemList", 
                         "selectItem", "selectItemAlias", "havingClause", 
                         "selectStatementBody", "selectGraphMatchList", 
                         "selectGraphMatch", "selectQuerySpecification", 
                         "callProcedureStatement", "procedureCall", "inlineProcedureCall", 
                         "variableScopeClause", "bindingVariableReferenceList", 
                         "namedProcedureCall", "procedureArgumentList", 
                         "procedureArgument", "useGraphClause", "atSchemaClause", 
                         "bindingVariableReference", "elementVariableReference", 
                         "pathVariableReference", "parameter", "graphPatternBindingTable", 
                         "graphPatternYieldClause", "graphPatternYieldItemList", 
                         "graphPatternYieldItem", "graphPattern", "matchMode", 
                         "repeatableElementsMatchMode", "differentEdgesMatchMode", 
                         "elementBindingsOrElements", "edgeBindingsOrEdges", 
                         "pathPatternList", "pathPattern", "pathVariableDeclaration", 
                         "keepClause", "graphPatternWhereClause", "pathPatternPrefix", 
                         "pathModePrefix", "pathMode", "pathSearchPrefix", 
                         "allPathSearch", "pathOrPaths", "anyPathSearch", 
                         "numberOfPaths", "shortestPathSearch", "allShortestPathSearch", 
                         "anyShortestPathSearch", "countedShortestPathSearch", 
                         "countedShortestGroupSearch", "numberOfGroups", 
                         "pathPatternExpression", "pathMultisetAlternation", 
                         "pathPatternUnion", "pathTerm", "pathFactor", "quantifiedPathPrimary", 
                         "questionedPathPrimary", "pathPrimary", "elementPattern", 
                         "nodePattern", "elementPatternFiller", "elementVariableDeclaration", 
                         "isLabelExpression", "isOrColon", "elementPatternPredicate", 
                         "elementPatternWhereClause", "elementPropertySpecification", 
                         "propertyKeyValuePairList", "propertyKeyValuePair", 
                         "edgePattern", "fullEdgePattern", "fullEdgePointingLeft", 
                         "fullEdgeUndirected", "fullEdgePointingRight", 
                         "fullEdgeLeftOrUndirected", "fullEdgeUndirectedOrRight", 
                         "fullEdgeLeftOrRight", "fullEdgeAnyDirection", 
                         "abbreviatedEdgePattern", "parenthesizedPathPatternExpression", 
                         "subpathVariableDeclaration", "parenthesizedPathPatternWhereClause", 
                         "insertGraphPattern", "insertPathPatternList", 
                         "insertPathPattern", "insertNodePattern", "insertEdgePattern", 
                         "insertEdgePointingLeft", "insertEdgePointingRight", 
                         "insertEdgeUndirected", "insertElementPatternFiller", 
                         "labelAndPropertySetSpecification", "labelExpression", 
                         "labelTerm", "labelFactor", "labelPrimary", "wildcardLabel", 
                         "parenthesizedLabelExpression", "graphPatternQuantifier", 
                         "fixedQuantifier", "generalQuantifier", "lowerBound", 
                         "upperBound", "simplifiedPathPatternExpression", 
                         "simplifiedDefaultingLeft", "simplifiedDefaultingUndirected", 
                         "simplifiedDefaultingRight", "simplifiedDefaultingLeftOrUndirected", 
                         "simplifiedDefaultingUndirectedOrRight", "simplifiedDefaultingLeftOrRight", 
                         "simplifiedDefaultingAnyDirection", "simplifiedContents", 
                         "simplifiedPathUnion", "simplifiedMultisetAlternation", 
                         "simplifiedTerm", "simplifiedFactorLow", "simplifiedFactorHigh", 
                         "simplifiedQuantified", "simplifiedQuestioned", 
                         "simplifiedTertiary", "simplifiedDirectionOverride", 
                         "simplifiedOverrideLeft", "simplifiedOverrideUndirected", 
                         "simplifiedOverrideRight", "simplifiedOverrideLeftOrUndirected", 
                         "simplifiedOverrideUndirectedOrRight", "simplifiedOverrideLeftOrRight", 
                         "simplifiedOverrideAnyDirection", "simplifiedSecondary", 
                         "simplifiedNegation", "simplifiedPrimary", "whereClause", 
                         "yieldClause", "yieldItemList", "yieldItem", "yieldItemName", 
                         "yieldItemAlias", "groupByClause", "groupingElementList", 
                         "groupingElement", "emptyGroupingSet", "orderByClause", 
                         "aggregateFunction", "generalSetFunctionType", 
                         "setQuantifier", "binarySetFunctionType", "sortSpecificationList", 
                         "sortSpecification", "sortKey", "orderingSpecification", 
                         "nullOrdering", "limitClause", "offsetClause", 
                         "offsetSynonym", "nestedGraphTypeSpecification", 
                         "graphTypeSpecificationBody", "elementTypeDefinitionList", 
                         "elementTypeDefinition", "nodeTypeDefinition", 
                         "nodeTypePattern", "nodeTypePhrase", "nodeTypeName", 
                         "nodeTypeFiller", "nodeTypeLabelSetDefinition", 
                         "nodeTypePropertyTypeSetDefinition", "edgeTypeDefinition", 
                         "edgeTypePattern", "edgeTypePhrase", "edgeTypeName", 
                         "edgeTypeFiller", "edgeTypeLabelSetDefinition", 
                         "edgeTypePropertyTypeSetDefinition", "fullEdgeTypePattern", 
                         "fullEdgeTypePatternPointingRight", "fullEdgeTypePatternPointingLeft", 
                         "fullEdgeTypePatternUndirected", "arcTypePointingRight", 
                         "arcTypePointingLeft", "arcTypeUndirected", "arcTypeFiller", 
                         "abbreviatedEdgeTypePattern", "abbreviatedEdgeTypePatternPointingRight", 
                         "abbreviatedEdgeTypePatternPointingLeft", "abbreviatedEdgeTypePatternUndirected", 
                         "nodeTypeReference", "sourceNodeTypeReference", 
                         "destinationNodeTypeReference", "edgeKind", "endpointDefinition", 
                         "endpointPairDefinition", "endpointPairDefinitionPointingRight", 
                         "endpointPairDefinitionPointingLeft", "endpointPairDefinitionUndirected", 
                         "connectorPointingRight", "connectorUndirected", 
                         "sourceNodeTypeName", "destinationNodeTypeName", 
                         "labelSetDefinition", "propertyTypeSetDefinition", 
                         "propertyTypeDefinitionList", "propertyTypeDefinition", 
                         "propertyValueType", "bindingTableType", "valueType", 
                         "typed", "predefinedType", "booleanType", "characterStringType", 
                         "byteStringType", "minLength", "maxLength", "fixedLength", 
                         "numericType", "exactNumericType", "binaryExactNumericType", 
                         "signedBinaryExactNumericType", "unsignedBinaryExactNumericType", 
                         "verboseBinaryExactNumericType", "decimalExactNumericType", 
                         "precision", "scale", "approximateNumericType", 
                         "temporalType", "temporalInstantType", "temporalDurationType", 
                         "datetimeType", "localdatetimeType", "dateType", 
                         "timeType", "localtimeType", "durationType", "referenceValueType", 
                         "graphReferenceValueType", "closedGraphReferenceValueType", 
                         "openGraphReferenceValueType", "bindingTableReferenceValueType", 
                         "nodeReferenceValueType", "closedNodeReferenceValueType", 
                         "openNodeReferenceValueType", "edgeReferenceValueType", 
                         "closedEdgeReferenceValueType", "openEdgeReferenceValueType", 
                         "listValueTypeName", "listValueTypeNameSynonym", 
                         "fieldTypesSpecification", "fieldTypeList", "pathValueType", 
                         "notNull", "fieldType", "schemaReference", "absoluteCatalogSchemaReference", 
                         "catalogSchemaParentAndName", "relativeCatalogSchemaReference", 
                         "predefinedSchemaReference", "absoluteDirectoryPath", 
                         "relativeDirectoryPath", "simpleDirectoryPath", 
                         "graphReference", "catalogGraphParentAndName", 
                         "homeGraph", "graphTypeReference", "catalogGraphTypeParentAndName", 
                         "bindingTableReference", "catalogBindingTableParentAndName", 
                         "procedureReference", "catalogProcedureParentAndName", 
                         "catalogObjectParentReference", "referenceParameter", 
                         "externalObjectReference", "comparisonPredicateCond", 
                         "compOp", "nullPredicateCond", "normalizedPredicateCond", 
                         "directedPredicateCond", "labeledPredicateCond", 
                         "sourceDestinationPredicateCond", "unsignedValueSpecification", 
                         "unsignedIntegerSpecification", "parameterValueSpecification", 
                         "predefinedParameter", "expression", "expressionPredicate", 
                         "expressionAtom", "truthValue", "unaryOperator", 
                         "functionCall", "numericFunction", "functionParameter", 
                         "propertyReference", "oneArgNumericFunctionName", 
                         "twoArgNumericFunctionName", "stringFunction", 
                         "listFunction", "caseFunction", "simpleWhenClause", 
                         "searchedWhenClause", "elseClause", "whenOperand", 
                         "castFunction", "elementIdFunction", "datetimeValueFunction", 
                         "dateFunction", "timeFunction", "localTimeFunction", 
                         "datetimeFunction", "localDatetimeFunction", "dateFunctionParameters", 
                         "timeFunctionParameters", "datetimeFunctionParameters", 
                         "dateString", "timeString", "datetimeString", "durationFunction", 
                         "durationFunctionParameters", "durationString", 
                         "generalFunction", "collectionValueConstructor", 
                         "trimSpecification", "normalForm", "listValueConstructor", 
                         "recordValueConstructor", "field", "pathValueConstructor", 
                         "unsignedLiteral", "generalLiteral", "listLiteral", 
                         "recordLiteral", "recordFieldLiteral" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = GQLParser.ruleNames;
        this.literalNames = GQLParser.literalNames;
        this.symbolicNames = GQLParser.symbolicNames;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 149:
    	    		return this.compositeQueryExpression_sempred(localctx, predIndex);
    	case 389:
    	    		return this.valueType_sempred(localctx, predIndex);
    	case 466:
    	    		return this.expression_sempred(localctx, predIndex);
    	case 467:
    	    		return this.expressionPredicate_sempred(localctx, predIndex);
    	case 468:
    	    		return this.expressionAtom_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    compositeQueryExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    valueType_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return this.precpred(this._ctx, 7);
    		case 2:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 3:
    			return this.precpred(this._ctx, 4);
    		case 4:
    			return this.precpred(this._ctx, 3);
    		case 5:
    			return this.precpred(this._ctx, 2);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    expressionPredicate_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 6:
    			return this.precpred(this._ctx, 14);
    		case 7:
    			return this.precpred(this._ctx, 15);
    		case 8:
    			return this.precpred(this._ctx, 12);
    		case 9:
    			return this.precpred(this._ctx, 11);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    expressionAtom_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 10:
    			return this.precpred(this._ctx, 10);
    		case 11:
    			return this.precpred(this._ctx, 4);
    		case 12:
    			return this.precpred(this._ctx, 3);
    		case 13:
    			return this.precpred(this._ctx, 11);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	root() {
	    let localctx = new RootContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, GQLParser.RULE_root);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1028;
	        this.gqlProgram();
	        this.state = 1030;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===23) {
	            this.state = 1029;
	            this.match(GQLParser.SEMICOLON);
	        }

	        this.state = 1032;
	        this.match(GQLParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	gqlProgram() {
	    let localctx = new GqlProgramContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, GQLParser.RULE_gqlProgram);
	    var _la = 0;
	    try {
	        this.state = 1039;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1034;
	            this.programActivity();
	            this.state = 1036;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===224) {
	                this.state = 1035;
	                this.sessionCloseCommand();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1038;
	            this.sessionCloseCommand();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	programActivity() {
	    let localctx = new ProgramActivityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, GQLParser.RULE_programActivity);
	    try {
	        this.state = 1043;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 224:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1041;
	            this.sessionActivity();
	            break;
	        case 10:
	        case 40:
	        case 46:
	        case 55:
	        case 66:
	        case 73:
	        case 86:
	        case 90:
	        case 95:
	        case 107:
	        case 108:
	        case 117:
	        case 119:
	        case 133:
	        case 157:
	        case 159:
	        case 170:
	        case 180:
	        case 189:
	        case 190:
	        case 193:
	        case 195:
	        case 207:
	        case 213:
	        case 217:
	        case 218:
	        case 223:
	        case 225:
	        case 235:
	        case 240:
	        case 269:
	        case 271:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1042;
	            this.transactionActivity();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionActivity() {
	    let localctx = new SessionActivityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, GQLParser.RULE_sessionActivity);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1046; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 1045;
	        		this.sessionActivityCommand();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 1048; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,4, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionActivityCommand() {
	    let localctx = new SessionActivityCommandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, GQLParser.RULE_sessionActivityCommand);
	    try {
	        this.state = 1052;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,5,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1050;
	            this.sessionSetCommand();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1051;
	            this.sessionResetCommand();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionActivity() {
	    let localctx = new TransactionActivityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, GQLParser.RULE_transactionActivity);
	    var _la = 0;
	    try {
	        this.state = 1066;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 235:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1054;
	            this.startTransactionCommand();
	            this.state = 1059;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===10 || ((((_la - 40)) & ~0x1f) === 0 && ((1 << (_la - 40)) & 32833) !== 0) || ((((_la - 73)) & ~0x1f) === 0 && ((1 << (_la - 73)) & 4333569) !== 0) || ((((_la - 107)) & ~0x1f) === 0 && ((1 << (_la - 107)) & 67113987) !== 0) || ((((_la - 157)) & ~0x1f) === 0 && ((1 << (_la - 157)) & 8396805) !== 0) || ((((_la - 189)) & ~0x1f) === 0 && ((1 << (_la - 189)) & 285474899) !== 0) || ((((_la - 223)) & ~0x1f) === 0 && ((1 << (_la - 223)) & 131077) !== 0) || _la===269 || _la===271) {
	                this.state = 1055;
	                this.procedureSpecification();
	                this.state = 1057;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===66 || _la===218) {
	                    this.state = 1056;
	                    this.endTransactionCommand();
	                }

	            }

	            break;
	        case 10:
	        case 40:
	        case 46:
	        case 55:
	        case 73:
	        case 86:
	        case 90:
	        case 95:
	        case 107:
	        case 108:
	        case 117:
	        case 119:
	        case 133:
	        case 157:
	        case 159:
	        case 170:
	        case 180:
	        case 189:
	        case 190:
	        case 193:
	        case 195:
	        case 207:
	        case 213:
	        case 217:
	        case 223:
	        case 225:
	        case 240:
	        case 269:
	        case 271:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1061;
	            this.procedureSpecification();
	            this.state = 1063;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===66 || _la===218) {
	                this.state = 1062;
	                this.endTransactionCommand();
	            }

	            break;
	        case 66:
	        case 218:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1065;
	            this.endTransactionCommand();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	endTransactionCommand() {
	    let localctx = new EndTransactionCommandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, GQLParser.RULE_endTransactionCommand);
	    try {
	        this.state = 1070;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 218:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1068;
	            this.rollbackCommand();
	            break;
	        case 66:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1069;
	            this.commitCommand();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionSetCommand() {
	    let localctx = new SessionSetCommandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, GQLParser.RULE_sessionSetCommand);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1072;
	        this.match(GQLParser.SESSION);
	        this.state = 1073;
	        this.match(GQLParser.SET);
	        this.state = 1078;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1074;
	            this.sessionSetSchemaClause();
	            break;

	        case 2:
	            this.state = 1075;
	            this.sessionSetGraphClause();
	            break;

	        case 3:
	            this.state = 1076;
	            this.sessionSetTimeZoneClause();
	            break;

	        case 4:
	            this.state = 1077;
	            this.sessionSetParameterClause();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionSetSchemaClause() {
	    let localctx = new SessionSetSchemaClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, GQLParser.RULE_sessionSetSchemaClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1080;
	        this.match(GQLParser.SCHEMA);
	        this.state = 1081;
	        this.schemaReference();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionSetGraphClause() {
	    let localctx = new SessionSetGraphClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, GQLParser.RULE_sessionSetGraphClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1084;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===207) {
	            this.state = 1083;
	            this.match(GQLParser.PROPERTY);
	        }

	        this.state = 1086;
	        this.match(GQLParser.GRAPH);
	        this.state = 1087;
	        this.graphExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionSetTimeZoneClause() {
	    let localctx = new SessionSetTimeZoneClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, GQLParser.RULE_sessionSetTimeZoneClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1089;
	        this.match(GQLParser.TIME);
	        this.state = 1090;
	        this.match(GQLParser.ZONE);
	        this.state = 1091;
	        this.setTimeZoneValue();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setTimeZoneValue() {
	    let localctx = new SetTimeZoneValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, GQLParser.RULE_setTimeZoneValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1093;
	        this.expressionAtom(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionSetParameterClause() {
	    let localctx = new SessionSetParameterClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, GQLParser.RULE_sessionSetParameterClause);
	    try {
	        this.state = 1098;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 119:
	        case 207:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1095;
	            this.sessionSetGraphParameterClause();
	            break;
	        case 46:
	        case 240:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1096;
	            this.sessionSetBindingTableParameterClause();
	            break;
	        case 271:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1097;
	            this.sessionSetValueParameterClause();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionSetGraphParameterClause() {
	    let localctx = new SessionSetGraphParameterClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, GQLParser.RULE_sessionSetGraphParameterClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1101;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===207) {
	            this.state = 1100;
	            this.match(GQLParser.PROPERTY);
	        }

	        this.state = 1103;
	        this.match(GQLParser.GRAPH);
	        this.state = 1104;
	        this.sessionSetParameterName();
	        this.state = 1105;
	        this.optTypedGraphInitializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionSetBindingTableParameterClause() {
	    let localctx = new SessionSetBindingTableParameterClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, GQLParser.RULE_sessionSetBindingTableParameterClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1108;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===46) {
	            this.state = 1107;
	            this.match(GQLParser.BINDING);
	        }

	        this.state = 1110;
	        this.match(GQLParser.TABLE);
	        this.state = 1111;
	        this.sessionSetParameterName();
	        this.state = 1112;
	        this.optTypedBindingTableInitializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionSetValueParameterClause() {
	    let localctx = new SessionSetValueParameterClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, GQLParser.RULE_sessionSetValueParameterClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1114;
	        this.match(GQLParser.VALUE);
	        this.state = 1115;
	        this.sessionSetParameterName();
	        this.state = 1116;
	        this.optTypedValueInitializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionSetParameterName() {
	    let localctx = new SessionSetParameterNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, GQLParser.RULE_sessionSetParameterName);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1121;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===131) {
	            this.state = 1118;
	            this.match(GQLParser.IF);
	            this.state = 1119;
	            this.match(GQLParser.NOT);
	            this.state = 1120;
	            this.match(GQLParser.EXISTS);
	        }

	        this.state = 1123;
	        this.parameterName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionResetCommand() {
	    let localctx = new SessionResetCommandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, GQLParser.RULE_sessionResetCommand);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1125;
	        this.match(GQLParser.SESSION);
	        this.state = 1126;
	        this.match(GQLParser.RESET);
	        this.state = 1128;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===6 || _la===31 || _la===62 || _la===119 || ((((_la - 198)) & ~0x1f) === 0 && ((1 << (_la - 198)) & 16777731) !== 0) || _la===245) {
	            this.state = 1127;
	            this.sessionResetArguments();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionResetArguments() {
	    let localctx = new SessionResetArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, GQLParser.RULE_sessionResetArguments);
	    var _la = 0;
	    try {
	        this.state = 1145;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 31:
	        case 62:
	        case 199:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1131;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===31) {
	                this.state = 1130;
	                this.match(GQLParser.ALL);
	            }

	            this.state = 1133;
	            _la = this._input.LA(1);
	            if(!(_la===62 || _la===199)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 222:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1134;
	            this.match(GQLParser.SCHEMA);
	            break;
	        case 119:
	        case 207:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1136;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===207) {
	                this.state = 1135;
	                this.match(GQLParser.PROPERTY);
	            }

	            this.state = 1138;
	            this.match(GQLParser.GRAPH);
	            break;
	        case 245:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1139;
	            this.match(GQLParser.TIME);
	            this.state = 1140;
	            this.match(GQLParser.ZONE);
	            break;
	        case 6:
	        case 198:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1142;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===198) {
	                this.state = 1141;
	                this.match(GQLParser.PARAMETER);
	            }

	            this.state = 1144;
	            this.parameterName();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sessionCloseCommand() {
	    let localctx = new SessionCloseCommandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, GQLParser.RULE_sessionCloseCommand);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1147;
	        this.match(GQLParser.SESSION);
	        this.state = 1148;
	        this.match(GQLParser.CLOSE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	startTransactionCommand() {
	    let localctx = new StartTransactionCommandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, GQLParser.RULE_startTransactionCommand);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1150;
	        this.match(GQLParser.START);
	        this.state = 1151;
	        this.match(GQLParser.TRANSACTION);
	        this.state = 1153;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===126 || _la===210) {
	            this.state = 1152;
	            this.transactionCharacteristics();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionCharacteristics() {
	    let localctx = new TransactionCharacteristicsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, GQLParser.RULE_transactionCharacteristics);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1155;
	        this.transactionMode();
	        this.state = 1160;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===5) {
	            this.state = 1156;
	            this.match(GQLParser.COMMA);
	            this.state = 1157;
	            this.transactionMode();
	            this.state = 1162;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionMode() {
	    let localctx = new TransactionModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, GQLParser.RULE_transactionMode);
	    try {
	        this.state = 1165;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 210:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1163;
	            this.transactionAccessMode();
	            break;
	        case 126:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1164;
	            this.implementationDefinedAccessMode();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionAccessMode() {
	    let localctx = new TransactionAccessModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, GQLParser.RULE_transactionAccessMode);
	    try {
	        this.state = 1171;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1167;
	            this.match(GQLParser.READ);
	            this.state = 1168;
	            this.match(GQLParser.ONLY);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1169;
	            this.match(GQLParser.READ);
	            this.state = 1170;
	            this.match(GQLParser.WRITE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	implementationDefinedAccessMode() {
	    let localctx = new ImplementationDefinedAccessModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, GQLParser.RULE_implementationDefinedAccessMode);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1173;
	        this.match(GQLParser.I_DONT_KNOW_1);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rollbackCommand() {
	    let localctx = new RollbackCommandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, GQLParser.RULE_rollbackCommand);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1175;
	        this.match(GQLParser.ROLLBACK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commitCommand() {
	    let localctx = new CommitCommandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, GQLParser.RULE_commitCommand);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1177;
	        this.match(GQLParser.COMMIT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nestedProcedureSpecification() {
	    let localctx = new NestedProcedureSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, GQLParser.RULE_nestedProcedureSpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1179;
	        this.match(GQLParser.LEFT_BRACE);
	        this.state = 1180;
	        this.procedureSpecification();
	        this.state = 1181;
	        this.match(GQLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureSpecification() {
	    let localctx = new ProcedureSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, GQLParser.RULE_procedureSpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1183;
	        this.procedureBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catalogModifyingProcedureSpecification() {
	    let localctx = new CatalogModifyingProcedureSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, GQLParser.RULE_catalogModifyingProcedureSpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1185;
	        this.procedureBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nestedDataModifyingProcedureSpecification() {
	    let localctx = new NestedDataModifyingProcedureSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, GQLParser.RULE_nestedDataModifyingProcedureSpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1187;
	        this.match(GQLParser.LEFT_BRACE);
	        this.state = 1188;
	        this.dataModifyingProcedureSpecification();
	        this.state = 1189;
	        this.match(GQLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataModifyingProcedureSpecification() {
	    let localctx = new DataModifyingProcedureSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, GQLParser.RULE_dataModifyingProcedureSpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1191;
	        this.procedureBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nestedQuerySpecification() {
	    let localctx = new NestedQuerySpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, GQLParser.RULE_nestedQuerySpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1193;
	        this.match(GQLParser.LEFT_BRACE);
	        this.state = 1194;
	        this.procedureSpecification();
	        this.state = 1195;
	        this.match(GQLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	querySpecification() {
	    let localctx = new QuerySpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, GQLParser.RULE_querySpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1197;
	        this.procedureBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unsignedNumericLiteral() {
	    let localctx = new UnsignedNumericLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, GQLParser.RULE_unsignedNumericLiteral);
	    try {
	        this.state = 1201;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1199;
	            this.integerLiteral();
	            break;
	        case 332:
	        case 333:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1200;
	            this.floatLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	integerLiteral() {
	    let localctx = new IntegerLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, GQLParser.RULE_integerLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1203;
	        _la = this._input.LA(1);
	        if(!(((((_la - 328)) & ~0x1f) === 0 && ((1 << (_la - 328)) & 15) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	floatLiteral() {
	    let localctx = new FloatLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, GQLParser.RULE_floatLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1205;
	        _la = this._input.LA(1);
	        if(!(_la===332 || _la===333)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unbrokenSingleQuotedCharacterSequence() {
	    let localctx = new UnbrokenSingleQuotedCharacterSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, GQLParser.RULE_unbrokenSingleQuotedCharacterSequence);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1207;
	        this.match(GQLParser.SINGLE_QUOTED_STRING_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unbrokenDoubleQuotedCharacterSequence() {
	    let localctx = new UnbrokenDoubleQuotedCharacterSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, GQLParser.RULE_unbrokenDoubleQuotedCharacterSequence);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1209;
	        this.match(GQLParser.DOUBLE_QUOTED_STRING_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unbrokenAccentQuotedCharacterSequence() {
	    let localctx = new UnbrokenAccentQuotedCharacterSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, GQLParser.RULE_unbrokenAccentQuotedCharacterSequence);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1211;
	        this.match(GQLParser.ACCENT_QUOTED_STRING_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleQuotedCharacterSequence() {
	    let localctx = new SingleQuotedCharacterSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, GQLParser.RULE_singleQuotedCharacterSequence);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1213;
	        this.unbrokenSingleQuotedCharacterSequence();
	        this.state = 1218;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,27,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1214;
	                this.match(GQLParser.VERTICAL_BAR);
	                this.state = 1215;
	                this.unbrokenSingleQuotedCharacterSequence(); 
	            }
	            this.state = 1220;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,27,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	doubleQuotedCharacterSequence() {
	    let localctx = new DoubleQuotedCharacterSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, GQLParser.RULE_doubleQuotedCharacterSequence);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1221;
	        this.unbrokenDoubleQuotedCharacterSequence();
	        this.state = 1226;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,28,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1222;
	                this.match(GQLParser.VERTICAL_BAR);
	                this.state = 1223;
	                this.unbrokenDoubleQuotedCharacterSequence(); 
	            }
	            this.state = 1228;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,28,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	accentQuotedCharacterSequence() {
	    let localctx = new AccentQuotedCharacterSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, GQLParser.RULE_accentQuotedCharacterSequence);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1229;
	        this.unbrokenAccentQuotedCharacterSequence();
	        this.state = 1234;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,29,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1230;
	                this.match(GQLParser.VERTICAL_BAR);
	                this.state = 1231;
	                this.unbrokenAccentQuotedCharacterSequence(); 
	            }
	            this.state = 1236;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,29,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unbrokenCharacterStringLiteral() {
	    let localctx = new UnbrokenCharacterStringLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, GQLParser.RULE_unbrokenCharacterStringLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1239;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 336:
	            this.state = 1237;
	            this.unbrokenSingleQuotedCharacterSequence();
	            break;
	        case 337:
	            this.state = 1238;
	            this.unbrokenDoubleQuotedCharacterSequence();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nullLiteral() {
	    let localctx = new NullLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, GQLParser.RULE_nullLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1241;
	        this.match(GQLParser.NULL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	temporalLiteral() {
	    let localctx = new TemporalLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, GQLParser.RULE_temporalLiteral);
	    try {
	        this.state = 1247;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1243;
	            this.dateLiteral();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1244;
	            this.timeLiteral();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1245;
	            this.datetimeLiteral();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1246;
	            this.sqlDatetimeLiteral();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlDatetimeLiteral() {
	    let localctx = new SqlDatetimeLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, GQLParser.RULE_sqlDatetimeLiteral);
	    try {
	        this.state = 1291;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 81:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1249;
	            this.match(GQLParser.DATE);
	            this.state = 1250;
	            this.match(GQLParser.QUOTE);
	            this.state = 1251;
	            this.match(GQLParser.FOUR_DIGIT);
	            this.state = 1252;
	            this.match(GQLParser.MINUS_SIGN);
	            this.state = 1253;
	            this.match(GQLParser.DOUBLE_DIGIT);
	            this.state = 1254;
	            this.match(GQLParser.MINUS_SIGN);
	            this.state = 1255;
	            this.match(GQLParser.DOUBLE_DIGIT);
	            this.state = 1256;
	            this.match(GQLParser.QUOTE);
	            break;
	        case 245:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1257;
	            this.match(GQLParser.TIME);
	            this.state = 1258;
	            this.match(GQLParser.QUOTE);
	            this.state = 1259;
	            this.match(GQLParser.DOUBLE_DIGIT);
	            this.state = 1260;
	            this.match(GQLParser.COLON);
	            this.state = 1261;
	            this.match(GQLParser.DOUBLE_DIGIT);
	            this.state = 1262;
	            this.match(GQLParser.COLON);
	            this.state = 1263;
	            this.match(GQLParser.DOUBLE_DIGIT);
	            this.state = 1264;
	            this.match(GQLParser.QUOTE);
	            break;
	        case 246:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1265;
	            this.match(GQLParser.TIMESTAMP);
	            this.state = 1266;
	            this.match(GQLParser.QUOTE);
	            this.state = 1267;
	            this.match(GQLParser.FOUR_DIGIT);
	            this.state = 1268;
	            this.match(GQLParser.MINUS_SIGN);
	            this.state = 1269;
	            this.match(GQLParser.DOUBLE_DIGIT);
	            this.state = 1270;
	            this.match(GQLParser.MINUS_SIGN);
	            this.state = 1271;
	            this.match(GQLParser.DOUBLE_DIGIT);
	            this.state = 1272;
	            this.match(GQLParser.DOUBLE_DIGIT);
	            this.state = 1273;
	            this.match(GQLParser.COLON);
	            this.state = 1274;
	            this.match(GQLParser.DOUBLE_DIGIT);
	            this.state = 1275;
	            this.match(GQLParser.COLON);
	            this.state = 1276;
	            this.match(GQLParser.DOUBLE_DIGIT);
	            this.state = 1277;
	            this.match(GQLParser.QUOTE);
	            break;
	        case 82:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1278;
	            this.match(GQLParser.DATETIME);
	            this.state = 1279;
	            this.match(GQLParser.QUOTE);
	            this.state = 1280;
	            this.match(GQLParser.FOUR_DIGIT);
	            this.state = 1281;
	            this.match(GQLParser.MINUS_SIGN);
	            this.state = 1282;
	            this.match(GQLParser.DOUBLE_DIGIT);
	            this.state = 1283;
	            this.match(GQLParser.MINUS_SIGN);
	            this.state = 1284;
	            this.match(GQLParser.DOUBLE_DIGIT);
	            this.state = 1285;
	            this.match(GQLParser.DOUBLE_DIGIT);
	            this.state = 1286;
	            this.match(GQLParser.COLON);
	            this.state = 1287;
	            this.match(GQLParser.DOUBLE_DIGIT);
	            this.state = 1288;
	            this.match(GQLParser.COLON);
	            this.state = 1289;
	            this.match(GQLParser.DOUBLE_DIGIT);
	            this.state = 1290;
	            this.match(GQLParser.QUOTE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateLiteral() {
	    let localctx = new DateLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, GQLParser.RULE_dateLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1293;
	        this.match(GQLParser.DATE);
	        this.state = 1294;
	        this.unbrokenCharacterStringLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeLiteral() {
	    let localctx = new TimeLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, GQLParser.RULE_timeLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1296;
	        this.match(GQLParser.TIME);
	        this.state = 1297;
	        this.unbrokenCharacterStringLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	datetimeLiteral() {
	    let localctx = new DatetimeLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, GQLParser.RULE_datetimeLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1299;
	        _la = this._input.LA(1);
	        if(!(_la===82 || _la===246)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1300;
	        this.unbrokenCharacterStringLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationLiteral() {
	    let localctx = new DurationLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, GQLParser.RULE_durationLiteral);
	    try {
	        this.state = 1305;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 96:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1302;
	            this.match(GQLParser.DURATION);
	            this.state = 1303;
	            this.unbrokenCharacterStringLiteral();
	            break;
	        case 328:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1304;
	            this.sqlIntervalLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlIntervalLiteral() {
	    let localctx = new SqlIntervalLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, GQLParser.RULE_sqlIntervalLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1307;
	        this.match(GQLParser.UNSIGNED_DECIMAL_INTEGER);
	        this.state = 1308;
	        this.sqlIntervalType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlIntervalType() {
	    let localctx = new SqlIntervalTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, GQLParser.RULE_sqlIntervalType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1310;
	        _la = this._input.LA(1);
	        if(!(((((_la - 287)) & ~0x1f) === 0 && ((1 << (_la - 287)) & 15) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, GQLParser.RULE_identifier);
	    try {
	        this.state = 1314;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 343:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1312;
	            this.match(GQLParser.REGULAR_IDENTIFIER);
	            break;
	        case 337:
	        case 338:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1313;
	            this.delimitedIdentifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	delimitedIdentifier() {
	    let localctx = new DelimitedIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, GQLParser.RULE_delimitedIdentifier);
	    try {
	        this.state = 1318;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 337:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1316;
	            this.doubleQuotedCharacterSequence();
	            break;
	        case 338:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1317;
	            this.accentQuotedCharacterSequence();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	objectName() {
	    let localctx = new ObjectNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, GQLParser.RULE_objectName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1320;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	objectNameOrBindingVariable() {
	    let localctx = new ObjectNameOrBindingVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, GQLParser.RULE_objectNameOrBindingVariable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1322;
	        this.match(GQLParser.REGULAR_IDENTIFIER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	directoryName() {
	    let localctx = new DirectoryNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, GQLParser.RULE_directoryName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1324;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	schemaName() {
	    let localctx = new SchemaNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, GQLParser.RULE_schemaName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1326;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphName() {
	    let localctx = new GraphNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, GQLParser.RULE_graphName);
	    try {
	        this.state = 1330;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 343:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1328;
	            this.match(GQLParser.REGULAR_IDENTIFIER);
	            break;
	        case 337:
	        case 338:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1329;
	            this.delimitedGraphName();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	delimitedGraphName() {
	    let localctx = new DelimitedGraphNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, GQLParser.RULE_delimitedGraphName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1332;
	        this.delimitedIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphTypeName() {
	    let localctx = new GraphTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, GQLParser.RULE_graphTypeName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1334;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementTypeName() {
	    let localctx = new ElementTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, GQLParser.RULE_elementTypeName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1336;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingTableName() {
	    let localctx = new BindingTableNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, GQLParser.RULE_bindingTableName);
	    try {
	        this.state = 1340;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 343:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1338;
	            this.match(GQLParser.REGULAR_IDENTIFIER);
	            break;
	        case 337:
	        case 338:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1339;
	            this.delimitedBindingTableName();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	delimitedBindingTableName() {
	    let localctx = new DelimitedBindingTableNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, GQLParser.RULE_delimitedBindingTableName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1342;
	        this.delimitedIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureName() {
	    let localctx = new ProcedureNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, GQLParser.RULE_procedureName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1344;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelName() {
	    let localctx = new LabelNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, GQLParser.RULE_labelName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1346;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionName() {
	    let localctx = new FunctionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, GQLParser.RULE_functionName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1348;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyName() {
	    let localctx = new PropertyNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, GQLParser.RULE_propertyName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1350;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldName() {
	    let localctx = new FieldNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, GQLParser.RULE_fieldName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1352;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterName() {
	    let localctx = new ParameterNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, GQLParser.RULE_parameterName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1354;
	        this.match(GQLParser.DOLLAR_SIGN);
	        this.state = 1357;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	            this.state = 1355;
	            this.unsignedNumericLiteral();
	            break;
	        case 337:
	        case 338:
	        case 343:
	            this.state = 1356;
	            this.identifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variable() {
	    let localctx = new VariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, GQLParser.RULE_variable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1359;
	        this.bindingVariable();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphVariable() {
	    let localctx = new GraphVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, GQLParser.RULE_graphVariable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1361;
	        this.bindingVariable();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphPatternVariable() {
	    let localctx = new GraphPatternVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, GQLParser.RULE_graphPatternVariable);
	    try {
	        this.state = 1365;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1363;
	            this.elementVariable();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1364;
	            this.pathOrSubpathVariable();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathOrSubpathVariable() {
	    let localctx = new PathOrSubpathVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, GQLParser.RULE_pathOrSubpathVariable);
	    try {
	        this.state = 1369;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1367;
	            this.pathVariable();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1368;
	            this.subpathVariable();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementVariable() {
	    let localctx = new ElementVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, GQLParser.RULE_elementVariable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1371;
	        this.bindingVariable();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathVariable() {
	    let localctx = new PathVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, GQLParser.RULE_pathVariable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1373;
	        this.bindingVariable();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subpathVariable() {
	    let localctx = new SubpathVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, GQLParser.RULE_subpathVariable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1375;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingTableVariable() {
	    let localctx = new BindingTableVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, GQLParser.RULE_bindingTableVariable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1377;
	        this.bindingVariable();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueVariable() {
	    let localctx = new ValueVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, GQLParser.RULE_valueVariable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1379;
	        this.bindingVariable();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingVariable() {
	    let localctx = new BindingVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, GQLParser.RULE_bindingVariable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1381;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	predefinedTypeLiteral() {
	    let localctx = new PredefinedTypeLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, GQLParser.RULE_predefinedTypeLiteral);
	    try {
	        this.state = 1389;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 106:
	        case 253:
	        case 266:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1383;
	            this.booleanLiteral();
	            break;
	        case 336:
	        case 337:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1384;
	            this.characterStringLiteral();
	            break;
	        case 339:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1385;
	            this.byteStringLiteral();
	            break;
	        case 81:
	        case 82:
	        case 245:
	        case 246:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1386;
	            this.temporalLiteral();
	            break;
	        case 96:
	        case 328:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1387;
	            this.durationLiteral();
	            break;
	        case 184:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1388;
	            this.nullLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanLiteral() {
	    let localctx = new BooleanLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, GQLParser.RULE_booleanLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1391;
	        _la = this._input.LA(1);
	        if(!(_la===106 || _la===253 || _la===266)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	characterStringLiteral() {
	    let localctx = new CharacterStringLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, GQLParser.RULE_characterStringLiteral);
	    try {
	        this.state = 1395;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 336:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1393;
	            this.singleQuotedCharacterSequence();
	            break;
	        case 337:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1394;
	            this.doubleQuotedCharacterSequence();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	byteStringLiteral() {
	    let localctx = new ByteStringLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, GQLParser.RULE_byteStringLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1397;
	        this.match(GQLParser.BYTE_STRING_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureBody() {
	    let localctx = new ProcedureBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, GQLParser.RULE_procedureBody);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1400;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===40) {
	            this.state = 1399;
	            this.atSchemaClause();
	        }

	        this.state = 1403;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===46 || _la===119 || _la===207 || _la===240 || _la===271) {
	            this.state = 1402;
	            this.bindingVariableDefinitionBlock();
	        }

	        this.state = 1405;
	        this.statementBlock();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingVariableDefinitionBlock() {
	    let localctx = new BindingVariableDefinitionBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, GQLParser.RULE_bindingVariableDefinitionBlock);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1408; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1407;
	            this.bindingVariableDefinition();
	            this.state = 1410; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===46 || _la===119 || _la===207 || _la===240 || _la===271);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingVariableDefinition() {
	    let localctx = new BindingVariableDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, GQLParser.RULE_bindingVariableDefinition);
	    try {
	        this.state = 1415;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 119:
	        case 207:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1412;
	            this.graphVariableDefinition();
	            break;
	        case 46:
	        case 240:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1413;
	            this.bindingTableVariableDefinition();
	            break;
	        case 271:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1414;
	            this.valueVariableDefinition();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statementBlock() {
	    let localctx = new StatementBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, GQLParser.RULE_statementBlock);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1417;
	        this.statement();
	        this.state = 1421;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===174) {
	            this.state = 1418;
	            this.nextStatement();
	            this.state = 1423;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statement() {
	    let localctx = new StatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, GQLParser.RULE_statement);
	    try {
	        this.state = 1427;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1424;
	            this.linearCatalogModifyingStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1425;
	            this.linearDataModifyingStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1426;
	            this.compositeQueryStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nextStatement() {
	    let localctx = new NextStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, GQLParser.RULE_nextStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1429;
	        this.match(GQLParser.NEXT);
	        this.state = 1431;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===282) {
	            this.state = 1430;
	            this.yieldClause();
	        }

	        this.state = 1433;
	        this.statement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphVariableDefinition() {
	    let localctx = new GraphVariableDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, GQLParser.RULE_graphVariableDefinition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1436;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===207) {
	            this.state = 1435;
	            this.match(GQLParser.PROPERTY);
	        }

	        this.state = 1438;
	        this.match(GQLParser.GRAPH);
	        this.state = 1439;
	        this.graphVariable();
	        this.state = 1440;
	        this.optTypedGraphInitializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optTypedGraphInitializer() {
	    let localctx = new OptTypedGraphInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, GQLParser.RULE_optTypedGraphInitializer);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1446;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===34 || _la===119 || _la===207 || _la===255 || _la===300) {
	            this.state = 1443;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===255 || _la===300) {
	                this.state = 1442;
	                this.typed();
	            }

	            this.state = 1445;
	            this.graphReferenceValueType();
	        }

	        this.state = 1448;
	        this.graphInitializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphInitializer() {
	    let localctx = new GraphInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, GQLParser.RULE_graphInitializer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1450;
	        this.match(GQLParser.EQUALS_OPERATOR);
	        this.state = 1451;
	        this.graphExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingTableVariableDefinition() {
	    let localctx = new BindingTableVariableDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, GQLParser.RULE_bindingTableVariableDefinition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1454;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===46) {
	            this.state = 1453;
	            this.match(GQLParser.BINDING);
	        }

	        this.state = 1456;
	        this.match(GQLParser.TABLE);
	        this.state = 1457;
	        this.bindingTableVariable();
	        this.state = 1458;
	        this.optTypedBindingTableInitializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optTypedBindingTableInitializer() {
	    let localctx = new OptTypedBindingTableInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, GQLParser.RULE_optTypedBindingTableInitializer);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1464;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===46 || _la===240 || _la===255 || _la===300) {
	            this.state = 1461;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===255 || _la===300) {
	                this.state = 1460;
	                this.typed();
	            }

	            this.state = 1463;
	            this.bindingTableReferenceValueType();
	        }

	        this.state = 1466;
	        this.bindingTableInitializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingTableInitializer() {
	    let localctx = new BindingTableInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, GQLParser.RULE_bindingTableInitializer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1468;
	        this.match(GQLParser.EQUALS_OPERATOR);
	        this.state = 1469;
	        this.bindingTableExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueVariableDefinition() {
	    let localctx = new ValueVariableDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, GQLParser.RULE_valueVariableDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1471;
	        this.match(GQLParser.VALUE);
	        this.state = 1472;
	        this.valueVariable();
	        this.state = 1473;
	        this.optTypedValueInitializer();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optTypedValueInitializer() {
	    let localctx = new OptTypedValueInitializerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, GQLParser.RULE_optTypedValueInitializer);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1479;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===10 || _la===12 || ((((_la - 34)) & ~0x1f) === 0 && ((1 << (_la - 34)) & 1105411) !== 0) || ((((_la - 81)) & ~0x1f) === 0 && ((1 << (_la - 81)) & 3758139405) !== 0) || ((((_la - 113)) & ~0x1f) === 0 && ((1 << (_la - 113)) & 4292870343) !== 0) || ((((_la - 145)) & ~0x1f) === 0 && ((1 << (_la - 145)) & 163847) !== 0) || ((((_la - 200)) & ~0x1f) === 0 && ((1 << (_la - 200)) & 2281707649) !== 0) || ((((_la - 232)) & ~0x1f) === 0 && ((1 << (_la - 232)) & 4286603585) !== 0) || ((((_la - 264)) & ~0x1f) === 0 && ((1 << (_la - 264)) & 672138057) !== 0) || _la===300) {
	            this.state = 1476;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===255 || _la===300) {
	                this.state = 1475;
	                this.typed();
	            }

	            this.state = 1478;
	            this.valueType(0);
	        }

	        this.state = 1481;
	        this.match(GQLParser.EQUALS_OPERATOR);
	        this.state = 1482;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphExpression() {
	    let localctx = new GraphExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, GQLParser.RULE_graphExpression);
	    try {
	        this.state = 1489;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1484;
	            this.nestedGraphQuerySpecification();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1485;
	            this.objectExpressionPrimary();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1486;
	            this.graphReference();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1487;
	            this.objectNameOrBindingVariable();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1488;
	            this.currentGraph();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	currentGraph() {
	    let localctx = new CurrentGraphContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, GQLParser.RULE_currentGraph);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1491;
	        _la = this._input.LA(1);
	        if(!(_la===75 || _la===76)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nestedGraphQuerySpecification() {
	    let localctx = new NestedGraphQuerySpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, GQLParser.RULE_nestedGraphQuerySpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1493;
	        this.nestedQuerySpecification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingTableExpression() {
	    let localctx = new BindingTableExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, GQLParser.RULE_bindingTableExpression);
	    try {
	        this.state = 1499;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1495;
	            this.nestedBindingTableQuerySpecification();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1496;
	            this.objectExpressionPrimary();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1497;
	            this.bindingTableReference();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1498;
	            this.objectNameOrBindingVariable();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nestedBindingTableQuerySpecification() {
	    let localctx = new NestedBindingTableQuerySpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, GQLParser.RULE_nestedBindingTableQuerySpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1501;
	        this.nestedQuerySpecification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	objectExpressionPrimary() {
	    let localctx = new ObjectExpressionPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, GQLParser.RULE_objectExpressionPrimary);
	    try {
	        this.state = 1510;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1503;
	            this.match(GQLParser.VARIABLE);
	            this.state = 1504;
	            this.expressionAtom(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1505;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 1506;
	            this.expression(0);
	            this.state = 1507;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1509;
	            this.expressionAtom(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	linearCatalogModifyingStatement() {
	    let localctx = new LinearCatalogModifyingStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, GQLParser.RULE_linearCatalogModifyingStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1513; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1512;
	            this.simpleCatalogModifyingStatement();
	            this.state = 1515; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===55 || _la===73 || _la===95 || _la===193);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleCatalogModifyingStatement() {
	    let localctx = new SimpleCatalogModifyingStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, GQLParser.RULE_simpleCatalogModifyingStatement);
	    try {
	        this.state = 1519;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 73:
	        case 95:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1517;
	            this.primitiveCatalogModifyingStatement();
	            break;
	        case 55:
	        case 193:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1518;
	            this.callCatalogModifyingProcedureStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveCatalogModifyingStatement() {
	    let localctx = new PrimitiveCatalogModifyingStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, GQLParser.RULE_primitiveCatalogModifyingStatement);
	    try {
	        this.state = 1527;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1521;
	            this.createSchemaStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1522;
	            this.createGraphStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1523;
	            this.createGraphTypeStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1524;
	            this.dropSchemaStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1525;
	            this.dropGraphStatement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1526;
	            this.dropGraphTypeStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createSchemaStatement() {
	    let localctx = new CreateSchemaStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, GQLParser.RULE_createSchemaStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1529;
	        this.match(GQLParser.CREATE);
	        this.state = 1530;
	        this.match(GQLParser.SCHEMA);
	        this.state = 1534;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===131) {
	            this.state = 1531;
	            this.match(GQLParser.IF);
	            this.state = 1532;
	            this.match(GQLParser.NOT);
	            this.state = 1533;
	            this.match(GQLParser.EXISTS);
	        }

	        this.state = 1536;
	        this.catalogSchemaParentAndName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropSchemaStatement() {
	    let localctx = new DropSchemaStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, GQLParser.RULE_dropSchemaStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1538;
	        this.match(GQLParser.DROP);
	        this.state = 1539;
	        this.match(GQLParser.SCHEMA);
	        this.state = 1542;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===131) {
	            this.state = 1540;
	            this.match(GQLParser.IF);
	            this.state = 1541;
	            this.match(GQLParser.EXISTS);
	        }

	        this.state = 1544;
	        this.catalogSchemaParentAndName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createGraphStatement() {
	    let localctx = new CreateGraphStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, GQLParser.RULE_createGraphStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1546;
	        this.match(GQLParser.CREATE);
	        this.state = 1562;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 119:
	        case 207:
	            this.state = 1548;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===207) {
	                this.state = 1547;
	                this.match(GQLParser.PROPERTY);
	            }

	            this.state = 1550;
	            this.match(GQLParser.GRAPH);
	            this.state = 1554;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===131) {
	                this.state = 1551;
	                this.match(GQLParser.IF);
	                this.state = 1552;
	                this.match(GQLParser.NOT);
	                this.state = 1553;
	                this.match(GQLParser.EXISTS);
	            }

	            break;
	        case 194:
	            this.state = 1556;
	            this.match(GQLParser.OR);
	            this.state = 1557;
	            this.match(GQLParser.REPLACE);
	            this.state = 1559;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===207) {
	                this.state = 1558;
	                this.match(GQLParser.PROPERTY);
	            }

	            this.state = 1561;
	            this.match(GQLParser.GRAPH);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1564;
	        this.catalogGraphParentAndName();
	        this.state = 1567;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1565;
	            this.openGraphType();
	            break;

	        case 2:
	            this.state = 1566;
	            this.ofGraphType();
	            break;

	        }
	        this.state = 1570;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===36) {
	            this.state = 1569;
	            this.graphSource();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	openGraphType() {
	    let localctx = new OpenGraphTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, GQLParser.RULE_openGraphType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1573;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===255 || _la===300) {
	            this.state = 1572;
	            this.typed();
	        }

	        this.state = 1575;
	        this.match(GQLParser.ANY);
	        this.state = 1580;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===119 || _la===207) {
	            this.state = 1577;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===207) {
	                this.state = 1576;
	                this.match(GQLParser.PROPERTY);
	            }

	            this.state = 1579;
	            this.match(GQLParser.GRAPH);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ofGraphType() {
	    let localctx = new OfGraphTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, GQLParser.RULE_ofGraphType);
	    var _la = 0;
	    try {
	        this.state = 1597;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1582;
	            this.graphTypeLikeGraph();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1584;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===255 || _la===300) {
	                this.state = 1583;
	                this.typed();
	            }

	            this.state = 1586;
	            this.graphTypeReference();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1588;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===255 || _la===300) {
	                this.state = 1587;
	                this.typed();
	            }

	            this.state = 1594;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===119 || _la===207) {
	                this.state = 1591;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===207) {
	                    this.state = 1590;
	                    this.match(GQLParser.PROPERTY);
	                }

	                this.state = 1593;
	                this.match(GQLParser.GRAPH);
	            }

	            this.state = 1596;
	            this.nestedGraphTypeSpecification();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphTypeLikeGraph() {
	    let localctx = new GraphTypeLikeGraphContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, GQLParser.RULE_graphTypeLikeGraph);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1599;
	        this.match(GQLParser.LIKE);
	        this.state = 1600;
	        this.graphExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphSource() {
	    let localctx = new GraphSourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, GQLParser.RULE_graphSource);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1602;
	        this.match(GQLParser.AS);
	        this.state = 1603;
	        this.match(GQLParser.COPY);
	        this.state = 1604;
	        this.match(GQLParser.OF);
	        this.state = 1605;
	        this.graphExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropGraphStatement() {
	    let localctx = new DropGraphStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, GQLParser.RULE_dropGraphStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1607;
	        this.match(GQLParser.DROP);
	        this.state = 1609;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===207) {
	            this.state = 1608;
	            this.match(GQLParser.PROPERTY);
	        }

	        this.state = 1611;
	        this.match(GQLParser.GRAPH);
	        this.state = 1614;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===131) {
	            this.state = 1612;
	            this.match(GQLParser.IF);
	            this.state = 1613;
	            this.match(GQLParser.EXISTS);
	        }

	        this.state = 1616;
	        this.catalogGraphParentAndName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createGraphTypeStatement() {
	    let localctx = new CreateGraphTypeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, GQLParser.RULE_createGraphTypeStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1618;
	        this.match(GQLParser.CREATE);
	        this.state = 1636;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 119:
	        case 207:
	            this.state = 1620;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===207) {
	                this.state = 1619;
	                this.match(GQLParser.PROPERTY);
	            }

	            this.state = 1622;
	            this.match(GQLParser.GRAPH);
	            this.state = 1623;
	            this.match(GQLParser.TYPE);
	            this.state = 1627;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===131) {
	                this.state = 1624;
	                this.match(GQLParser.IF);
	                this.state = 1625;
	                this.match(GQLParser.NOT);
	                this.state = 1626;
	                this.match(GQLParser.EXISTS);
	            }

	            break;
	        case 194:
	            this.state = 1629;
	            this.match(GQLParser.OR);
	            this.state = 1630;
	            this.match(GQLParser.REPLACE);
	            this.state = 1632;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===207) {
	                this.state = 1631;
	                this.match(GQLParser.PROPERTY);
	            }

	            this.state = 1634;
	            this.match(GQLParser.GRAPH);
	            this.state = 1635;
	            this.match(GQLParser.TYPE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1638;
	        this.catalogGraphTypeParentAndName();
	        this.state = 1639;
	        this.graphTypeSource();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphTypeSource() {
	    let localctx = new GraphTypeSourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, GQLParser.RULE_graphTypeSource);
	    var _la = 0;
	    try {
	        this.state = 1650;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1642;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===36) {
	                this.state = 1641;
	                this.match(GQLParser.AS);
	            }

	            this.state = 1644;
	            this.copyOfGraphType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1645;
	            this.graphTypeLikeGraph();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1647;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===36) {
	                this.state = 1646;
	                this.match(GQLParser.AS);
	            }

	            this.state = 1649;
	            this.nestedGraphTypeSpecification();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	copyOfGraphType() {
	    let localctx = new CopyOfGraphTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, GQLParser.RULE_copyOfGraphType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1652;
	        this.match(GQLParser.COPY);
	        this.state = 1653;
	        this.match(GQLParser.OF);
	        this.state = 1656;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 6:
	        case 16:
	        case 24:
	        case 77:
	        case 125:
	        case 301:
	        case 337:
	        case 338:
	        case 343:
	            this.state = 1654;
	            this.graphTypeReference();
	            break;
	        case 128:
	            this.state = 1655;
	            this.externalObjectReference();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropGraphTypeStatement() {
	    let localctx = new DropGraphTypeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, GQLParser.RULE_dropGraphTypeStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1658;
	        this.match(GQLParser.DROP);
	        this.state = 1660;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===207) {
	            this.state = 1659;
	            this.match(GQLParser.PROPERTY);
	        }

	        this.state = 1662;
	        this.match(GQLParser.GRAPH);
	        this.state = 1663;
	        this.match(GQLParser.TYPE);
	        this.state = 1666;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===131) {
	            this.state = 1664;
	            this.match(GQLParser.IF);
	            this.state = 1665;
	            this.match(GQLParser.EXISTS);
	        }

	        this.state = 1668;
	        this.catalogGraphTypeParentAndName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callCatalogModifyingProcedureStatement() {
	    let localctx = new CallCatalogModifyingProcedureStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, GQLParser.RULE_callCatalogModifyingProcedureStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1670;
	        this.callProcedureStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	linearDataModifyingStatement() {
	    let localctx = new LinearDataModifyingStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, GQLParser.RULE_linearDataModifyingStatement);
	    try {
	        this.state = 1674;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 269:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1672;
	            this.focusedLinearDataModifyingStatement();
	            break;
	        case 10:
	        case 55:
	        case 86:
	        case 90:
	        case 107:
	        case 117:
	        case 133:
	        case 157:
	        case 159:
	        case 170:
	        case 180:
	        case 189:
	        case 190:
	        case 193:
	        case 195:
	        case 213:
	        case 225:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1673;
	            this.ambientLinearDataModifyingStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	focusedLinearDataModifyingStatement() {
	    let localctx = new FocusedLinearDataModifyingStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, GQLParser.RULE_focusedLinearDataModifyingStatement);
	    try {
	        this.state = 1678;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1676;
	            this.focusedLinearDataModifyingStatementBody();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1677;
	            this.focusedNestedDataModifyingProcedureSpecification();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	focusedLinearDataModifyingStatementBody() {
	    let localctx = new FocusedLinearDataModifyingStatementBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, GQLParser.RULE_focusedLinearDataModifyingStatementBody);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1680;
	        this.useGraphClause();
	        this.state = 1681;
	        this.simpleLinearDataAccessingStatement();
	        this.state = 1683;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===108 || _la===217) {
	            this.state = 1682;
	            this.primitiveResultStatement();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	focusedNestedDataModifyingProcedureSpecification() {
	    let localctx = new FocusedNestedDataModifyingProcedureSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, GQLParser.RULE_focusedNestedDataModifyingProcedureSpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1685;
	        this.useGraphClause();
	        this.state = 1686;
	        this.nestedDataModifyingProcedureSpecification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ambientLinearDataModifyingStatement() {
	    let localctx = new AmbientLinearDataModifyingStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, GQLParser.RULE_ambientLinearDataModifyingStatement);
	    try {
	        this.state = 1690;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 55:
	        case 86:
	        case 90:
	        case 107:
	        case 117:
	        case 133:
	        case 157:
	        case 159:
	        case 170:
	        case 180:
	        case 189:
	        case 190:
	        case 193:
	        case 195:
	        case 213:
	        case 225:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1688;
	            this.ambientLinearDataModifyingStatementBody();
	            break;
	        case 10:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1689;
	            this.nestedDataModifyingProcedureSpecification();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ambientLinearDataModifyingStatementBody() {
	    let localctx = new AmbientLinearDataModifyingStatementBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, GQLParser.RULE_ambientLinearDataModifyingStatementBody);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1692;
	        this.simpleLinearDataAccessingStatement();
	        this.state = 1694;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===108 || _la===217) {
	            this.state = 1693;
	            this.primitiveResultStatement();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleLinearDataAccessingStatement() {
	    let localctx = new SimpleLinearDataAccessingStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, GQLParser.RULE_simpleLinearDataAccessingStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1697; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1696;
	            this.simpleDataAccessingStatement();
	            this.state = 1699; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===55 || _la===86 || ((((_la - 90)) & ~0x1f) === 0 && ((1 << (_la - 90)) & 134348801) !== 0) || ((((_la - 133)) & ~0x1f) === 0 && ((1 << (_la - 133)) & 83886081) !== 0) || ((((_la - 170)) & ~0x1f) === 0 && ((1 << (_la - 170)) & 43516929) !== 0) || _la===213 || _la===225);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleDataAccessingStatement() {
	    let localctx = new SimpleDataAccessingStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, GQLParser.RULE_simpleDataAccessingStatement);
	    try {
	        this.state = 1703;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1701;
	            this.simpleQueryStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1702;
	            this.simpleDataModifyingStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleDataModifyingStatement() {
	    let localctx = new SimpleDataModifyingStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, GQLParser.RULE_simpleDataModifyingStatement);
	    try {
	        this.state = 1707;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 86:
	        case 90:
	        case 133:
	        case 180:
	        case 213:
	        case 225:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1705;
	            this.primitiveDataModifyingStatement();
	            break;
	        case 55:
	        case 193:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1706;
	            this.callDataModifyingProcedureStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveDataModifyingStatement() {
	    let localctx = new PrimitiveDataModifyingStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, GQLParser.RULE_primitiveDataModifyingStatement);
	    try {
	        this.state = 1713;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 133:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1709;
	            this.insertStatement();
	            break;
	        case 225:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1710;
	            this.setStatement();
	            break;
	        case 213:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1711;
	            this.removeStatement();
	            break;
	        case 86:
	        case 90:
	        case 180:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1712;
	            this.deleteStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertStatement() {
	    let localctx = new InsertStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, GQLParser.RULE_insertStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1715;
	        this.match(GQLParser.INSERT);
	        this.state = 1716;
	        this.insertGraphPattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setStatement() {
	    let localctx = new SetStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, GQLParser.RULE_setStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1718;
	        this.match(GQLParser.SET);
	        this.state = 1719;
	        this.setItemList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setItemList() {
	    let localctx = new SetItemListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, GQLParser.RULE_setItemList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1721;
	        this.setItem();
	        this.state = 1726;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===5) {
	            this.state = 1722;
	            this.match(GQLParser.COMMA);
	            this.state = 1723;
	            this.setItem();
	            this.state = 1728;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setItem() {
	    let localctx = new SetItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, GQLParser.RULE_setItem);
	    try {
	        this.state = 1732;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,102,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1729;
	            this.setPropertyItem();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1730;
	            this.setAllPropertiesItem();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1731;
	            this.setLabelItem();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setPropertyItem() {
	    let localctx = new SetPropertyItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, GQLParser.RULE_setPropertyItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1734;
	        this.bindingVariableReference();
	        this.state = 1735;
	        this.match(GQLParser.PERIOD);
	        this.state = 1736;
	        this.propertyName();
	        this.state = 1737;
	        this.match(GQLParser.EQUALS_OPERATOR);
	        this.state = 1738;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setAllPropertiesItem() {
	    let localctx = new SetAllPropertiesItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, GQLParser.RULE_setAllPropertiesItem);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1740;
	        this.bindingVariableReference();
	        this.state = 1741;
	        this.match(GQLParser.EQUALS_OPERATOR);
	        this.state = 1742;
	        this.match(GQLParser.LEFT_BRACE);
	        this.state = 1744;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 337)) & ~0x1f) === 0 && ((1 << (_la - 337)) & 67) !== 0)) {
	            this.state = 1743;
	            this.propertyKeyValuePairList();
	        }

	        this.state = 1746;
	        this.match(GQLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setLabelItem() {
	    let localctx = new SetLabelItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, GQLParser.RULE_setLabelItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1748;
	        this.bindingVariableReference();
	        this.state = 1749;
	        this.isOrColon();
	        this.state = 1750;
	        this.labelName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelSetSpecification() {
	    let localctx = new LabelSetSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, GQLParser.RULE_labelSetSpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1752;
	        this.labelName();
	        this.state = 1757;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,104,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1753;
	                this.match(GQLParser.AMPERSAND);
	                this.state = 1754;
	                this.labelName(); 
	            }
	            this.state = 1759;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,104,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	removeStatement() {
	    let localctx = new RemoveStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, GQLParser.RULE_removeStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1760;
	        this.match(GQLParser.REMOVE);
	        this.state = 1761;
	        this.removeItemList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	removeItemList() {
	    let localctx = new RemoveItemListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, GQLParser.RULE_removeItemList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1763;
	        this.removeItem();
	        this.state = 1768;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===5) {
	            this.state = 1764;
	            this.match(GQLParser.COMMA);
	            this.state = 1765;
	            this.removeItem();
	            this.state = 1770;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	removeItem() {
	    let localctx = new RemoveItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, GQLParser.RULE_removeItem);
	    try {
	        this.state = 1773;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1771;
	            this.removePropertyItem();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1772;
	            this.removeLabelItem();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	removePropertyItem() {
	    let localctx = new RemovePropertyItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, GQLParser.RULE_removePropertyItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1775;
	        this.bindingVariableReference();
	        this.state = 1776;
	        this.match(GQLParser.PERIOD);
	        this.state = 1777;
	        this.propertyName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	removeLabelItem() {
	    let localctx = new RemoveLabelItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, GQLParser.RULE_removeLabelItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1779;
	        this.bindingVariableReference();
	        this.state = 1780;
	        this.isOrColon();
	        this.state = 1781;
	        this.labelName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deleteStatement() {
	    let localctx = new DeleteStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, GQLParser.RULE_deleteStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1784;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===90 || _la===180) {
	            this.state = 1783;
	            _la = this._input.LA(1);
	            if(!(_la===90 || _la===180)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 1786;
	        this.match(GQLParser.DELETE);
	        this.state = 1787;
	        this.deleteItemList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deleteItemList() {
	    let localctx = new DeleteItemListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, GQLParser.RULE_deleteItemList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1789;
	        this.deleteItem();
	        this.state = 1794;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===5) {
	            this.state = 1790;
	            this.match(GQLParser.COMMA);
	            this.state = 1791;
	            this.deleteItem();
	            this.state = 1796;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deleteItem() {
	    let localctx = new DeleteItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, GQLParser.RULE_deleteItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1797;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callDataModifyingProcedureStatement() {
	    let localctx = new CallDataModifyingProcedureStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, GQLParser.RULE_callDataModifyingProcedureStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1799;
	        this.callProcedureStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compositeQueryStatement() {
	    let localctx = new CompositeQueryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, GQLParser.RULE_compositeQueryStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1801;
	        this.compositeQueryExpression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	compositeQueryExpression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new CompositeQueryExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 298;
	    this.enterRecursionRule(localctx, 298, GQLParser.RULE_compositeQueryExpression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1804;
	        this.compositeQueryPrimary();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1812;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,109,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new CompositeQueryExpressionContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, GQLParser.RULE_compositeQueryExpression);
	                this.state = 1806;
	                if (!( this.precpred(this._ctx, 2))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                }
	                this.state = 1807;
	                this.queryConjunction();
	                this.state = 1808;
	                this.compositeQueryPrimary(); 
	            }
	            this.state = 1814;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,109,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	queryConjunction() {
	    let localctx = new QueryConjunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, GQLParser.RULE_queryConjunction);
	    try {
	        this.state = 1817;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 103:
	        case 148:
	        case 265:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1815;
	            this.setOperator();
	            break;
	        case 197:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1816;
	            this.match(GQLParser.OTHERWISE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setOperator() {
	    let localctx = new SetOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, GQLParser.RULE_setOperator);
	    var _la = 0;
	    try {
	        this.state = 1831;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 265:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1819;
	            this.match(GQLParser.UNION);
	            this.state = 1821;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===31 || _la===93) {
	                this.state = 1820;
	                this.setQuantifier();
	            }

	            break;
	        case 103:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1823;
	            this.match(GQLParser.EXCEPT);
	            this.state = 1825;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===31 || _la===93) {
	                this.state = 1824;
	                this.setQuantifier();
	            }

	            break;
	        case 148:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1827;
	            this.match(GQLParser.INTERSECT);
	            this.state = 1829;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===31 || _la===93) {
	                this.state = 1828;
	                this.setQuantifier();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compositeQueryPrimary() {
	    let localctx = new CompositeQueryPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, GQLParser.RULE_compositeQueryPrimary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1833;
	        this.linearQueryStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	linearQueryStatement() {
	    let localctx = new LinearQueryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, GQLParser.RULE_linearQueryStatement);
	    try {
	        this.state = 1837;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 223:
	        case 269:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1835;
	            this.focusedLinearQueryStatement();
	            break;
	        case 10:
	        case 55:
	        case 107:
	        case 108:
	        case 117:
	        case 157:
	        case 159:
	        case 170:
	        case 189:
	        case 190:
	        case 193:
	        case 195:
	        case 217:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1836;
	            this.ambientLinearQueryStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	focusedLinearQueryStatement() {
	    let localctx = new FocusedLinearQueryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, GQLParser.RULE_focusedLinearQueryStatement);
	    try {
	        this.state = 1849;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,117,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1842;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,116,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1839;
	                    this.focusedLinearQueryStatementPart(); 
	                }
	                this.state = 1844;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,116,this._ctx);
	            }

	            this.state = 1845;
	            this.focusedLinearQueryAndPrimitiveResultStatementPart();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1846;
	            this.focusedPrimitiveResultStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1847;
	            this.focusedNestedQuerySpecification();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1848;
	            this.selectStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	focusedLinearQueryStatementPart() {
	    let localctx = new FocusedLinearQueryStatementPartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, GQLParser.RULE_focusedLinearQueryStatementPart);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1851;
	        this.useGraphClause();
	        this.state = 1852;
	        this.simpleLinearQueryStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	focusedLinearQueryAndPrimitiveResultStatementPart() {
	    let localctx = new FocusedLinearQueryAndPrimitiveResultStatementPartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 312, GQLParser.RULE_focusedLinearQueryAndPrimitiveResultStatementPart);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1854;
	        this.useGraphClause();
	        this.state = 1855;
	        this.simpleLinearQueryStatement();
	        this.state = 1856;
	        this.primitiveResultStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	focusedPrimitiveResultStatement() {
	    let localctx = new FocusedPrimitiveResultStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, GQLParser.RULE_focusedPrimitiveResultStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1858;
	        this.useGraphClause();
	        this.state = 1859;
	        this.primitiveResultStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	focusedNestedQuerySpecification() {
	    let localctx = new FocusedNestedQuerySpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 316, GQLParser.RULE_focusedNestedQuerySpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1861;
	        this.useGraphClause();
	        this.state = 1862;
	        this.nestedQuerySpecification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ambientLinearQueryStatement() {
	    let localctx = new AmbientLinearQueryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 318, GQLParser.RULE_ambientLinearQueryStatement);
	    var _la = 0;
	    try {
	        this.state = 1869;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 55:
	        case 107:
	        case 108:
	        case 117:
	        case 157:
	        case 159:
	        case 170:
	        case 189:
	        case 190:
	        case 193:
	        case 195:
	        case 217:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1865;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===55 || _la===107 || _la===117 || ((((_la - 157)) & ~0x1f) === 0 && ((1 << (_la - 157)) & 8197) !== 0) || ((((_la - 189)) & ~0x1f) === 0 && ((1 << (_la - 189)) & 83) !== 0)) {
	                this.state = 1864;
	                this.simpleLinearQueryStatement();
	            }

	            this.state = 1867;
	            this.primitiveResultStatement();
	            break;
	        case 10:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1868;
	            this.nestedQuerySpecification();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleLinearQueryStatement() {
	    let localctx = new SimpleLinearQueryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 320, GQLParser.RULE_simpleLinearQueryStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1872; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1871;
	            this.simpleQueryStatement();
	            this.state = 1874; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===55 || _la===107 || _la===117 || ((((_la - 157)) & ~0x1f) === 0 && ((1 << (_la - 157)) & 8197) !== 0) || ((((_la - 189)) & ~0x1f) === 0 && ((1 << (_la - 189)) & 83) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleQueryStatement() {
	    let localctx = new SimpleQueryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 322, GQLParser.RULE_simpleQueryStatement);
	    try {
	        this.state = 1878;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1876;
	            this.primitiveQueryStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1877;
	            this.callQueryStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveQueryStatement() {
	    let localctx = new PrimitiveQueryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 324, GQLParser.RULE_primitiveQueryStatement);
	    try {
	        this.state = 1885;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 170:
	        case 193:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1880;
	            this.matchStatement();
	            break;
	        case 157:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1881;
	            this.letStatement();
	            break;
	        case 117:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1882;
	            this.forStatement();
	            break;
	        case 107:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1883;
	            this.filterStatement();
	            break;
	        case 159:
	        case 189:
	        case 190:
	        case 195:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1884;
	            this.orderByAndPageStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	matchStatement() {
	    let localctx = new MatchStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 326, GQLParser.RULE_matchStatement);
	    try {
	        this.state = 1889;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 170:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1887;
	            this.simpleMatchStatement();
	            break;
	        case 193:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1888;
	            this.optionalMatchStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleMatchStatement() {
	    let localctx = new SimpleMatchStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 328, GQLParser.RULE_simpleMatchStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1891;
	        this.match(GQLParser.MATCH);
	        this.state = 1892;
	        this.graphPatternBindingTable();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionalMatchStatement() {
	    let localctx = new OptionalMatchStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 330, GQLParser.RULE_optionalMatchStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1894;
	        this.match(GQLParser.OPTIONAL);
	        this.state = 1895;
	        this.optionalOperand();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionalOperand() {
	    let localctx = new OptionalOperandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 332, GQLParser.RULE_optionalOperand);
	    try {
	        this.state = 1906;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 170:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1897;
	            this.simpleMatchStatement();
	            break;
	        case 10:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1898;
	            this.match(GQLParser.LEFT_BRACE);
	            this.state = 1899;
	            this.matchStatementBlock();
	            this.state = 1900;
	            this.match(GQLParser.RIGHT_BRACE);
	            break;
	        case 12:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1902;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 1903;
	            this.matchStatementBlock();
	            this.state = 1904;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	matchStatementBlock() {
	    let localctx = new MatchStatementBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 334, GQLParser.RULE_matchStatementBlock);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1909; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1908;
	            this.matchStatement();
	            this.state = 1911; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===170 || _la===193);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callQueryStatement() {
	    let localctx = new CallQueryStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 336, GQLParser.RULE_callQueryStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1913;
	        this.callProcedureStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	filterStatement() {
	    let localctx = new FilterStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 338, GQLParser.RULE_filterStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1915;
	        this.match(GQLParser.FILTER);
	        this.state = 1918;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 277:
	            this.state = 1916;
	            this.whereClause();
	            break;
	        case 6:
	        case 8:
	        case 10:
	        case 11:
	        case 12:
	        case 14:
	        case 17:
	        case 28:
	        case 29:
	        case 32:
	        case 35:
	        case 39:
	        case 41:
	        case 42:
	        case 46:
	        case 51:
	        case 53:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 64:
	        case 65:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 74:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 85:
	        case 96:
	        case 97:
	        case 99:
	        case 100:
	        case 104:
	        case 105:
	        case 106:
	        case 116:
	        case 119:
	        case 120:
	        case 156:
	        case 157:
	        case 160:
	        case 161:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 171:
	        case 172:
	        case 173:
	        case 181:
	        case 183:
	        case 184:
	        case 185:
	        case 187:
	        case 200:
	        case 201:
	        case 203:
	        case 204:
	        case 205:
	        case 207:
	        case 208:
	        case 209:
	        case 212:
	        case 219:
	        case 220:
	        case 221:
	        case 229:
	        case 230:
	        case 234:
	        case 236:
	        case 237:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 245:
	        case 246:
	        case 252:
	        case 253:
	        case 266:
	        case 268:
	        case 271:
	        case 285:
	        case 286:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 343:
	            this.state = 1917;
	            this.expression(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	letStatement() {
	    let localctx = new LetStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 340, GQLParser.RULE_letStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1920;
	        this.match(GQLParser.LET);
	        this.state = 1921;
	        this.letVariableDefinitionList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	letVariableDefinitionList() {
	    let localctx = new LetVariableDefinitionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 342, GQLParser.RULE_letVariableDefinitionList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1923;
	        this.letVariableDefinition();
	        this.state = 1928;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===5) {
	            this.state = 1924;
	            this.match(GQLParser.COMMA);
	            this.state = 1925;
	            this.letVariableDefinition();
	            this.state = 1930;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	letVariableDefinition() {
	    let localctx = new LetVariableDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 344, GQLParser.RULE_letVariableDefinition);
	    try {
	        this.state = 1936;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 271:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1931;
	            this.valueVariableDefinition();
	            break;
	        case 337:
	        case 338:
	        case 343:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1932;
	            this.valueVariable();
	            this.state = 1933;
	            this.match(GQLParser.EQUALS_OPERATOR);
	            this.state = 1934;
	            this.expression(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forStatement() {
	    let localctx = new ForStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 346, GQLParser.RULE_forStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1938;
	        this.match(GQLParser.FOR);
	        this.state = 1939;
	        this.forItem();
	        this.state = 1941;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===278) {
	            this.state = 1940;
	            this.forOrdinalityOrOffset();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forItem() {
	    let localctx = new ForItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 348, GQLParser.RULE_forItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1943;
	        this.forItemAlias();
	        this.state = 1944;
	        this.expressionAtom(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forItemAlias() {
	    let localctx = new ForItemAliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 350, GQLParser.RULE_forItemAlias);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1946;
	        this.identifier();
	        this.state = 1947;
	        this.match(GQLParser.IN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	forOrdinalityOrOffset() {
	    let localctx = new ForOrdinalityOrOffsetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 352, GQLParser.RULE_forOrdinalityOrOffset);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1949;
	        this.match(GQLParser.WITH);
	        this.state = 1950;
	        _la = this._input.LA(1);
	        if(!(_la===189 || _la===196)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1951;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderByAndPageStatement() {
	    let localctx = new OrderByAndPageStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 354, GQLParser.RULE_orderByAndPageStatement);
	    try {
	        this.state = 1965;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 195:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1953;
	            this.orderByClause();
	            this.state = 1955;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,130,this._ctx);
	            if(la_===1) {
	                this.state = 1954;
	                this.offsetClause();

	            }
	            this.state = 1958;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,131,this._ctx);
	            if(la_===1) {
	                this.state = 1957;
	                this.limitClause();

	            }
	            break;
	        case 189:
	        case 190:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1960;
	            this.offsetClause();
	            this.state = 1962;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,132,this._ctx);
	            if(la_===1) {
	                this.state = 1961;
	                this.limitClause();

	            }
	            break;
	        case 159:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1964;
	            this.limitClause();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveResultStatement() {
	    let localctx = new PrimitiveResultStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 356, GQLParser.RULE_primitiveResultStatement);
	    try {
	        this.state = 1972;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 217:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1967;
	            this.returnStatement();
	            this.state = 1969;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,134,this._ctx);
	            if(la_===1) {
	                this.state = 1968;
	                this.orderByAndPageStatement();

	            }
	            break;
	        case 108:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1971;
	            this.match(GQLParser.FINISH);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStatement() {
	    let localctx = new ReturnStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 358, GQLParser.RULE_returnStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1974;
	        this.match(GQLParser.RETURN);
	        this.state = 1975;
	        this.returnStatementBody();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStatementBody() {
	    let localctx = new ReturnStatementBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 360, GQLParser.RULE_returnStatementBody);
	    var _la = 0;
	    try {
	        this.state = 1989;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	        case 6:
	        case 8:
	        case 10:
	        case 11:
	        case 12:
	        case 14:
	        case 17:
	        case 28:
	        case 29:
	        case 31:
	        case 32:
	        case 35:
	        case 39:
	        case 41:
	        case 42:
	        case 46:
	        case 51:
	        case 53:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 64:
	        case 65:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 74:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 85:
	        case 93:
	        case 96:
	        case 97:
	        case 99:
	        case 100:
	        case 104:
	        case 105:
	        case 106:
	        case 116:
	        case 119:
	        case 120:
	        case 156:
	        case 157:
	        case 160:
	        case 161:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 171:
	        case 172:
	        case 173:
	        case 181:
	        case 183:
	        case 184:
	        case 185:
	        case 187:
	        case 200:
	        case 201:
	        case 203:
	        case 204:
	        case 205:
	        case 207:
	        case 208:
	        case 209:
	        case 212:
	        case 219:
	        case 220:
	        case 221:
	        case 229:
	        case 230:
	        case 234:
	        case 236:
	        case 237:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 245:
	        case 246:
	        case 252:
	        case 253:
	        case 266:
	        case 268:
	        case 271:
	        case 285:
	        case 286:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 343:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1978;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===31 || _la===93) {
	                this.state = 1977;
	                this.setQuantifier();
	            }

	            this.state = 1982;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 2:
	                this.state = 1980;
	                this.match(GQLParser.ASTERISK);
	                break;
	            case 6:
	            case 8:
	            case 10:
	            case 11:
	            case 12:
	            case 14:
	            case 17:
	            case 28:
	            case 29:
	            case 32:
	            case 35:
	            case 39:
	            case 41:
	            case 42:
	            case 46:
	            case 51:
	            case 53:
	            case 56:
	            case 57:
	            case 58:
	            case 59:
	            case 60:
	            case 61:
	            case 64:
	            case 65:
	            case 69:
	            case 70:
	            case 71:
	            case 72:
	            case 74:
	            case 78:
	            case 79:
	            case 80:
	            case 81:
	            case 82:
	            case 85:
	            case 96:
	            case 97:
	            case 99:
	            case 100:
	            case 104:
	            case 105:
	            case 106:
	            case 116:
	            case 119:
	            case 120:
	            case 156:
	            case 157:
	            case 160:
	            case 161:
	            case 163:
	            case 164:
	            case 165:
	            case 166:
	            case 167:
	            case 168:
	            case 169:
	            case 171:
	            case 172:
	            case 173:
	            case 181:
	            case 183:
	            case 184:
	            case 185:
	            case 187:
	            case 200:
	            case 201:
	            case 203:
	            case 204:
	            case 205:
	            case 207:
	            case 208:
	            case 209:
	            case 212:
	            case 219:
	            case 220:
	            case 221:
	            case 229:
	            case 230:
	            case 234:
	            case 236:
	            case 237:
	            case 239:
	            case 240:
	            case 241:
	            case 242:
	            case 245:
	            case 246:
	            case 252:
	            case 253:
	            case 266:
	            case 268:
	            case 271:
	            case 285:
	            case 286:
	            case 328:
	            case 329:
	            case 330:
	            case 331:
	            case 332:
	            case 333:
	            case 336:
	            case 337:
	            case 338:
	            case 339:
	            case 343:
	                this.state = 1981;
	                this.returnItemList();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1985;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,138,this._ctx);
	            if(la_===1) {
	                this.state = 1984;
	                this.groupByClause();

	            }
	            break;
	        case 179:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1987;
	            this.match(GQLParser.NO);
	            this.state = 1988;
	            this.match(GQLParser.BINDINGS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnItemList() {
	    let localctx = new ReturnItemListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 362, GQLParser.RULE_returnItemList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1991;
	        this.returnItem();
	        this.state = 1996;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,140,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1992;
	                this.match(GQLParser.COMMA);
	                this.state = 1993;
	                this.returnItem(); 
	            }
	            this.state = 1998;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,140,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnItem() {
	    let localctx = new ReturnItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 364, GQLParser.RULE_returnItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1999;
	        this.expression(0);
	        this.state = 2001;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,141,this._ctx);
	        if(la_===1) {
	            this.state = 2000;
	            this.returnItemAlias();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnItemAlias() {
	    let localctx = new ReturnItemAliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 366, GQLParser.RULE_returnItemAlias);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2003;
	        this.match(GQLParser.AS);
	        this.state = 2004;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectStatement() {
	    let localctx = new SelectStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 368, GQLParser.RULE_selectStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2006;
	        this.match(GQLParser.SELECT);
	        this.state = 2008;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===31 || _la===93) {
	            this.state = 2007;
	            this.setQuantifier();
	        }

	        this.state = 2012;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	            this.state = 2010;
	            this.match(GQLParser.ASTERISK);
	            break;
	        case 6:
	        case 8:
	        case 10:
	        case 11:
	        case 12:
	        case 14:
	        case 17:
	        case 28:
	        case 29:
	        case 32:
	        case 35:
	        case 39:
	        case 41:
	        case 42:
	        case 46:
	        case 51:
	        case 53:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 64:
	        case 65:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 74:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 85:
	        case 96:
	        case 97:
	        case 99:
	        case 100:
	        case 104:
	        case 105:
	        case 106:
	        case 116:
	        case 119:
	        case 120:
	        case 156:
	        case 157:
	        case 160:
	        case 161:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 171:
	        case 172:
	        case 173:
	        case 181:
	        case 183:
	        case 184:
	        case 185:
	        case 187:
	        case 200:
	        case 201:
	        case 203:
	        case 204:
	        case 205:
	        case 207:
	        case 208:
	        case 209:
	        case 212:
	        case 219:
	        case 220:
	        case 221:
	        case 229:
	        case 230:
	        case 234:
	        case 236:
	        case 237:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 245:
	        case 246:
	        case 252:
	        case 253:
	        case 266:
	        case 268:
	        case 271:
	        case 285:
	        case 286:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 343:
	            this.state = 2011;
	            this.selectItemList();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 2033;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,150,this._ctx);
	        if(la_===1) {
	            this.state = 2014;
	            this.selectStatementBody();
	            this.state = 2016;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,144,this._ctx);
	            if(la_===1) {
	                this.state = 2015;
	                this.whereClause();

	            }
	            this.state = 2019;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,145,this._ctx);
	            if(la_===1) {
	                this.state = 2018;
	                this.groupByClause();

	            }
	            this.state = 2022;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,146,this._ctx);
	            if(la_===1) {
	                this.state = 2021;
	                this.havingClause();

	            }
	            this.state = 2025;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,147,this._ctx);
	            if(la_===1) {
	                this.state = 2024;
	                this.orderByClause();

	            }
	            this.state = 2028;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,148,this._ctx);
	            if(la_===1) {
	                this.state = 2027;
	                this.offsetClause();

	            }
	            this.state = 2031;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,149,this._ctx);
	            if(la_===1) {
	                this.state = 2030;
	                this.limitClause();

	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectItemList() {
	    let localctx = new SelectItemListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 370, GQLParser.RULE_selectItemList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2035;
	        this.selectItem();
	        this.state = 2040;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,151,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2036;
	                this.match(GQLParser.COMMA);
	                this.state = 2037;
	                this.selectItem(); 
	            }
	            this.state = 2042;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,151,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectItem() {
	    let localctx = new SelectItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 372, GQLParser.RULE_selectItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2043;
	        this.expression(0);
	        this.state = 2045;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,152,this._ctx);
	        if(la_===1) {
	            this.state = 2044;
	            this.selectItemAlias();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectItemAlias() {
	    let localctx = new SelectItemAliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 374, GQLParser.RULE_selectItemAlias);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2047;
	        this.match(GQLParser.AS);
	        this.state = 2048;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	havingClause() {
	    let localctx = new HavingClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 376, GQLParser.RULE_havingClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2050;
	        this.match(GQLParser.HAVING);
	        this.state = 2051;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectStatementBody() {
	    let localctx = new SelectStatementBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 378, GQLParser.RULE_selectStatementBody);
	    try {
	        this.state = 2057;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,153,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2053;
	            this.match(GQLParser.FROM);
	            this.state = 2054;
	            this.selectGraphMatchList();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2055;
	            this.match(GQLParser.FROM);
	            this.state = 2056;
	            this.selectQuerySpecification();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectGraphMatchList() {
	    let localctx = new SelectGraphMatchListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 380, GQLParser.RULE_selectGraphMatchList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2059;
	        this.selectGraphMatch();
	        this.state = 2064;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,154,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2060;
	                this.match(GQLParser.COMMA);
	                this.state = 2061;
	                this.selectGraphMatch(); 
	            }
	            this.state = 2066;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,154,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectGraphMatch() {
	    let localctx = new SelectGraphMatchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 382, GQLParser.RULE_selectGraphMatch);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2067;
	        this.graphExpression();
	        this.state = 2068;
	        this.matchStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectQuerySpecification() {
	    let localctx = new SelectQuerySpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 384, GQLParser.RULE_selectQuerySpecification);
	    try {
	        this.state = 2074;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,155,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2070;
	            this.nestedQuerySpecification();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2071;
	            this.graphExpression();
	            this.state = 2072;
	            this.nestedQuerySpecification();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callProcedureStatement() {
	    let localctx = new CallProcedureStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 386, GQLParser.RULE_callProcedureStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2077;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===193) {
	            this.state = 2076;
	            this.match(GQLParser.OPTIONAL);
	        }

	        this.state = 2079;
	        this.match(GQLParser.CALL);
	        this.state = 2080;
	        this.procedureCall();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureCall() {
	    let localctx = new ProcedureCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 388, GQLParser.RULE_procedureCall);
	    try {
	        this.state = 2084;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 10:
	        case 12:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2082;
	            this.inlineProcedureCall();
	            break;
	        case 6:
	        case 16:
	        case 24:
	        case 77:
	        case 125:
	        case 301:
	        case 337:
	        case 338:
	        case 343:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2083;
	            this.namedProcedureCall();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inlineProcedureCall() {
	    let localctx = new InlineProcedureCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 390, GQLParser.RULE_inlineProcedureCall);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2087;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===12) {
	            this.state = 2086;
	            this.variableScopeClause();
	        }

	        this.state = 2089;
	        this.nestedProcedureSpecification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableScopeClause() {
	    let localctx = new VariableScopeClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 392, GQLParser.RULE_variableScopeClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2091;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 2093;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 337)) & ~0x1f) === 0 && ((1 << (_la - 337)) & 67) !== 0)) {
	            this.state = 2092;
	            this.bindingVariableReferenceList();
	        }

	        this.state = 2095;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingVariableReferenceList() {
	    let localctx = new BindingVariableReferenceListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 394, GQLParser.RULE_bindingVariableReferenceList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2097;
	        this.bindingVariableReference();
	        this.state = 2102;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===5) {
	            this.state = 2098;
	            this.match(GQLParser.COMMA);
	            this.state = 2099;
	            this.bindingVariableReference();
	            this.state = 2104;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	namedProcedureCall() {
	    let localctx = new NamedProcedureCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 396, GQLParser.RULE_namedProcedureCall);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2105;
	        this.procedureReference();
	        this.state = 2106;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 2108;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 805461312) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 1059604105) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 2606563) !== 0) || ((((_la - 96)) & ~0x1f) === 0 && ((1 << (_la - 96)) & 26216219) !== 0) || ((((_la - 156)) & ~0x1f) === 0 && ((1 << (_la - 156)) & 3120807859) !== 0) || ((((_la - 200)) & ~0x1f) === 0 && ((1 << (_la - 200)) & 1614287803) !== 0) || ((((_la - 234)) & ~0x1f) === 0 && ((1 << (_la - 234)) & 793069) !== 0) || ((((_la - 266)) & ~0x1f) === 0 && ((1 << (_la - 266)) & 1572901) !== 0) || ((((_la - 328)) & ~0x1f) === 0 && ((1 << (_la - 328)) & 36671) !== 0)) {
	            this.state = 2107;
	            this.procedureArgumentList();
	        }

	        this.state = 2110;
	        this.match(GQLParser.RIGHT_PAREN);
	        this.state = 2112;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===282) {
	            this.state = 2111;
	            this.yieldClause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureArgumentList() {
	    let localctx = new ProcedureArgumentListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 398, GQLParser.RULE_procedureArgumentList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2114;
	        this.procedureArgument();
	        this.state = 2119;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===5) {
	            this.state = 2115;
	            this.match(GQLParser.COMMA);
	            this.state = 2116;
	            this.procedureArgument();
	            this.state = 2121;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureArgument() {
	    let localctx = new ProcedureArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 400, GQLParser.RULE_procedureArgument);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2122;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	useGraphClause() {
	    let localctx = new UseGraphClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 402, GQLParser.RULE_useGraphClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2124;
	        this.match(GQLParser.USE);
	        this.state = 2125;
	        this.graphExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atSchemaClause() {
	    let localctx = new AtSchemaClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 404, GQLParser.RULE_atSchemaClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2127;
	        this.match(GQLParser.AT);
	        this.state = 2128;
	        this.schemaReference();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingVariableReference() {
	    let localctx = new BindingVariableReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 406, GQLParser.RULE_bindingVariableReference);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2130;
	        this.bindingVariable();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementVariableReference() {
	    let localctx = new ElementVariableReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 408, GQLParser.RULE_elementVariableReference);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2132;
	        this.bindingVariableReference();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathVariableReference() {
	    let localctx = new PathVariableReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 410, GQLParser.RULE_pathVariableReference);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2134;
	        this.bindingVariableReference();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameter() {
	    let localctx = new ParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 412, GQLParser.RULE_parameter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2136;
	        this.parameterName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphPatternBindingTable() {
	    let localctx = new GraphPatternBindingTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 414, GQLParser.RULE_graphPatternBindingTable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2138;
	        this.graphPattern();
	        this.state = 2140;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,164,this._ctx);
	        if(la_===1) {
	            this.state = 2139;
	            this.graphPatternYieldClause();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphPatternYieldClause() {
	    let localctx = new GraphPatternYieldClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 416, GQLParser.RULE_graphPatternYieldClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2142;
	        this.match(GQLParser.YIELD);
	        this.state = 2143;
	        this.graphPatternYieldItemList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphPatternYieldItemList() {
	    let localctx = new GraphPatternYieldItemListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 418, GQLParser.RULE_graphPatternYieldItemList);
	    try {
	        this.state = 2155;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 337:
	        case 338:
	        case 343:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2145;
	            this.graphPatternYieldItem();
	            this.state = 2150;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,165,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 2146;
	                    this.match(GQLParser.COMMA);
	                    this.state = 2147;
	                    this.graphPatternYieldItem(); 
	                }
	                this.state = 2152;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,165,this._ctx);
	            }

	            break;
	        case 179:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2153;
	            this.match(GQLParser.NO);
	            this.state = 2154;
	            this.match(GQLParser.BINDINGS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphPatternYieldItem() {
	    let localctx = new GraphPatternYieldItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 420, GQLParser.RULE_graphPatternYieldItem);
	    try {
	        this.state = 2159;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,167,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2157;
	            this.elementVariableReference();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2158;
	            this.pathVariableReference();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphPattern() {
	    let localctx = new GraphPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 422, GQLParser.RULE_graphPattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2162;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===91 || _la===214) {
	            this.state = 2161;
	            this.matchMode();
	        }

	        this.state = 2164;
	        this.pathPatternList();
	        this.state = 2166;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,169,this._ctx);
	        if(la_===1) {
	            this.state = 2165;
	            this.keepClause();

	        }
	        this.state = 2169;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,170,this._ctx);
	        if(la_===1) {
	            this.state = 2168;
	            this.graphPatternWhereClause();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	matchMode() {
	    let localctx = new MatchModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 424, GQLParser.RULE_matchMode);
	    try {
	        this.state = 2173;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 214:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2171;
	            this.repeatableElementsMatchMode();
	            break;
	        case 91:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2172;
	            this.differentEdgesMatchMode();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	repeatableElementsMatchMode() {
	    let localctx = new RepeatableElementsMatchModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 426, GQLParser.RULE_repeatableElementsMatchMode);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2175;
	        this.match(GQLParser.REPEATABLE);
	        this.state = 2176;
	        this.elementBindingsOrElements();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	differentEdgesMatchMode() {
	    let localctx = new DifferentEdgesMatchModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 428, GQLParser.RULE_differentEdgesMatchMode);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2178;
	        this.match(GQLParser.DIFFERENT);
	        this.state = 2179;
	        this.edgeBindingsOrEdges();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementBindingsOrElements() {
	    let localctx = new ElementBindingsOrElementsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 430, GQLParser.RULE_elementBindingsOrElements);
	    var _la = 0;
	    try {
	        this.state = 2186;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 98:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2181;
	            this.match(GQLParser.ELEMENT);
	            this.state = 2183;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===47) {
	                this.state = 2182;
	                this.match(GQLParser.BINDINGS);
	            }

	            break;
	        case 100:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2185;
	            this.match(GQLParser.ELEMENTS);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeBindingsOrEdges() {
	    let localctx = new EdgeBindingsOrEdgesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 432, GQLParser.RULE_edgeBindingsOrEdges);
	    var _la = 0;
	    try {
	        this.state = 2193;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 291:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2188;
	            this.match(GQLParser.EDGE_SYNONYM);
	            this.state = 2190;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===47) {
	                this.state = 2189;
	                this.match(GQLParser.BINDINGS);
	            }

	            break;
	        case 292:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2192;
	            this.match(GQLParser.EDGES_SYNONYM);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathPatternList() {
	    let localctx = new PathPatternListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 434, GQLParser.RULE_pathPatternList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2195;
	        this.pathPattern();
	        this.state = 2200;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,176,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2196;
	                this.match(GQLParser.COMMA);
	                this.state = 2197;
	                this.pathPattern(); 
	            }
	            this.state = 2202;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,176,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathPattern() {
	    let localctx = new PathPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 436, GQLParser.RULE_pathPattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2204;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 337)) & ~0x1f) === 0 && ((1 << (_la - 337)) & 67) !== 0)) {
	            this.state = 2203;
	            this.pathVariableDeclaration();
	        }

	        this.state = 2207;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 30)) & ~0x1f) === 0 && ((1 << (_la - 30)) & 19) !== 0) || ((((_la - 226)) & ~0x1f) === 0 && ((1 << (_la - 226)) & 8388613) !== 0) || _la===275) {
	            this.state = 2206;
	            this.pathPatternPrefix();
	        }

	        this.state = 2209;
	        this.pathPatternExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathVariableDeclaration() {
	    let localctx = new PathVariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 438, GQLParser.RULE_pathVariableDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2211;
	        this.pathVariable();
	        this.state = 2212;
	        this.match(GQLParser.EQUALS_OPERATOR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keepClause() {
	    let localctx = new KeepClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 440, GQLParser.RULE_keepClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2214;
	        this.match(GQLParser.KEEP);
	        this.state = 2215;
	        this.pathPatternPrefix();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphPatternWhereClause() {
	    let localctx = new GraphPatternWhereClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 442, GQLParser.RULE_graphPatternWhereClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2217;
	        this.match(GQLParser.WHERE);
	        this.state = 2218;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathPatternPrefix() {
	    let localctx = new PathPatternPrefixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 444, GQLParser.RULE_pathPatternPrefix);
	    try {
	        this.state = 2222;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 30:
	        case 228:
	        case 249:
	        case 275:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2220;
	            this.pathModePrefix();
	            break;
	        case 31:
	        case 34:
	        case 226:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2221;
	            this.pathSearchPrefix();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathModePrefix() {
	    let localctx = new PathModePrefixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 446, GQLParser.RULE_pathModePrefix);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2224;
	        this.pathMode();
	        this.state = 2226;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,180,this._ctx);
	        if(la_===1) {
	            this.state = 2225;
	            this.pathOrPaths();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathMode() {
	    let localctx = new PathModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 448, GQLParser.RULE_pathMode);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2228;
	        _la = this._input.LA(1);
	        if(!(_la===30 || _la===228 || _la===249 || _la===275)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathSearchPrefix() {
	    let localctx = new PathSearchPrefixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 450, GQLParser.RULE_pathSearchPrefix);
	    try {
	        this.state = 2233;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,181,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2230;
	            this.allPathSearch();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2231;
	            this.anyPathSearch();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2232;
	            this.shortestPathSearch();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	allPathSearch() {
	    let localctx = new AllPathSearchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 452, GQLParser.RULE_allPathSearch);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2235;
	        this.match(GQLParser.ALL);
	        this.state = 2237;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,182,this._ctx);
	        if(la_===1) {
	            this.state = 2236;
	            this.pathMode();

	        }
	        this.state = 2240;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,183,this._ctx);
	        if(la_===1) {
	            this.state = 2239;
	            this.pathOrPaths();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathOrPaths() {
	    let localctx = new PathOrPathsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 454, GQLParser.RULE_pathOrPaths);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2242;
	        _la = this._input.LA(1);
	        if(!(_la===200 || _la===202)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	anyPathSearch() {
	    let localctx = new AnyPathSearchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 456, GQLParser.RULE_anyPathSearch);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2244;
	        this.match(GQLParser.ANY);
	        this.state = 2246;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,184,this._ctx);
	        if(la_===1) {
	            this.state = 2245;
	            this.numberOfPaths();

	        }
	        this.state = 2249;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,185,this._ctx);
	        if(la_===1) {
	            this.state = 2248;
	            this.pathMode();

	        }
	        this.state = 2252;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,186,this._ctx);
	        if(la_===1) {
	            this.state = 2251;
	            this.pathOrPaths();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numberOfPaths() {
	    let localctx = new NumberOfPathsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 458, GQLParser.RULE_numberOfPaths);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2254;
	        this.unsignedIntegerSpecification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	shortestPathSearch() {
	    let localctx = new ShortestPathSearchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 460, GQLParser.RULE_shortestPathSearch);
	    try {
	        this.state = 2260;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,187,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2256;
	            this.allShortestPathSearch();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2257;
	            this.anyShortestPathSearch();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2258;
	            this.countedShortestPathSearch();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2259;
	            this.countedShortestGroupSearch();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	allShortestPathSearch() {
	    let localctx = new AllShortestPathSearchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 462, GQLParser.RULE_allShortestPathSearch);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2262;
	        this.match(GQLParser.ALL);
	        this.state = 2263;
	        this.match(GQLParser.SHORTEST);
	        this.state = 2265;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,188,this._ctx);
	        if(la_===1) {
	            this.state = 2264;
	            this.pathMode();

	        }
	        this.state = 2268;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,189,this._ctx);
	        if(la_===1) {
	            this.state = 2267;
	            this.pathOrPaths();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	anyShortestPathSearch() {
	    let localctx = new AnyShortestPathSearchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 464, GQLParser.RULE_anyShortestPathSearch);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2270;
	        this.match(GQLParser.ANY);
	        this.state = 2271;
	        this.match(GQLParser.SHORTEST);
	        this.state = 2273;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,190,this._ctx);
	        if(la_===1) {
	            this.state = 2272;
	            this.pathMode();

	        }
	        this.state = 2276;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,191,this._ctx);
	        if(la_===1) {
	            this.state = 2275;
	            this.pathOrPaths();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	countedShortestPathSearch() {
	    let localctx = new CountedShortestPathSearchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 466, GQLParser.RULE_countedShortestPathSearch);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2278;
	        this.match(GQLParser.SHORTEST);
	        this.state = 2279;
	        this.numberOfPaths();
	        this.state = 2281;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,192,this._ctx);
	        if(la_===1) {
	            this.state = 2280;
	            this.pathMode();

	        }
	        this.state = 2284;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,193,this._ctx);
	        if(la_===1) {
	            this.state = 2283;
	            this.pathOrPaths();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	countedShortestGroupSearch() {
	    let localctx = new CountedShortestGroupSearchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 468, GQLParser.RULE_countedShortestGroupSearch);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2286;
	        this.match(GQLParser.SHORTEST);
	        this.state = 2287;
	        this.numberOfGroups();
	        this.state = 2289;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===30 || _la===228 || _la===249 || _la===275) {
	            this.state = 2288;
	            this.pathMode();
	        }

	        this.state = 2292;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===200 || _la===202) {
	            this.state = 2291;
	            this.pathOrPaths();
	        }

	        this.state = 2294;
	        _la = this._input.LA(1);
	        if(!(_la===120 || _la===121)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numberOfGroups() {
	    let localctx = new NumberOfGroupsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 470, GQLParser.RULE_numberOfGroups);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2296;
	        this.unsignedIntegerSpecification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathPatternExpression() {
	    let localctx = new PathPatternExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 472, GQLParser.RULE_pathPatternExpression);
	    try {
	        this.state = 2301;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,196,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2298;
	            this.pathTerm();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2299;
	            this.pathMultisetAlternation();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2300;
	            this.pathPatternUnion();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathMultisetAlternation() {
	    let localctx = new PathMultisetAlternationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 474, GQLParser.RULE_pathMultisetAlternation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2303;
	        this.pathTerm();
	        this.state = 2304;
	        this.match(GQLParser.MULTISET_ALTERNATION_OPERATOR);
	        this.state = 2305;
	        this.pathTerm();
	        this.state = 2310;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,197,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2306;
	                this.match(GQLParser.MULTISET_ALTERNATION_OPERATOR);
	                this.state = 2307;
	                this.pathTerm(); 
	            }
	            this.state = 2312;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,197,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathPatternUnion() {
	    let localctx = new PathPatternUnionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 476, GQLParser.RULE_pathPatternUnion);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2313;
	        this.pathTerm();
	        this.state = 2314;
	        this.match(GQLParser.VERTICAL_BAR);
	        this.state = 2315;
	        this.pathTerm();
	        this.state = 2320;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,198,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2316;
	                this.match(GQLParser.VERTICAL_BAR);
	                this.state = 2317;
	                this.pathTerm(); 
	            }
	            this.state = 2322;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,198,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathTerm() {
	    let localctx = new PathTermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 478, GQLParser.RULE_pathTerm);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2324; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 2323;
	        		this.pathFactor();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 2326; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,199, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathFactor() {
	    let localctx = new PathFactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 480, GQLParser.RULE_pathFactor);
	    try {
	        this.state = 2331;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,200,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2328;
	            this.pathPrimary();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2329;
	            this.quantifiedPathPrimary();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2330;
	            this.questionedPathPrimary();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	quantifiedPathPrimary() {
	    let localctx = new QuantifiedPathPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 482, GQLParser.RULE_quantifiedPathPrimary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2333;
	        this.pathPrimary();
	        this.state = 2334;
	        this.graphPatternQuantifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	questionedPathPrimary() {
	    let localctx = new QuestionedPathPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 484, GQLParser.RULE_questionedPathPrimary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2336;
	        this.pathPrimary();
	        this.state = 2337;
	        this.match(GQLParser.QUESTION_MARK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathPrimary() {
	    let localctx = new PathPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 486, GQLParser.RULE_pathPrimary);
	    try {
	        this.state = 2342;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,201,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2339;
	            this.elementPattern();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2340;
	            this.parenthesizedPathPatternExpression();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2341;
	            this.simplifiedPathPatternExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementPattern() {
	    let localctx = new ElementPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 488, GQLParser.RULE_elementPattern);
	    try {
	        this.state = 2346;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 12:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2344;
	            this.nodePattern();
	            break;
	        case 13:
	        case 14:
	        case 25:
	        case 303:
	        case 309:
	        case 312:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2345;
	            this.edgePattern();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodePattern() {
	    let localctx = new NodePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 490, GQLParser.RULE_nodePattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2348;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 2349;
	        this.elementPatternFiller();
	        this.state = 2350;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementPatternFiller() {
	    let localctx = new ElementPatternFillerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 492, GQLParser.RULE_elementPatternFiller);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2353;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===243 || ((((_la - 337)) & ~0x1f) === 0 && ((1 << (_la - 337)) & 67) !== 0)) {
	            this.state = 2352;
	            this.elementVariableDeclaration();
	        }

	        this.state = 2356;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===4 || _la===149) {
	            this.state = 2355;
	            this.isLabelExpression();
	        }

	        this.state = 2359;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===10 || _la===277) {
	            this.state = 2358;
	            this.elementPatternPredicate();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementVariableDeclaration() {
	    let localctx = new ElementVariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 494, GQLParser.RULE_elementVariableDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2362;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===243) {
	            this.state = 2361;
	            this.match(GQLParser.TEMP);
	        }

	        this.state = 2364;
	        this.elementVariable();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	isLabelExpression() {
	    let localctx = new IsLabelExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 496, GQLParser.RULE_isLabelExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2366;
	        this.isOrColon();
	        this.state = 2367;
	        this.labelExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	isOrColon() {
	    let localctx = new IsOrColonContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 498, GQLParser.RULE_isOrColon);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2369;
	        _la = this._input.LA(1);
	        if(!(_la===4 || _la===149)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementPatternPredicate() {
	    let localctx = new ElementPatternPredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 500, GQLParser.RULE_elementPatternPredicate);
	    try {
	        this.state = 2373;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 277:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2371;
	            this.elementPatternWhereClause();
	            break;
	        case 10:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2372;
	            this.elementPropertySpecification();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementPatternWhereClause() {
	    let localctx = new ElementPatternWhereClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 502, GQLParser.RULE_elementPatternWhereClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2375;
	        this.match(GQLParser.WHERE);
	        this.state = 2376;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementPropertySpecification() {
	    let localctx = new ElementPropertySpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 504, GQLParser.RULE_elementPropertySpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2378;
	        this.match(GQLParser.LEFT_BRACE);
	        this.state = 2379;
	        this.propertyKeyValuePairList();
	        this.state = 2380;
	        this.match(GQLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyKeyValuePairList() {
	    let localctx = new PropertyKeyValuePairListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 506, GQLParser.RULE_propertyKeyValuePairList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2382;
	        this.propertyKeyValuePair();
	        this.state = 2387;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===5) {
	            this.state = 2383;
	            this.match(GQLParser.COMMA);
	            this.state = 2384;
	            this.propertyKeyValuePair();
	            this.state = 2389;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyKeyValuePair() {
	    let localctx = new PropertyKeyValuePairContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 508, GQLParser.RULE_propertyKeyValuePair);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2390;
	        this.propertyName();
	        this.state = 2391;
	        this.match(GQLParser.COLON);
	        this.state = 2392;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgePattern() {
	    let localctx = new EdgePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 510, GQLParser.RULE_edgePattern);
	    try {
	        this.state = 2396;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,209,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2394;
	            this.fullEdgePattern();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2395;
	            this.abbreviatedEdgePattern();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgePattern() {
	    let localctx = new FullEdgePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 512, GQLParser.RULE_fullEdgePattern);
	    try {
	        this.state = 2405;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,210,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2398;
	            this.fullEdgePointingLeft();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2399;
	            this.fullEdgeUndirected();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2400;
	            this.fullEdgePointingRight();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2401;
	            this.fullEdgeLeftOrUndirected();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2402;
	            this.fullEdgeUndirectedOrRight();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2403;
	            this.fullEdgeLeftOrRight();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2404;
	            this.fullEdgeAnyDirection();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgePointingLeft() {
	    let localctx = new FullEdgePointingLeftContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 514, GQLParser.RULE_fullEdgePointingLeft);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2407;
	        this.match(GQLParser.LEFT_ANGLE_BRACKET);
	        this.state = 2408;
	        this.match(GQLParser.MINUS_SIGN);
	        this.state = 2409;
	        this.match(GQLParser.LEFT_BRACKET);
	        this.state = 2410;
	        this.elementPatternFiller();
	        this.state = 2411;
	        this.match(GQLParser.RIGHT_BRACKET);
	        this.state = 2412;
	        this.match(GQLParser.MINUS_SIGN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgeUndirected() {
	    let localctx = new FullEdgeUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 516, GQLParser.RULE_fullEdgeUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2414;
	        this.match(GQLParser.TILDE);
	        this.state = 2415;
	        this.match(GQLParser.LEFT_BRACKET);
	        this.state = 2416;
	        this.elementPatternFiller();
	        this.state = 2417;
	        this.match(GQLParser.RIGHT_BRACKET);
	        this.state = 2418;
	        this.match(GQLParser.TILDE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgePointingRight() {
	    let localctx = new FullEdgePointingRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 518, GQLParser.RULE_fullEdgePointingRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2420;
	        this.match(GQLParser.MINUS_SIGN);
	        this.state = 2421;
	        this.match(GQLParser.LEFT_BRACKET);
	        this.state = 2422;
	        this.elementPatternFiller();
	        this.state = 2423;
	        this.match(GQLParser.RIGHT_BRACKET);
	        this.state = 2424;
	        this.match(GQLParser.RIGHT_ARROW);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgeLeftOrUndirected() {
	    let localctx = new FullEdgeLeftOrUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 520, GQLParser.RULE_fullEdgeLeftOrUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2426;
	        this.match(GQLParser.LEFT_ANGLE_BRACKET);
	        this.state = 2427;
	        this.match(GQLParser.TILDE);
	        this.state = 2428;
	        this.match(GQLParser.LEFT_BRACKET);
	        this.state = 2429;
	        this.elementPatternFiller();
	        this.state = 2430;
	        this.match(GQLParser.RIGHT_BRACKET);
	        this.state = 2431;
	        this.match(GQLParser.TILDE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgeUndirectedOrRight() {
	    let localctx = new FullEdgeUndirectedOrRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 522, GQLParser.RULE_fullEdgeUndirectedOrRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2433;
	        this.match(GQLParser.TILDE);
	        this.state = 2434;
	        this.match(GQLParser.LEFT_BRACKET);
	        this.state = 2435;
	        this.elementPatternFiller();
	        this.state = 2436;
	        this.match(GQLParser.RIGHT_BRACKET);
	        this.state = 2437;
	        this.match(GQLParser.TILDE_RIGHT_ARROW);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgeLeftOrRight() {
	    let localctx = new FullEdgeLeftOrRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 524, GQLParser.RULE_fullEdgeLeftOrRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2439;
	        this.match(GQLParser.LEFT_ANGLE_BRACKET);
	        this.state = 2440;
	        this.match(GQLParser.MINUS_SIGN);
	        this.state = 2441;
	        this.match(GQLParser.LEFT_BRACKET);
	        this.state = 2442;
	        this.elementPatternFiller();
	        this.state = 2443;
	        this.match(GQLParser.RIGHT_BRACKET);
	        this.state = 2444;
	        this.match(GQLParser.RIGHT_ARROW);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgeAnyDirection() {
	    let localctx = new FullEdgeAnyDirectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 526, GQLParser.RULE_fullEdgeAnyDirection);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2446;
	        this.match(GQLParser.MINUS_SIGN);
	        this.state = 2447;
	        this.match(GQLParser.LEFT_BRACKET);
	        this.state = 2448;
	        this.elementPatternFiller();
	        this.state = 2449;
	        this.match(GQLParser.RIGHT_BRACKET);
	        this.state = 2450;
	        this.match(GQLParser.MINUS_SIGN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	abbreviatedEdgePattern() {
	    let localctx = new AbbreviatedEdgePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 528, GQLParser.RULE_abbreviatedEdgePattern);
	    try {
	        this.state = 2461;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,211,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new AbbreviatedEdgePointingLeftContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2452;
	            this.match(GQLParser.LEFT_ANGLE_BRACKET);
	            this.state = 2453;
	            this.match(GQLParser.MINUS_SIGN);
	            break;

	        case 2:
	            localctx = new AbbreviatedEdgeUndirectedContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2454;
	            this.match(GQLParser.TILDE);
	            break;

	        case 3:
	            localctx = new AbbreviatedEdgePointingRightContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2455;
	            this.match(GQLParser.RIGHT_ARROW);
	            break;

	        case 4:
	            localctx = new AbbreviatedEdgeLeftOrUndirectedContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2456;
	            this.match(GQLParser.LEFT_ANGLE_BRACKET);
	            this.state = 2457;
	            this.match(GQLParser.TILDE);
	            break;

	        case 5:
	            localctx = new AbbreviatedEdgeUndirectedOrRightContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2458;
	            this.match(GQLParser.TILDE_RIGHT_ARROW);
	            break;

	        case 6:
	            localctx = new AbbreviatedEdgeLeftOrRightContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2459;
	            this.match(GQLParser.LEFT_MINUS_RIGHT);
	            break;

	        case 7:
	            localctx = new AbbreviatedEdgeAnyDirectionContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2460;
	            this.match(GQLParser.MINUS_SIGN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parenthesizedPathPatternExpression() {
	    let localctx = new ParenthesizedPathPatternExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 530, GQLParser.RULE_parenthesizedPathPatternExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2463;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 2465;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 337)) & ~0x1f) === 0 && ((1 << (_la - 337)) & 67) !== 0)) {
	            this.state = 2464;
	            this.subpathVariableDeclaration();
	        }

	        this.state = 2468;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===30 || _la===228 || _la===249 || _la===275) {
	            this.state = 2467;
	            this.pathModePrefix();
	        }

	        this.state = 2470;
	        this.pathPatternExpression();
	        this.state = 2472;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===277) {
	            this.state = 2471;
	            this.parenthesizedPathPatternWhereClause();
	        }

	        this.state = 2474;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subpathVariableDeclaration() {
	    let localctx = new SubpathVariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 532, GQLParser.RULE_subpathVariableDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2476;
	        this.subpathVariable();
	        this.state = 2477;
	        this.match(GQLParser.EQUALS_OPERATOR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parenthesizedPathPatternWhereClause() {
	    let localctx = new ParenthesizedPathPatternWhereClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 534, GQLParser.RULE_parenthesizedPathPatternWhereClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2479;
	        this.match(GQLParser.WHERE);
	        this.state = 2480;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertGraphPattern() {
	    let localctx = new InsertGraphPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 536, GQLParser.RULE_insertGraphPattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2482;
	        this.insertPathPatternList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertPathPatternList() {
	    let localctx = new InsertPathPatternListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 538, GQLParser.RULE_insertPathPatternList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2484;
	        this.insertPathPattern();
	        this.state = 2489;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===5) {
	            this.state = 2485;
	            this.match(GQLParser.COMMA);
	            this.state = 2486;
	            this.insertPathPattern();
	            this.state = 2491;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertPathPattern() {
	    let localctx = new InsertPathPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 540, GQLParser.RULE_insertPathPattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2492;
	        this.insertNodePattern();
	        this.state = 2498;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 33579008) !== 0)) {
	            this.state = 2493;
	            this.insertEdgePattern();
	            this.state = 2494;
	            this.insertNodePattern();
	            this.state = 2500;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertNodePattern() {
	    let localctx = new InsertNodePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 542, GQLParser.RULE_insertNodePattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2501;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 2503;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===4 || _la===10 || _la===149 || _la===243 || ((((_la - 337)) & ~0x1f) === 0 && ((1 << (_la - 337)) & 67) !== 0)) {
	            this.state = 2502;
	            this.insertElementPatternFiller();
	        }

	        this.state = 2505;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertEdgePattern() {
	    let localctx = new InsertEdgePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 544, GQLParser.RULE_insertEdgePattern);
	    try {
	        this.state = 2510;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 13:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2507;
	            this.insertEdgePointingLeft();
	            break;
	        case 14:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2508;
	            this.insertEdgePointingRight();
	            break;
	        case 25:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2509;
	            this.insertEdgeUndirected();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertEdgePointingLeft() {
	    let localctx = new InsertEdgePointingLeftContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 546, GQLParser.RULE_insertEdgePointingLeft);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2512;
	        this.match(GQLParser.LEFT_ANGLE_BRACKET);
	        this.state = 2513;
	        this.match(GQLParser.MINUS_SIGN);
	        this.state = 2514;
	        this.match(GQLParser.LEFT_BRACKET);
	        this.state = 2516;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===4 || _la===10 || _la===149 || _la===243 || ((((_la - 337)) & ~0x1f) === 0 && ((1 << (_la - 337)) & 67) !== 0)) {
	            this.state = 2515;
	            this.insertElementPatternFiller();
	        }

	        this.state = 2518;
	        this.match(GQLParser.RIGHT_BRACKET);
	        this.state = 2519;
	        this.match(GQLParser.MINUS_SIGN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertEdgePointingRight() {
	    let localctx = new InsertEdgePointingRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 548, GQLParser.RULE_insertEdgePointingRight);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2521;
	        this.match(GQLParser.MINUS_SIGN);
	        this.state = 2522;
	        this.match(GQLParser.LEFT_BRACKET);
	        this.state = 2524;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===4 || _la===10 || _la===149 || _la===243 || ((((_la - 337)) & ~0x1f) === 0 && ((1 << (_la - 337)) & 67) !== 0)) {
	            this.state = 2523;
	            this.insertElementPatternFiller();
	        }

	        this.state = 2526;
	        this.match(GQLParser.RIGHT_BRACKET);
	        this.state = 2527;
	        this.match(GQLParser.RIGHT_ARROW);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertEdgeUndirected() {
	    let localctx = new InsertEdgeUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 550, GQLParser.RULE_insertEdgeUndirected);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2529;
	        this.match(GQLParser.TILDE);
	        this.state = 2530;
	        this.match(GQLParser.LEFT_BRACKET);
	        this.state = 2532;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===4 || _la===10 || _la===149 || _la===243 || ((((_la - 337)) & ~0x1f) === 0 && ((1 << (_la - 337)) & 67) !== 0)) {
	            this.state = 2531;
	            this.insertElementPatternFiller();
	        }

	        this.state = 2534;
	        this.match(GQLParser.RIGHT_BRACKET);
	        this.state = 2535;
	        this.match(GQLParser.TILDE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertElementPatternFiller() {
	    let localctx = new InsertElementPatternFillerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 552, GQLParser.RULE_insertElementPatternFiller);
	    try {
	        this.state = 2542;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,222,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2537;
	            this.elementVariableDeclaration();
	            this.state = 2538;
	            this.labelAndPropertySetSpecification();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2540;
	            this.elementVariableDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2541;
	            this.labelAndPropertySetSpecification();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelAndPropertySetSpecification() {
	    let localctx = new LabelAndPropertySetSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 554, GQLParser.RULE_labelAndPropertySetSpecification);
	    try {
	        this.state = 2552;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,223,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2544;
	            this.isOrColon();
	            this.state = 2545;
	            this.labelSetSpecification();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2547;
	            this.isOrColon();
	            this.state = 2548;
	            this.labelSetSpecification();
	            this.state = 2549;
	            this.elementPropertySpecification();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2551;
	            this.elementPropertySpecification();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelExpression() {
	    let localctx = new LabelExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 556, GQLParser.RULE_labelExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2554;
	        this.labelTerm();
	        this.state = 2559;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,224,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2555;
	                this.match(GQLParser.VERTICAL_BAR);
	                this.state = 2556;
	                this.labelTerm(); 
	            }
	            this.state = 2561;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,224,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelTerm() {
	    let localctx = new LabelTermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 558, GQLParser.RULE_labelTerm);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2562;
	        this.labelFactor();
	        this.state = 2567;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,225,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2563;
	                this.match(GQLParser.AMPERSAND);
	                this.state = 2564;
	                this.labelFactor(); 
	            }
	            this.state = 2569;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,225,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelFactor() {
	    let localctx = new LabelFactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 560, GQLParser.RULE_labelFactor);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2571;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===8) {
	            this.state = 2570;
	            this.match(GQLParser.EXCLAMATION_MARK);
	        }

	        this.state = 2573;
	        this.labelPrimary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelPrimary() {
	    let localctx = new LabelPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 562, GQLParser.RULE_labelPrimary);
	    try {
	        this.state = 2578;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 337:
	        case 338:
	        case 343:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2575;
	            this.labelName();
	            break;
	        case 15:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2576;
	            this.wildcardLabel();
	            break;
	        case 12:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2577;
	            this.parenthesizedLabelExpression();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	wildcardLabel() {
	    let localctx = new WildcardLabelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 564, GQLParser.RULE_wildcardLabel);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2580;
	        this.match(GQLParser.PERCENT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parenthesizedLabelExpression() {
	    let localctx = new ParenthesizedLabelExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 566, GQLParser.RULE_parenthesizedLabelExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2582;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 2583;
	        this.labelExpression();
	        this.state = 2584;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphPatternQuantifier() {
	    let localctx = new GraphPatternQuantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 568, GQLParser.RULE_graphPatternQuantifier);
	    try {
	        this.state = 2590;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,228,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2586;
	            this.match(GQLParser.ASTERISK);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2587;
	            this.match(GQLParser.PLUS_SIGN);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2588;
	            this.fixedQuantifier();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2589;
	            this.generalQuantifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fixedQuantifier() {
	    let localctx = new FixedQuantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 570, GQLParser.RULE_fixedQuantifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2592;
	        this.match(GQLParser.LEFT_BRACE);
	        this.state = 2593;
	        this.match(GQLParser.UNSIGNED_DECIMAL_INTEGER);
	        this.state = 2594;
	        this.match(GQLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generalQuantifier() {
	    let localctx = new GeneralQuantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 572, GQLParser.RULE_generalQuantifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2596;
	        this.match(GQLParser.LEFT_BRACE);
	        this.state = 2598;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===328) {
	            this.state = 2597;
	            this.lowerBound();
	        }

	        this.state = 2600;
	        this.match(GQLParser.COMMA);
	        this.state = 2602;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===328) {
	            this.state = 2601;
	            this.upperBound();
	        }

	        this.state = 2604;
	        this.match(GQLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lowerBound() {
	    let localctx = new LowerBoundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 574, GQLParser.RULE_lowerBound);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2606;
	        this.match(GQLParser.UNSIGNED_DECIMAL_INTEGER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	upperBound() {
	    let localctx = new UpperBoundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 576, GQLParser.RULE_upperBound);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2608;
	        this.match(GQLParser.UNSIGNED_DECIMAL_INTEGER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedPathPatternExpression() {
	    let localctx = new SimplifiedPathPatternExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 578, GQLParser.RULE_simplifiedPathPatternExpression);
	    try {
	        this.state = 2617;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,231,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2610;
	            this.simplifiedDefaultingLeft();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2611;
	            this.simplifiedDefaultingUndirected();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2612;
	            this.simplifiedDefaultingRight();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2613;
	            this.simplifiedDefaultingLeftOrUndirected();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2614;
	            this.simplifiedDefaultingUndirectedOrRight();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2615;
	            this.simplifiedDefaultingLeftOrRight();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2616;
	            this.simplifiedDefaultingAnyDirection();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedDefaultingLeft() {
	    let localctx = new SimplifiedDefaultingLeftContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 580, GQLParser.RULE_simplifiedDefaultingLeft);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2619;
	        this.match(GQLParser.LEFT_MINUS_SLASH);
	        this.state = 2620;
	        this.simplifiedContents();
	        this.state = 2621;
	        this.match(GQLParser.SOLIDUS);
	        this.state = 2622;
	        this.match(GQLParser.MINUS_SIGN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedDefaultingUndirected() {
	    let localctx = new SimplifiedDefaultingUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 582, GQLParser.RULE_simplifiedDefaultingUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2624;
	        this.match(GQLParser.TILDE_SLASH);
	        this.state = 2625;
	        this.simplifiedContents();
	        this.state = 2626;
	        this.match(GQLParser.SOLIDUS);
	        this.state = 2627;
	        this.match(GQLParser.TILDE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedDefaultingRight() {
	    let localctx = new SimplifiedDefaultingRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 584, GQLParser.RULE_simplifiedDefaultingRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2629;
	        this.match(GQLParser.MINUS_SLASH);
	        this.state = 2630;
	        this.simplifiedContents();
	        this.state = 2631;
	        this.match(GQLParser.SLASH_MINUS_RIGHT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedDefaultingLeftOrUndirected() {
	    let localctx = new SimplifiedDefaultingLeftOrUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 586, GQLParser.RULE_simplifiedDefaultingLeftOrUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2633;
	        this.match(GQLParser.LEFT_TILDE_SLASH);
	        this.state = 2634;
	        this.simplifiedContents();
	        this.state = 2635;
	        this.match(GQLParser.SOLIDUS);
	        this.state = 2636;
	        this.match(GQLParser.TILDE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedDefaultingUndirectedOrRight() {
	    let localctx = new SimplifiedDefaultingUndirectedOrRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 588, GQLParser.RULE_simplifiedDefaultingUndirectedOrRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2638;
	        this.match(GQLParser.TILDE_SLASH);
	        this.state = 2639;
	        this.simplifiedContents();
	        this.state = 2640;
	        this.match(GQLParser.SLASH_TILDE_RIGHT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedDefaultingLeftOrRight() {
	    let localctx = new SimplifiedDefaultingLeftOrRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 590, GQLParser.RULE_simplifiedDefaultingLeftOrRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2642;
	        this.match(GQLParser.LEFT_MINUS_SLASH);
	        this.state = 2643;
	        this.simplifiedContents();
	        this.state = 2644;
	        this.match(GQLParser.SLASH_MINUS_RIGHT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedDefaultingAnyDirection() {
	    let localctx = new SimplifiedDefaultingAnyDirectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 592, GQLParser.RULE_simplifiedDefaultingAnyDirection);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2646;
	        this.match(GQLParser.MINUS_SLASH);
	        this.state = 2647;
	        this.simplifiedContents();
	        this.state = 2648;
	        this.match(GQLParser.SOLIDUS);
	        this.state = 2649;
	        this.match(GQLParser.MINUS_SIGN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedContents() {
	    let localctx = new SimplifiedContentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 594, GQLParser.RULE_simplifiedContents);
	    try {
	        this.state = 2654;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,232,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2651;
	            this.simplifiedTerm();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2652;
	            this.simplifiedPathUnion();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2653;
	            this.simplifiedMultisetAlternation();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedPathUnion() {
	    let localctx = new SimplifiedPathUnionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 596, GQLParser.RULE_simplifiedPathUnion);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2656;
	        this.simplifiedTerm();
	        this.state = 2657;
	        this.match(GQLParser.VERTICAL_BAR);
	        this.state = 2658;
	        this.simplifiedTerm();
	        this.state = 2663;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===27) {
	            this.state = 2659;
	            this.match(GQLParser.VERTICAL_BAR);
	            this.state = 2660;
	            this.simplifiedTerm();
	            this.state = 2665;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedMultisetAlternation() {
	    let localctx = new SimplifiedMultisetAlternationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 598, GQLParser.RULE_simplifiedMultisetAlternation);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2666;
	        this.simplifiedTerm();
	        this.state = 2667;
	        this.match(GQLParser.MULTISET_ALTERNATION_OPERATOR);
	        this.state = 2668;
	        this.simplifiedTerm();
	        this.state = 2673;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===298) {
	            this.state = 2669;
	            this.match(GQLParser.MULTISET_ALTERNATION_OPERATOR);
	            this.state = 2670;
	            this.simplifiedTerm();
	            this.state = 2675;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedTerm() {
	    let localctx = new SimplifiedTermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 600, GQLParser.RULE_simplifiedTerm);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2677; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 2676;
	            this.simplifiedFactorLow();
	            this.state = 2679; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) === 0 && ((1 << _la) & 33583360) !== 0) || ((((_la - 337)) & ~0x1f) === 0 && ((1 << (_la - 337)) & 67) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedFactorLow() {
	    let localctx = new SimplifiedFactorLowContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 602, GQLParser.RULE_simplifiedFactorLow);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2681;
	        this.simplifiedFactorHigh();
	        this.state = 2686;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===1) {
	            this.state = 2682;
	            this.match(GQLParser.AMPERSAND);
	            this.state = 2683;
	            this.simplifiedFactorHigh();
	            this.state = 2688;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedFactorHigh() {
	    let localctx = new SimplifiedFactorHighContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 604, GQLParser.RULE_simplifiedFactorHigh);
	    try {
	        this.state = 2692;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,237,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2689;
	            this.simplifiedTertiary();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2690;
	            this.simplifiedQuantified();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2691;
	            this.simplifiedQuestioned();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedQuantified() {
	    let localctx = new SimplifiedQuantifiedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 606, GQLParser.RULE_simplifiedQuantified);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2694;
	        this.simplifiedTertiary();
	        this.state = 2695;
	        this.graphPatternQuantifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedQuestioned() {
	    let localctx = new SimplifiedQuestionedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 608, GQLParser.RULE_simplifiedQuestioned);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2697;
	        this.simplifiedTertiary();
	        this.state = 2698;
	        this.match(GQLParser.QUESTION_MARK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedTertiary() {
	    let localctx = new SimplifiedTertiaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 610, GQLParser.RULE_simplifiedTertiary);
	    try {
	        this.state = 2702;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,238,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2700;
	            this.simplifiedDirectionOverride();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2701;
	            this.simplifiedSecondary();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedDirectionOverride() {
	    let localctx = new SimplifiedDirectionOverrideContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 612, GQLParser.RULE_simplifiedDirectionOverride);
	    try {
	        this.state = 2711;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,239,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2704;
	            this.simplifiedOverrideLeft();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2705;
	            this.simplifiedOverrideUndirected();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2706;
	            this.simplifiedOverrideRight();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2707;
	            this.simplifiedOverrideLeftOrUndirected();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2708;
	            this.simplifiedOverrideUndirectedOrRight();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2709;
	            this.simplifiedOverrideLeftOrRight();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2710;
	            this.simplifiedOverrideAnyDirection();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedOverrideLeft() {
	    let localctx = new SimplifiedOverrideLeftContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 614, GQLParser.RULE_simplifiedOverrideLeft);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2713;
	        this.match(GQLParser.LEFT_ANGLE_BRACKET);
	        this.state = 2714;
	        this.simplifiedSecondary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedOverrideUndirected() {
	    let localctx = new SimplifiedOverrideUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 616, GQLParser.RULE_simplifiedOverrideUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2716;
	        this.match(GQLParser.TILDE);
	        this.state = 2717;
	        this.simplifiedSecondary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedOverrideRight() {
	    let localctx = new SimplifiedOverrideRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 618, GQLParser.RULE_simplifiedOverrideRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2719;
	        this.simplifiedSecondary();
	        this.state = 2720;
	        this.match(GQLParser.RIGHT_ANGLE_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedOverrideLeftOrUndirected() {
	    let localctx = new SimplifiedOverrideLeftOrUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 620, GQLParser.RULE_simplifiedOverrideLeftOrUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2722;
	        this.match(GQLParser.LEFT_ANGLE_BRACKET);
	        this.state = 2723;
	        this.match(GQLParser.TILDE);
	        this.state = 2724;
	        this.simplifiedSecondary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedOverrideUndirectedOrRight() {
	    let localctx = new SimplifiedOverrideUndirectedOrRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 622, GQLParser.RULE_simplifiedOverrideUndirectedOrRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2726;
	        this.match(GQLParser.TILDE);
	        this.state = 2727;
	        this.simplifiedSecondary();
	        this.state = 2728;
	        this.match(GQLParser.RIGHT_ANGLE_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedOverrideLeftOrRight() {
	    let localctx = new SimplifiedOverrideLeftOrRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 624, GQLParser.RULE_simplifiedOverrideLeftOrRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2730;
	        this.match(GQLParser.LEFT_ANGLE_BRACKET);
	        this.state = 2731;
	        this.simplifiedSecondary();
	        this.state = 2732;
	        this.match(GQLParser.RIGHT_ANGLE_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedOverrideAnyDirection() {
	    let localctx = new SimplifiedOverrideAnyDirectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 626, GQLParser.RULE_simplifiedOverrideAnyDirection);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2734;
	        this.match(GQLParser.MINUS_SIGN);
	        this.state = 2735;
	        this.simplifiedSecondary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedSecondary() {
	    let localctx = new SimplifiedSecondaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 628, GQLParser.RULE_simplifiedSecondary);
	    try {
	        this.state = 2739;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 12:
	        case 337:
	        case 338:
	        case 343:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2737;
	            this.simplifiedPrimary();
	            break;
	        case 8:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2738;
	            this.simplifiedNegation();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedNegation() {
	    let localctx = new SimplifiedNegationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 630, GQLParser.RULE_simplifiedNegation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2741;
	        this.match(GQLParser.EXCLAMATION_MARK);
	        this.state = 2742;
	        this.simplifiedPrimary();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simplifiedPrimary() {
	    let localctx = new SimplifiedPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 632, GQLParser.RULE_simplifiedPrimary);
	    try {
	        this.state = 2749;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 337:
	        case 338:
	        case 343:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2744;
	            this.labelName();
	            break;
	        case 12:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2745;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 2746;
	            this.simplifiedContents();
	            this.state = 2747;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whereClause() {
	    let localctx = new WhereClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 634, GQLParser.RULE_whereClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2751;
	        this.match(GQLParser.WHERE);
	        this.state = 2752;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yieldClause() {
	    let localctx = new YieldClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 636, GQLParser.RULE_yieldClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2754;
	        this.match(GQLParser.YIELD);
	        this.state = 2755;
	        this.yieldItemList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yieldItemList() {
	    let localctx = new YieldItemListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 638, GQLParser.RULE_yieldItemList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2757;
	        this.yieldItem();
	        this.state = 2762;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===5) {
	            this.state = 2758;
	            this.match(GQLParser.COMMA);
	            this.state = 2759;
	            this.yieldItem();
	            this.state = 2764;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yieldItem() {
	    let localctx = new YieldItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 640, GQLParser.RULE_yieldItem);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2765;
	        this.yieldItemName();
	        this.state = 2767;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===36) {
	            this.state = 2766;
	            this.yieldItemAlias();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yieldItemName() {
	    let localctx = new YieldItemNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 642, GQLParser.RULE_yieldItemName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2769;
	        this.fieldName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yieldItemAlias() {
	    let localctx = new YieldItemAliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 644, GQLParser.RULE_yieldItemAlias);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2771;
	        this.match(GQLParser.AS);
	        this.state = 2772;
	        this.bindingVariable();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupByClause() {
	    let localctx = new GroupByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 646, GQLParser.RULE_groupByClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2774;
	        this.match(GQLParser.GROUP);
	        this.state = 2775;
	        this.match(GQLParser.BY);
	        this.state = 2776;
	        this.groupingElementList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupingElementList() {
	    let localctx = new GroupingElementListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 648, GQLParser.RULE_groupingElementList);
	    try {
	        this.state = 2784;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 337:
	        case 338:
	        case 343:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2778;
	            this.groupingElement();
	            this.state = 2781;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,244,this._ctx);
	            if(la_===1) {
	                this.state = 2779;
	                this.match(GQLParser.COMMA);
	                this.state = 2780;
	                this.groupingElement();

	            }
	            break;
	        case 12:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2783;
	            this.emptyGroupingSet();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupingElement() {
	    let localctx = new GroupingElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 650, GQLParser.RULE_groupingElement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2786;
	        this.bindingVariableReference();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	emptyGroupingSet() {
	    let localctx = new EmptyGroupingSetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 652, GQLParser.RULE_emptyGroupingSet);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2788;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 2789;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderByClause() {
	    let localctx = new OrderByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 654, GQLParser.RULE_orderByClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2791;
	        this.match(GQLParser.ORDER);
	        this.state = 2792;
	        this.match(GQLParser.BY);
	        this.state = 2793;
	        this.sortSpecificationList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aggregateFunction() {
	    let localctx = new AggregateFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 656, GQLParser.RULE_aggregateFunction);
	    var _la = 0;
	    try {
	        this.state = 2817;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,248,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new GqlCountAllFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2795;
	            this.match(GQLParser.COUNT);
	            this.state = 2796;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 2797;
	            this.match(GQLParser.ASTERISK);
	            this.state = 2798;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;

	        case 2:
	            localctx = new GqlGeneralSetFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2799;
	            this.generalSetFunctionType();
	            this.state = 2800;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 2802;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===31 || _la===93) {
	                this.state = 2801;
	                this.setQuantifier();
	            }

	            this.state = 2804;
	            this.expression(0);
	            this.state = 2805;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;

	        case 3:
	            localctx = new GqlBinarySetFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2807;
	            this.binarySetFunctionType();
	            this.state = 2808;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 2810;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===31 || _la===93) {
	                this.state = 2809;
	                this.setQuantifier();
	            }

	            this.state = 2812;
	            localctx.lhs = this.expression(0);
	            this.state = 2813;
	            this.match(GQLParser.COMMA);
	            this.state = 2814;
	            localctx.rhs = this.expression(0);
	            this.state = 2815;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generalSetFunctionType() {
	    let localctx = new GeneralSetFunctionTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 658, GQLParser.RULE_generalSetFunctionType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2819;
	        _la = this._input.LA(1);
	        if(!(((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 1082130433) !== 0) || _la===171 || _la===172 || ((((_la - 236)) & ~0x1f) === 0 && ((1 << (_la - 236)) & 11) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setQuantifier() {
	    let localctx = new SetQuantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 660, GQLParser.RULE_setQuantifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2821;
	        _la = this._input.LA(1);
	        if(!(_la===31 || _la===93)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	binarySetFunctionType() {
	    let localctx = new BinarySetFunctionTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 662, GQLParser.RULE_binarySetFunctionType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2823;
	        _la = this._input.LA(1);
	        if(!(_la===203 || _la===204)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sortSpecificationList() {
	    let localctx = new SortSpecificationListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 664, GQLParser.RULE_sortSpecificationList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2825;
	        this.sortSpecification();
	        this.state = 2830;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,249,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2826;
	                this.match(GQLParser.COMMA);
	                this.state = 2827;
	                this.sortSpecification(); 
	            }
	            this.state = 2832;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,249,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sortSpecification() {
	    let localctx = new SortSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 666, GQLParser.RULE_sortSpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2833;
	        this.sortKey();
	        this.state = 2835;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,250,this._ctx);
	        if(la_===1) {
	            this.state = 2834;
	            this.orderingSpecification();

	        }
	        this.state = 2838;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,251,this._ctx);
	        if(la_===1) {
	            this.state = 2837;
	            this.nullOrdering();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sortKey() {
	    let localctx = new SortKeyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 668, GQLParser.RULE_sortKey);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2840;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderingSpecification() {
	    let localctx = new OrderingSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 670, GQLParser.RULE_orderingSpecification);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2842;
	        _la = this._input.LA(1);
	        if(!(_la===37 || _la===38 || _la===87 || _la===88)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nullOrdering() {
	    let localctx = new NullOrderingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 672, GQLParser.RULE_nullOrdering);
	    try {
	        this.state = 2848;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,252,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2844;
	            this.match(GQLParser.NULLS);
	            this.state = 2845;
	            this.match(GQLParser.FIRST);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2846;
	            this.match(GQLParser.NULLS);
	            this.state = 2847;
	            this.match(GQLParser.LAST);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limitClause() {
	    let localctx = new LimitClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 674, GQLParser.RULE_limitClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2850;
	        this.match(GQLParser.LIMIT);
	        this.state = 2851;
	        this.unsignedIntegerSpecification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	offsetClause() {
	    let localctx = new OffsetClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 676, GQLParser.RULE_offsetClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2853;
	        this.offsetSynonym();
	        this.state = 2854;
	        this.unsignedIntegerSpecification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	offsetSynonym() {
	    let localctx = new OffsetSynonymContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 678, GQLParser.RULE_offsetSynonym);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2856;
	        _la = this._input.LA(1);
	        if(!(_la===189 || _la===190)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nestedGraphTypeSpecification() {
	    let localctx = new NestedGraphTypeSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 680, GQLParser.RULE_nestedGraphTypeSpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2858;
	        this.match(GQLParser.LEFT_BRACE);
	        this.state = 2859;
	        this.graphTypeSpecificationBody();
	        this.state = 2860;
	        this.match(GQLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphTypeSpecificationBody() {
	    let localctx = new GraphTypeSpecificationBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 682, GQLParser.RULE_graphTypeSpecificationBody);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2862;
	        this.elementTypeDefinitionList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementTypeDefinitionList() {
	    let localctx = new ElementTypeDefinitionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 684, GQLParser.RULE_elementTypeDefinitionList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2864;
	        this.elementTypeDefinition();
	        this.state = 2869;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===5) {
	            this.state = 2865;
	            this.match(GQLParser.COMMA);
	            this.state = 2866;
	            this.elementTypeDefinition();
	            this.state = 2871;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementTypeDefinition() {
	    let localctx = new ElementTypeDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 686, GQLParser.RULE_elementTypeDefinition);
	    try {
	        this.state = 2874;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,254,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2872;
	            this.nodeTypeDefinition();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2873;
	            this.edgeTypeDefinition();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeTypeDefinition() {
	    let localctx = new NodeTypeDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 688, GQLParser.RULE_nodeTypeDefinition);
	    try {
	        this.state = 2879;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 12:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2876;
	            this.nodeTypePattern();
	            break;
	        case 293:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2877;
	            this.match(GQLParser.NODE_SYNONYM);
	            this.state = 2878;
	            this.nodeTypePhrase();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeTypePattern() {
	    let localctx = new NodeTypePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 690, GQLParser.RULE_nodeTypePattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2881;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 2883;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 337)) & ~0x1f) === 0 && ((1 << (_la - 337)) & 67) !== 0)) {
	            this.state = 2882;
	            this.nodeTypeName();
	        }

	        this.state = 2886;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===4 || _la===10 || ((((_la - 149)) & ~0x1f) === 0 && ((1 << (_la - 149)) & 21) !== 0)) {
	            this.state = 2885;
	            this.nodeTypeFiller();
	        }

	        this.state = 2888;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeTypePhrase() {
	    let localctx = new NodeTypePhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 692, GQLParser.RULE_nodeTypePhrase);
	    var _la = 0;
	    try {
	        this.state = 2898;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 254:
	        case 337:
	        case 338:
	        case 343:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2891;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===254) {
	                this.state = 2890;
	                this.match(GQLParser.TYPE);
	            }

	            this.state = 2893;
	            this.nodeTypeName();
	            this.state = 2895;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,259,this._ctx);
	            if(la_===1) {
	                this.state = 2894;
	                this.nodeTypeFiller();

	            }
	            break;
	        case 4:
	        case 10:
	        case 149:
	        case 151:
	        case 153:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2897;
	            this.nodeTypeFiller();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeTypeName() {
	    let localctx = new NodeTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 694, GQLParser.RULE_nodeTypeName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2900;
	        this.elementTypeName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeTypeFiller() {
	    let localctx = new NodeTypeFillerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 696, GQLParser.RULE_nodeTypeFiller);
	    try {
	        this.state = 2907;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,261,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2902;
	            this.nodeTypeLabelSetDefinition();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2903;
	            this.nodeTypePropertyTypeSetDefinition();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2904;
	            this.nodeTypeLabelSetDefinition();
	            this.state = 2905;
	            this.nodeTypePropertyTypeSetDefinition();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeTypeLabelSetDefinition() {
	    let localctx = new NodeTypeLabelSetDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 698, GQLParser.RULE_nodeTypeLabelSetDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2909;
	        this.labelSetDefinition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeTypePropertyTypeSetDefinition() {
	    let localctx = new NodeTypePropertyTypeSetDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 700, GQLParser.RULE_nodeTypePropertyTypeSetDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2911;
	        this.propertyTypeSetDefinition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeTypeDefinition() {
	    let localctx = new EdgeTypeDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 702, GQLParser.RULE_edgeTypeDefinition);
	    var _la = 0;
	    try {
	        this.state = 2919;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 12:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2913;
	            this.edgeTypePattern();
	            break;
	        case 92:
	        case 264:
	        case 291:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2915;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===92 || _la===264) {
	                this.state = 2914;
	                this.edgeKind();
	            }

	            this.state = 2917;
	            this.match(GQLParser.EDGE_SYNONYM);
	            this.state = 2918;
	            this.edgeTypePhrase();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeTypePattern() {
	    let localctx = new EdgeTypePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 704, GQLParser.RULE_edgeTypePattern);
	    try {
	        this.state = 2923;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,264,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2921;
	            this.fullEdgeTypePattern();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2922;
	            this.abbreviatedEdgeTypePattern();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeTypePhrase() {
	    let localctx = new EdgeTypePhraseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 706, GQLParser.RULE_edgeTypePhrase);
	    var _la = 0;
	    try {
	        this.state = 2937;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 254:
	        case 337:
	        case 338:
	        case 343:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2926;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===254) {
	                this.state = 2925;
	                this.match(GQLParser.TYPE);
	            }

	            this.state = 2928;
	            this.edgeTypeName();
	            this.state = 2932;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,266,this._ctx);
	            if(la_===1) {
	                this.state = 2929;
	                this.edgeTypeFiller();
	                this.state = 2930;
	                this.endpointDefinition();

	            }
	            break;
	        case 4:
	        case 10:
	        case 149:
	        case 151:
	        case 153:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2934;
	            this.edgeTypeFiller();
	            this.state = 2935;
	            this.endpointDefinition();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeTypeName() {
	    let localctx = new EdgeTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 708, GQLParser.RULE_edgeTypeName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2939;
	        this.elementTypeName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeTypeFiller() {
	    let localctx = new EdgeTypeFillerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 710, GQLParser.RULE_edgeTypeFiller);
	    try {
	        this.state = 2946;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,268,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2941;
	            this.edgeTypeLabelSetDefinition();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2942;
	            this.edgeTypePropertyTypeSetDefinition();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2943;
	            this.edgeTypeLabelSetDefinition();
	            this.state = 2944;
	            this.edgeTypePropertyTypeSetDefinition();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeTypeLabelSetDefinition() {
	    let localctx = new EdgeTypeLabelSetDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 712, GQLParser.RULE_edgeTypeLabelSetDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2948;
	        this.labelSetDefinition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeTypePropertyTypeSetDefinition() {
	    let localctx = new EdgeTypePropertyTypeSetDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 714, GQLParser.RULE_edgeTypePropertyTypeSetDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2950;
	        this.propertyTypeSetDefinition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgeTypePattern() {
	    let localctx = new FullEdgeTypePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 716, GQLParser.RULE_fullEdgeTypePattern);
	    try {
	        this.state = 2955;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,269,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2952;
	            this.fullEdgeTypePatternPointingRight();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2953;
	            this.fullEdgeTypePatternPointingLeft();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2954;
	            this.fullEdgeTypePatternUndirected();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgeTypePatternPointingRight() {
	    let localctx = new FullEdgeTypePatternPointingRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 718, GQLParser.RULE_fullEdgeTypePatternPointingRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2957;
	        this.sourceNodeTypeReference();
	        this.state = 2958;
	        this.arcTypePointingRight();
	        this.state = 2959;
	        this.destinationNodeTypeReference();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgeTypePatternPointingLeft() {
	    let localctx = new FullEdgeTypePatternPointingLeftContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 720, GQLParser.RULE_fullEdgeTypePatternPointingLeft);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2961;
	        this.destinationNodeTypeReference();
	        this.state = 2962;
	        this.arcTypePointingLeft();
	        this.state = 2963;
	        this.sourceNodeTypeReference();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fullEdgeTypePatternUndirected() {
	    let localctx = new FullEdgeTypePatternUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 722, GQLParser.RULE_fullEdgeTypePatternUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2965;
	        this.sourceNodeTypeReference();
	        this.state = 2966;
	        this.arcTypeUndirected();
	        this.state = 2967;
	        this.destinationNodeTypeReference();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arcTypePointingRight() {
	    let localctx = new ArcTypePointingRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 724, GQLParser.RULE_arcTypePointingRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2969;
	        this.match(GQLParser.MINUS_SIGN);
	        this.state = 2970;
	        this.match(GQLParser.LEFT_BRACKET);
	        this.state = 2971;
	        this.arcTypeFiller();
	        this.state = 2972;
	        this.match(GQLParser.RIGHT_BRACKET);
	        this.state = 2973;
	        this.match(GQLParser.RIGHT_ARROW);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arcTypePointingLeft() {
	    let localctx = new ArcTypePointingLeftContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 726, GQLParser.RULE_arcTypePointingLeft);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2975;
	        this.match(GQLParser.LEFT_ANGLE_BRACKET);
	        this.state = 2976;
	        this.match(GQLParser.MINUS_SIGN);
	        this.state = 2977;
	        this.match(GQLParser.LEFT_BRACKET);
	        this.state = 2978;
	        this.arcTypeFiller();
	        this.state = 2979;
	        this.match(GQLParser.RIGHT_BRACKET);
	        this.state = 2980;
	        this.match(GQLParser.MINUS_SIGN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arcTypeUndirected() {
	    let localctx = new ArcTypeUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 728, GQLParser.RULE_arcTypeUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2982;
	        this.match(GQLParser.TILDE);
	        this.state = 2983;
	        this.match(GQLParser.LEFT_BRACKET);
	        this.state = 2984;
	        this.arcTypeFiller();
	        this.state = 2985;
	        this.match(GQLParser.RIGHT_BRACKET);
	        this.state = 2986;
	        this.match(GQLParser.TILDE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arcTypeFiller() {
	    let localctx = new ArcTypeFillerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 730, GQLParser.RULE_arcTypeFiller);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2989;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 337)) & ~0x1f) === 0 && ((1 << (_la - 337)) & 67) !== 0)) {
	            this.state = 2988;
	            this.edgeTypeName();
	        }

	        this.state = 2992;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===4 || _la===10 || ((((_la - 149)) & ~0x1f) === 0 && ((1 << (_la - 149)) & 21) !== 0)) {
	            this.state = 2991;
	            this.edgeTypeFiller();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	abbreviatedEdgeTypePattern() {
	    let localctx = new AbbreviatedEdgeTypePatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 732, GQLParser.RULE_abbreviatedEdgeTypePattern);
	    try {
	        this.state = 2997;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,272,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2994;
	            this.abbreviatedEdgeTypePatternPointingRight();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2995;
	            this.abbreviatedEdgeTypePatternPointingLeft();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2996;
	            this.abbreviatedEdgeTypePatternUndirected();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	abbreviatedEdgeTypePatternPointingRight() {
	    let localctx = new AbbreviatedEdgeTypePatternPointingRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 734, GQLParser.RULE_abbreviatedEdgeTypePatternPointingRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2999;
	        this.sourceNodeTypeReference();
	        this.state = 3000;
	        this.match(GQLParser.RIGHT_ARROW);
	        this.state = 3001;
	        this.destinationNodeTypeReference();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	abbreviatedEdgeTypePatternPointingLeft() {
	    let localctx = new AbbreviatedEdgeTypePatternPointingLeftContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 736, GQLParser.RULE_abbreviatedEdgeTypePatternPointingLeft);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3003;
	        this.destinationNodeTypeReference();
	        this.state = 3004;
	        this.match(GQLParser.LEFT_ANGLE_BRACKET);
	        this.state = 3005;
	        this.match(GQLParser.MINUS_SIGN);
	        this.state = 3006;
	        this.sourceNodeTypeReference();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	abbreviatedEdgeTypePatternUndirected() {
	    let localctx = new AbbreviatedEdgeTypePatternUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 738, GQLParser.RULE_abbreviatedEdgeTypePatternUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3008;
	        this.sourceNodeTypeReference();
	        this.state = 3009;
	        this.match(GQLParser.TILDE);
	        this.state = 3010;
	        this.destinationNodeTypeReference();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeTypeReference() {
	    let localctx = new NodeTypeReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 740, GQLParser.RULE_nodeTypeReference);
	    try {
	        this.state = 3014;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,273,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3012;
	            this.sourceNodeTypeReference();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3013;
	            this.destinationNodeTypeReference();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sourceNodeTypeReference() {
	    let localctx = new SourceNodeTypeReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 742, GQLParser.RULE_sourceNodeTypeReference);
	    var _la = 0;
	    try {
	        this.state = 3025;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,275,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3016;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 3017;
	            this.sourceNodeTypeName();
	            this.state = 3018;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3020;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 3022;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===4 || _la===10 || ((((_la - 149)) & ~0x1f) === 0 && ((1 << (_la - 149)) & 21) !== 0)) {
	                this.state = 3021;
	                this.nodeTypeFiller();
	            }

	            this.state = 3024;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	destinationNodeTypeReference() {
	    let localctx = new DestinationNodeTypeReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 744, GQLParser.RULE_destinationNodeTypeReference);
	    var _la = 0;
	    try {
	        this.state = 3036;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,277,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3027;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 3028;
	            this.destinationNodeTypeName();
	            this.state = 3029;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3031;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 3033;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===4 || _la===10 || ((((_la - 149)) & ~0x1f) === 0 && ((1 << (_la - 149)) & 21) !== 0)) {
	                this.state = 3032;
	                this.nodeTypeFiller();
	            }

	            this.state = 3035;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeKind() {
	    let localctx = new EdgeKindContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 746, GQLParser.RULE_edgeKind);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3038;
	        _la = this._input.LA(1);
	        if(!(_la===92 || _la===264)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	endpointDefinition() {
	    let localctx = new EndpointDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 748, GQLParser.RULE_endpointDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3040;
	        this.match(GQLParser.CONNECTING);
	        this.state = 3041;
	        this.endpointPairDefinition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	endpointPairDefinition() {
	    let localctx = new EndpointPairDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 750, GQLParser.RULE_endpointPairDefinition);
	    try {
	        this.state = 3047;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,278,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3043;
	            this.endpointPairDefinitionPointingRight();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3044;
	            this.endpointPairDefinitionPointingLeft();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3045;
	            this.endpointPairDefinitionUndirected();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3046;
	            this.abbreviatedEdgeTypePattern();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	endpointPairDefinitionPointingRight() {
	    let localctx = new EndpointPairDefinitionPointingRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 752, GQLParser.RULE_endpointPairDefinitionPointingRight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3049;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 3050;
	        this.sourceNodeTypeName();
	        this.state = 3051;
	        this.connectorPointingRight();
	        this.state = 3052;
	        this.destinationNodeTypeName();
	        this.state = 3053;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	endpointPairDefinitionPointingLeft() {
	    let localctx = new EndpointPairDefinitionPointingLeftContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 754, GQLParser.RULE_endpointPairDefinitionPointingLeft);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3055;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 3056;
	        this.destinationNodeTypeName();
	        this.state = 3057;
	        this.match(GQLParser.LEFT_ANGLE_BRACKET);
	        this.state = 3058;
	        this.match(GQLParser.MINUS_SIGN);
	        this.state = 3059;
	        this.sourceNodeTypeName();
	        this.state = 3060;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	endpointPairDefinitionUndirected() {
	    let localctx = new EndpointPairDefinitionUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 756, GQLParser.RULE_endpointPairDefinitionUndirected);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3062;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 3063;
	        this.sourceNodeTypeName();
	        this.state = 3064;
	        this.connectorUndirected();
	        this.state = 3065;
	        this.destinationNodeTypeName();
	        this.state = 3066;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	connectorPointingRight() {
	    let localctx = new ConnectorPointingRightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 758, GQLParser.RULE_connectorPointingRight);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3068;
	        _la = this._input.LA(1);
	        if(!(_la===248 || _la===309)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	connectorUndirected() {
	    let localctx = new ConnectorUndirectedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 760, GQLParser.RULE_connectorUndirected);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3070;
	        _la = this._input.LA(1);
	        if(!(_la===25 || _la===248)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sourceNodeTypeName() {
	    let localctx = new SourceNodeTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 762, GQLParser.RULE_sourceNodeTypeName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3072;
	        this.elementTypeName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	destinationNodeTypeName() {
	    let localctx = new DestinationNodeTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 764, GQLParser.RULE_destinationNodeTypeName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3074;
	        this.elementTypeName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelSetDefinition() {
	    let localctx = new LabelSetDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 766, GQLParser.RULE_labelSetDefinition);
	    try {
	        this.state = 3083;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 151:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3076;
	            this.match(GQLParser.LABEL);
	            this.state = 3077;
	            this.labelName();
	            break;
	        case 153:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3078;
	            this.match(GQLParser.LABELS);
	            this.state = 3079;
	            this.labelSetSpecification();
	            break;
	        case 4:
	        case 149:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3080;
	            this.isOrColon();
	            this.state = 3081;
	            this.labelSetSpecification();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyTypeSetDefinition() {
	    let localctx = new PropertyTypeSetDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 768, GQLParser.RULE_propertyTypeSetDefinition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3085;
	        this.match(GQLParser.LEFT_BRACE);
	        this.state = 3087;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 337)) & ~0x1f) === 0 && ((1 << (_la - 337)) & 67) !== 0)) {
	            this.state = 3086;
	            this.propertyTypeDefinitionList();
	        }

	        this.state = 3089;
	        this.match(GQLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyTypeDefinitionList() {
	    let localctx = new PropertyTypeDefinitionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 770, GQLParser.RULE_propertyTypeDefinitionList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3091;
	        this.propertyTypeDefinition();
	        this.state = 3096;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===5) {
	            this.state = 3092;
	            this.match(GQLParser.COMMA);
	            this.state = 3093;
	            this.propertyTypeDefinition();
	            this.state = 3098;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyTypeDefinition() {
	    let localctx = new PropertyTypeDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 772, GQLParser.RULE_propertyTypeDefinition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3099;
	        this.propertyName();
	        this.state = 3101;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===255 || _la===300) {
	            this.state = 3100;
	            this.typed();
	        }

	        this.state = 3103;
	        this.propertyValueType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyValueType() {
	    let localctx = new PropertyValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 774, GQLParser.RULE_propertyValueType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3105;
	        this.valueType(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingTableType() {
	    let localctx = new BindingTableTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 776, GQLParser.RULE_bindingTableType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3108;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===46) {
	            this.state = 3107;
	            this.match(GQLParser.BINDING);
	        }

	        this.state = 3110;
	        this.match(GQLParser.TABLE);
	        this.state = 3111;
	        this.fieldTypesSpecification();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	valueType(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ValueTypeContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 778;
	    this.enterRecursionRule(localctx, 778, GQLParser.RULE_valueType, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3173;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,296,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new PredefTypeContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 3114;
	            this.predefinedType();
	            break;

	        case 2:
	            localctx = new PathTypeContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 3115;
	            this.pathValueType();
	            break;

	        case 3:
	            localctx = new ListType1Context(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 3116;
	            this.listValueTypeName();
	            this.state = 3117;
	            this.match(GQLParser.LEFT_ANGLE_BRACKET);
	            this.state = 3118;
	            this.valueType(0);
	            this.state = 3119;
	            this.match(GQLParser.RIGHT_ANGLE_BRACKET);
	            this.state = 3124;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,284,this._ctx);
	            if(la_===1) {
	                this.state = 3120;
	                this.match(GQLParser.LEFT_BRACKET);
	                this.state = 3121;
	                this.maxLength();
	                this.state = 3122;
	                this.match(GQLParser.RIGHT_BRACKET);

	            }
	            this.state = 3127;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,285,this._ctx);
	            if(la_===1) {
	                this.state = 3126;
	                this.notNull();

	            }
	            break;

	        case 4:
	            localctx = new RecordType1Context(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 3130;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===34) {
	                this.state = 3129;
	                this.match(GQLParser.ANY);
	            }

	            this.state = 3132;
	            this.match(GQLParser.RECORD);
	            this.state = 3134;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,287,this._ctx);
	            if(la_===1) {
	                this.state = 3133;
	                this.notNull();

	            }
	            break;

	        case 5:
	            localctx = new RecordType2Context(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 3137;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===212) {
	                this.state = 3136;
	                this.match(GQLParser.RECORD);
	            }

	            this.state = 3139;
	            this.fieldTypesSpecification();
	            this.state = 3141;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,289,this._ctx);
	            if(la_===1) {
	                this.state = 3140;
	                this.notNull();

	            }
	            break;

	        case 6:
	            localctx = new OpenDynamicUnionTypeContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 3143;
	            this.match(GQLParser.ANY);
	            this.state = 3145;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,290,this._ctx);
	            if(la_===1) {
	                this.state = 3144;
	                this.match(GQLParser.VALUE);

	            }
	            this.state = 3148;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,291,this._ctx);
	            if(la_===1) {
	                this.state = 3147;
	                this.notNull();

	            }
	            break;

	        case 7:
	            localctx = new DynamicPropertyValueTypeContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 3151;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===34) {
	                this.state = 3150;
	                this.match(GQLParser.ANY);
	            }

	            this.state = 3153;
	            this.match(GQLParser.PROPERTY);
	            this.state = 3154;
	            this.match(GQLParser.VALUE);
	            this.state = 3156;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,293,this._ctx);
	            if(la_===1) {
	                this.state = 3155;
	                this.notNull();

	            }
	            break;

	        case 8:
	            localctx = new ClosedDynamicUnionType1Context(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 3158;
	            this.match(GQLParser.ANY);
	            this.state = 3160;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===271) {
	                this.state = 3159;
	                this.match(GQLParser.VALUE);
	            }

	            this.state = 3162;
	            this.match(GQLParser.LEFT_ANGLE_BRACKET);
	            this.state = 3163;
	            this.valueType(0);
	            this.state = 3168;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===27) {
	                this.state = 3164;
	                this.match(GQLParser.VERTICAL_BAR);
	                this.state = 3165;
	                this.valueType(0);
	                this.state = 3170;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 3171;
	            this.match(GQLParser.RIGHT_ANGLE_BRACKET);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 3195;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,301,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 3193;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,300,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new ListType2Context(this, new ValueTypeContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, GQLParser.RULE_valueType);
	                    this.state = 3175;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 3176;
	                    this.listValueTypeName();
	                    this.state = 3181;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,297,this._ctx);
	                    if(la_===1) {
	                        this.state = 3177;
	                        this.match(GQLParser.LEFT_BRACKET);
	                        this.state = 3178;
	                        this.maxLength();
	                        this.state = 3179;
	                        this.match(GQLParser.RIGHT_BRACKET);

	                    }
	                    this.state = 3184;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,298,this._ctx);
	                    if(la_===1) {
	                        this.state = 3183;
	                        this.notNull();

	                    }
	                    break;

	                case 2:
	                    localctx = new ClosedDynamicUnionType2Context(this, new ValueTypeContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, GQLParser.RULE_valueType);
	                    this.state = 3186;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 3189; 
	                    this._errHandler.sync(this);
	                    var _alt = 1;
	                    do {
	                    	switch (_alt) {
	                    	case 1:
	                    		this.state = 3187;
	                    		this.match(GQLParser.VERTICAL_BAR);
	                    		this.state = 3188;
	                    		this.valueType(0);
	                    		break;
	                    	default:
	                    		throw new antlr4.error.NoViableAltException(this);
	                    	}
	                    	this.state = 3191; 
	                    	this._errHandler.sync(this);
	                    	_alt = this._interp.adaptivePredict(this._input,299, this._ctx);
	                    } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	                    break;

	                } 
	            }
	            this.state = 3197;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,301,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	typed() {
	    let localctx = new TypedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 780, GQLParser.RULE_typed);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3198;
	        _la = this._input.LA(1);
	        if(!(_la===255 || _la===300)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	predefinedType() {
	    let localctx = new PredefinedTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 782, GQLParser.RULE_predefinedType);
	    try {
	        this.state = 3206;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 48:
	        case 49:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3200;
	            this.booleanType();
	            break;
	        case 238:
	        case 273:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3201;
	            this.characterStringType();
	            break;
	        case 45:
	        case 54:
	        case 272:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3202;
	            this.byteStringType();
	            break;
	        case 43:
	        case 44:
	        case 83:
	        case 84:
	        case 94:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 211:
	        case 227:
	        case 231:
	        case 232:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 267:
	        case 270:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3203;
	            this.numericType();
	            break;
	        case 81:
	        case 96:
	        case 162:
	        case 245:
	        case 246:
	        case 284:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3204;
	            this.temporalType();
	            break;
	        case 12:
	        case 34:
	        case 46:
	        case 92:
	        case 119:
	        case 207:
	        case 240:
	        case 264:
	        case 291:
	        case 293:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3205;
	            this.referenceValueType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanType() {
	    let localctx = new BooleanTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 784, GQLParser.RULE_booleanType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3208;
	        _la = this._input.LA(1);
	        if(!(_la===48 || _la===49)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3210;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,303,this._ctx);
	        if(la_===1) {
	            this.state = 3209;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	characterStringType() {
	    let localctx = new CharacterStringTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 786, GQLParser.RULE_characterStringType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3212;
	        _la = this._input.LA(1);
	        if(!(_la===238 || _la===273)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3217;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,304,this._ctx);
	        if(la_===1) {
	            this.state = 3213;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 3214;
	            this.maxLength();
	            this.state = 3215;
	            this.match(GQLParser.RIGHT_PAREN);

	        }
	        this.state = 3220;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,305,this._ctx);
	        if(la_===1) {
	            this.state = 3219;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	byteStringType() {
	    let localctx = new ByteStringTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 788, GQLParser.RULE_byteStringType);
	    try {
	        this.state = 3257;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 54:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3222;
	            this.match(GQLParser.BYTES);
	            this.state = 3232;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,307,this._ctx);
	            if(la_===1) {
	                this.state = 3223;
	                this.match(GQLParser.LEFT_PAREN);
	                this.state = 3227;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,306,this._ctx);
	                if(la_===1) {
	                    this.state = 3224;
	                    this.minLength();
	                    this.state = 3225;
	                    this.match(GQLParser.COMMA);

	                }
	                this.state = 3229;
	                this.maxLength();
	                this.state = 3230;
	                this.match(GQLParser.RIGHT_PAREN);

	            }
	            this.state = 3235;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,308,this._ctx);
	            if(la_===1) {
	                this.state = 3234;
	                this.notNull();

	            }
	            break;
	        case 45:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3237;
	            this.match(GQLParser.BINARY);
	            this.state = 3242;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,309,this._ctx);
	            if(la_===1) {
	                this.state = 3238;
	                this.match(GQLParser.LEFT_PAREN);
	                this.state = 3239;
	                this.fixedLength();
	                this.state = 3240;
	                this.match(GQLParser.RIGHT_PAREN);

	            }
	            this.state = 3245;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,310,this._ctx);
	            if(la_===1) {
	                this.state = 3244;
	                this.notNull();

	            }
	            break;
	        case 272:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3247;
	            this.match(GQLParser.VARBINARY);
	            this.state = 3252;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,311,this._ctx);
	            if(la_===1) {
	                this.state = 3248;
	                this.match(GQLParser.LEFT_PAREN);
	                this.state = 3249;
	                this.maxLength();
	                this.state = 3250;
	                this.match(GQLParser.RIGHT_PAREN);

	            }
	            this.state = 3255;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,312,this._ctx);
	            if(la_===1) {
	                this.state = 3254;
	                this.notNull();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	minLength() {
	    let localctx = new MinLengthContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 790, GQLParser.RULE_minLength);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3259;
	        this.match(GQLParser.UNSIGNED_DECIMAL_INTEGER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	maxLength() {
	    let localctx = new MaxLengthContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 792, GQLParser.RULE_maxLength);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3261;
	        this.match(GQLParser.UNSIGNED_DECIMAL_INTEGER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fixedLength() {
	    let localctx = new FixedLengthContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 794, GQLParser.RULE_fixedLength);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3263;
	        this.match(GQLParser.UNSIGNED_DECIMAL_INTEGER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericType() {
	    let localctx = new NumericTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 796, GQLParser.RULE_numericType);
	    try {
	        this.state = 3267;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 43:
	        case 44:
	        case 83:
	        case 84:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 227:
	        case 231:
	        case 232:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 267:
	        case 270:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3265;
	            this.exactNumericType();
	            break;
	        case 94:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 211:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3266;
	            this.approximateNumericType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exactNumericType() {
	    let localctx = new ExactNumericTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 798, GQLParser.RULE_exactNumericType);
	    try {
	        this.state = 3271;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 43:
	        case 44:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 227:
	        case 231:
	        case 232:
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 267:
	        case 270:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3269;
	            this.binaryExactNumericType();
	            break;
	        case 83:
	        case 84:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3270;
	            this.decimalExactNumericType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	binaryExactNumericType() {
	    let localctx = new BinaryExactNumericTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 800, GQLParser.RULE_binaryExactNumericType);
	    try {
	        this.state = 3275;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 43:
	        case 44:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 227:
	        case 231:
	        case 232:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3273;
	            this.signedBinaryExactNumericType();
	            break;
	        case 256:
	        case 257:
	        case 258:
	        case 259:
	        case 260:
	        case 261:
	        case 262:
	        case 263:
	        case 267:
	        case 270:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3274;
	            this.unsignedBinaryExactNumericType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	signedBinaryExactNumericType() {
	    let localctx = new SignedBinaryExactNumericTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 802, GQLParser.RULE_signedBinaryExactNumericType);
	    var _la = 0;
	    try {
	        this.state = 3323;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 135:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3277;
	            this.match(GQLParser.INT8);
	            this.state = 3279;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,317,this._ctx);
	            if(la_===1) {
	                this.state = 3278;
	                this.notNull();

	            }
	            break;
	        case 136:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3281;
	            this.match(GQLParser.INT16);
	            this.state = 3283;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,318,this._ctx);
	            if(la_===1) {
	                this.state = 3282;
	                this.notNull();

	            }
	            break;
	        case 137:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3285;
	            this.match(GQLParser.INT32);
	            this.state = 3287;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,319,this._ctx);
	            if(la_===1) {
	                this.state = 3286;
	                this.notNull();

	            }
	            break;
	        case 138:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3289;
	            this.match(GQLParser.INT64);
	            this.state = 3291;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,320,this._ctx);
	            if(la_===1) {
	                this.state = 3290;
	                this.notNull();

	            }
	            break;
	        case 139:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3293;
	            this.match(GQLParser.INT128);
	            this.state = 3295;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,321,this._ctx);
	            if(la_===1) {
	                this.state = 3294;
	                this.notNull();

	            }
	            break;
	        case 140:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3297;
	            this.match(GQLParser.INT256);
	            this.state = 3299;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,322,this._ctx);
	            if(la_===1) {
	                this.state = 3298;
	                this.notNull();

	            }
	            break;
	        case 232:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3301;
	            this.match(GQLParser.SMALLINT);
	            this.state = 3303;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,323,this._ctx);
	            if(la_===1) {
	                this.state = 3302;
	                this.notNull();

	            }
	            break;
	        case 134:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3305;
	            this.match(GQLParser.INT);
	            this.state = 3310;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,324,this._ctx);
	            if(la_===1) {
	                this.state = 3306;
	                this.match(GQLParser.LEFT_PAREN);
	                this.state = 3307;
	                this.precision();
	                this.state = 3308;
	                this.match(GQLParser.RIGHT_PAREN);

	            }
	            this.state = 3313;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,325,this._ctx);
	            if(la_===1) {
	                this.state = 3312;
	                this.notNull();

	            }
	            break;
	        case 44:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 3315;
	            this.match(GQLParser.BIGINT);
	            break;
	        case 43:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 147:
	        case 227:
	        case 231:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 3317;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===227) {
	                this.state = 3316;
	                this.match(GQLParser.SIGNED);
	            }

	            this.state = 3319;
	            this.verboseBinaryExactNumericType();
	            this.state = 3321;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,327,this._ctx);
	            if(la_===1) {
	                this.state = 3320;
	                this.notNull();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unsignedBinaryExactNumericType() {
	    let localctx = new UnsignedBinaryExactNumericTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 804, GQLParser.RULE_unsignedBinaryExactNumericType);
	    try {
	        this.state = 3372;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 263:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3325;
	            this.match(GQLParser.UINT8);
	            this.state = 3327;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,329,this._ctx);
	            if(la_===1) {
	                this.state = 3326;
	                this.notNull();

	            }
	            break;
	        case 259:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3329;
	            this.match(GQLParser.UINT16);
	            this.state = 3331;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,330,this._ctx);
	            if(la_===1) {
	                this.state = 3330;
	                this.notNull();

	            }
	            break;
	        case 261:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3333;
	            this.match(GQLParser.UINT32);
	            this.state = 3335;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,331,this._ctx);
	            if(la_===1) {
	                this.state = 3334;
	                this.notNull();

	            }
	            break;
	        case 262:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3337;
	            this.match(GQLParser.UINT64);
	            this.state = 3339;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,332,this._ctx);
	            if(la_===1) {
	                this.state = 3338;
	                this.notNull();

	            }
	            break;
	        case 258:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3341;
	            this.match(GQLParser.UINT128);
	            this.state = 3343;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,333,this._ctx);
	            if(la_===1) {
	                this.state = 3342;
	                this.notNull();

	            }
	            break;
	        case 260:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3345;
	            this.match(GQLParser.UINT256);
	            this.state = 3347;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,334,this._ctx);
	            if(la_===1) {
	                this.state = 3346;
	                this.notNull();

	            }
	            break;
	        case 270:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3349;
	            this.match(GQLParser.USMALLINT);
	            this.state = 3351;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,335,this._ctx);
	            if(la_===1) {
	                this.state = 3350;
	                this.notNull();

	            }
	            break;
	        case 257:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3353;
	            this.match(GQLParser.UINT);
	            this.state = 3358;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,336,this._ctx);
	            if(la_===1) {
	                this.state = 3354;
	                this.match(GQLParser.LEFT_PAREN);
	                this.state = 3355;
	                this.precision();
	                this.state = 3356;
	                this.match(GQLParser.RIGHT_PAREN);

	            }
	            this.state = 3361;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,337,this._ctx);
	            if(la_===1) {
	                this.state = 3360;
	                this.notNull();

	            }
	            break;
	        case 256:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 3363;
	            this.match(GQLParser.UBIGINT);
	            this.state = 3365;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,338,this._ctx);
	            if(la_===1) {
	                this.state = 3364;
	                this.notNull();

	            }
	            break;
	        case 267:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 3367;
	            this.match(GQLParser.UNSIGNED);
	            this.state = 3368;
	            this.verboseBinaryExactNumericType();
	            this.state = 3370;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,339,this._ctx);
	            if(la_===1) {
	                this.state = 3369;
	                this.notNull();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	verboseBinaryExactNumericType() {
	    let localctx = new VerboseBinaryExactNumericTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 806, GQLParser.RULE_verboseBinaryExactNumericType);
	    try {
	        this.state = 3418;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 142:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3374;
	            this.match(GQLParser.INTEGER8);
	            this.state = 3376;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,341,this._ctx);
	            if(la_===1) {
	                this.state = 3375;
	                this.notNull();

	            }
	            break;
	        case 143:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3378;
	            this.match(GQLParser.INTEGER16);
	            this.state = 3380;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,342,this._ctx);
	            if(la_===1) {
	                this.state = 3379;
	                this.notNull();

	            }
	            break;
	        case 144:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3382;
	            this.match(GQLParser.INTEGER32);
	            this.state = 3384;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,343,this._ctx);
	            if(la_===1) {
	                this.state = 3383;
	                this.notNull();

	            }
	            break;
	        case 145:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3386;
	            this.match(GQLParser.INTEGER64);
	            this.state = 3388;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,344,this._ctx);
	            if(la_===1) {
	                this.state = 3387;
	                this.notNull();

	            }
	            break;
	        case 146:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3390;
	            this.match(GQLParser.INTEGER128);
	            this.state = 3392;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,345,this._ctx);
	            if(la_===1) {
	                this.state = 3391;
	                this.notNull();

	            }
	            break;
	        case 147:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3394;
	            this.match(GQLParser.INTEGER256);
	            this.state = 3396;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,346,this._ctx);
	            if(la_===1) {
	                this.state = 3395;
	                this.notNull();

	            }
	            break;
	        case 231:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3398;
	            this.match(GQLParser.SMALL);
	            this.state = 3399;
	            this.match(GQLParser.INTEGER);
	            this.state = 3401;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,347,this._ctx);
	            if(la_===1) {
	                this.state = 3400;
	                this.notNull();

	            }
	            break;
	        case 141:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3403;
	            this.match(GQLParser.INTEGER);
	            this.state = 3408;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,348,this._ctx);
	            if(la_===1) {
	                this.state = 3404;
	                this.match(GQLParser.LEFT_PAREN);
	                this.state = 3405;
	                this.precision();
	                this.state = 3406;
	                this.match(GQLParser.RIGHT_PAREN);

	            }
	            this.state = 3411;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,349,this._ctx);
	            if(la_===1) {
	                this.state = 3410;
	                this.notNull();

	            }
	            break;
	        case 43:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 3413;
	            this.match(GQLParser.BIG);
	            this.state = 3414;
	            this.match(GQLParser.INTEGER);
	            this.state = 3416;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,350,this._ctx);
	            if(la_===1) {
	                this.state = 3415;
	                this.notNull();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decimalExactNumericType() {
	    let localctx = new DecimalExactNumericTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 808, GQLParser.RULE_decimalExactNumericType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3420;
	        _la = this._input.LA(1);
	        if(!(_la===83 || _la===84)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3431;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,354,this._ctx);
	        if(la_===1) {
	            this.state = 3421;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 3422;
	            this.precision();
	            this.state = 3425;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5) {
	                this.state = 3423;
	                this.match(GQLParser.COMMA);
	                this.state = 3424;
	                this.scale();
	            }

	            this.state = 3427;
	            this.match(GQLParser.RIGHT_PAREN);
	            this.state = 3429;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,353,this._ctx);
	            if(la_===1) {
	                this.state = 3428;
	                this.notNull();

	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precision() {
	    let localctx = new PrecisionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 810, GQLParser.RULE_precision);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3433;
	        this.match(GQLParser.UNSIGNED_DECIMAL_INTEGER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scale() {
	    let localctx = new ScaleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 812, GQLParser.RULE_scale);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3435;
	        this.match(GQLParser.UNSIGNED_DECIMAL_INTEGER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	approximateNumericType() {
	    let localctx = new ApproximateNumericTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 814, GQLParser.RULE_approximateNumericType);
	    var _la = 0;
	    try {
	        this.state = 3482;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 112:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3437;
	            this.match(GQLParser.FLOAT16);
	            this.state = 3439;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,355,this._ctx);
	            if(la_===1) {
	                this.state = 3438;
	                this.notNull();

	            }
	            break;
	        case 114:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3441;
	            this.match(GQLParser.FLOAT32);
	            this.state = 3443;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,356,this._ctx);
	            if(la_===1) {
	                this.state = 3442;
	                this.notNull();

	            }
	            break;
	        case 115:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3445;
	            this.match(GQLParser.FLOAT64);
	            this.state = 3447;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,357,this._ctx);
	            if(la_===1) {
	                this.state = 3446;
	                this.notNull();

	            }
	            break;
	        case 111:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3449;
	            this.match(GQLParser.FLOAT128);
	            this.state = 3451;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,358,this._ctx);
	            if(la_===1) {
	                this.state = 3450;
	                this.notNull();

	            }
	            break;
	        case 113:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3453;
	            this.match(GQLParser.FLOAT256);
	            this.state = 3455;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,359,this._ctx);
	            if(la_===1) {
	                this.state = 3454;
	                this.notNull();

	            }
	            break;
	        case 110:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3457;
	            this.match(GQLParser.FLOAT);
	            this.state = 3466;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,361,this._ctx);
	            if(la_===1) {
	                this.state = 3458;
	                this.match(GQLParser.LEFT_PAREN);
	                this.state = 3459;
	                this.precision();
	                this.state = 3462;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===5) {
	                    this.state = 3460;
	                    this.match(GQLParser.COMMA);
	                    this.state = 3461;
	                    this.scale();
	                }

	                this.state = 3464;
	                this.match(GQLParser.RIGHT_PAREN);

	            }
	            this.state = 3469;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,362,this._ctx);
	            if(la_===1) {
	                this.state = 3468;
	                this.notNull();

	            }
	            break;
	        case 211:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3471;
	            this.match(GQLParser.REAL);
	            this.state = 3473;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,363,this._ctx);
	            if(la_===1) {
	                this.state = 3472;
	                this.notNull();

	            }
	            break;
	        case 94:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3475;
	            this.match(GQLParser.DOUBLE);
	            this.state = 3477;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,364,this._ctx);
	            if(la_===1) {
	                this.state = 3476;
	                this.match(GQLParser.PRECISION);

	            }
	            this.state = 3480;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,365,this._ctx);
	            if(la_===1) {
	                this.state = 3479;
	                this.notNull();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	temporalType() {
	    let localctx = new TemporalTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 816, GQLParser.RULE_temporalType);
	    try {
	        this.state = 3486;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 81:
	        case 162:
	        case 245:
	        case 246:
	        case 284:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3484;
	            this.temporalInstantType();
	            break;
	        case 96:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3485;
	            this.temporalDurationType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	temporalInstantType() {
	    let localctx = new TemporalInstantTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 818, GQLParser.RULE_temporalInstantType);
	    try {
	        this.state = 3493;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,368,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3488;
	            this.datetimeType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3489;
	            this.localdatetimeType();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3490;
	            this.dateType();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3491;
	            this.timeType();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3492;
	            this.localtimeType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	temporalDurationType() {
	    let localctx = new TemporalDurationTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 820, GQLParser.RULE_temporalDurationType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3495;
	        this.durationType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	datetimeType() {
	    let localctx = new DatetimeTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 822, GQLParser.RULE_datetimeType);
	    try {
	        this.state = 3508;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 284:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3497;
	            this.match(GQLParser.ZONED);
	            this.state = 3498;
	            this.match(GQLParser.DATETIME);
	            this.state = 3500;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,369,this._ctx);
	            if(la_===1) {
	                this.state = 3499;
	                this.notNull();

	            }
	            break;
	        case 246:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3502;
	            this.match(GQLParser.TIMESTAMP);
	            this.state = 3503;
	            this.match(GQLParser.WITH);
	            this.state = 3504;
	            this.match(GQLParser.TIMEZONE);
	            this.state = 3506;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,370,this._ctx);
	            if(la_===1) {
	                this.state = 3505;
	                this.notNull();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localdatetimeType() {
	    let localctx = new LocaldatetimeTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 824, GQLParser.RULE_localdatetimeType);
	    try {
	        this.state = 3523;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 162:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3510;
	            this.match(GQLParser.LOCAL);
	            this.state = 3511;
	            this.match(GQLParser.DATETIME);
	            this.state = 3513;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,372,this._ctx);
	            if(la_===1) {
	                this.state = 3512;
	                this.notNull();

	            }
	            break;
	        case 246:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3515;
	            this.match(GQLParser.TIMESTAMP);
	            this.state = 3518;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,373,this._ctx);
	            if(la_===1) {
	                this.state = 3516;
	                this.match(GQLParser.WITHOUT);
	                this.state = 3517;
	                this.match(GQLParser.TIMEZONE);

	            }
	            this.state = 3521;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,374,this._ctx);
	            if(la_===1) {
	                this.state = 3520;
	                this.notNull();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateType() {
	    let localctx = new DateTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 826, GQLParser.RULE_dateType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3525;
	        this.match(GQLParser.DATE);
	        this.state = 3527;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,376,this._ctx);
	        if(la_===1) {
	            this.state = 3526;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeType() {
	    let localctx = new TimeTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 828, GQLParser.RULE_timeType);
	    try {
	        this.state = 3540;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 284:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3529;
	            this.match(GQLParser.ZONED);
	            this.state = 3530;
	            this.match(GQLParser.TIME);
	            this.state = 3532;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,377,this._ctx);
	            if(la_===1) {
	                this.state = 3531;
	                this.notNull();

	            }
	            break;
	        case 245:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3534;
	            this.match(GQLParser.TIME);
	            this.state = 3535;
	            this.match(GQLParser.WITH);
	            this.state = 3536;
	            this.match(GQLParser.TIMEZONE);
	            this.state = 3538;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,378,this._ctx);
	            if(la_===1) {
	                this.state = 3537;
	                this.notNull();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localtimeType() {
	    let localctx = new LocaltimeTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 830, GQLParser.RULE_localtimeType);
	    try {
	        this.state = 3553;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 162:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3542;
	            this.match(GQLParser.LOCAL);
	            this.state = 3543;
	            this.match(GQLParser.TIME);
	            this.state = 3545;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,380,this._ctx);
	            if(la_===1) {
	                this.state = 3544;
	                this.notNull();

	            }
	            break;
	        case 245:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3547;
	            this.match(GQLParser.TIME);
	            this.state = 3548;
	            this.match(GQLParser.WITHOUT);
	            this.state = 3549;
	            this.match(GQLParser.TIMEZONE);
	            this.state = 3551;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,381,this._ctx);
	            if(la_===1) {
	                this.state = 3550;
	                this.notNull();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationType() {
	    let localctx = new DurationTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 832, GQLParser.RULE_durationType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3555;
	        this.match(GQLParser.DURATION);
	        this.state = 3557;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,383,this._ctx);
	        if(la_===1) {
	            this.state = 3556;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	referenceValueType() {
	    let localctx = new ReferenceValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 834, GQLParser.RULE_referenceValueType);
	    try {
	        this.state = 3563;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,384,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3559;
	            this.graphReferenceValueType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3560;
	            this.bindingTableReferenceValueType();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3561;
	            this.nodeReferenceValueType();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3562;
	            this.edgeReferenceValueType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphReferenceValueType() {
	    let localctx = new GraphReferenceValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 836, GQLParser.RULE_graphReferenceValueType);
	    try {
	        this.state = 3567;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 34:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3565;
	            this.openGraphReferenceValueType();
	            break;
	        case 119:
	        case 207:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3566;
	            this.closedGraphReferenceValueType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	closedGraphReferenceValueType() {
	    let localctx = new ClosedGraphReferenceValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 838, GQLParser.RULE_closedGraphReferenceValueType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3570;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===207) {
	            this.state = 3569;
	            this.match(GQLParser.PROPERTY);
	        }

	        this.state = 3572;
	        this.match(GQLParser.GRAPH);
	        this.state = 3573;
	        this.nestedGraphTypeSpecification();
	        this.state = 3575;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,387,this._ctx);
	        if(la_===1) {
	            this.state = 3574;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	openGraphReferenceValueType() {
	    let localctx = new OpenGraphReferenceValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 840, GQLParser.RULE_openGraphReferenceValueType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3577;
	        this.match(GQLParser.ANY);
	        this.state = 3579;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===207) {
	            this.state = 3578;
	            this.match(GQLParser.PROPERTY);
	        }

	        this.state = 3581;
	        this.match(GQLParser.GRAPH);
	        this.state = 3583;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,389,this._ctx);
	        if(la_===1) {
	            this.state = 3582;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingTableReferenceValueType() {
	    let localctx = new BindingTableReferenceValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 842, GQLParser.RULE_bindingTableReferenceValueType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3585;
	        this.bindingTableType();
	        this.state = 3587;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,390,this._ctx);
	        if(la_===1) {
	            this.state = 3586;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nodeReferenceValueType() {
	    let localctx = new NodeReferenceValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 844, GQLParser.RULE_nodeReferenceValueType);
	    try {
	        this.state = 3591;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,391,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3589;
	            this.openNodeReferenceValueType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3590;
	            this.closedNodeReferenceValueType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	closedNodeReferenceValueType() {
	    let localctx = new ClosedNodeReferenceValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 846, GQLParser.RULE_closedNodeReferenceValueType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3593;
	        this.nodeTypeDefinition();
	        this.state = 3595;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,392,this._ctx);
	        if(la_===1) {
	            this.state = 3594;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	openNodeReferenceValueType() {
	    let localctx = new OpenNodeReferenceValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 848, GQLParser.RULE_openNodeReferenceValueType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3598;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===34) {
	            this.state = 3597;
	            this.match(GQLParser.ANY);
	        }

	        this.state = 3600;
	        this.match(GQLParser.NODE_SYNONYM);
	        this.state = 3602;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,394,this._ctx);
	        if(la_===1) {
	            this.state = 3601;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeReferenceValueType() {
	    let localctx = new EdgeReferenceValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 850, GQLParser.RULE_edgeReferenceValueType);
	    try {
	        this.state = 3606;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,395,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3604;
	            this.openEdgeReferenceValueType();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3605;
	            this.closedEdgeReferenceValueType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	closedEdgeReferenceValueType() {
	    let localctx = new ClosedEdgeReferenceValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 852, GQLParser.RULE_closedEdgeReferenceValueType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3608;
	        this.edgeTypeDefinition();
	        this.state = 3610;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,396,this._ctx);
	        if(la_===1) {
	            this.state = 3609;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	openEdgeReferenceValueType() {
	    let localctx = new OpenEdgeReferenceValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 854, GQLParser.RULE_openEdgeReferenceValueType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3613;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===34) {
	            this.state = 3612;
	            this.match(GQLParser.ANY);
	        }

	        this.state = 3615;
	        this.match(GQLParser.EDGE_SYNONYM);
	        this.state = 3617;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,398,this._ctx);
	        if(la_===1) {
	            this.state = 3616;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listValueTypeName() {
	    let localctx = new ListValueTypeNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 856, GQLParser.RULE_listValueTypeName);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3620;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===120) {
	            this.state = 3619;
	            this.match(GQLParser.GROUP);
	        }

	        this.state = 3622;
	        this.listValueTypeNameSynonym();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listValueTypeNameSynonym() {
	    let localctx = new ListValueTypeNameSynonymContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 858, GQLParser.RULE_listValueTypeNameSynonym);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3624;
	        _la = this._input.LA(1);
	        if(!(_la===35 || _la===160)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldTypesSpecification() {
	    let localctx = new FieldTypesSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 860, GQLParser.RULE_fieldTypesSpecification);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3626;
	        this.match(GQLParser.LEFT_BRACE);
	        this.state = 3628;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 337)) & ~0x1f) === 0 && ((1 << (_la - 337)) & 67) !== 0)) {
	            this.state = 3627;
	            this.fieldTypeList();
	        }

	        this.state = 3630;
	        this.match(GQLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldTypeList() {
	    let localctx = new FieldTypeListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 862, GQLParser.RULE_fieldTypeList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3632;
	        this.fieldType();
	        this.state = 3637;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===5) {
	            this.state = 3633;
	            this.match(GQLParser.COMMA);
	            this.state = 3634;
	            this.fieldType();
	            this.state = 3639;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathValueType() {
	    let localctx = new PathValueTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 864, GQLParser.RULE_pathValueType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3640;
	        this.match(GQLParser.PATH);
	        this.state = 3642;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,402,this._ctx);
	        if(la_===1) {
	            this.state = 3641;
	            this.notNull();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	notNull() {
	    let localctx = new NotNullContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 866, GQLParser.RULE_notNull);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3644;
	        this.match(GQLParser.NOT);
	        this.state = 3645;
	        this.match(GQLParser.NULL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldType() {
	    let localctx = new FieldTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 868, GQLParser.RULE_fieldType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3647;
	        this.fieldName();
	        this.state = 3649;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===255 || _la===300) {
	            this.state = 3648;
	            this.typed();
	        }

	        this.state = 3651;
	        this.valueType(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	schemaReference() {
	    let localctx = new SchemaReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 870, GQLParser.RULE_schemaReference);
	    try {
	        this.state = 3656;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 24:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3653;
	            this.absoluteCatalogSchemaReference();
	            break;
	        case 16:
	        case 77:
	        case 125:
	        case 301:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3654;
	            this.relativeCatalogSchemaReference();
	            break;
	        case 6:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3655;
	            this.referenceParameter();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	absoluteCatalogSchemaReference() {
	    let localctx = new AbsoluteCatalogSchemaReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 872, GQLParser.RULE_absoluteCatalogSchemaReference);
	    try {
	        this.state = 3662;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,405,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3658;
	            this.match(GQLParser.SOLIDUS);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3659;
	            this.absoluteDirectoryPath();
	            this.state = 3660;
	            this.schemaName();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catalogSchemaParentAndName() {
	    let localctx = new CatalogSchemaParentAndNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 874, GQLParser.RULE_catalogSchemaParentAndName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3664;
	        this.absoluteDirectoryPath();
	        this.state = 3665;
	        this.schemaName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relativeCatalogSchemaReference() {
	    let localctx = new RelativeCatalogSchemaReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 876, GQLParser.RULE_relativeCatalogSchemaReference);
	    try {
	        this.state = 3671;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 16:
	        case 77:
	        case 125:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3667;
	            this.predefinedSchemaReference();
	            break;
	        case 301:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3668;
	            this.relativeDirectoryPath();
	            this.state = 3669;
	            this.schemaName();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	predefinedSchemaReference() {
	    let localctx = new PredefinedSchemaReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 878, GQLParser.RULE_predefinedSchemaReference);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3673;
	        _la = this._input.LA(1);
	        if(!(_la===16 || _la===77 || _la===125)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	absoluteDirectoryPath() {
	    let localctx = new AbsoluteDirectoryPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 880, GQLParser.RULE_absoluteDirectoryPath);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3675;
	        this.match(GQLParser.SOLIDUS);
	        this.state = 3677;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,407,this._ctx);
	        if(la_===1) {
	            this.state = 3676;
	            this.simpleDirectoryPath();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relativeDirectoryPath() {
	    let localctx = new RelativeDirectoryPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 882, GQLParser.RULE_relativeDirectoryPath);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3679;
	        this.match(GQLParser.DOUBLE_PERIOD);
	        this.state = 3691;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24) {
	            this.state = 3684;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,408,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 3680;
	                    this.match(GQLParser.SOLIDUS);
	                    this.state = 3681;
	                    this.match(GQLParser.DOUBLE_PERIOD); 
	                }
	                this.state = 3686;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,408,this._ctx);
	            }

	            this.state = 3687;
	            this.match(GQLParser.SOLIDUS);
	            this.state = 3689;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,409,this._ctx);
	            if(la_===1) {
	                this.state = 3688;
	                this.simpleDirectoryPath();

	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleDirectoryPath() {
	    let localctx = new SimpleDirectoryPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 884, GQLParser.RULE_simpleDirectoryPath);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3696; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 3693;
	        		this.directoryName();
	        		this.state = 3694;
	        		this.match(GQLParser.SOLIDUS);
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 3698; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,411, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphReference() {
	    let localctx = new GraphReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 886, GQLParser.RULE_graphReference);
	    try {
	        this.state = 3706;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,412,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3700;
	            this.catalogObjectParentReference();
	            this.state = 3701;
	            this.graphName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3703;
	            this.delimitedGraphName();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3704;
	            this.homeGraph();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3705;
	            this.referenceParameter();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catalogGraphParentAndName() {
	    let localctx = new CatalogGraphParentAndNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 888, GQLParser.RULE_catalogGraphParentAndName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3709;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,413,this._ctx);
	        if(la_===1) {
	            this.state = 3708;
	            this.catalogObjectParentReference();

	        }
	        this.state = 3711;
	        this.graphName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	homeGraph() {
	    let localctx = new HomeGraphContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 890, GQLParser.RULE_homeGraph);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3713;
	        _la = this._input.LA(1);
	        if(!(_la===123 || _la===124)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphTypeReference() {
	    let localctx = new GraphTypeReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 892, GQLParser.RULE_graphTypeReference);
	    try {
	        this.state = 3717;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,414,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3715;
	            this.catalogGraphTypeParentAndName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3716;
	            this.referenceParameter();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catalogGraphTypeParentAndName() {
	    let localctx = new CatalogGraphTypeParentAndNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 894, GQLParser.RULE_catalogGraphTypeParentAndName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3720;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,415,this._ctx);
	        if(la_===1) {
	            this.state = 3719;
	            this.catalogObjectParentReference();

	        }
	        this.state = 3722;
	        this.graphTypeName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bindingTableReference() {
	    let localctx = new BindingTableReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 896, GQLParser.RULE_bindingTableReference);
	    try {
	        this.state = 3729;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,416,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3724;
	            this.catalogObjectParentReference();
	            this.state = 3725;
	            this.bindingTableName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3727;
	            this.delimitedBindingTableName();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3728;
	            this.referenceParameter();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catalogBindingTableParentAndName() {
	    let localctx = new CatalogBindingTableParentAndNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 898, GQLParser.RULE_catalogBindingTableParentAndName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3732;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,417,this._ctx);
	        if(la_===1) {
	            this.state = 3731;
	            this.catalogObjectParentReference();

	        }
	        this.state = 3734;
	        this.bindingTableName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureReference() {
	    let localctx = new ProcedureReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 900, GQLParser.RULE_procedureReference);
	    try {
	        this.state = 3738;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,418,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3736;
	            this.catalogProcedureParentAndName();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3737;
	            this.referenceParameter();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catalogProcedureParentAndName() {
	    let localctx = new CatalogProcedureParentAndNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 902, GQLParser.RULE_catalogProcedureParentAndName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3741;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,419,this._ctx);
	        if(la_===1) {
	            this.state = 3740;
	            this.catalogObjectParentReference();

	        }
	        this.state = 3743;
	        this.procedureName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	catalogObjectParentReference() {
	    let localctx = new CatalogObjectParentReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 904, GQLParser.RULE_catalogObjectParentReference);
	    var _la = 0;
	    try {
	        this.state = 3764;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 6:
	        case 16:
	        case 24:
	        case 77:
	        case 125:
	        case 301:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3745;
	            this.schemaReference();
	            this.state = 3747;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===24) {
	                this.state = 3746;
	                this.match(GQLParser.SOLIDUS);
	            }

	            this.state = 3754;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,421,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 3749;
	                    this.objectName();
	                    this.state = 3750;
	                    this.match(GQLParser.PERIOD); 
	                }
	                this.state = 3756;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,421,this._ctx);
	            }

	            break;
	        case 337:
	        case 338:
	        case 343:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3760; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 3757;
	            		this.objectName();
	            		this.state = 3758;
	            		this.match(GQLParser.PERIOD);
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 3762; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,422, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	referenceParameter() {
	    let localctx = new ReferenceParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 906, GQLParser.RULE_referenceParameter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3766;
	        this.parameter();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	externalObjectReference() {
	    let localctx = new ExternalObjectReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 908, GQLParser.RULE_externalObjectReference);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3768;
	        this.match(GQLParser.I_DONT_KNOW_3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comparisonPredicateCond() {
	    let localctx = new ComparisonPredicateCondContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 910, GQLParser.RULE_comparisonPredicateCond);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3770;
	        this.compOp();
	        this.state = 3771;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compOp() {
	    let localctx = new CompOpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 912, GQLParser.RULE_compOp);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3773;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 8832) !== 0) || ((((_la - 302)) & ~0x1f) === 0 && ((1 << (_la - 302)) & 81) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nullPredicateCond() {
	    let localctx = new NullPredicateCondContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 914, GQLParser.RULE_nullPredicateCond);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3775;
	        this.match(GQLParser.IS);
	        this.state = 3777;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===183) {
	            this.state = 3776;
	            this.match(GQLParser.NOT);
	        }

	        this.state = 3779;
	        this.match(GQLParser.NULL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	normalizedPredicateCond() {
	    let localctx = new NormalizedPredicateCondContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 916, GQLParser.RULE_normalizedPredicateCond);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3781;
	        this.match(GQLParser.IS);
	        this.state = 3783;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===183) {
	            this.state = 3782;
	            this.match(GQLParser.NOT);
	        }

	        this.state = 3786;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 175)) & ~0x1f) === 0 && ((1 << (_la - 175)) & 15) !== 0)) {
	            this.state = 3785;
	            this.normalForm();
	        }

	        this.state = 3788;
	        this.match(GQLParser.NORMALIZED);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	directedPredicateCond() {
	    let localctx = new DirectedPredicateCondContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 918, GQLParser.RULE_directedPredicateCond);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3790;
	        this.match(GQLParser.IS);
	        this.state = 3792;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===183) {
	            this.state = 3791;
	            this.match(GQLParser.NOT);
	        }

	        this.state = 3794;
	        this.match(GQLParser.DIRECTED);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labeledPredicateCond() {
	    let localctx = new LabeledPredicateCondContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 920, GQLParser.RULE_labeledPredicateCond);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3802;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 149:
	            this.state = 3796;
	            this.match(GQLParser.IS);
	            this.state = 3798;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===183) {
	                this.state = 3797;
	                this.match(GQLParser.NOT);
	            }

	            this.state = 3800;
	            this.match(GQLParser.LABELED);
	            break;
	        case 4:
	            this.state = 3801;
	            this.match(GQLParser.COLON);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 3804;
	        this.labelExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sourceDestinationPredicateCond() {
	    let localctx = new SourceDestinationPredicateCondContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 922, GQLParser.RULE_sourceDestinationPredicateCond);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3806;
	        this.match(GQLParser.IS);
	        this.state = 3808;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===183) {
	            this.state = 3807;
	            this.match(GQLParser.NOT);
	        }

	        this.state = 3810;
	        _la = this._input.LA(1);
	        if(!(_la===89 || _la===233)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3811;
	        this.match(GQLParser.OF);
	        this.state = 3812;
	        this.elementVariableReference();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unsignedValueSpecification() {
	    let localctx = new UnsignedValueSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 924, GQLParser.RULE_unsignedValueSpecification);
	    try {
	        this.state = 3816;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 10:
	        case 11:
	        case 35:
	        case 81:
	        case 82:
	        case 96:
	        case 106:
	        case 120:
	        case 160:
	        case 184:
	        case 212:
	        case 245:
	        case 246:
	        case 253:
	        case 266:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 336:
	        case 337:
	        case 339:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3814;
	            this.unsignedLiteral();
	            break;
	        case 6:
	        case 80:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3815;
	            this.parameterValueSpecification();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unsignedIntegerSpecification() {
	    let localctx = new UnsignedIntegerSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 926, GQLParser.RULE_unsignedIntegerSpecification);
	    try {
	        this.state = 3820;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3818;
	            this.integerLiteral();
	            break;
	        case 6:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3819;
	            this.parameter();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterValueSpecification() {
	    let localctx = new ParameterValueSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 928, GQLParser.RULE_parameterValueSpecification);
	    try {
	        this.state = 3824;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 6:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3822;
	            this.parameter();
	            break;
	        case 80:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3823;
	            this.predefinedParameter();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	predefinedParameter() {
	    let localctx = new PredefinedParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 930, GQLParser.RULE_predefinedParameter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3826;
	        this.match(GQLParser.CURRENT_USER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 932;
	    this.enterRecursionRule(localctx, 932, GQLParser.RULE_expression, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3832;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 183:
	            localctx = new GqlNotExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 3829;
	            this.match(GQLParser.NOT);
	            this.state = 3830;
	            this.expression(5);
	            break;
	        case 6:
	        case 8:
	        case 10:
	        case 11:
	        case 12:
	        case 14:
	        case 17:
	        case 28:
	        case 29:
	        case 32:
	        case 35:
	        case 39:
	        case 41:
	        case 42:
	        case 46:
	        case 51:
	        case 53:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 64:
	        case 65:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 74:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 85:
	        case 96:
	        case 97:
	        case 99:
	        case 100:
	        case 104:
	        case 105:
	        case 106:
	        case 116:
	        case 119:
	        case 120:
	        case 156:
	        case 157:
	        case 160:
	        case 161:
	        case 163:
	        case 164:
	        case 165:
	        case 166:
	        case 167:
	        case 168:
	        case 169:
	        case 171:
	        case 172:
	        case 173:
	        case 181:
	        case 184:
	        case 185:
	        case 187:
	        case 200:
	        case 201:
	        case 203:
	        case 204:
	        case 205:
	        case 207:
	        case 208:
	        case 209:
	        case 212:
	        case 219:
	        case 220:
	        case 221:
	        case 229:
	        case 230:
	        case 234:
	        case 236:
	        case 237:
	        case 239:
	        case 240:
	        case 241:
	        case 242:
	        case 245:
	        case 246:
	        case 252:
	        case 253:
	        case 266:
	        case 268:
	        case 271:
	        case 285:
	        case 286:
	        case 328:
	        case 329:
	        case 330:
	        case 331:
	        case 332:
	        case 333:
	        case 336:
	        case 337:
	        case 338:
	        case 339:
	        case 343:
	            localctx = new GqlPredicateExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 3831;
	            this.expressionPredicate(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 3845;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,436,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 3843;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,435,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new GqlLogicalAndExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    localctx.lhs = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, GQLParser.RULE_expression);
	                    this.state = 3834;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 3835;
	                    this.match(GQLParser.AND);
	                    this.state = 3836;
	                    localctx.rhs = this.expression(5);
	                    break;

	                case 2:
	                    localctx = new GqlLogicalXorExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    localctx.lhs = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, GQLParser.RULE_expression);
	                    this.state = 3837;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 3838;
	                    this.match(GQLParser.XOR);
	                    this.state = 3839;
	                    localctx.rhs = this.expression(4);
	                    break;

	                case 3:
	                    localctx = new GqlLogicalOrExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    localctx.lhs = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, GQLParser.RULE_expression);
	                    this.state = 3840;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 3841;
	                    this.match(GQLParser.OR);
	                    this.state = 3842;
	                    localctx.rhs = this.expression(3);
	                    break;

	                } 
	            }
	            this.state = 3847;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,436,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	expressionPredicate(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExpressionPredicateContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 934;
	    this.enterRecursionRule(localctx, 934, GQLParser.RULE_expressionPredicate, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3924;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,442,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new GqlExistsExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 3849;
	            this.match(GQLParser.EXISTS);
	            this.state = 3867;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,437,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 3850;
	                this.match(GQLParser.LEFT_BRACE);
	                this.state = 3851;
	                this.graphPattern();
	                this.state = 3852;
	                this.match(GQLParser.RIGHT_BRACE);
	                break;

	            case 2:
	                this.state = 3854;
	                this.match(GQLParser.LEFT_PAREN);
	                this.state = 3855;
	                this.graphPattern();
	                this.state = 3856;
	                this.match(GQLParser.RIGHT_PAREN);
	                break;

	            case 3:
	                this.state = 3858;
	                this.match(GQLParser.LEFT_BRACE);
	                this.state = 3859;
	                this.matchStatementBlock();
	                this.state = 3860;
	                this.match(GQLParser.RIGHT_BRACE);
	                break;

	            case 4:
	                this.state = 3862;
	                this.match(GQLParser.LEFT_PAREN);
	                this.state = 3863;
	                this.matchStatementBlock();
	                this.state = 3864;
	                this.match(GQLParser.RIGHT_PAREN);
	                break;

	            case 5:
	                this.state = 3866;
	                this.nestedQuerySpecification();
	                break;

	            }
	            break;

	        case 2:
	            localctx = new GqlDirectedExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 3869;
	            this.elementVariableReference();
	            this.state = 3870;
	            this.directedPredicateCond();
	            break;

	        case 3:
	            localctx = new GqlLabeledExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 3872;
	            this.elementVariableReference();
	            this.state = 3873;
	            this.labeledPredicateCond();
	            break;

	        case 4:
	            localctx = new GqlSourceDestinationExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 3875;
	            this.elementVariableReference();
	            this.state = 3876;
	            this.sourceDestinationPredicateCond();
	            break;

	        case 5:
	            localctx = new GqlAllDifferentExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 3878;
	            this.match(GQLParser.ALL_DIFFERENT);
	            this.state = 3879;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 3880;
	            this.elementVariableReference();
	            this.state = 3883; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 3881;
	                this.match(GQLParser.COMMA);
	                this.state = 3882;
	                this.elementVariableReference();
	                this.state = 3885; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===5);
	            this.state = 3887;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;

	        case 6:
	            localctx = new GqlSameExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 3889;
	            this.match(GQLParser.SAME);
	            this.state = 3890;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 3891;
	            this.elementVariableReference();
	            this.state = 3894; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 3892;
	                this.match(GQLParser.COMMA);
	                this.state = 3893;
	                this.elementVariableReference();
	                this.state = 3896; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===5);
	            this.state = 3898;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;

	        case 7:
	            localctx = new GqlPropertyExistExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 3900;
	            this.match(GQLParser.PROPERTY_EXISTS);
	            this.state = 3901;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 3902;
	            this.elementVariableReference();
	            this.state = 3903;
	            this.match(GQLParser.COMMA);
	            this.state = 3904;
	            this.propertyName();
	            this.state = 3905;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;

	        case 8:
	            localctx = new GqlGraphRefValueExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 3908;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===207) {
	                this.state = 3907;
	                this.match(GQLParser.PROPERTY);
	            }

	            this.state = 3910;
	            this.match(GQLParser.GRAPH);
	            this.state = 3911;
	            this.graphExpression();
	            break;

	        case 9:
	            localctx = new GqlBindingTableValueExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 3913;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===46) {
	                this.state = 3912;
	                this.match(GQLParser.BINDING);
	            }

	            this.state = 3915;
	            this.match(GQLParser.TABLE);
	            this.state = 3916;
	            this.bindingTableExpression();
	            break;

	        case 10:
	            localctx = new GqlLetExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 3917;
	            this.match(GQLParser.LET);
	            this.state = 3918;
	            this.letVariableDefinitionList();
	            this.state = 3919;
	            this.match(GQLParser.IN);
	            this.state = 3920;
	            this.expression(0);
	            this.state = 3921;
	            this.match(GQLParser.END);
	            break;

	        case 11:
	            localctx = new GqlAtomExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 3923;
	            this.expressionAtom(0);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 3942;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,445,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 3940;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,444,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new GqlComparisonExpressionContext(this, new ExpressionPredicateContext(this, _parentctx, _parentState));
	                    localctx.lhs = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, GQLParser.RULE_expressionPredicate);
	                    this.state = 3926;
	                    if (!( this.precpred(this._ctx, 14))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
	                    }
	                    this.state = 3927;
	                    this.compOp();
	                    this.state = 3928;
	                    localctx.rhs = this.expressionPredicate(15);
	                    break;

	                case 2:
	                    localctx = new GqlBooleanTestExpressionContext(this, new ExpressionPredicateContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, GQLParser.RULE_expressionPredicate);
	                    this.state = 3930;
	                    if (!( this.precpred(this._ctx, 15))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
	                    }
	                    this.state = 3931;
	                    this.match(GQLParser.IS);
	                    this.state = 3933;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===183) {
	                        this.state = 3932;
	                        this.match(GQLParser.NOT);
	                    }

	                    this.state = 3935;
	                    this.truthValue();
	                    break;

	                case 3:
	                    localctx = new GqlNullExpressionContext(this, new ExpressionPredicateContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, GQLParser.RULE_expressionPredicate);
	                    this.state = 3936;
	                    if (!( this.precpred(this._ctx, 12))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 12)");
	                    }
	                    this.state = 3937;
	                    this.nullPredicateCond();
	                    break;

	                case 4:
	                    localctx = new GqlNormalizedExpressionContext(this, new ExpressionPredicateContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, GQLParser.RULE_expressionPredicate);
	                    this.state = 3938;
	                    if (!( this.precpred(this._ctx, 11))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
	                    }
	                    this.state = 3939;
	                    this.normalizedPredicateCond();
	                    break;

	                } 
	            }
	            this.state = 3944;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,445,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	expressionAtom(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExpressionAtomContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 936;
	    this.enterRecursionRule(localctx, 936, GQLParser.RULE_expressionAtom, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3960;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,446,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new GqlParenthesizedExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 3946;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 3947;
	            this.expression(0);
	            this.state = 3948;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;

	        case 2:
	            localctx = new GqlLiteralExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 3950;
	            this.unsignedLiteral();
	            break;

	        case 3:
	            localctx = new GqlUnaryExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 3951;
	            this.unaryOperator();
	            this.state = 3952;
	            this.expressionAtom(8);
	            break;

	        case 4:
	            localctx = new GqlFunctionExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 3954;
	            this.functionCall();
	            break;

	        case 5:
	            localctx = new GqlCollectionExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 3955;
	            this.collectionValueConstructor();
	            break;

	        case 6:
	            localctx = new GqlValueQueryExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 3956;
	            this.match(GQLParser.VALUE);
	            this.state = 3957;
	            this.nestedQuerySpecification();
	            break;

	        case 7:
	            localctx = new GqlParameterExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 3958;
	            this.parameterValueSpecification();
	            break;

	        case 8:
	            localctx = new GqlVariableExpressionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 3959;
	            this.variable();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 3976;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,448,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 3974;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,447,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new GqlConcatenationExpressionContext(this, new ExpressionAtomContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, GQLParser.RULE_expressionAtom);
	                    this.state = 3962;
	                    if (!( this.precpred(this._ctx, 10))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
	                    }
	                    this.state = 3963;
	                    this.match(GQLParser.CONCATENATION_OPERATOR);
	                    this.state = 3964;
	                    this.expressionAtom(11);
	                    break;

	                case 2:
	                    localctx = new GqlHighArithmeticExpressionContext(this, new ExpressionAtomContext(this, _parentctx, _parentState));
	                    localctx.lhs = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, GQLParser.RULE_expressionAtom);
	                    this.state = 3965;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 3966;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===2 || _la===24)) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 3967;
	                    localctx.rhs = this.expressionAtom(5);
	                    break;

	                case 3:
	                    localctx = new GqlLowArithmeticExpressionContext(this, new ExpressionAtomContext(this, _parentctx, _parentState));
	                    localctx.lhs = _prevctx;
	                    this.pushNewRecursionContext(localctx, _startState, GQLParser.RULE_expressionAtom);
	                    this.state = 3968;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 3969;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===14 || _la===17)) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 3970;
	                    localctx.rhs = this.expressionAtom(4);
	                    break;

	                case 4:
	                    localctx = new GqlPropertyReferenceContext(this, new ExpressionAtomContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, GQLParser.RULE_expressionAtom);
	                    this.state = 3971;
	                    if (!( this.precpred(this._ctx, 11))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
	                    }
	                    this.state = 3972;
	                    this.match(GQLParser.PERIOD);
	                    this.state = 3973;
	                    this.propertyName();
	                    break;

	                } 
	            }
	            this.state = 3978;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,448,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	truthValue() {
	    let localctx = new TruthValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 938, GQLParser.RULE_truthValue);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3979;
	        _la = this._input.LA(1);
	        if(!(_la===106 || _la===253 || _la===266)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryOperator() {
	    let localctx = new UnaryOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 940, GQLParser.RULE_unaryOperator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3981;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 147712) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionCall() {
	    let localctx = new FunctionCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 942, GQLParser.RULE_functionCall);
	    try {
	        this.state = 3992;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,449,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3983;
	            this.numericFunction();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3984;
	            this.aggregateFunction();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3985;
	            this.caseFunction();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3986;
	            this.castFunction();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3987;
	            this.elementIdFunction();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3988;
	            this.datetimeValueFunction();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3989;
	            this.durationFunction();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3990;
	            this.listFunction();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 3991;
	            this.stringFunction();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericFunction() {
	    let localctx = new NumericFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 944, GQLParser.RULE_numericFunction);
	    try {
	        this.state = 4006;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 28:
	        case 29:
	        case 39:
	        case 41:
	        case 53:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 69:
	        case 70:
	        case 71:
	        case 85:
	        case 105:
	        case 116:
	        case 161:
	        case 167:
	        case 187:
	        case 201:
	        case 209:
	        case 229:
	        case 230:
	        case 234:
	        case 241:
	        case 242:
	            localctx = new GqlOneArgScalarFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3994;
	            this.oneArgNumericFunctionName();
	            this.state = 3995;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 3996;
	            this.functionParameter();
	            this.state = 3997;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;
	        case 166:
	        case 173:
	        case 205:
	            localctx = new GqlTwoArgScalarFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3999;
	            this.twoArgNumericFunctionName();
	            this.state = 4000;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 4001;
	            this.functionParameter();
	            this.state = 4002;
	            this.match(GQLParser.COMMA);
	            this.state = 4003;
	            this.functionParameter();
	            this.state = 4004;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionParameter() {
	    let localctx = new FunctionParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 946, GQLParser.RULE_functionParameter);
	    try {
	        this.state = 4013;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,451,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4008;
	            this.unsignedLiteral();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4009;
	            this.variable();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4010;
	            this.propertyReference();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4011;
	            this.functionCall();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4012;
	            this.expression(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyReference() {
	    let localctx = new PropertyReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 948, GQLParser.RULE_propertyReference);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4015;
	        this.variable();
	        this.state = 4016;
	        this.match(GQLParser.PERIOD);
	        this.state = 4017;
	        this.propertyName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	oneArgNumericFunctionName() {
	    let localctx = new OneArgNumericFunctionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 950, GQLParser.RULE_oneArgNumericFunctionName);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4019;
	        _la = this._input.LA(1);
	        if(!(((((_la - 28)) & ~0x1f) === 0 && ((1 << (_la - 28)) & 3254790147) !== 0) || ((((_la - 60)) & ~0x1f) === 0 && ((1 << (_la - 60)) & 33558019) !== 0) || _la===105 || _la===116 || ((((_la - 161)) & ~0x1f) === 0 && ((1 << (_la - 161)) & 67108929) !== 0) || ((((_la - 201)) & ~0x1f) === 0 && ((1 << (_la - 201)) & 805306625) !== 0) || ((((_la - 234)) & ~0x1f) === 0 && ((1 << (_la - 234)) & 385) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	twoArgNumericFunctionName() {
	    let localctx = new TwoArgNumericFunctionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 952, GQLParser.RULE_twoArgNumericFunctionName);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4021;
	        _la = this._input.LA(1);
	        if(!(_la===166 || _la===173 || _la===205)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringFunction() {
	    let localctx = new StringFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 954, GQLParser.RULE_stringFunction);
	    var _la = 0;
	    try {
	        this.state = 4067;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 156:
	        case 220:
	            localctx = new GqlSubstringFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4023;
	            localctx.dir = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===156 || _la===220)) {
	                localctx.dir = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 4024;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 4025;
	            localctx.str = this.expressionAtom(0);
	            this.state = 4026;
	            this.match(GQLParser.COMMA);
	            this.state = 4027;
	            localctx.strLen = this.expressionAtom(0);
	            this.state = 4028;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;
	        case 168:
	        case 268:
	            localctx = new GqlFoldStringFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4030;
	            localctx.dir = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===168 || _la===268)) {
	                localctx.dir = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 4031;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 4032;
	            this.expressionAtom(0);
	            this.state = 4033;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;
	        case 252:
	            localctx = new GqlSingleTrimStringFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4035;
	            this.match(GQLParser.TRIM);
	            this.state = 4036;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 4044;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,454,this._ctx);
	            if(la_===1) {
	                this.state = 4038;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===50 || _la===155 || _la===250) {
	                    this.state = 4037;
	                    this.trimSpecification();
	                }

	                this.state = 4041;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) === 0 && ((1 << _la) & 805461312) !== 0) || ((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 1743061201) !== 0) || ((((_la - 69)) & ~0x1f) === 0 && ((1 << (_la - 69)) & 3623960111) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 34819) !== 0) || ((((_la - 156)) & ~0x1f) === 0 && ((1 << (_la - 156)) & 2986590129) !== 0) || ((((_la - 200)) & ~0x1f) === 0 && ((1 << (_la - 200)) & 1612190267) !== 0) || ((((_la - 234)) & ~0x1f) === 0 && ((1 << (_la - 234)) & 793005) !== 0) || ((((_la - 266)) & ~0x1f) === 0 && ((1 << (_la - 266)) & 1572901) !== 0) || ((((_la - 328)) & ~0x1f) === 0 && ((1 << (_la - 328)) & 36671) !== 0)) {
	                    this.state = 4040;
	                    this.expressionAtom(0);
	                }

	                this.state = 4043;
	                this.match(GQLParser.FROM);

	            }
	            this.state = 4046;
	            localctx.trimSrc = this.expressionAtom(0);
	            this.state = 4047;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;
	        case 51:
	        case 169:
	        case 219:
	            localctx = new GqlMultiTrimStringFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4049;
	            localctx.dir = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===51 || _la===169 || _la===219)) {
	                localctx.dir = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 4050;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 4051;
	            localctx.trimSrc = this.expressionAtom(0);
	            this.state = 4054;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5) {
	                this.state = 4052;
	                this.match(GQLParser.COMMA);
	                this.state = 4053;
	                localctx.delChar = this.expressionAtom(0);
	            }

	            this.state = 4056;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;
	        case 181:
	            localctx = new GqlNormStringFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4058;
	            this.match(GQLParser.NORMALIZE);
	            this.state = 4059;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 4060;
	            this.expressionAtom(0);
	            this.state = 4063;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5) {
	                this.state = 4061;
	                this.match(GQLParser.COMMA);
	                this.state = 4062;
	                this.normalForm();
	            }

	            this.state = 4065;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listFunction() {
	    let localctx = new ListFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 956, GQLParser.RULE_listFunction);
	    try {
	        this.state = 4081;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 252:
	            localctx = new GqlListTrimFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4069;
	            this.match(GQLParser.TRIM);
	            this.state = 4070;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 4071;
	            localctx.list = this.expressionAtom(0);
	            this.state = 4072;
	            this.match(GQLParser.COMMA);
	            this.state = 4073;
	            localctx.trim = this.expressionAtom(0);
	            this.state = 4074;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;
	        case 100:
	            localctx = new GqlElementsOfPathFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4076;
	            this.match(GQLParser.ELEMENTS);
	            this.state = 4077;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 4078;
	            this.expressionAtom(0);
	            this.state = 4079;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseFunction() {
	    let localctx = new CaseFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 958, GQLParser.RULE_caseFunction);
	    var _la = 0;
	    try {
	        this.state = 4124;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,464,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new GqlNullIfCaseFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4083;
	            this.match(GQLParser.NULLIF);
	            this.state = 4084;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 4085;
	            localctx.lhs = this.expression(0);
	            this.state = 4086;
	            this.match(GQLParser.COMMA);
	            this.state = 4087;
	            localctx.rhs = this.expression(0);
	            this.state = 4088;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;

	        case 2:
	            localctx = new GqlCoalesceCaseFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4090;
	            this.match(GQLParser.COALESCE);
	            this.state = 4091;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 4092;
	            this.expression(0);
	            this.state = 4095; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 4093;
	                this.match(GQLParser.COMMA);
	                this.state = 4094;
	                this.expression(0);
	                this.state = 4097; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===5);
	            this.state = 4099;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;

	        case 3:
	            localctx = new GqlSimpleCaseFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4101;
	            this.match(GQLParser.CASE);
	            this.state = 4102;
	            this.expressionAtom(0);
	            this.state = 4104; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 4103;
	                this.simpleWhenClause();
	                this.state = 4106; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===276);
	            this.state = 4109;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===101) {
	                this.state = 4108;
	                this.elseClause();
	            }

	            this.state = 4111;
	            this.match(GQLParser.END);
	            break;

	        case 4:
	            localctx = new GqlSearchedCaseFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4113;
	            this.match(GQLParser.CASE);
	            this.state = 4115; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 4114;
	                this.searchedWhenClause();
	                this.state = 4117; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===276);
	            this.state = 4120;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===101) {
	                this.state = 4119;
	                this.elseClause();
	            }

	            this.state = 4122;
	            this.match(GQLParser.END);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleWhenClause() {
	    let localctx = new SimpleWhenClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 960, GQLParser.RULE_simpleWhenClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4126;
	        this.match(GQLParser.WHEN);
	        this.state = 4127;
	        this.whenOperand();
	        this.state = 4132;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===5) {
	            this.state = 4128;
	            this.match(GQLParser.COMMA);
	            this.state = 4129;
	            this.whenOperand();
	            this.state = 4134;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 4135;
	        this.match(GQLParser.THEN);
	        this.state = 4136;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	searchedWhenClause() {
	    let localctx = new SearchedWhenClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 962, GQLParser.RULE_searchedWhenClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4138;
	        this.match(GQLParser.WHEN);
	        this.state = 4139;
	        this.expression(0);
	        this.state = 4140;
	        this.match(GQLParser.THEN);
	        this.state = 4141;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elseClause() {
	    let localctx = new ElseClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 964, GQLParser.RULE_elseClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4143;
	        this.match(GQLParser.ELSE);
	        this.state = 4144;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whenOperand() {
	    let localctx = new WhenOperandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 966, GQLParser.RULE_whenOperand);
	    try {
	        this.state = 4152;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,466,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4146;
	            this.expressionAtom(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4147;
	            this.comparisonPredicateCond();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4148;
	            this.nullPredicateCond();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4149;
	            this.directedPredicateCond();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4150;
	            this.labeledPredicateCond();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4151;
	            this.sourceDestinationPredicateCond();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	castFunction() {
	    let localctx = new CastFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 968, GQLParser.RULE_castFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4154;
	        this.match(GQLParser.CAST);
	        this.state = 4155;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4156;
	        this.expression(0);
	        this.state = 4157;
	        this.match(GQLParser.AS);
	        this.state = 4158;
	        this.valueType(0);
	        this.state = 4159;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elementIdFunction() {
	    let localctx = new ElementIdFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 970, GQLParser.RULE_elementIdFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4161;
	        this.match(GQLParser.ELEMENT_ID);
	        this.state = 4162;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4163;
	        this.variable();
	        this.state = 4164;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	datetimeValueFunction() {
	    let localctx = new DatetimeValueFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 972, GQLParser.RULE_datetimeValueFunction);
	    try {
	        this.state = 4171;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 74:
	        case 81:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4166;
	            this.dateFunction();
	            break;
	        case 78:
	        case 286:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4167;
	            this.timeFunction();
	            break;
	        case 79:
	        case 285:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4168;
	            this.datetimeFunction();
	            break;
	        case 164:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4169;
	            this.localTimeFunction();
	            break;
	        case 163:
	        case 165:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4170;
	            this.localDatetimeFunction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateFunction() {
	    let localctx = new DateFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 974, GQLParser.RULE_dateFunction);
	    var _la = 0;
	    try {
	        this.state = 4180;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 74:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4173;
	            this.match(GQLParser.CURRENT_DATE);
	            break;
	        case 81:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4174;
	            this.match(GQLParser.DATE);
	            this.state = 4175;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 4177;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===10 || _la===212 || _la===336 || _la===337) {
	                this.state = 4176;
	                this.dateFunctionParameters();
	            }

	            this.state = 4179;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeFunction() {
	    let localctx = new TimeFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 976, GQLParser.RULE_timeFunction);
	    var _la = 0;
	    try {
	        this.state = 4189;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 78:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4182;
	            this.match(GQLParser.CURRENT_TIME);
	            break;
	        case 286:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4183;
	            this.match(GQLParser.ZONED_TIME);
	            this.state = 4184;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 4186;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===10 || _la===212 || _la===336 || _la===337) {
	                this.state = 4185;
	                this.timeFunctionParameters();
	            }

	            this.state = 4188;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localTimeFunction() {
	    let localctx = new LocalTimeFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 978, GQLParser.RULE_localTimeFunction);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4191;
	        this.match(GQLParser.LOCAL_TIME);
	        this.state = 4197;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,473,this._ctx);
	        if(la_===1) {
	            this.state = 4192;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 4194;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===10 || _la===212 || _la===336 || _la===337) {
	                this.state = 4193;
	                this.timeFunctionParameters();
	            }

	            this.state = 4196;
	            this.match(GQLParser.RIGHT_PAREN);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	datetimeFunction() {
	    let localctx = new DatetimeFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 980, GQLParser.RULE_datetimeFunction);
	    var _la = 0;
	    try {
	        this.state = 4206;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 79:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4199;
	            this.match(GQLParser.CURRENT_TIMESTAMP);
	            break;
	        case 285:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4200;
	            this.match(GQLParser.ZONED_DATETIME);
	            this.state = 4201;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 4203;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===10 || _la===212 || _la===336 || _la===337) {
	                this.state = 4202;
	                this.datetimeFunctionParameters();
	            }

	            this.state = 4205;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	localDatetimeFunction() {
	    let localctx = new LocalDatetimeFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 982, GQLParser.RULE_localDatetimeFunction);
	    var _la = 0;
	    try {
	        this.state = 4215;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 165:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4208;
	            this.match(GQLParser.LOCAL_TIMESTAMP);
	            break;
	        case 163:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4209;
	            this.match(GQLParser.LOCAL_DATETIME);
	            this.state = 4210;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 4212;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===10 || _la===212 || _la===336 || _la===337) {
	                this.state = 4211;
	                this.datetimeFunctionParameters();
	            }

	            this.state = 4214;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateFunctionParameters() {
	    let localctx = new DateFunctionParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 984, GQLParser.RULE_dateFunctionParameters);
	    try {
	        this.state = 4219;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 336:
	        case 337:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4217;
	            this.dateString();
	            break;
	        case 10:
	        case 212:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4218;
	            this.recordValueConstructor();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeFunctionParameters() {
	    let localctx = new TimeFunctionParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 986, GQLParser.RULE_timeFunctionParameters);
	    try {
	        this.state = 4223;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 336:
	        case 337:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4221;
	            this.timeString();
	            break;
	        case 10:
	        case 212:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4222;
	            this.recordValueConstructor();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	datetimeFunctionParameters() {
	    let localctx = new DatetimeFunctionParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 988, GQLParser.RULE_datetimeFunctionParameters);
	    try {
	        this.state = 4227;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 336:
	        case 337:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4225;
	            this.datetimeString();
	            break;
	        case 10:
	        case 212:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4226;
	            this.recordValueConstructor();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateString() {
	    let localctx = new DateStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 990, GQLParser.RULE_dateString);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4229;
	        this.unbrokenCharacterStringLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeString() {
	    let localctx = new TimeStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 992, GQLParser.RULE_timeString);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4231;
	        this.unbrokenCharacterStringLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	datetimeString() {
	    let localctx = new DatetimeStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 994, GQLParser.RULE_datetimeString);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4233;
	        this.unbrokenCharacterStringLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationFunction() {
	    let localctx = new DurationFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 996, GQLParser.RULE_durationFunction);
	    try {
	        this.state = 4247;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 97:
	            localctx = new GqlDatetimeSubtractionFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4235;
	            this.match(GQLParser.DURATION_BETWEEN);
	            this.state = 4236;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 4237;
	            this.expressionAtom(0);
	            this.state = 4238;
	            this.match(GQLParser.COMMA);
	            this.state = 4239;
	            this.expressionAtom(0);
	            this.state = 4240;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;
	        case 96:
	            localctx = new GqlDurationFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4242;
	            this.match(GQLParser.DURATION);
	            this.state = 4243;
	            this.match(GQLParser.LEFT_PAREN);
	            this.state = 4244;
	            this.durationFunctionParameters();
	            this.state = 4245;
	            this.match(GQLParser.RIGHT_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationFunctionParameters() {
	    let localctx = new DurationFunctionParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 998, GQLParser.RULE_durationFunctionParameters);
	    try {
	        this.state = 4251;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 336:
	        case 337:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4249;
	            this.durationString();
	            break;
	        case 10:
	        case 212:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4250;
	            this.recordValueConstructor();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	durationString() {
	    let localctx = new DurationStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1000, GQLParser.RULE_durationString);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4253;
	        this.unbrokenCharacterStringLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generalFunction() {
	    let localctx = new GeneralFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1002, GQLParser.RULE_generalFunction);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4255;
	        this.functionName();
	        this.state = 4256;
	        this.match(GQLParser.LEFT_PAREN);
	        this.state = 4258;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 805461312) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 1059604105) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 2606563) !== 0) || ((((_la - 96)) & ~0x1f) === 0 && ((1 << (_la - 96)) & 26216219) !== 0) || ((((_la - 156)) & ~0x1f) === 0 && ((1 << (_la - 156)) & 3120807859) !== 0) || ((((_la - 200)) & ~0x1f) === 0 && ((1 << (_la - 200)) & 1614287803) !== 0) || ((((_la - 234)) & ~0x1f) === 0 && ((1 << (_la - 234)) & 793069) !== 0) || ((((_la - 266)) & ~0x1f) === 0 && ((1 << (_la - 266)) & 1572901) !== 0) || ((((_la - 328)) & ~0x1f) === 0 && ((1 << (_la - 328)) & 36671) !== 0)) {
	            this.state = 4257;
	            this.procedureArgumentList();
	        }

	        this.state = 4260;
	        this.match(GQLParser.RIGHT_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	collectionValueConstructor() {
	    let localctx = new CollectionValueConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1004, GQLParser.RULE_collectionValueConstructor);
	    try {
	        this.state = 4265;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 11:
	        case 35:
	        case 120:
	        case 160:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4262;
	            this.listValueConstructor();
	            break;
	        case 10:
	        case 212:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4263;
	            this.recordValueConstructor();
	            break;
	        case 200:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4264;
	            this.pathValueConstructor();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trimSpecification() {
	    let localctx = new TrimSpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1006, GQLParser.RULE_trimSpecification);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4267;
	        _la = this._input.LA(1);
	        if(!(_la===50 || _la===155 || _la===250)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	normalForm() {
	    let localctx = new NormalFormContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1008, GQLParser.RULE_normalForm);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4269;
	        _la = this._input.LA(1);
	        if(!(((((_la - 175)) & ~0x1f) === 0 && ((1 << (_la - 175)) & 15) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listValueConstructor() {
	    let localctx = new ListValueConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1010, GQLParser.RULE_listValueConstructor);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4272;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===35 || _la===120 || _la===160) {
	            this.state = 4271;
	            this.listValueTypeName();
	        }

	        this.state = 4274;
	        this.match(GQLParser.LEFT_BRACKET);
	        this.state = 4283;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 805461312) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 1059604105) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 2606563) !== 0) || ((((_la - 96)) & ~0x1f) === 0 && ((1 << (_la - 96)) & 26216219) !== 0) || ((((_la - 156)) & ~0x1f) === 0 && ((1 << (_la - 156)) & 3120807859) !== 0) || ((((_la - 200)) & ~0x1f) === 0 && ((1 << (_la - 200)) & 1614287803) !== 0) || ((((_la - 234)) & ~0x1f) === 0 && ((1 << (_la - 234)) & 793069) !== 0) || ((((_la - 266)) & ~0x1f) === 0 && ((1 << (_la - 266)) & 1572901) !== 0) || ((((_la - 328)) & ~0x1f) === 0 && ((1 << (_la - 328)) & 36671) !== 0)) {
	            this.state = 4275;
	            this.expression(0);
	            this.state = 4280;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 4276;
	                this.match(GQLParser.COMMA);
	                this.state = 4277;
	                this.expression(0);
	                this.state = 4282;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 4285;
	        this.match(GQLParser.RIGHT_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordValueConstructor() {
	    let localctx = new RecordValueConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1012, GQLParser.RULE_recordValueConstructor);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4288;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===212) {
	            this.state = 4287;
	            this.match(GQLParser.RECORD);
	        }

	        this.state = 4290;
	        this.match(GQLParser.LEFT_BRACE);
	        this.state = 4299;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 337)) & ~0x1f) === 0 && ((1 << (_la - 337)) & 67) !== 0)) {
	            this.state = 4291;
	            this.field();
	            this.state = 4296;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 4292;
	                this.match(GQLParser.COMMA);
	                this.state = 4293;
	                this.field();
	                this.state = 4298;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 4301;
	        this.match(GQLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	field() {
	    let localctx = new FieldContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1014, GQLParser.RULE_field);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4303;
	        localctx.key = this.fieldName();
	        this.state = 4304;
	        this.match(GQLParser.COLON);
	        this.state = 4305;
	        localctx.value = this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathValueConstructor() {
	    let localctx = new PathValueConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1016, GQLParser.RULE_pathValueConstructor);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4307;
	        this.match(GQLParser.PATH);
	        this.state = 4308;
	        this.match(GQLParser.LEFT_BRACKET);
	        this.state = 4309;
	        this.expressionAtom(0);
	        this.state = 4317;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===5) {
	            this.state = 4310;
	            this.match(GQLParser.COMMA);
	            this.state = 4311;
	            this.expressionAtom(0);
	            this.state = 4312;
	            this.match(GQLParser.COMMA);
	            this.state = 4313;
	            this.expressionAtom(0);
	            this.state = 4319;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 4320;
	        this.match(GQLParser.RIGHT_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unsignedLiteral() {
	    let localctx = new UnsignedLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1018, GQLParser.RULE_unsignedLiteral);
	    try {
	        this.state = 4324;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,492,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4322;
	            this.unsignedNumericLiteral();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4323;
	            this.generalLiteral();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	generalLiteral() {
	    let localctx = new GeneralLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1020, GQLParser.RULE_generalLiteral);
	    try {
	        this.state = 4329;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 81:
	        case 82:
	        case 96:
	        case 106:
	        case 184:
	        case 245:
	        case 246:
	        case 253:
	        case 266:
	        case 328:
	        case 336:
	        case 337:
	        case 339:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4326;
	            this.predefinedTypeLiteral();
	            break;
	        case 11:
	        case 35:
	        case 120:
	        case 160:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4327;
	            this.listLiteral();
	            break;
	        case 10:
	        case 212:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4328;
	            this.recordLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	listLiteral() {
	    let localctx = new ListLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1022, GQLParser.RULE_listLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4332;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===35 || _la===120 || _la===160) {
	            this.state = 4331;
	            this.listValueTypeName();
	        }

	        this.state = 4334;
	        this.match(GQLParser.LEFT_BRACKET);
	        this.state = 4343;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 10)) & ~0x1f) === 0 && ((1 << (_la - 10)) & 33554435) !== 0) || ((((_la - 81)) & ~0x1f) === 0 && ((1 << (_la - 81)) & 33587203) !== 0) || _la===120 || _la===160 || _la===184 || _la===212 || ((((_la - 245)) & ~0x1f) === 0 && ((1 << (_la - 245)) & 2097411) !== 0) || ((((_la - 328)) & ~0x1f) === 0 && ((1 << (_la - 328)) & 2817) !== 0)) {
	            this.state = 4335;
	            this.generalLiteral();
	            this.state = 4340;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 4336;
	                this.match(GQLParser.COMMA);
	                this.state = 4337;
	                this.generalLiteral();
	                this.state = 4342;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 4345;
	        this.match(GQLParser.RIGHT_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordLiteral() {
	    let localctx = new RecordLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1024, GQLParser.RULE_recordLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4348;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===212) {
	            this.state = 4347;
	            this.match(GQLParser.RECORD);
	        }

	        this.state = 4350;
	        this.match(GQLParser.LEFT_BRACE);
	        this.state = 4359;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 337)) & ~0x1f) === 0 && ((1 << (_la - 337)) & 67) !== 0)) {
	            this.state = 4351;
	            this.recordFieldLiteral();
	            this.state = 4356;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===5) {
	                this.state = 4352;
	                this.match(GQLParser.COMMA);
	                this.state = 4353;
	                this.recordFieldLiteral();
	                this.state = 4358;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 4361;
	        this.match(GQLParser.RIGHT_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	recordFieldLiteral() {
	    let localctx = new RecordFieldLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1026, GQLParser.RULE_recordFieldLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4363;
	        localctx.key = this.variable();
	        this.state = 4364;
	        this.match(GQLParser.COLON);
	        this.state = 4365;
	        localctx.value = this.generalLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

GQLParser.EOF = antlr4.Token.EOF;
GQLParser.AMPERSAND = 1;
GQLParser.ASTERISK = 2;
GQLParser.CIRCUMFLEX = 3;
GQLParser.COLON = 4;
GQLParser.COMMA = 5;
GQLParser.DOLLAR_SIGN = 6;
GQLParser.EQUALS_OPERATOR = 7;
GQLParser.EXCLAMATION_MARK = 8;
GQLParser.RIGHT_ANGLE_BRACKET = 9;
GQLParser.LEFT_BRACE = 10;
GQLParser.LEFT_BRACKET = 11;
GQLParser.LEFT_PAREN = 12;
GQLParser.LEFT_ANGLE_BRACKET = 13;
GQLParser.MINUS_SIGN = 14;
GQLParser.PERCENT = 15;
GQLParser.PERIOD = 16;
GQLParser.PLUS_SIGN = 17;
GQLParser.QUESTION_MARK = 18;
GQLParser.REVERSE_SOLIDUS = 19;
GQLParser.RIGHT_BRACE = 20;
GQLParser.RIGHT_BRACKET = 21;
GQLParser.RIGHT_PAREN = 22;
GQLParser.SEMICOLON = 23;
GQLParser.SOLIDUS = 24;
GQLParser.TILDE = 25;
GQLParser.UNDERSCORE = 26;
GQLParser.VERTICAL_BAR = 27;
GQLParser.ABS = 28;
GQLParser.ACOS = 29;
GQLParser.ACYCLIC = 30;
GQLParser.ALL = 31;
GQLParser.ALL_DIFFERENT = 32;
GQLParser.AND = 33;
GQLParser.ANY = 34;
GQLParser.ARRAY = 35;
GQLParser.AS = 36;
GQLParser.ASC = 37;
GQLParser.ASCENDING = 38;
GQLParser.ASIN = 39;
GQLParser.AT = 40;
GQLParser.ATAN = 41;
GQLParser.AVG = 42;
GQLParser.BIG = 43;
GQLParser.BIGINT = 44;
GQLParser.BINARY = 45;
GQLParser.BINDING = 46;
GQLParser.BINDINGS = 47;
GQLParser.BOOL = 48;
GQLParser.BOOLEAN = 49;
GQLParser.BOTH = 50;
GQLParser.BTRIM = 51;
GQLParser.BY = 52;
GQLParser.BYTE_LENGTH = 53;
GQLParser.BYTES = 54;
GQLParser.CALL = 55;
GQLParser.CASE = 56;
GQLParser.CAST = 57;
GQLParser.CEIL = 58;
GQLParser.CEILING = 59;
GQLParser.CHAR_LENGTH = 60;
GQLParser.CHARACTER_LENGTH = 61;
GQLParser.CHARACTERISTICS = 62;
GQLParser.CLOSE = 63;
GQLParser.COALESCE = 64;
GQLParser.COLLECT = 65;
GQLParser.COMMIT = 66;
GQLParser.CONNECTING = 67;
GQLParser.COPY = 68;
GQLParser.COS = 69;
GQLParser.COSH = 70;
GQLParser.COT = 71;
GQLParser.COUNT = 72;
GQLParser.CREATE = 73;
GQLParser.CURRENT_DATE = 74;
GQLParser.CURRENT_GRAPH = 75;
GQLParser.CURRENT_PROPERTY_GRAPH = 76;
GQLParser.CURRENT_SCHEMA = 77;
GQLParser.CURRENT_TIME = 78;
GQLParser.CURRENT_TIMESTAMP = 79;
GQLParser.CURRENT_USER = 80;
GQLParser.DATE = 81;
GQLParser.DATETIME = 82;
GQLParser.DEC = 83;
GQLParser.DECIMAL = 84;
GQLParser.DEGREES = 85;
GQLParser.DELETE = 86;
GQLParser.DESC = 87;
GQLParser.DESCENDING = 88;
GQLParser.DESTINATION = 89;
GQLParser.DETACH = 90;
GQLParser.DIFFERENT = 91;
GQLParser.DIRECTED = 92;
GQLParser.DISTINCT = 93;
GQLParser.DOUBLE = 94;
GQLParser.DROP = 95;
GQLParser.DURATION = 96;
GQLParser.DURATION_BETWEEN = 97;
GQLParser.ELEMENT = 98;
GQLParser.ELEMENT_ID = 99;
GQLParser.ELEMENTS = 100;
GQLParser.ELSE = 101;
GQLParser.END = 102;
GQLParser.EXCEPT = 103;
GQLParser.EXISTS = 104;
GQLParser.EXP = 105;
GQLParser.FALSE = 106;
GQLParser.FILTER = 107;
GQLParser.FINISH = 108;
GQLParser.FIRST = 109;
GQLParser.FLOAT = 110;
GQLParser.FLOAT128 = 111;
GQLParser.FLOAT16 = 112;
GQLParser.FLOAT256 = 113;
GQLParser.FLOAT32 = 114;
GQLParser.FLOAT64 = 115;
GQLParser.FLOOR = 116;
GQLParser.FOR = 117;
GQLParser.FROM = 118;
GQLParser.GRAPH = 119;
GQLParser.GROUP = 120;
GQLParser.GROUPS = 121;
GQLParser.HAVING = 122;
GQLParser.HOME_GRAPH = 123;
GQLParser.HOME_PROPERTY_GRAPH = 124;
GQLParser.HOME_SCHEMA = 125;
GQLParser.I_DONT_KNOW_1 = 126;
GQLParser.I_DONT_KNOW_2 = 127;
GQLParser.I_DONT_KNOW_3 = 128;
GQLParser.I_DONT_KNOW_4 = 129;
GQLParser.I_DONT_KNOW_5 = 130;
GQLParser.IF = 131;
GQLParser.IN = 132;
GQLParser.INSERT = 133;
GQLParser.INT = 134;
GQLParser.INT8 = 135;
GQLParser.INT16 = 136;
GQLParser.INT32 = 137;
GQLParser.INT64 = 138;
GQLParser.INT128 = 139;
GQLParser.INT256 = 140;
GQLParser.INTEGER = 141;
GQLParser.INTEGER8 = 142;
GQLParser.INTEGER16 = 143;
GQLParser.INTEGER32 = 144;
GQLParser.INTEGER64 = 145;
GQLParser.INTEGER128 = 146;
GQLParser.INTEGER256 = 147;
GQLParser.INTERSECT = 148;
GQLParser.IS = 149;
GQLParser.KEEP = 150;
GQLParser.LABEL = 151;
GQLParser.LABELED = 152;
GQLParser.LABELS = 153;
GQLParser.LAST = 154;
GQLParser.LEADING = 155;
GQLParser.LEFT = 156;
GQLParser.LET = 157;
GQLParser.LIKE = 158;
GQLParser.LIMIT = 159;
GQLParser.LIST = 160;
GQLParser.LN = 161;
GQLParser.LOCAL = 162;
GQLParser.LOCAL_DATETIME = 163;
GQLParser.LOCAL_TIME = 164;
GQLParser.LOCAL_TIMESTAMP = 165;
GQLParser.LOG = 166;
GQLParser.LOG10 = 167;
GQLParser.LOWER = 168;
GQLParser.LTRIM = 169;
GQLParser.MATCH = 170;
GQLParser.MAX = 171;
GQLParser.MIN = 172;
GQLParser.MOD = 173;
GQLParser.NEXT = 174;
GQLParser.NFC = 175;
GQLParser.NFD = 176;
GQLParser.NFKC = 177;
GQLParser.NFKD = 178;
GQLParser.NO = 179;
GQLParser.NODETACH = 180;
GQLParser.NORMALIZE = 181;
GQLParser.NORMALIZED = 182;
GQLParser.NOT = 183;
GQLParser.NULL = 184;
GQLParser.NULLIF = 185;
GQLParser.NULLS = 186;
GQLParser.OCTET_LENGTH = 187;
GQLParser.OF = 188;
GQLParser.OFFSET = 189;
GQLParser.SKIP_ = 190;
GQLParser.ONLY = 191;
GQLParser.OPEN = 192;
GQLParser.OPTIONAL = 193;
GQLParser.OR = 194;
GQLParser.ORDER = 195;
GQLParser.ORDINALITY = 196;
GQLParser.OTHERWISE = 197;
GQLParser.PARAMETER = 198;
GQLParser.PARAMETERS = 199;
GQLParser.PATH = 200;
GQLParser.PATH_LENGTH = 201;
GQLParser.PATHS = 202;
GQLParser.PERCENTILE_CONT = 203;
GQLParser.PERCENTILE_DISC = 204;
GQLParser.POWER = 205;
GQLParser.PRECISION = 206;
GQLParser.PROPERTY = 207;
GQLParser.PROPERTY_EXISTS = 208;
GQLParser.RADIANS = 209;
GQLParser.READ = 210;
GQLParser.REAL = 211;
GQLParser.RECORD = 212;
GQLParser.REMOVE = 213;
GQLParser.REPEATABLE = 214;
GQLParser.REPLACE = 215;
GQLParser.RESET = 216;
GQLParser.RETURN = 217;
GQLParser.ROLLBACK = 218;
GQLParser.RTRIM = 219;
GQLParser.RIGHT = 220;
GQLParser.SAME = 221;
GQLParser.SCHEMA = 222;
GQLParser.SELECT = 223;
GQLParser.SESSION = 224;
GQLParser.SET = 225;
GQLParser.SHORTEST = 226;
GQLParser.SIGNED = 227;
GQLParser.SIMPLE = 228;
GQLParser.SIN = 229;
GQLParser.SINH = 230;
GQLParser.SMALL = 231;
GQLParser.SMALLINT = 232;
GQLParser.SOURCE = 233;
GQLParser.SQRT = 234;
GQLParser.START = 235;
GQLParser.STDDEV_POP = 236;
GQLParser.STDDEV_SAMP = 237;
GQLParser.STRING = 238;
GQLParser.SUM = 239;
GQLParser.TABLE = 240;
GQLParser.TAN = 241;
GQLParser.TANH = 242;
GQLParser.TEMP = 243;
GQLParser.THEN = 244;
GQLParser.TIME = 245;
GQLParser.TIMESTAMP = 246;
GQLParser.TIMEZONE = 247;
GQLParser.TO = 248;
GQLParser.TRAIL = 249;
GQLParser.TRAILING = 250;
GQLParser.TRANSACTION = 251;
GQLParser.TRIM = 252;
GQLParser.TRUE = 253;
GQLParser.TYPE = 254;
GQLParser.TYPED = 255;
GQLParser.UBIGINT = 256;
GQLParser.UINT = 257;
GQLParser.UINT128 = 258;
GQLParser.UINT16 = 259;
GQLParser.UINT256 = 260;
GQLParser.UINT32 = 261;
GQLParser.UINT64 = 262;
GQLParser.UINT8 = 263;
GQLParser.UNDIRECTED = 264;
GQLParser.UNION = 265;
GQLParser.UNKNOWN = 266;
GQLParser.UNSIGNED = 267;
GQLParser.UPPER = 268;
GQLParser.USE = 269;
GQLParser.USMALLINT = 270;
GQLParser.VALUE = 271;
GQLParser.VARBINARY = 272;
GQLParser.VARCHAR = 273;
GQLParser.VARIABLE = 274;
GQLParser.WALK = 275;
GQLParser.WHEN = 276;
GQLParser.WHERE = 277;
GQLParser.WITH = 278;
GQLParser.WITHOUT = 279;
GQLParser.WRITE = 280;
GQLParser.XOR = 281;
GQLParser.YIELD = 282;
GQLParser.ZONE = 283;
GQLParser.ZONED = 284;
GQLParser.ZONED_DATETIME = 285;
GQLParser.ZONED_TIME = 286;
GQLParser.INTERVAL_DAY = 287;
GQLParser.INTERVAL_WEEK = 288;
GQLParser.INTERVAL_MONTH = 289;
GQLParser.INTERVAL_YEAR = 290;
GQLParser.EDGE_SYNONYM = 291;
GQLParser.EDGES_SYNONYM = 292;
GQLParser.NODE_SYNONYM = 293;
GQLParser.KEY_WORD = 294;
GQLParser.RESERVED_WORD = 295;
GQLParser.PRE_RESERVED_WORD = 296;
GQLParser.NON_RESERVED_WORD = 297;
GQLParser.MULTISET_ALTERNATION_OPERATOR = 298;
GQLParser.CONCATENATION_OPERATOR = 299;
GQLParser.DOUBLE_COLON = 300;
GQLParser.DOUBLE_PERIOD = 301;
GQLParser.GREATER_THAN_OR_EQUALS_OPERATOR = 302;
GQLParser.LEFT_MINUS_RIGHT = 303;
GQLParser.LEFT_MINUS_SLASH = 304;
GQLParser.LEFT_TILDE_SLASH = 305;
GQLParser.LESS_THAN_OR_EQUALS_OPERATOR = 306;
GQLParser.MINUS_SLASH = 307;
GQLParser.NOT_EQUALS_OPERATOR = 308;
GQLParser.RIGHT_ARROW = 309;
GQLParser.SLASH_MINUS_RIGHT = 310;
GQLParser.SLASH_TILDE_RIGHT = 311;
GQLParser.TILDE_RIGHT_ARROW = 312;
GQLParser.TILDE_SLASH = 313;
GQLParser.DOUBLE_SOLIDUS = 314;
GQLParser.ESCAPED_CHARACTER = 315;
GQLParser.ESCAPED_REVERSE_SOLIDUS = 316;
GQLParser.ESCAPED_QUOTE = 317;
GQLParser.ESCAPED_DOUBLE_QUOTE = 318;
GQLParser.ESCAPED_GRAVE_ACCENT = 319;
GQLParser.ESCAPED_TAB = 320;
GQLParser.ESCAPED_BACKSPACE = 321;
GQLParser.ESCAPED_NEWLINE = 322;
GQLParser.ESCAPED_CARRIAGE_RETURN = 323;
GQLParser.ESCAPED_FORM_FEED = 324;
GQLParser.UNICODE_ESCAPE_VALUE = 325;
GQLParser.UNICODE_4_DIGIT_ESCAPE_VALUE = 326;
GQLParser.UNICODE_6_DIGIT_ESCAPE_VALUE = 327;
GQLParser.UNSIGNED_DECIMAL_INTEGER = 328;
GQLParser.UNSIGNED_HEXADECIMAL_INTEGER = 329;
GQLParser.UNSIGNED_OCTAL_INTEGER = 330;
GQLParser.UNSIGNED_BINARY_INTEGER = 331;
GQLParser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION = 332;
GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION = 333;
GQLParser.FOUR_DIGIT = 334;
GQLParser.DOUBLE_DIGIT = 335;
GQLParser.SINGLE_QUOTED_STRING_LITERAL = 336;
GQLParser.DOUBLE_QUOTED_STRING_LITERAL = 337;
GQLParser.ACCENT_QUOTED_STRING_LITERAL = 338;
GQLParser.BYTE_STRING_LITERAL = 339;
GQLParser.QUOTE = 340;
GQLParser.DOUBLE_QUOTE = 341;
GQLParser.GRAVE_ACCENT = 342;
GQLParser.REGULAR_IDENTIFIER = 343;
GQLParser.IDENTIFIER_START = 344;
GQLParser.IDENTIFIER_EXTEND = 345;
GQLParser.SP = 346;
GQLParser.SEPARATOR = 347;
GQLParser.WHITESPACE = 348;
GQLParser.Comment = 349;
GQLParser.BIDIRECTIONAL_CONTROL_CHARACTER = 350;
GQLParser.COMMENT = 351;
GQLParser.SIMPLE_COMMENT = 352;
GQLParser.SIMPLE_COMMENT_INTRODUCER = 353;
GQLParser.SIMPLE_COMMENT_CHARACTER = 354;
GQLParser.BRACKETED_COMMENT = 355;
GQLParser.BRACKETED_COMMENT_INTRODUCER = 356;
GQLParser.BRACKETED_COMMENT_TERMINATOR = 357;
GQLParser.BRACKETED_COMMENT_CONTENTS = 358;
GQLParser.GQL_TERMINAL_CHARACTER = 359;
GQLParser.GQL_LANGUAGE_CHARACTER = 360;
GQLParser.SIMPLE_LATIN_LETTER = 361;
GQLParser.SIMPLE_LATIN_LOWER_CASE_LETTER = 362;
GQLParser.SIMPLE_LATIN_UPPER_CASE_LETTER = 363;
GQLParser.OTHER_DIGIT = 364;
GQLParser.GQL_SPECIAL_CHARACTER = 365;
GQLParser.OTHER_LANGUAGE_CHARACTER = 366;

GQLParser.RULE_root = 0;
GQLParser.RULE_gqlProgram = 1;
GQLParser.RULE_programActivity = 2;
GQLParser.RULE_sessionActivity = 3;
GQLParser.RULE_sessionActivityCommand = 4;
GQLParser.RULE_transactionActivity = 5;
GQLParser.RULE_endTransactionCommand = 6;
GQLParser.RULE_sessionSetCommand = 7;
GQLParser.RULE_sessionSetSchemaClause = 8;
GQLParser.RULE_sessionSetGraphClause = 9;
GQLParser.RULE_sessionSetTimeZoneClause = 10;
GQLParser.RULE_setTimeZoneValue = 11;
GQLParser.RULE_sessionSetParameterClause = 12;
GQLParser.RULE_sessionSetGraphParameterClause = 13;
GQLParser.RULE_sessionSetBindingTableParameterClause = 14;
GQLParser.RULE_sessionSetValueParameterClause = 15;
GQLParser.RULE_sessionSetParameterName = 16;
GQLParser.RULE_sessionResetCommand = 17;
GQLParser.RULE_sessionResetArguments = 18;
GQLParser.RULE_sessionCloseCommand = 19;
GQLParser.RULE_startTransactionCommand = 20;
GQLParser.RULE_transactionCharacteristics = 21;
GQLParser.RULE_transactionMode = 22;
GQLParser.RULE_transactionAccessMode = 23;
GQLParser.RULE_implementationDefinedAccessMode = 24;
GQLParser.RULE_rollbackCommand = 25;
GQLParser.RULE_commitCommand = 26;
GQLParser.RULE_nestedProcedureSpecification = 27;
GQLParser.RULE_procedureSpecification = 28;
GQLParser.RULE_catalogModifyingProcedureSpecification = 29;
GQLParser.RULE_nestedDataModifyingProcedureSpecification = 30;
GQLParser.RULE_dataModifyingProcedureSpecification = 31;
GQLParser.RULE_nestedQuerySpecification = 32;
GQLParser.RULE_querySpecification = 33;
GQLParser.RULE_unsignedNumericLiteral = 34;
GQLParser.RULE_integerLiteral = 35;
GQLParser.RULE_floatLiteral = 36;
GQLParser.RULE_unbrokenSingleQuotedCharacterSequence = 37;
GQLParser.RULE_unbrokenDoubleQuotedCharacterSequence = 38;
GQLParser.RULE_unbrokenAccentQuotedCharacterSequence = 39;
GQLParser.RULE_singleQuotedCharacterSequence = 40;
GQLParser.RULE_doubleQuotedCharacterSequence = 41;
GQLParser.RULE_accentQuotedCharacterSequence = 42;
GQLParser.RULE_unbrokenCharacterStringLiteral = 43;
GQLParser.RULE_nullLiteral = 44;
GQLParser.RULE_temporalLiteral = 45;
GQLParser.RULE_sqlDatetimeLiteral = 46;
GQLParser.RULE_dateLiteral = 47;
GQLParser.RULE_timeLiteral = 48;
GQLParser.RULE_datetimeLiteral = 49;
GQLParser.RULE_durationLiteral = 50;
GQLParser.RULE_sqlIntervalLiteral = 51;
GQLParser.RULE_sqlIntervalType = 52;
GQLParser.RULE_identifier = 53;
GQLParser.RULE_delimitedIdentifier = 54;
GQLParser.RULE_objectName = 55;
GQLParser.RULE_objectNameOrBindingVariable = 56;
GQLParser.RULE_directoryName = 57;
GQLParser.RULE_schemaName = 58;
GQLParser.RULE_graphName = 59;
GQLParser.RULE_delimitedGraphName = 60;
GQLParser.RULE_graphTypeName = 61;
GQLParser.RULE_elementTypeName = 62;
GQLParser.RULE_bindingTableName = 63;
GQLParser.RULE_delimitedBindingTableName = 64;
GQLParser.RULE_procedureName = 65;
GQLParser.RULE_labelName = 66;
GQLParser.RULE_functionName = 67;
GQLParser.RULE_propertyName = 68;
GQLParser.RULE_fieldName = 69;
GQLParser.RULE_parameterName = 70;
GQLParser.RULE_variable = 71;
GQLParser.RULE_graphVariable = 72;
GQLParser.RULE_graphPatternVariable = 73;
GQLParser.RULE_pathOrSubpathVariable = 74;
GQLParser.RULE_elementVariable = 75;
GQLParser.RULE_pathVariable = 76;
GQLParser.RULE_subpathVariable = 77;
GQLParser.RULE_bindingTableVariable = 78;
GQLParser.RULE_valueVariable = 79;
GQLParser.RULE_bindingVariable = 80;
GQLParser.RULE_predefinedTypeLiteral = 81;
GQLParser.RULE_booleanLiteral = 82;
GQLParser.RULE_characterStringLiteral = 83;
GQLParser.RULE_byteStringLiteral = 84;
GQLParser.RULE_procedureBody = 85;
GQLParser.RULE_bindingVariableDefinitionBlock = 86;
GQLParser.RULE_bindingVariableDefinition = 87;
GQLParser.RULE_statementBlock = 88;
GQLParser.RULE_statement = 89;
GQLParser.RULE_nextStatement = 90;
GQLParser.RULE_graphVariableDefinition = 91;
GQLParser.RULE_optTypedGraphInitializer = 92;
GQLParser.RULE_graphInitializer = 93;
GQLParser.RULE_bindingTableVariableDefinition = 94;
GQLParser.RULE_optTypedBindingTableInitializer = 95;
GQLParser.RULE_bindingTableInitializer = 96;
GQLParser.RULE_valueVariableDefinition = 97;
GQLParser.RULE_optTypedValueInitializer = 98;
GQLParser.RULE_graphExpression = 99;
GQLParser.RULE_currentGraph = 100;
GQLParser.RULE_nestedGraphQuerySpecification = 101;
GQLParser.RULE_bindingTableExpression = 102;
GQLParser.RULE_nestedBindingTableQuerySpecification = 103;
GQLParser.RULE_objectExpressionPrimary = 104;
GQLParser.RULE_linearCatalogModifyingStatement = 105;
GQLParser.RULE_simpleCatalogModifyingStatement = 106;
GQLParser.RULE_primitiveCatalogModifyingStatement = 107;
GQLParser.RULE_createSchemaStatement = 108;
GQLParser.RULE_dropSchemaStatement = 109;
GQLParser.RULE_createGraphStatement = 110;
GQLParser.RULE_openGraphType = 111;
GQLParser.RULE_ofGraphType = 112;
GQLParser.RULE_graphTypeLikeGraph = 113;
GQLParser.RULE_graphSource = 114;
GQLParser.RULE_dropGraphStatement = 115;
GQLParser.RULE_createGraphTypeStatement = 116;
GQLParser.RULE_graphTypeSource = 117;
GQLParser.RULE_copyOfGraphType = 118;
GQLParser.RULE_dropGraphTypeStatement = 119;
GQLParser.RULE_callCatalogModifyingProcedureStatement = 120;
GQLParser.RULE_linearDataModifyingStatement = 121;
GQLParser.RULE_focusedLinearDataModifyingStatement = 122;
GQLParser.RULE_focusedLinearDataModifyingStatementBody = 123;
GQLParser.RULE_focusedNestedDataModifyingProcedureSpecification = 124;
GQLParser.RULE_ambientLinearDataModifyingStatement = 125;
GQLParser.RULE_ambientLinearDataModifyingStatementBody = 126;
GQLParser.RULE_simpleLinearDataAccessingStatement = 127;
GQLParser.RULE_simpleDataAccessingStatement = 128;
GQLParser.RULE_simpleDataModifyingStatement = 129;
GQLParser.RULE_primitiveDataModifyingStatement = 130;
GQLParser.RULE_insertStatement = 131;
GQLParser.RULE_setStatement = 132;
GQLParser.RULE_setItemList = 133;
GQLParser.RULE_setItem = 134;
GQLParser.RULE_setPropertyItem = 135;
GQLParser.RULE_setAllPropertiesItem = 136;
GQLParser.RULE_setLabelItem = 137;
GQLParser.RULE_labelSetSpecification = 138;
GQLParser.RULE_removeStatement = 139;
GQLParser.RULE_removeItemList = 140;
GQLParser.RULE_removeItem = 141;
GQLParser.RULE_removePropertyItem = 142;
GQLParser.RULE_removeLabelItem = 143;
GQLParser.RULE_deleteStatement = 144;
GQLParser.RULE_deleteItemList = 145;
GQLParser.RULE_deleteItem = 146;
GQLParser.RULE_callDataModifyingProcedureStatement = 147;
GQLParser.RULE_compositeQueryStatement = 148;
GQLParser.RULE_compositeQueryExpression = 149;
GQLParser.RULE_queryConjunction = 150;
GQLParser.RULE_setOperator = 151;
GQLParser.RULE_compositeQueryPrimary = 152;
GQLParser.RULE_linearQueryStatement = 153;
GQLParser.RULE_focusedLinearQueryStatement = 154;
GQLParser.RULE_focusedLinearQueryStatementPart = 155;
GQLParser.RULE_focusedLinearQueryAndPrimitiveResultStatementPart = 156;
GQLParser.RULE_focusedPrimitiveResultStatement = 157;
GQLParser.RULE_focusedNestedQuerySpecification = 158;
GQLParser.RULE_ambientLinearQueryStatement = 159;
GQLParser.RULE_simpleLinearQueryStatement = 160;
GQLParser.RULE_simpleQueryStatement = 161;
GQLParser.RULE_primitiveQueryStatement = 162;
GQLParser.RULE_matchStatement = 163;
GQLParser.RULE_simpleMatchStatement = 164;
GQLParser.RULE_optionalMatchStatement = 165;
GQLParser.RULE_optionalOperand = 166;
GQLParser.RULE_matchStatementBlock = 167;
GQLParser.RULE_callQueryStatement = 168;
GQLParser.RULE_filterStatement = 169;
GQLParser.RULE_letStatement = 170;
GQLParser.RULE_letVariableDefinitionList = 171;
GQLParser.RULE_letVariableDefinition = 172;
GQLParser.RULE_forStatement = 173;
GQLParser.RULE_forItem = 174;
GQLParser.RULE_forItemAlias = 175;
GQLParser.RULE_forOrdinalityOrOffset = 176;
GQLParser.RULE_orderByAndPageStatement = 177;
GQLParser.RULE_primitiveResultStatement = 178;
GQLParser.RULE_returnStatement = 179;
GQLParser.RULE_returnStatementBody = 180;
GQLParser.RULE_returnItemList = 181;
GQLParser.RULE_returnItem = 182;
GQLParser.RULE_returnItemAlias = 183;
GQLParser.RULE_selectStatement = 184;
GQLParser.RULE_selectItemList = 185;
GQLParser.RULE_selectItem = 186;
GQLParser.RULE_selectItemAlias = 187;
GQLParser.RULE_havingClause = 188;
GQLParser.RULE_selectStatementBody = 189;
GQLParser.RULE_selectGraphMatchList = 190;
GQLParser.RULE_selectGraphMatch = 191;
GQLParser.RULE_selectQuerySpecification = 192;
GQLParser.RULE_callProcedureStatement = 193;
GQLParser.RULE_procedureCall = 194;
GQLParser.RULE_inlineProcedureCall = 195;
GQLParser.RULE_variableScopeClause = 196;
GQLParser.RULE_bindingVariableReferenceList = 197;
GQLParser.RULE_namedProcedureCall = 198;
GQLParser.RULE_procedureArgumentList = 199;
GQLParser.RULE_procedureArgument = 200;
GQLParser.RULE_useGraphClause = 201;
GQLParser.RULE_atSchemaClause = 202;
GQLParser.RULE_bindingVariableReference = 203;
GQLParser.RULE_elementVariableReference = 204;
GQLParser.RULE_pathVariableReference = 205;
GQLParser.RULE_parameter = 206;
GQLParser.RULE_graphPatternBindingTable = 207;
GQLParser.RULE_graphPatternYieldClause = 208;
GQLParser.RULE_graphPatternYieldItemList = 209;
GQLParser.RULE_graphPatternYieldItem = 210;
GQLParser.RULE_graphPattern = 211;
GQLParser.RULE_matchMode = 212;
GQLParser.RULE_repeatableElementsMatchMode = 213;
GQLParser.RULE_differentEdgesMatchMode = 214;
GQLParser.RULE_elementBindingsOrElements = 215;
GQLParser.RULE_edgeBindingsOrEdges = 216;
GQLParser.RULE_pathPatternList = 217;
GQLParser.RULE_pathPattern = 218;
GQLParser.RULE_pathVariableDeclaration = 219;
GQLParser.RULE_keepClause = 220;
GQLParser.RULE_graphPatternWhereClause = 221;
GQLParser.RULE_pathPatternPrefix = 222;
GQLParser.RULE_pathModePrefix = 223;
GQLParser.RULE_pathMode = 224;
GQLParser.RULE_pathSearchPrefix = 225;
GQLParser.RULE_allPathSearch = 226;
GQLParser.RULE_pathOrPaths = 227;
GQLParser.RULE_anyPathSearch = 228;
GQLParser.RULE_numberOfPaths = 229;
GQLParser.RULE_shortestPathSearch = 230;
GQLParser.RULE_allShortestPathSearch = 231;
GQLParser.RULE_anyShortestPathSearch = 232;
GQLParser.RULE_countedShortestPathSearch = 233;
GQLParser.RULE_countedShortestGroupSearch = 234;
GQLParser.RULE_numberOfGroups = 235;
GQLParser.RULE_pathPatternExpression = 236;
GQLParser.RULE_pathMultisetAlternation = 237;
GQLParser.RULE_pathPatternUnion = 238;
GQLParser.RULE_pathTerm = 239;
GQLParser.RULE_pathFactor = 240;
GQLParser.RULE_quantifiedPathPrimary = 241;
GQLParser.RULE_questionedPathPrimary = 242;
GQLParser.RULE_pathPrimary = 243;
GQLParser.RULE_elementPattern = 244;
GQLParser.RULE_nodePattern = 245;
GQLParser.RULE_elementPatternFiller = 246;
GQLParser.RULE_elementVariableDeclaration = 247;
GQLParser.RULE_isLabelExpression = 248;
GQLParser.RULE_isOrColon = 249;
GQLParser.RULE_elementPatternPredicate = 250;
GQLParser.RULE_elementPatternWhereClause = 251;
GQLParser.RULE_elementPropertySpecification = 252;
GQLParser.RULE_propertyKeyValuePairList = 253;
GQLParser.RULE_propertyKeyValuePair = 254;
GQLParser.RULE_edgePattern = 255;
GQLParser.RULE_fullEdgePattern = 256;
GQLParser.RULE_fullEdgePointingLeft = 257;
GQLParser.RULE_fullEdgeUndirected = 258;
GQLParser.RULE_fullEdgePointingRight = 259;
GQLParser.RULE_fullEdgeLeftOrUndirected = 260;
GQLParser.RULE_fullEdgeUndirectedOrRight = 261;
GQLParser.RULE_fullEdgeLeftOrRight = 262;
GQLParser.RULE_fullEdgeAnyDirection = 263;
GQLParser.RULE_abbreviatedEdgePattern = 264;
GQLParser.RULE_parenthesizedPathPatternExpression = 265;
GQLParser.RULE_subpathVariableDeclaration = 266;
GQLParser.RULE_parenthesizedPathPatternWhereClause = 267;
GQLParser.RULE_insertGraphPattern = 268;
GQLParser.RULE_insertPathPatternList = 269;
GQLParser.RULE_insertPathPattern = 270;
GQLParser.RULE_insertNodePattern = 271;
GQLParser.RULE_insertEdgePattern = 272;
GQLParser.RULE_insertEdgePointingLeft = 273;
GQLParser.RULE_insertEdgePointingRight = 274;
GQLParser.RULE_insertEdgeUndirected = 275;
GQLParser.RULE_insertElementPatternFiller = 276;
GQLParser.RULE_labelAndPropertySetSpecification = 277;
GQLParser.RULE_labelExpression = 278;
GQLParser.RULE_labelTerm = 279;
GQLParser.RULE_labelFactor = 280;
GQLParser.RULE_labelPrimary = 281;
GQLParser.RULE_wildcardLabel = 282;
GQLParser.RULE_parenthesizedLabelExpression = 283;
GQLParser.RULE_graphPatternQuantifier = 284;
GQLParser.RULE_fixedQuantifier = 285;
GQLParser.RULE_generalQuantifier = 286;
GQLParser.RULE_lowerBound = 287;
GQLParser.RULE_upperBound = 288;
GQLParser.RULE_simplifiedPathPatternExpression = 289;
GQLParser.RULE_simplifiedDefaultingLeft = 290;
GQLParser.RULE_simplifiedDefaultingUndirected = 291;
GQLParser.RULE_simplifiedDefaultingRight = 292;
GQLParser.RULE_simplifiedDefaultingLeftOrUndirected = 293;
GQLParser.RULE_simplifiedDefaultingUndirectedOrRight = 294;
GQLParser.RULE_simplifiedDefaultingLeftOrRight = 295;
GQLParser.RULE_simplifiedDefaultingAnyDirection = 296;
GQLParser.RULE_simplifiedContents = 297;
GQLParser.RULE_simplifiedPathUnion = 298;
GQLParser.RULE_simplifiedMultisetAlternation = 299;
GQLParser.RULE_simplifiedTerm = 300;
GQLParser.RULE_simplifiedFactorLow = 301;
GQLParser.RULE_simplifiedFactorHigh = 302;
GQLParser.RULE_simplifiedQuantified = 303;
GQLParser.RULE_simplifiedQuestioned = 304;
GQLParser.RULE_simplifiedTertiary = 305;
GQLParser.RULE_simplifiedDirectionOverride = 306;
GQLParser.RULE_simplifiedOverrideLeft = 307;
GQLParser.RULE_simplifiedOverrideUndirected = 308;
GQLParser.RULE_simplifiedOverrideRight = 309;
GQLParser.RULE_simplifiedOverrideLeftOrUndirected = 310;
GQLParser.RULE_simplifiedOverrideUndirectedOrRight = 311;
GQLParser.RULE_simplifiedOverrideLeftOrRight = 312;
GQLParser.RULE_simplifiedOverrideAnyDirection = 313;
GQLParser.RULE_simplifiedSecondary = 314;
GQLParser.RULE_simplifiedNegation = 315;
GQLParser.RULE_simplifiedPrimary = 316;
GQLParser.RULE_whereClause = 317;
GQLParser.RULE_yieldClause = 318;
GQLParser.RULE_yieldItemList = 319;
GQLParser.RULE_yieldItem = 320;
GQLParser.RULE_yieldItemName = 321;
GQLParser.RULE_yieldItemAlias = 322;
GQLParser.RULE_groupByClause = 323;
GQLParser.RULE_groupingElementList = 324;
GQLParser.RULE_groupingElement = 325;
GQLParser.RULE_emptyGroupingSet = 326;
GQLParser.RULE_orderByClause = 327;
GQLParser.RULE_aggregateFunction = 328;
GQLParser.RULE_generalSetFunctionType = 329;
GQLParser.RULE_setQuantifier = 330;
GQLParser.RULE_binarySetFunctionType = 331;
GQLParser.RULE_sortSpecificationList = 332;
GQLParser.RULE_sortSpecification = 333;
GQLParser.RULE_sortKey = 334;
GQLParser.RULE_orderingSpecification = 335;
GQLParser.RULE_nullOrdering = 336;
GQLParser.RULE_limitClause = 337;
GQLParser.RULE_offsetClause = 338;
GQLParser.RULE_offsetSynonym = 339;
GQLParser.RULE_nestedGraphTypeSpecification = 340;
GQLParser.RULE_graphTypeSpecificationBody = 341;
GQLParser.RULE_elementTypeDefinitionList = 342;
GQLParser.RULE_elementTypeDefinition = 343;
GQLParser.RULE_nodeTypeDefinition = 344;
GQLParser.RULE_nodeTypePattern = 345;
GQLParser.RULE_nodeTypePhrase = 346;
GQLParser.RULE_nodeTypeName = 347;
GQLParser.RULE_nodeTypeFiller = 348;
GQLParser.RULE_nodeTypeLabelSetDefinition = 349;
GQLParser.RULE_nodeTypePropertyTypeSetDefinition = 350;
GQLParser.RULE_edgeTypeDefinition = 351;
GQLParser.RULE_edgeTypePattern = 352;
GQLParser.RULE_edgeTypePhrase = 353;
GQLParser.RULE_edgeTypeName = 354;
GQLParser.RULE_edgeTypeFiller = 355;
GQLParser.RULE_edgeTypeLabelSetDefinition = 356;
GQLParser.RULE_edgeTypePropertyTypeSetDefinition = 357;
GQLParser.RULE_fullEdgeTypePattern = 358;
GQLParser.RULE_fullEdgeTypePatternPointingRight = 359;
GQLParser.RULE_fullEdgeTypePatternPointingLeft = 360;
GQLParser.RULE_fullEdgeTypePatternUndirected = 361;
GQLParser.RULE_arcTypePointingRight = 362;
GQLParser.RULE_arcTypePointingLeft = 363;
GQLParser.RULE_arcTypeUndirected = 364;
GQLParser.RULE_arcTypeFiller = 365;
GQLParser.RULE_abbreviatedEdgeTypePattern = 366;
GQLParser.RULE_abbreviatedEdgeTypePatternPointingRight = 367;
GQLParser.RULE_abbreviatedEdgeTypePatternPointingLeft = 368;
GQLParser.RULE_abbreviatedEdgeTypePatternUndirected = 369;
GQLParser.RULE_nodeTypeReference = 370;
GQLParser.RULE_sourceNodeTypeReference = 371;
GQLParser.RULE_destinationNodeTypeReference = 372;
GQLParser.RULE_edgeKind = 373;
GQLParser.RULE_endpointDefinition = 374;
GQLParser.RULE_endpointPairDefinition = 375;
GQLParser.RULE_endpointPairDefinitionPointingRight = 376;
GQLParser.RULE_endpointPairDefinitionPointingLeft = 377;
GQLParser.RULE_endpointPairDefinitionUndirected = 378;
GQLParser.RULE_connectorPointingRight = 379;
GQLParser.RULE_connectorUndirected = 380;
GQLParser.RULE_sourceNodeTypeName = 381;
GQLParser.RULE_destinationNodeTypeName = 382;
GQLParser.RULE_labelSetDefinition = 383;
GQLParser.RULE_propertyTypeSetDefinition = 384;
GQLParser.RULE_propertyTypeDefinitionList = 385;
GQLParser.RULE_propertyTypeDefinition = 386;
GQLParser.RULE_propertyValueType = 387;
GQLParser.RULE_bindingTableType = 388;
GQLParser.RULE_valueType = 389;
GQLParser.RULE_typed = 390;
GQLParser.RULE_predefinedType = 391;
GQLParser.RULE_booleanType = 392;
GQLParser.RULE_characterStringType = 393;
GQLParser.RULE_byteStringType = 394;
GQLParser.RULE_minLength = 395;
GQLParser.RULE_maxLength = 396;
GQLParser.RULE_fixedLength = 397;
GQLParser.RULE_numericType = 398;
GQLParser.RULE_exactNumericType = 399;
GQLParser.RULE_binaryExactNumericType = 400;
GQLParser.RULE_signedBinaryExactNumericType = 401;
GQLParser.RULE_unsignedBinaryExactNumericType = 402;
GQLParser.RULE_verboseBinaryExactNumericType = 403;
GQLParser.RULE_decimalExactNumericType = 404;
GQLParser.RULE_precision = 405;
GQLParser.RULE_scale = 406;
GQLParser.RULE_approximateNumericType = 407;
GQLParser.RULE_temporalType = 408;
GQLParser.RULE_temporalInstantType = 409;
GQLParser.RULE_temporalDurationType = 410;
GQLParser.RULE_datetimeType = 411;
GQLParser.RULE_localdatetimeType = 412;
GQLParser.RULE_dateType = 413;
GQLParser.RULE_timeType = 414;
GQLParser.RULE_localtimeType = 415;
GQLParser.RULE_durationType = 416;
GQLParser.RULE_referenceValueType = 417;
GQLParser.RULE_graphReferenceValueType = 418;
GQLParser.RULE_closedGraphReferenceValueType = 419;
GQLParser.RULE_openGraphReferenceValueType = 420;
GQLParser.RULE_bindingTableReferenceValueType = 421;
GQLParser.RULE_nodeReferenceValueType = 422;
GQLParser.RULE_closedNodeReferenceValueType = 423;
GQLParser.RULE_openNodeReferenceValueType = 424;
GQLParser.RULE_edgeReferenceValueType = 425;
GQLParser.RULE_closedEdgeReferenceValueType = 426;
GQLParser.RULE_openEdgeReferenceValueType = 427;
GQLParser.RULE_listValueTypeName = 428;
GQLParser.RULE_listValueTypeNameSynonym = 429;
GQLParser.RULE_fieldTypesSpecification = 430;
GQLParser.RULE_fieldTypeList = 431;
GQLParser.RULE_pathValueType = 432;
GQLParser.RULE_notNull = 433;
GQLParser.RULE_fieldType = 434;
GQLParser.RULE_schemaReference = 435;
GQLParser.RULE_absoluteCatalogSchemaReference = 436;
GQLParser.RULE_catalogSchemaParentAndName = 437;
GQLParser.RULE_relativeCatalogSchemaReference = 438;
GQLParser.RULE_predefinedSchemaReference = 439;
GQLParser.RULE_absoluteDirectoryPath = 440;
GQLParser.RULE_relativeDirectoryPath = 441;
GQLParser.RULE_simpleDirectoryPath = 442;
GQLParser.RULE_graphReference = 443;
GQLParser.RULE_catalogGraphParentAndName = 444;
GQLParser.RULE_homeGraph = 445;
GQLParser.RULE_graphTypeReference = 446;
GQLParser.RULE_catalogGraphTypeParentAndName = 447;
GQLParser.RULE_bindingTableReference = 448;
GQLParser.RULE_catalogBindingTableParentAndName = 449;
GQLParser.RULE_procedureReference = 450;
GQLParser.RULE_catalogProcedureParentAndName = 451;
GQLParser.RULE_catalogObjectParentReference = 452;
GQLParser.RULE_referenceParameter = 453;
GQLParser.RULE_externalObjectReference = 454;
GQLParser.RULE_comparisonPredicateCond = 455;
GQLParser.RULE_compOp = 456;
GQLParser.RULE_nullPredicateCond = 457;
GQLParser.RULE_normalizedPredicateCond = 458;
GQLParser.RULE_directedPredicateCond = 459;
GQLParser.RULE_labeledPredicateCond = 460;
GQLParser.RULE_sourceDestinationPredicateCond = 461;
GQLParser.RULE_unsignedValueSpecification = 462;
GQLParser.RULE_unsignedIntegerSpecification = 463;
GQLParser.RULE_parameterValueSpecification = 464;
GQLParser.RULE_predefinedParameter = 465;
GQLParser.RULE_expression = 466;
GQLParser.RULE_expressionPredicate = 467;
GQLParser.RULE_expressionAtom = 468;
GQLParser.RULE_truthValue = 469;
GQLParser.RULE_unaryOperator = 470;
GQLParser.RULE_functionCall = 471;
GQLParser.RULE_numericFunction = 472;
GQLParser.RULE_functionParameter = 473;
GQLParser.RULE_propertyReference = 474;
GQLParser.RULE_oneArgNumericFunctionName = 475;
GQLParser.RULE_twoArgNumericFunctionName = 476;
GQLParser.RULE_stringFunction = 477;
GQLParser.RULE_listFunction = 478;
GQLParser.RULE_caseFunction = 479;
GQLParser.RULE_simpleWhenClause = 480;
GQLParser.RULE_searchedWhenClause = 481;
GQLParser.RULE_elseClause = 482;
GQLParser.RULE_whenOperand = 483;
GQLParser.RULE_castFunction = 484;
GQLParser.RULE_elementIdFunction = 485;
GQLParser.RULE_datetimeValueFunction = 486;
GQLParser.RULE_dateFunction = 487;
GQLParser.RULE_timeFunction = 488;
GQLParser.RULE_localTimeFunction = 489;
GQLParser.RULE_datetimeFunction = 490;
GQLParser.RULE_localDatetimeFunction = 491;
GQLParser.RULE_dateFunctionParameters = 492;
GQLParser.RULE_timeFunctionParameters = 493;
GQLParser.RULE_datetimeFunctionParameters = 494;
GQLParser.RULE_dateString = 495;
GQLParser.RULE_timeString = 496;
GQLParser.RULE_datetimeString = 497;
GQLParser.RULE_durationFunction = 498;
GQLParser.RULE_durationFunctionParameters = 499;
GQLParser.RULE_durationString = 500;
GQLParser.RULE_generalFunction = 501;
GQLParser.RULE_collectionValueConstructor = 502;
GQLParser.RULE_trimSpecification = 503;
GQLParser.RULE_normalForm = 504;
GQLParser.RULE_listValueConstructor = 505;
GQLParser.RULE_recordValueConstructor = 506;
GQLParser.RULE_field = 507;
GQLParser.RULE_pathValueConstructor = 508;
GQLParser.RULE_unsignedLiteral = 509;
GQLParser.RULE_generalLiteral = 510;
GQLParser.RULE_listLiteral = 511;
GQLParser.RULE_recordLiteral = 512;
GQLParser.RULE_recordFieldLiteral = 513;

class RootContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_root;
    }

	gqlProgram() {
	    return this.getTypedRuleContext(GqlProgramContext,0);
	};

	EOF() {
	    return this.getToken(GQLParser.EOF, 0);
	};

	SEMICOLON() {
	    return this.getToken(GQLParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterRoot(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitRoot(this);
		}
	}


}



class GqlProgramContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_gqlProgram;
    }

	programActivity() {
	    return this.getTypedRuleContext(ProgramActivityContext,0);
	};

	sessionCloseCommand() {
	    return this.getTypedRuleContext(SessionCloseCommandContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlProgram(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlProgram(this);
		}
	}


}



class ProgramActivityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_programActivity;
    }

	sessionActivity() {
	    return this.getTypedRuleContext(SessionActivityContext,0);
	};

	transactionActivity() {
	    return this.getTypedRuleContext(TransactionActivityContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterProgramActivity(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitProgramActivity(this);
		}
	}


}



class SessionActivityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sessionActivity;
    }

	sessionActivityCommand = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SessionActivityCommandContext);
	    } else {
	        return this.getTypedRuleContext(SessionActivityCommandContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSessionActivity(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSessionActivity(this);
		}
	}


}



class SessionActivityCommandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sessionActivityCommand;
    }

	sessionSetCommand() {
	    return this.getTypedRuleContext(SessionSetCommandContext,0);
	};

	sessionResetCommand() {
	    return this.getTypedRuleContext(SessionResetCommandContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSessionActivityCommand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSessionActivityCommand(this);
		}
	}


}



class TransactionActivityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_transactionActivity;
    }

	startTransactionCommand() {
	    return this.getTypedRuleContext(StartTransactionCommandContext,0);
	};

	procedureSpecification() {
	    return this.getTypedRuleContext(ProcedureSpecificationContext,0);
	};

	endTransactionCommand() {
	    return this.getTypedRuleContext(EndTransactionCommandContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterTransactionActivity(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitTransactionActivity(this);
		}
	}


}



class EndTransactionCommandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_endTransactionCommand;
    }

	rollbackCommand() {
	    return this.getTypedRuleContext(RollbackCommandContext,0);
	};

	commitCommand() {
	    return this.getTypedRuleContext(CommitCommandContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterEndTransactionCommand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitEndTransactionCommand(this);
		}
	}


}



class SessionSetCommandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sessionSetCommand;
    }

	SESSION() {
	    return this.getToken(GQLParser.SESSION, 0);
	};

	SET() {
	    return this.getToken(GQLParser.SET, 0);
	};

	sessionSetSchemaClause() {
	    return this.getTypedRuleContext(SessionSetSchemaClauseContext,0);
	};

	sessionSetGraphClause() {
	    return this.getTypedRuleContext(SessionSetGraphClauseContext,0);
	};

	sessionSetTimeZoneClause() {
	    return this.getTypedRuleContext(SessionSetTimeZoneClauseContext,0);
	};

	sessionSetParameterClause() {
	    return this.getTypedRuleContext(SessionSetParameterClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSessionSetCommand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSessionSetCommand(this);
		}
	}


}



class SessionSetSchemaClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sessionSetSchemaClause;
    }

	SCHEMA() {
	    return this.getToken(GQLParser.SCHEMA, 0);
	};

	schemaReference() {
	    return this.getTypedRuleContext(SchemaReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSessionSetSchemaClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSessionSetSchemaClause(this);
		}
	}


}



class SessionSetGraphClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sessionSetGraphClause;
    }

	GRAPH() {
	    return this.getToken(GQLParser.GRAPH, 0);
	};

	graphExpression() {
	    return this.getTypedRuleContext(GraphExpressionContext,0);
	};

	PROPERTY() {
	    return this.getToken(GQLParser.PROPERTY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSessionSetGraphClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSessionSetGraphClause(this);
		}
	}


}



class SessionSetTimeZoneClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sessionSetTimeZoneClause;
    }

	TIME() {
	    return this.getToken(GQLParser.TIME, 0);
	};

	ZONE() {
	    return this.getToken(GQLParser.ZONE, 0);
	};

	setTimeZoneValue() {
	    return this.getTypedRuleContext(SetTimeZoneValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSessionSetTimeZoneClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSessionSetTimeZoneClause(this);
		}
	}


}



class SetTimeZoneValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_setTimeZoneValue;
    }

	expressionAtom() {
	    return this.getTypedRuleContext(ExpressionAtomContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSetTimeZoneValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSetTimeZoneValue(this);
		}
	}


}



class SessionSetParameterClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sessionSetParameterClause;
    }

	sessionSetGraphParameterClause() {
	    return this.getTypedRuleContext(SessionSetGraphParameterClauseContext,0);
	};

	sessionSetBindingTableParameterClause() {
	    return this.getTypedRuleContext(SessionSetBindingTableParameterClauseContext,0);
	};

	sessionSetValueParameterClause() {
	    return this.getTypedRuleContext(SessionSetValueParameterClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSessionSetParameterClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSessionSetParameterClause(this);
		}
	}


}



class SessionSetGraphParameterClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sessionSetGraphParameterClause;
    }

	GRAPH() {
	    return this.getToken(GQLParser.GRAPH, 0);
	};

	sessionSetParameterName() {
	    return this.getTypedRuleContext(SessionSetParameterNameContext,0);
	};

	optTypedGraphInitializer() {
	    return this.getTypedRuleContext(OptTypedGraphInitializerContext,0);
	};

	PROPERTY() {
	    return this.getToken(GQLParser.PROPERTY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSessionSetGraphParameterClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSessionSetGraphParameterClause(this);
		}
	}


}



class SessionSetBindingTableParameterClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sessionSetBindingTableParameterClause;
    }

	TABLE() {
	    return this.getToken(GQLParser.TABLE, 0);
	};

	sessionSetParameterName() {
	    return this.getTypedRuleContext(SessionSetParameterNameContext,0);
	};

	optTypedBindingTableInitializer() {
	    return this.getTypedRuleContext(OptTypedBindingTableInitializerContext,0);
	};

	BINDING() {
	    return this.getToken(GQLParser.BINDING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSessionSetBindingTableParameterClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSessionSetBindingTableParameterClause(this);
		}
	}


}



class SessionSetValueParameterClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sessionSetValueParameterClause;
    }

	VALUE() {
	    return this.getToken(GQLParser.VALUE, 0);
	};

	sessionSetParameterName() {
	    return this.getTypedRuleContext(SessionSetParameterNameContext,0);
	};

	optTypedValueInitializer() {
	    return this.getTypedRuleContext(OptTypedValueInitializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSessionSetValueParameterClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSessionSetValueParameterClause(this);
		}
	}


}



class SessionSetParameterNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sessionSetParameterName;
    }

	parameterName() {
	    return this.getTypedRuleContext(ParameterNameContext,0);
	};

	IF() {
	    return this.getToken(GQLParser.IF, 0);
	};

	NOT() {
	    return this.getToken(GQLParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(GQLParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSessionSetParameterName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSessionSetParameterName(this);
		}
	}


}



class SessionResetCommandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sessionResetCommand;
    }

	SESSION() {
	    return this.getToken(GQLParser.SESSION, 0);
	};

	RESET() {
	    return this.getToken(GQLParser.RESET, 0);
	};

	sessionResetArguments() {
	    return this.getTypedRuleContext(SessionResetArgumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSessionResetCommand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSessionResetCommand(this);
		}
	}


}



class SessionResetArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sessionResetArguments;
    }

	PARAMETERS() {
	    return this.getToken(GQLParser.PARAMETERS, 0);
	};

	CHARACTERISTICS() {
	    return this.getToken(GQLParser.CHARACTERISTICS, 0);
	};

	ALL() {
	    return this.getToken(GQLParser.ALL, 0);
	};

	SCHEMA() {
	    return this.getToken(GQLParser.SCHEMA, 0);
	};

	GRAPH() {
	    return this.getToken(GQLParser.GRAPH, 0);
	};

	PROPERTY() {
	    return this.getToken(GQLParser.PROPERTY, 0);
	};

	TIME() {
	    return this.getToken(GQLParser.TIME, 0);
	};

	ZONE() {
	    return this.getToken(GQLParser.ZONE, 0);
	};

	parameterName() {
	    return this.getTypedRuleContext(ParameterNameContext,0);
	};

	PARAMETER() {
	    return this.getToken(GQLParser.PARAMETER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSessionResetArguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSessionResetArguments(this);
		}
	}


}



class SessionCloseCommandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sessionCloseCommand;
    }

	SESSION() {
	    return this.getToken(GQLParser.SESSION, 0);
	};

	CLOSE() {
	    return this.getToken(GQLParser.CLOSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSessionCloseCommand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSessionCloseCommand(this);
		}
	}


}



class StartTransactionCommandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_startTransactionCommand;
    }

	START() {
	    return this.getToken(GQLParser.START, 0);
	};

	TRANSACTION() {
	    return this.getToken(GQLParser.TRANSACTION, 0);
	};

	transactionCharacteristics() {
	    return this.getTypedRuleContext(TransactionCharacteristicsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterStartTransactionCommand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitStartTransactionCommand(this);
		}
	}


}



class TransactionCharacteristicsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_transactionCharacteristics;
    }

	transactionMode = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TransactionModeContext);
	    } else {
	        return this.getTypedRuleContext(TransactionModeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterTransactionCharacteristics(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitTransactionCharacteristics(this);
		}
	}


}



class TransactionModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_transactionMode;
    }

	transactionAccessMode() {
	    return this.getTypedRuleContext(TransactionAccessModeContext,0);
	};

	implementationDefinedAccessMode() {
	    return this.getTypedRuleContext(ImplementationDefinedAccessModeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterTransactionMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitTransactionMode(this);
		}
	}


}



class TransactionAccessModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_transactionAccessMode;
    }

	READ() {
	    return this.getToken(GQLParser.READ, 0);
	};

	ONLY() {
	    return this.getToken(GQLParser.ONLY, 0);
	};

	WRITE() {
	    return this.getToken(GQLParser.WRITE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterTransactionAccessMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitTransactionAccessMode(this);
		}
	}


}



class ImplementationDefinedAccessModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_implementationDefinedAccessMode;
    }

	I_DONT_KNOW_1() {
	    return this.getToken(GQLParser.I_DONT_KNOW_1, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterImplementationDefinedAccessMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitImplementationDefinedAccessMode(this);
		}
	}


}



class RollbackCommandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_rollbackCommand;
    }

	ROLLBACK() {
	    return this.getToken(GQLParser.ROLLBACK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterRollbackCommand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitRollbackCommand(this);
		}
	}


}



class CommitCommandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_commitCommand;
    }

	COMMIT() {
	    return this.getToken(GQLParser.COMMIT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCommitCommand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCommitCommand(this);
		}
	}


}



class NestedProcedureSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nestedProcedureSpecification;
    }

	LEFT_BRACE() {
	    return this.getToken(GQLParser.LEFT_BRACE, 0);
	};

	procedureSpecification() {
	    return this.getTypedRuleContext(ProcedureSpecificationContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GQLParser.RIGHT_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNestedProcedureSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNestedProcedureSpecification(this);
		}
	}


}



class ProcedureSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_procedureSpecification;
    }

	procedureBody() {
	    return this.getTypedRuleContext(ProcedureBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterProcedureSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitProcedureSpecification(this);
		}
	}


}



class CatalogModifyingProcedureSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_catalogModifyingProcedureSpecification;
    }

	procedureBody() {
	    return this.getTypedRuleContext(ProcedureBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCatalogModifyingProcedureSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCatalogModifyingProcedureSpecification(this);
		}
	}


}



class NestedDataModifyingProcedureSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nestedDataModifyingProcedureSpecification;
    }

	LEFT_BRACE() {
	    return this.getToken(GQLParser.LEFT_BRACE, 0);
	};

	dataModifyingProcedureSpecification() {
	    return this.getTypedRuleContext(DataModifyingProcedureSpecificationContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GQLParser.RIGHT_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNestedDataModifyingProcedureSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNestedDataModifyingProcedureSpecification(this);
		}
	}


}



class DataModifyingProcedureSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_dataModifyingProcedureSpecification;
    }

	procedureBody() {
	    return this.getTypedRuleContext(ProcedureBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDataModifyingProcedureSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDataModifyingProcedureSpecification(this);
		}
	}


}



class NestedQuerySpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nestedQuerySpecification;
    }

	LEFT_BRACE() {
	    return this.getToken(GQLParser.LEFT_BRACE, 0);
	};

	procedureSpecification() {
	    return this.getTypedRuleContext(ProcedureSpecificationContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GQLParser.RIGHT_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNestedQuerySpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNestedQuerySpecification(this);
		}
	}


}



class QuerySpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_querySpecification;
    }

	procedureBody() {
	    return this.getTypedRuleContext(ProcedureBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterQuerySpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitQuerySpecification(this);
		}
	}


}



class UnsignedNumericLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_unsignedNumericLiteral;
    }

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	floatLiteral() {
	    return this.getTypedRuleContext(FloatLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterUnsignedNumericLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitUnsignedNumericLiteral(this);
		}
	}


}



class IntegerLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_integerLiteral;
    }

	UNSIGNED_DECIMAL_INTEGER() {
	    return this.getToken(GQLParser.UNSIGNED_DECIMAL_INTEGER, 0);
	};

	UNSIGNED_OCTAL_INTEGER() {
	    return this.getToken(GQLParser.UNSIGNED_OCTAL_INTEGER, 0);
	};

	UNSIGNED_HEXADECIMAL_INTEGER() {
	    return this.getToken(GQLParser.UNSIGNED_HEXADECIMAL_INTEGER, 0);
	};

	UNSIGNED_BINARY_INTEGER() {
	    return this.getToken(GQLParser.UNSIGNED_BINARY_INTEGER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterIntegerLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitIntegerLiteral(this);
		}
	}


}



class FloatLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_floatLiteral;
    }

	UNSIGNED_DECIMAL_IN_COMMON_NOTATION() {
	    return this.getToken(GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION, 0);
	};

	UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION() {
	    return this.getToken(GQLParser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFloatLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFloatLiteral(this);
		}
	}


}



class UnbrokenSingleQuotedCharacterSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_unbrokenSingleQuotedCharacterSequence;
    }

	SINGLE_QUOTED_STRING_LITERAL() {
	    return this.getToken(GQLParser.SINGLE_QUOTED_STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterUnbrokenSingleQuotedCharacterSequence(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitUnbrokenSingleQuotedCharacterSequence(this);
		}
	}


}



class UnbrokenDoubleQuotedCharacterSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_unbrokenDoubleQuotedCharacterSequence;
    }

	DOUBLE_QUOTED_STRING_LITERAL() {
	    return this.getToken(GQLParser.DOUBLE_QUOTED_STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterUnbrokenDoubleQuotedCharacterSequence(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitUnbrokenDoubleQuotedCharacterSequence(this);
		}
	}


}



class UnbrokenAccentQuotedCharacterSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_unbrokenAccentQuotedCharacterSequence;
    }

	ACCENT_QUOTED_STRING_LITERAL() {
	    return this.getToken(GQLParser.ACCENT_QUOTED_STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterUnbrokenAccentQuotedCharacterSequence(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitUnbrokenAccentQuotedCharacterSequence(this);
		}
	}


}



class SingleQuotedCharacterSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_singleQuotedCharacterSequence;
    }

	unbrokenSingleQuotedCharacterSequence = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnbrokenSingleQuotedCharacterSequenceContext);
	    } else {
	        return this.getTypedRuleContext(UnbrokenSingleQuotedCharacterSequenceContext,i);
	    }
	};

	VERTICAL_BAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.VERTICAL_BAR);
	    } else {
	        return this.getToken(GQLParser.VERTICAL_BAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSingleQuotedCharacterSequence(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSingleQuotedCharacterSequence(this);
		}
	}


}



class DoubleQuotedCharacterSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_doubleQuotedCharacterSequence;
    }

	unbrokenDoubleQuotedCharacterSequence = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnbrokenDoubleQuotedCharacterSequenceContext);
	    } else {
	        return this.getTypedRuleContext(UnbrokenDoubleQuotedCharacterSequenceContext,i);
	    }
	};

	VERTICAL_BAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.VERTICAL_BAR);
	    } else {
	        return this.getToken(GQLParser.VERTICAL_BAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDoubleQuotedCharacterSequence(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDoubleQuotedCharacterSequence(this);
		}
	}


}



class AccentQuotedCharacterSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_accentQuotedCharacterSequence;
    }

	unbrokenAccentQuotedCharacterSequence = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnbrokenAccentQuotedCharacterSequenceContext);
	    } else {
	        return this.getTypedRuleContext(UnbrokenAccentQuotedCharacterSequenceContext,i);
	    }
	};

	VERTICAL_BAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.VERTICAL_BAR);
	    } else {
	        return this.getToken(GQLParser.VERTICAL_BAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterAccentQuotedCharacterSequence(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitAccentQuotedCharacterSequence(this);
		}
	}


}



class UnbrokenCharacterStringLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_unbrokenCharacterStringLiteral;
    }

	unbrokenSingleQuotedCharacterSequence() {
	    return this.getTypedRuleContext(UnbrokenSingleQuotedCharacterSequenceContext,0);
	};

	unbrokenDoubleQuotedCharacterSequence() {
	    return this.getTypedRuleContext(UnbrokenDoubleQuotedCharacterSequenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterUnbrokenCharacterStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitUnbrokenCharacterStringLiteral(this);
		}
	}


}



class NullLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nullLiteral;
    }

	NULL() {
	    return this.getToken(GQLParser.NULL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNullLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNullLiteral(this);
		}
	}


}



class TemporalLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_temporalLiteral;
    }

	dateLiteral() {
	    return this.getTypedRuleContext(DateLiteralContext,0);
	};

	timeLiteral() {
	    return this.getTypedRuleContext(TimeLiteralContext,0);
	};

	datetimeLiteral() {
	    return this.getTypedRuleContext(DatetimeLiteralContext,0);
	};

	sqlDatetimeLiteral() {
	    return this.getTypedRuleContext(SqlDatetimeLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterTemporalLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitTemporalLiteral(this);
		}
	}


}



class SqlDatetimeLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sqlDatetimeLiteral;
    }

	DATE() {
	    return this.getToken(GQLParser.DATE, 0);
	};

	QUOTE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.QUOTE);
	    } else {
	        return this.getToken(GQLParser.QUOTE, i);
	    }
	};


	FOUR_DIGIT() {
	    return this.getToken(GQLParser.FOUR_DIGIT, 0);
	};

	MINUS_SIGN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.MINUS_SIGN);
	    } else {
	        return this.getToken(GQLParser.MINUS_SIGN, i);
	    }
	};


	DOUBLE_DIGIT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.DOUBLE_DIGIT);
	    } else {
	        return this.getToken(GQLParser.DOUBLE_DIGIT, i);
	    }
	};


	TIME() {
	    return this.getToken(GQLParser.TIME, 0);
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COLON);
	    } else {
	        return this.getToken(GQLParser.COLON, i);
	    }
	};


	TIMESTAMP() {
	    return this.getToken(GQLParser.TIMESTAMP, 0);
	};

	DATETIME() {
	    return this.getToken(GQLParser.DATETIME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSqlDatetimeLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSqlDatetimeLiteral(this);
		}
	}


}



class DateLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_dateLiteral;
    }

	DATE() {
	    return this.getToken(GQLParser.DATE, 0);
	};

	unbrokenCharacterStringLiteral() {
	    return this.getTypedRuleContext(UnbrokenCharacterStringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDateLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDateLiteral(this);
		}
	}


}



class TimeLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_timeLiteral;
    }

	TIME() {
	    return this.getToken(GQLParser.TIME, 0);
	};

	unbrokenCharacterStringLiteral() {
	    return this.getTypedRuleContext(UnbrokenCharacterStringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterTimeLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitTimeLiteral(this);
		}
	}


}



class DatetimeLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_datetimeLiteral;
    }

	unbrokenCharacterStringLiteral() {
	    return this.getTypedRuleContext(UnbrokenCharacterStringLiteralContext,0);
	};

	DATETIME() {
	    return this.getToken(GQLParser.DATETIME, 0);
	};

	TIMESTAMP() {
	    return this.getToken(GQLParser.TIMESTAMP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDatetimeLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDatetimeLiteral(this);
		}
	}


}



class DurationLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_durationLiteral;
    }

	DURATION() {
	    return this.getToken(GQLParser.DURATION, 0);
	};

	unbrokenCharacterStringLiteral() {
	    return this.getTypedRuleContext(UnbrokenCharacterStringLiteralContext,0);
	};

	sqlIntervalLiteral() {
	    return this.getTypedRuleContext(SqlIntervalLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDurationLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDurationLiteral(this);
		}
	}


}



class SqlIntervalLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sqlIntervalLiteral;
    }

	UNSIGNED_DECIMAL_INTEGER() {
	    return this.getToken(GQLParser.UNSIGNED_DECIMAL_INTEGER, 0);
	};

	sqlIntervalType() {
	    return this.getTypedRuleContext(SqlIntervalTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSqlIntervalLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSqlIntervalLiteral(this);
		}
	}


}



class SqlIntervalTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sqlIntervalType;
    }

	INTERVAL_DAY() {
	    return this.getToken(GQLParser.INTERVAL_DAY, 0);
	};

	INTERVAL_WEEK() {
	    return this.getToken(GQLParser.INTERVAL_WEEK, 0);
	};

	INTERVAL_MONTH() {
	    return this.getToken(GQLParser.INTERVAL_MONTH, 0);
	};

	INTERVAL_YEAR() {
	    return this.getToken(GQLParser.INTERVAL_YEAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSqlIntervalType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSqlIntervalType(this);
		}
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_identifier;
    }

	REGULAR_IDENTIFIER() {
	    return this.getToken(GQLParser.REGULAR_IDENTIFIER, 0);
	};

	delimitedIdentifier() {
	    return this.getTypedRuleContext(DelimitedIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitIdentifier(this);
		}
	}


}



class DelimitedIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_delimitedIdentifier;
    }

	doubleQuotedCharacterSequence() {
	    return this.getTypedRuleContext(DoubleQuotedCharacterSequenceContext,0);
	};

	accentQuotedCharacterSequence() {
	    return this.getTypedRuleContext(AccentQuotedCharacterSequenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDelimitedIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDelimitedIdentifier(this);
		}
	}


}



class ObjectNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_objectName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterObjectName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitObjectName(this);
		}
	}


}



class ObjectNameOrBindingVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_objectNameOrBindingVariable;
    }

	REGULAR_IDENTIFIER() {
	    return this.getToken(GQLParser.REGULAR_IDENTIFIER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterObjectNameOrBindingVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitObjectNameOrBindingVariable(this);
		}
	}


}



class DirectoryNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_directoryName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDirectoryName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDirectoryName(this);
		}
	}


}



class SchemaNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_schemaName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSchemaName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSchemaName(this);
		}
	}


}



class GraphNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphName;
    }

	REGULAR_IDENTIFIER() {
	    return this.getToken(GQLParser.REGULAR_IDENTIFIER, 0);
	};

	delimitedGraphName() {
	    return this.getTypedRuleContext(DelimitedGraphNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGraphName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGraphName(this);
		}
	}


}



class DelimitedGraphNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_delimitedGraphName;
    }

	delimitedIdentifier() {
	    return this.getTypedRuleContext(DelimitedIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDelimitedGraphName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDelimitedGraphName(this);
		}
	}


}



class GraphTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphTypeName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGraphTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGraphTypeName(this);
		}
	}


}



class ElementTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_elementTypeName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterElementTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitElementTypeName(this);
		}
	}


}



class BindingTableNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_bindingTableName;
    }

	REGULAR_IDENTIFIER() {
	    return this.getToken(GQLParser.REGULAR_IDENTIFIER, 0);
	};

	delimitedBindingTableName() {
	    return this.getTypedRuleContext(DelimitedBindingTableNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterBindingTableName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitBindingTableName(this);
		}
	}


}



class DelimitedBindingTableNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_delimitedBindingTableName;
    }

	delimitedIdentifier() {
	    return this.getTypedRuleContext(DelimitedIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDelimitedBindingTableName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDelimitedBindingTableName(this);
		}
	}


}



class ProcedureNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_procedureName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterProcedureName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitProcedureName(this);
		}
	}


}



class LabelNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_labelName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLabelName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLabelName(this);
		}
	}


}



class FunctionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_functionName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFunctionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFunctionName(this);
		}
	}


}



class PropertyNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_propertyName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPropertyName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPropertyName(this);
		}
	}


}



class FieldNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fieldName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFieldName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFieldName(this);
		}
	}


}



class ParameterNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_parameterName;
    }

	DOLLAR_SIGN() {
	    return this.getToken(GQLParser.DOLLAR_SIGN, 0);
	};

	unsignedNumericLiteral() {
	    return this.getTypedRuleContext(UnsignedNumericLiteralContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterParameterName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitParameterName(this);
		}
	}


}



class VariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_variable;
    }

	bindingVariable() {
	    return this.getTypedRuleContext(BindingVariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitVariable(this);
		}
	}


}



class GraphVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphVariable;
    }

	bindingVariable() {
	    return this.getTypedRuleContext(BindingVariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGraphVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGraphVariable(this);
		}
	}


}



class GraphPatternVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphPatternVariable;
    }

	elementVariable() {
	    return this.getTypedRuleContext(ElementVariableContext,0);
	};

	pathOrSubpathVariable() {
	    return this.getTypedRuleContext(PathOrSubpathVariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGraphPatternVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGraphPatternVariable(this);
		}
	}


}



class PathOrSubpathVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathOrSubpathVariable;
    }

	pathVariable() {
	    return this.getTypedRuleContext(PathVariableContext,0);
	};

	subpathVariable() {
	    return this.getTypedRuleContext(SubpathVariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathOrSubpathVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathOrSubpathVariable(this);
		}
	}


}



class ElementVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_elementVariable;
    }

	bindingVariable() {
	    return this.getTypedRuleContext(BindingVariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterElementVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitElementVariable(this);
		}
	}


}



class PathVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathVariable;
    }

	bindingVariable() {
	    return this.getTypedRuleContext(BindingVariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathVariable(this);
		}
	}


}



class SubpathVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_subpathVariable;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSubpathVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSubpathVariable(this);
		}
	}


}



class BindingTableVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_bindingTableVariable;
    }

	bindingVariable() {
	    return this.getTypedRuleContext(BindingVariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterBindingTableVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitBindingTableVariable(this);
		}
	}


}



class ValueVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_valueVariable;
    }

	bindingVariable() {
	    return this.getTypedRuleContext(BindingVariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterValueVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitValueVariable(this);
		}
	}


}



class BindingVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_bindingVariable;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterBindingVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitBindingVariable(this);
		}
	}


}



class PredefinedTypeLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_predefinedTypeLiteral;
    }

	booleanLiteral() {
	    return this.getTypedRuleContext(BooleanLiteralContext,0);
	};

	characterStringLiteral() {
	    return this.getTypedRuleContext(CharacterStringLiteralContext,0);
	};

	byteStringLiteral() {
	    return this.getTypedRuleContext(ByteStringLiteralContext,0);
	};

	temporalLiteral() {
	    return this.getTypedRuleContext(TemporalLiteralContext,0);
	};

	durationLiteral() {
	    return this.getTypedRuleContext(DurationLiteralContext,0);
	};

	nullLiteral() {
	    return this.getTypedRuleContext(NullLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPredefinedTypeLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPredefinedTypeLiteral(this);
		}
	}


}



class BooleanLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_booleanLiteral;
    }

	TRUE() {
	    return this.getToken(GQLParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(GQLParser.FALSE, 0);
	};

	UNKNOWN() {
	    return this.getToken(GQLParser.UNKNOWN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterBooleanLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitBooleanLiteral(this);
		}
	}


}



class CharacterStringLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_characterStringLiteral;
    }

	singleQuotedCharacterSequence() {
	    return this.getTypedRuleContext(SingleQuotedCharacterSequenceContext,0);
	};

	doubleQuotedCharacterSequence() {
	    return this.getTypedRuleContext(DoubleQuotedCharacterSequenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCharacterStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCharacterStringLiteral(this);
		}
	}


}



class ByteStringLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_byteStringLiteral;
    }

	BYTE_STRING_LITERAL() {
	    return this.getToken(GQLParser.BYTE_STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterByteStringLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitByteStringLiteral(this);
		}
	}


}



class ProcedureBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_procedureBody;
    }

	statementBlock() {
	    return this.getTypedRuleContext(StatementBlockContext,0);
	};

	atSchemaClause() {
	    return this.getTypedRuleContext(AtSchemaClauseContext,0);
	};

	bindingVariableDefinitionBlock() {
	    return this.getTypedRuleContext(BindingVariableDefinitionBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterProcedureBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitProcedureBody(this);
		}
	}


}



class BindingVariableDefinitionBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_bindingVariableDefinitionBlock;
    }

	bindingVariableDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BindingVariableDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(BindingVariableDefinitionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterBindingVariableDefinitionBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitBindingVariableDefinitionBlock(this);
		}
	}


}



class BindingVariableDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_bindingVariableDefinition;
    }

	graphVariableDefinition() {
	    return this.getTypedRuleContext(GraphVariableDefinitionContext,0);
	};

	bindingTableVariableDefinition() {
	    return this.getTypedRuleContext(BindingTableVariableDefinitionContext,0);
	};

	valueVariableDefinition() {
	    return this.getTypedRuleContext(ValueVariableDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterBindingVariableDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitBindingVariableDefinition(this);
		}
	}


}



class StatementBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_statementBlock;
    }

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	nextStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NextStatementContext);
	    } else {
	        return this.getTypedRuleContext(NextStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterStatementBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitStatementBlock(this);
		}
	}


}



class StatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_statement;
    }

	linearCatalogModifyingStatement() {
	    return this.getTypedRuleContext(LinearCatalogModifyingStatementContext,0);
	};

	linearDataModifyingStatement() {
	    return this.getTypedRuleContext(LinearDataModifyingStatementContext,0);
	};

	compositeQueryStatement() {
	    return this.getTypedRuleContext(CompositeQueryStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitStatement(this);
		}
	}


}



class NextStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nextStatement;
    }

	NEXT() {
	    return this.getToken(GQLParser.NEXT, 0);
	};

	statement() {
	    return this.getTypedRuleContext(StatementContext,0);
	};

	yieldClause() {
	    return this.getTypedRuleContext(YieldClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNextStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNextStatement(this);
		}
	}


}



class GraphVariableDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphVariableDefinition;
    }

	GRAPH() {
	    return this.getToken(GQLParser.GRAPH, 0);
	};

	graphVariable() {
	    return this.getTypedRuleContext(GraphVariableContext,0);
	};

	optTypedGraphInitializer() {
	    return this.getTypedRuleContext(OptTypedGraphInitializerContext,0);
	};

	PROPERTY() {
	    return this.getToken(GQLParser.PROPERTY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGraphVariableDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGraphVariableDefinition(this);
		}
	}


}



class OptTypedGraphInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_optTypedGraphInitializer;
    }

	graphInitializer() {
	    return this.getTypedRuleContext(GraphInitializerContext,0);
	};

	graphReferenceValueType() {
	    return this.getTypedRuleContext(GraphReferenceValueTypeContext,0);
	};

	typed() {
	    return this.getTypedRuleContext(TypedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterOptTypedGraphInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitOptTypedGraphInitializer(this);
		}
	}


}



class GraphInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphInitializer;
    }

	EQUALS_OPERATOR() {
	    return this.getToken(GQLParser.EQUALS_OPERATOR, 0);
	};

	graphExpression() {
	    return this.getTypedRuleContext(GraphExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGraphInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGraphInitializer(this);
		}
	}


}



class BindingTableVariableDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_bindingTableVariableDefinition;
    }

	TABLE() {
	    return this.getToken(GQLParser.TABLE, 0);
	};

	bindingTableVariable() {
	    return this.getTypedRuleContext(BindingTableVariableContext,0);
	};

	optTypedBindingTableInitializer() {
	    return this.getTypedRuleContext(OptTypedBindingTableInitializerContext,0);
	};

	BINDING() {
	    return this.getToken(GQLParser.BINDING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterBindingTableVariableDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitBindingTableVariableDefinition(this);
		}
	}


}



class OptTypedBindingTableInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_optTypedBindingTableInitializer;
    }

	bindingTableInitializer() {
	    return this.getTypedRuleContext(BindingTableInitializerContext,0);
	};

	bindingTableReferenceValueType() {
	    return this.getTypedRuleContext(BindingTableReferenceValueTypeContext,0);
	};

	typed() {
	    return this.getTypedRuleContext(TypedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterOptTypedBindingTableInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitOptTypedBindingTableInitializer(this);
		}
	}


}



class BindingTableInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_bindingTableInitializer;
    }

	EQUALS_OPERATOR() {
	    return this.getToken(GQLParser.EQUALS_OPERATOR, 0);
	};

	bindingTableExpression() {
	    return this.getTypedRuleContext(BindingTableExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterBindingTableInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitBindingTableInitializer(this);
		}
	}


}



class ValueVariableDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_valueVariableDefinition;
    }

	VALUE() {
	    return this.getToken(GQLParser.VALUE, 0);
	};

	valueVariable() {
	    return this.getTypedRuleContext(ValueVariableContext,0);
	};

	optTypedValueInitializer() {
	    return this.getTypedRuleContext(OptTypedValueInitializerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterValueVariableDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitValueVariableDefinition(this);
		}
	}


}



class OptTypedValueInitializerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_optTypedValueInitializer;
    }

	EQUALS_OPERATOR() {
	    return this.getToken(GQLParser.EQUALS_OPERATOR, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	valueType() {
	    return this.getTypedRuleContext(ValueTypeContext,0);
	};

	typed() {
	    return this.getTypedRuleContext(TypedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterOptTypedValueInitializer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitOptTypedValueInitializer(this);
		}
	}


}



class GraphExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphExpression;
    }

	nestedGraphQuerySpecification() {
	    return this.getTypedRuleContext(NestedGraphQuerySpecificationContext,0);
	};

	objectExpressionPrimary() {
	    return this.getTypedRuleContext(ObjectExpressionPrimaryContext,0);
	};

	graphReference() {
	    return this.getTypedRuleContext(GraphReferenceContext,0);
	};

	objectNameOrBindingVariable() {
	    return this.getTypedRuleContext(ObjectNameOrBindingVariableContext,0);
	};

	currentGraph() {
	    return this.getTypedRuleContext(CurrentGraphContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGraphExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGraphExpression(this);
		}
	}


}



class CurrentGraphContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_currentGraph;
    }

	CURRENT_PROPERTY_GRAPH() {
	    return this.getToken(GQLParser.CURRENT_PROPERTY_GRAPH, 0);
	};

	CURRENT_GRAPH() {
	    return this.getToken(GQLParser.CURRENT_GRAPH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCurrentGraph(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCurrentGraph(this);
		}
	}


}



class NestedGraphQuerySpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nestedGraphQuerySpecification;
    }

	nestedQuerySpecification() {
	    return this.getTypedRuleContext(NestedQuerySpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNestedGraphQuerySpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNestedGraphQuerySpecification(this);
		}
	}


}



class BindingTableExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_bindingTableExpression;
    }

	nestedBindingTableQuerySpecification() {
	    return this.getTypedRuleContext(NestedBindingTableQuerySpecificationContext,0);
	};

	objectExpressionPrimary() {
	    return this.getTypedRuleContext(ObjectExpressionPrimaryContext,0);
	};

	bindingTableReference() {
	    return this.getTypedRuleContext(BindingTableReferenceContext,0);
	};

	objectNameOrBindingVariable() {
	    return this.getTypedRuleContext(ObjectNameOrBindingVariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterBindingTableExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitBindingTableExpression(this);
		}
	}


}



class NestedBindingTableQuerySpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nestedBindingTableQuerySpecification;
    }

	nestedQuerySpecification() {
	    return this.getTypedRuleContext(NestedQuerySpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNestedBindingTableQuerySpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNestedBindingTableQuerySpecification(this);
		}
	}


}



class ObjectExpressionPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_objectExpressionPrimary;
    }

	VARIABLE() {
	    return this.getToken(GQLParser.VARIABLE, 0);
	};

	expressionAtom() {
	    return this.getTypedRuleContext(ExpressionAtomContext,0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterObjectExpressionPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitObjectExpressionPrimary(this);
		}
	}


}



class LinearCatalogModifyingStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_linearCatalogModifyingStatement;
    }

	simpleCatalogModifyingStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimpleCatalogModifyingStatementContext);
	    } else {
	        return this.getTypedRuleContext(SimpleCatalogModifyingStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLinearCatalogModifyingStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLinearCatalogModifyingStatement(this);
		}
	}


}



class SimpleCatalogModifyingStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simpleCatalogModifyingStatement;
    }

	primitiveCatalogModifyingStatement() {
	    return this.getTypedRuleContext(PrimitiveCatalogModifyingStatementContext,0);
	};

	callCatalogModifyingProcedureStatement() {
	    return this.getTypedRuleContext(CallCatalogModifyingProcedureStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimpleCatalogModifyingStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimpleCatalogModifyingStatement(this);
		}
	}


}



class PrimitiveCatalogModifyingStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_primitiveCatalogModifyingStatement;
    }

	createSchemaStatement() {
	    return this.getTypedRuleContext(CreateSchemaStatementContext,0);
	};

	createGraphStatement() {
	    return this.getTypedRuleContext(CreateGraphStatementContext,0);
	};

	createGraphTypeStatement() {
	    return this.getTypedRuleContext(CreateGraphTypeStatementContext,0);
	};

	dropSchemaStatement() {
	    return this.getTypedRuleContext(DropSchemaStatementContext,0);
	};

	dropGraphStatement() {
	    return this.getTypedRuleContext(DropGraphStatementContext,0);
	};

	dropGraphTypeStatement() {
	    return this.getTypedRuleContext(DropGraphTypeStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPrimitiveCatalogModifyingStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPrimitiveCatalogModifyingStatement(this);
		}
	}


}



class CreateSchemaStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_createSchemaStatement;
    }

	CREATE() {
	    return this.getToken(GQLParser.CREATE, 0);
	};

	SCHEMA() {
	    return this.getToken(GQLParser.SCHEMA, 0);
	};

	catalogSchemaParentAndName() {
	    return this.getTypedRuleContext(CatalogSchemaParentAndNameContext,0);
	};

	IF() {
	    return this.getToken(GQLParser.IF, 0);
	};

	NOT() {
	    return this.getToken(GQLParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(GQLParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCreateSchemaStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCreateSchemaStatement(this);
		}
	}


}



class DropSchemaStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_dropSchemaStatement;
    }

	DROP() {
	    return this.getToken(GQLParser.DROP, 0);
	};

	SCHEMA() {
	    return this.getToken(GQLParser.SCHEMA, 0);
	};

	catalogSchemaParentAndName() {
	    return this.getTypedRuleContext(CatalogSchemaParentAndNameContext,0);
	};

	IF() {
	    return this.getToken(GQLParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(GQLParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDropSchemaStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDropSchemaStatement(this);
		}
	}


}



class CreateGraphStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_createGraphStatement;
    }

	CREATE() {
	    return this.getToken(GQLParser.CREATE, 0);
	};

	catalogGraphParentAndName() {
	    return this.getTypedRuleContext(CatalogGraphParentAndNameContext,0);
	};

	GRAPH() {
	    return this.getToken(GQLParser.GRAPH, 0);
	};

	OR() {
	    return this.getToken(GQLParser.OR, 0);
	};

	REPLACE() {
	    return this.getToken(GQLParser.REPLACE, 0);
	};

	openGraphType() {
	    return this.getTypedRuleContext(OpenGraphTypeContext,0);
	};

	ofGraphType() {
	    return this.getTypedRuleContext(OfGraphTypeContext,0);
	};

	graphSource() {
	    return this.getTypedRuleContext(GraphSourceContext,0);
	};

	PROPERTY() {
	    return this.getToken(GQLParser.PROPERTY, 0);
	};

	IF() {
	    return this.getToken(GQLParser.IF, 0);
	};

	NOT() {
	    return this.getToken(GQLParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(GQLParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCreateGraphStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCreateGraphStatement(this);
		}
	}


}



class OpenGraphTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_openGraphType;
    }

	ANY() {
	    return this.getToken(GQLParser.ANY, 0);
	};

	typed() {
	    return this.getTypedRuleContext(TypedContext,0);
	};

	GRAPH() {
	    return this.getToken(GQLParser.GRAPH, 0);
	};

	PROPERTY() {
	    return this.getToken(GQLParser.PROPERTY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterOpenGraphType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitOpenGraphType(this);
		}
	}


}



class OfGraphTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_ofGraphType;
    }

	graphTypeLikeGraph() {
	    return this.getTypedRuleContext(GraphTypeLikeGraphContext,0);
	};

	graphTypeReference() {
	    return this.getTypedRuleContext(GraphTypeReferenceContext,0);
	};

	typed() {
	    return this.getTypedRuleContext(TypedContext,0);
	};

	nestedGraphTypeSpecification() {
	    return this.getTypedRuleContext(NestedGraphTypeSpecificationContext,0);
	};

	GRAPH() {
	    return this.getToken(GQLParser.GRAPH, 0);
	};

	PROPERTY() {
	    return this.getToken(GQLParser.PROPERTY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterOfGraphType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitOfGraphType(this);
		}
	}


}



class GraphTypeLikeGraphContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphTypeLikeGraph;
    }

	LIKE() {
	    return this.getToken(GQLParser.LIKE, 0);
	};

	graphExpression() {
	    return this.getTypedRuleContext(GraphExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGraphTypeLikeGraph(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGraphTypeLikeGraph(this);
		}
	}


}



class GraphSourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphSource;
    }

	AS() {
	    return this.getToken(GQLParser.AS, 0);
	};

	COPY() {
	    return this.getToken(GQLParser.COPY, 0);
	};

	OF() {
	    return this.getToken(GQLParser.OF, 0);
	};

	graphExpression() {
	    return this.getTypedRuleContext(GraphExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGraphSource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGraphSource(this);
		}
	}


}



class DropGraphStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_dropGraphStatement;
    }

	DROP() {
	    return this.getToken(GQLParser.DROP, 0);
	};

	GRAPH() {
	    return this.getToken(GQLParser.GRAPH, 0);
	};

	catalogGraphParentAndName() {
	    return this.getTypedRuleContext(CatalogGraphParentAndNameContext,0);
	};

	PROPERTY() {
	    return this.getToken(GQLParser.PROPERTY, 0);
	};

	IF() {
	    return this.getToken(GQLParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(GQLParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDropGraphStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDropGraphStatement(this);
		}
	}


}



class CreateGraphTypeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_createGraphTypeStatement;
    }

	CREATE() {
	    return this.getToken(GQLParser.CREATE, 0);
	};

	catalogGraphTypeParentAndName() {
	    return this.getTypedRuleContext(CatalogGraphTypeParentAndNameContext,0);
	};

	graphTypeSource() {
	    return this.getTypedRuleContext(GraphTypeSourceContext,0);
	};

	GRAPH() {
	    return this.getToken(GQLParser.GRAPH, 0);
	};

	TYPE() {
	    return this.getToken(GQLParser.TYPE, 0);
	};

	OR() {
	    return this.getToken(GQLParser.OR, 0);
	};

	REPLACE() {
	    return this.getToken(GQLParser.REPLACE, 0);
	};

	PROPERTY() {
	    return this.getToken(GQLParser.PROPERTY, 0);
	};

	IF() {
	    return this.getToken(GQLParser.IF, 0);
	};

	NOT() {
	    return this.getToken(GQLParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(GQLParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCreateGraphTypeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCreateGraphTypeStatement(this);
		}
	}


}



class GraphTypeSourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphTypeSource;
    }

	copyOfGraphType() {
	    return this.getTypedRuleContext(CopyOfGraphTypeContext,0);
	};

	AS() {
	    return this.getToken(GQLParser.AS, 0);
	};

	graphTypeLikeGraph() {
	    return this.getTypedRuleContext(GraphTypeLikeGraphContext,0);
	};

	nestedGraphTypeSpecification() {
	    return this.getTypedRuleContext(NestedGraphTypeSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGraphTypeSource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGraphTypeSource(this);
		}
	}


}



class CopyOfGraphTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_copyOfGraphType;
    }

	COPY() {
	    return this.getToken(GQLParser.COPY, 0);
	};

	OF() {
	    return this.getToken(GQLParser.OF, 0);
	};

	graphTypeReference() {
	    return this.getTypedRuleContext(GraphTypeReferenceContext,0);
	};

	externalObjectReference() {
	    return this.getTypedRuleContext(ExternalObjectReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCopyOfGraphType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCopyOfGraphType(this);
		}
	}


}



class DropGraphTypeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_dropGraphTypeStatement;
    }

	DROP() {
	    return this.getToken(GQLParser.DROP, 0);
	};

	GRAPH() {
	    return this.getToken(GQLParser.GRAPH, 0);
	};

	TYPE() {
	    return this.getToken(GQLParser.TYPE, 0);
	};

	catalogGraphTypeParentAndName() {
	    return this.getTypedRuleContext(CatalogGraphTypeParentAndNameContext,0);
	};

	PROPERTY() {
	    return this.getToken(GQLParser.PROPERTY, 0);
	};

	IF() {
	    return this.getToken(GQLParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(GQLParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDropGraphTypeStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDropGraphTypeStatement(this);
		}
	}


}



class CallCatalogModifyingProcedureStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_callCatalogModifyingProcedureStatement;
    }

	callProcedureStatement() {
	    return this.getTypedRuleContext(CallProcedureStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCallCatalogModifyingProcedureStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCallCatalogModifyingProcedureStatement(this);
		}
	}


}



class LinearDataModifyingStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_linearDataModifyingStatement;
    }

	focusedLinearDataModifyingStatement() {
	    return this.getTypedRuleContext(FocusedLinearDataModifyingStatementContext,0);
	};

	ambientLinearDataModifyingStatement() {
	    return this.getTypedRuleContext(AmbientLinearDataModifyingStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLinearDataModifyingStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLinearDataModifyingStatement(this);
		}
	}


}



class FocusedLinearDataModifyingStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_focusedLinearDataModifyingStatement;
    }

	focusedLinearDataModifyingStatementBody() {
	    return this.getTypedRuleContext(FocusedLinearDataModifyingStatementBodyContext,0);
	};

	focusedNestedDataModifyingProcedureSpecification() {
	    return this.getTypedRuleContext(FocusedNestedDataModifyingProcedureSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFocusedLinearDataModifyingStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFocusedLinearDataModifyingStatement(this);
		}
	}


}



class FocusedLinearDataModifyingStatementBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_focusedLinearDataModifyingStatementBody;
    }

	useGraphClause() {
	    return this.getTypedRuleContext(UseGraphClauseContext,0);
	};

	simpleLinearDataAccessingStatement() {
	    return this.getTypedRuleContext(SimpleLinearDataAccessingStatementContext,0);
	};

	primitiveResultStatement() {
	    return this.getTypedRuleContext(PrimitiveResultStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFocusedLinearDataModifyingStatementBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFocusedLinearDataModifyingStatementBody(this);
		}
	}


}



class FocusedNestedDataModifyingProcedureSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_focusedNestedDataModifyingProcedureSpecification;
    }

	useGraphClause() {
	    return this.getTypedRuleContext(UseGraphClauseContext,0);
	};

	nestedDataModifyingProcedureSpecification() {
	    return this.getTypedRuleContext(NestedDataModifyingProcedureSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFocusedNestedDataModifyingProcedureSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFocusedNestedDataModifyingProcedureSpecification(this);
		}
	}


}



class AmbientLinearDataModifyingStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_ambientLinearDataModifyingStatement;
    }

	ambientLinearDataModifyingStatementBody() {
	    return this.getTypedRuleContext(AmbientLinearDataModifyingStatementBodyContext,0);
	};

	nestedDataModifyingProcedureSpecification() {
	    return this.getTypedRuleContext(NestedDataModifyingProcedureSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterAmbientLinearDataModifyingStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitAmbientLinearDataModifyingStatement(this);
		}
	}


}



class AmbientLinearDataModifyingStatementBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_ambientLinearDataModifyingStatementBody;
    }

	simpleLinearDataAccessingStatement() {
	    return this.getTypedRuleContext(SimpleLinearDataAccessingStatementContext,0);
	};

	primitiveResultStatement() {
	    return this.getTypedRuleContext(PrimitiveResultStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterAmbientLinearDataModifyingStatementBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitAmbientLinearDataModifyingStatementBody(this);
		}
	}


}



class SimpleLinearDataAccessingStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simpleLinearDataAccessingStatement;
    }

	simpleDataAccessingStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimpleDataAccessingStatementContext);
	    } else {
	        return this.getTypedRuleContext(SimpleDataAccessingStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimpleLinearDataAccessingStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimpleLinearDataAccessingStatement(this);
		}
	}


}



class SimpleDataAccessingStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simpleDataAccessingStatement;
    }

	simpleQueryStatement() {
	    return this.getTypedRuleContext(SimpleQueryStatementContext,0);
	};

	simpleDataModifyingStatement() {
	    return this.getTypedRuleContext(SimpleDataModifyingStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimpleDataAccessingStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimpleDataAccessingStatement(this);
		}
	}


}



class SimpleDataModifyingStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simpleDataModifyingStatement;
    }

	primitiveDataModifyingStatement() {
	    return this.getTypedRuleContext(PrimitiveDataModifyingStatementContext,0);
	};

	callDataModifyingProcedureStatement() {
	    return this.getTypedRuleContext(CallDataModifyingProcedureStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimpleDataModifyingStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimpleDataModifyingStatement(this);
		}
	}


}



class PrimitiveDataModifyingStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_primitiveDataModifyingStatement;
    }

	insertStatement() {
	    return this.getTypedRuleContext(InsertStatementContext,0);
	};

	setStatement() {
	    return this.getTypedRuleContext(SetStatementContext,0);
	};

	removeStatement() {
	    return this.getTypedRuleContext(RemoveStatementContext,0);
	};

	deleteStatement() {
	    return this.getTypedRuleContext(DeleteStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPrimitiveDataModifyingStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPrimitiveDataModifyingStatement(this);
		}
	}


}



class InsertStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_insertStatement;
    }

	INSERT() {
	    return this.getToken(GQLParser.INSERT, 0);
	};

	insertGraphPattern() {
	    return this.getTypedRuleContext(InsertGraphPatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterInsertStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitInsertStatement(this);
		}
	}


}



class SetStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_setStatement;
    }

	SET() {
	    return this.getToken(GQLParser.SET, 0);
	};

	setItemList() {
	    return this.getTypedRuleContext(SetItemListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSetStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSetStatement(this);
		}
	}


}



class SetItemListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_setItemList;
    }

	setItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SetItemContext);
	    } else {
	        return this.getTypedRuleContext(SetItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSetItemList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSetItemList(this);
		}
	}


}



class SetItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_setItem;
    }

	setPropertyItem() {
	    return this.getTypedRuleContext(SetPropertyItemContext,0);
	};

	setAllPropertiesItem() {
	    return this.getTypedRuleContext(SetAllPropertiesItemContext,0);
	};

	setLabelItem() {
	    return this.getTypedRuleContext(SetLabelItemContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSetItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSetItem(this);
		}
	}


}



class SetPropertyItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_setPropertyItem;
    }

	bindingVariableReference() {
	    return this.getTypedRuleContext(BindingVariableReferenceContext,0);
	};

	PERIOD() {
	    return this.getToken(GQLParser.PERIOD, 0);
	};

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	EQUALS_OPERATOR() {
	    return this.getToken(GQLParser.EQUALS_OPERATOR, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSetPropertyItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSetPropertyItem(this);
		}
	}


}



class SetAllPropertiesItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_setAllPropertiesItem;
    }

	bindingVariableReference() {
	    return this.getTypedRuleContext(BindingVariableReferenceContext,0);
	};

	EQUALS_OPERATOR() {
	    return this.getToken(GQLParser.EQUALS_OPERATOR, 0);
	};

	LEFT_BRACE() {
	    return this.getToken(GQLParser.LEFT_BRACE, 0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GQLParser.RIGHT_BRACE, 0);
	};

	propertyKeyValuePairList() {
	    return this.getTypedRuleContext(PropertyKeyValuePairListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSetAllPropertiesItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSetAllPropertiesItem(this);
		}
	}


}



class SetLabelItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_setLabelItem;
    }

	bindingVariableReference() {
	    return this.getTypedRuleContext(BindingVariableReferenceContext,0);
	};

	isOrColon() {
	    return this.getTypedRuleContext(IsOrColonContext,0);
	};

	labelName() {
	    return this.getTypedRuleContext(LabelNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSetLabelItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSetLabelItem(this);
		}
	}


}



class LabelSetSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_labelSetSpecification;
    }

	labelName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LabelNameContext);
	    } else {
	        return this.getTypedRuleContext(LabelNameContext,i);
	    }
	};

	AMPERSAND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.AMPERSAND);
	    } else {
	        return this.getToken(GQLParser.AMPERSAND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLabelSetSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLabelSetSpecification(this);
		}
	}


}



class RemoveStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_removeStatement;
    }

	REMOVE() {
	    return this.getToken(GQLParser.REMOVE, 0);
	};

	removeItemList() {
	    return this.getTypedRuleContext(RemoveItemListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterRemoveStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitRemoveStatement(this);
		}
	}


}



class RemoveItemListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_removeItemList;
    }

	removeItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RemoveItemContext);
	    } else {
	        return this.getTypedRuleContext(RemoveItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterRemoveItemList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitRemoveItemList(this);
		}
	}


}



class RemoveItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_removeItem;
    }

	removePropertyItem() {
	    return this.getTypedRuleContext(RemovePropertyItemContext,0);
	};

	removeLabelItem() {
	    return this.getTypedRuleContext(RemoveLabelItemContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterRemoveItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitRemoveItem(this);
		}
	}


}



class RemovePropertyItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_removePropertyItem;
    }

	bindingVariableReference() {
	    return this.getTypedRuleContext(BindingVariableReferenceContext,0);
	};

	PERIOD() {
	    return this.getToken(GQLParser.PERIOD, 0);
	};

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterRemovePropertyItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitRemovePropertyItem(this);
		}
	}


}



class RemoveLabelItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_removeLabelItem;
    }

	bindingVariableReference() {
	    return this.getTypedRuleContext(BindingVariableReferenceContext,0);
	};

	isOrColon() {
	    return this.getTypedRuleContext(IsOrColonContext,0);
	};

	labelName() {
	    return this.getTypedRuleContext(LabelNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterRemoveLabelItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitRemoveLabelItem(this);
		}
	}


}



class DeleteStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_deleteStatement;
    }

	DELETE() {
	    return this.getToken(GQLParser.DELETE, 0);
	};

	deleteItemList() {
	    return this.getTypedRuleContext(DeleteItemListContext,0);
	};

	DETACH() {
	    return this.getToken(GQLParser.DETACH, 0);
	};

	NODETACH() {
	    return this.getToken(GQLParser.NODETACH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDeleteStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDeleteStatement(this);
		}
	}


}



class DeleteItemListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_deleteItemList;
    }

	deleteItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeleteItemContext);
	    } else {
	        return this.getTypedRuleContext(DeleteItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDeleteItemList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDeleteItemList(this);
		}
	}


}



class DeleteItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_deleteItem;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDeleteItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDeleteItem(this);
		}
	}


}



class CallDataModifyingProcedureStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_callDataModifyingProcedureStatement;
    }

	callProcedureStatement() {
	    return this.getTypedRuleContext(CallProcedureStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCallDataModifyingProcedureStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCallDataModifyingProcedureStatement(this);
		}
	}


}



class CompositeQueryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_compositeQueryStatement;
    }

	compositeQueryExpression() {
	    return this.getTypedRuleContext(CompositeQueryExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCompositeQueryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCompositeQueryStatement(this);
		}
	}


}



class CompositeQueryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_compositeQueryExpression;
    }

	compositeQueryPrimary() {
	    return this.getTypedRuleContext(CompositeQueryPrimaryContext,0);
	};

	compositeQueryExpression() {
	    return this.getTypedRuleContext(CompositeQueryExpressionContext,0);
	};

	queryConjunction() {
	    return this.getTypedRuleContext(QueryConjunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCompositeQueryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCompositeQueryExpression(this);
		}
	}


}



class QueryConjunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_queryConjunction;
    }

	setOperator() {
	    return this.getTypedRuleContext(SetOperatorContext,0);
	};

	OTHERWISE() {
	    return this.getToken(GQLParser.OTHERWISE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterQueryConjunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitQueryConjunction(this);
		}
	}


}



class SetOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_setOperator;
    }

	UNION() {
	    return this.getToken(GQLParser.UNION, 0);
	};

	setQuantifier() {
	    return this.getTypedRuleContext(SetQuantifierContext,0);
	};

	EXCEPT() {
	    return this.getToken(GQLParser.EXCEPT, 0);
	};

	INTERSECT() {
	    return this.getToken(GQLParser.INTERSECT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSetOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSetOperator(this);
		}
	}


}



class CompositeQueryPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_compositeQueryPrimary;
    }

	linearQueryStatement() {
	    return this.getTypedRuleContext(LinearQueryStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCompositeQueryPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCompositeQueryPrimary(this);
		}
	}


}



class LinearQueryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_linearQueryStatement;
    }

	focusedLinearQueryStatement() {
	    return this.getTypedRuleContext(FocusedLinearQueryStatementContext,0);
	};

	ambientLinearQueryStatement() {
	    return this.getTypedRuleContext(AmbientLinearQueryStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLinearQueryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLinearQueryStatement(this);
		}
	}


}



class FocusedLinearQueryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_focusedLinearQueryStatement;
    }

	focusedLinearQueryAndPrimitiveResultStatementPart() {
	    return this.getTypedRuleContext(FocusedLinearQueryAndPrimitiveResultStatementPartContext,0);
	};

	focusedLinearQueryStatementPart = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FocusedLinearQueryStatementPartContext);
	    } else {
	        return this.getTypedRuleContext(FocusedLinearQueryStatementPartContext,i);
	    }
	};

	focusedPrimitiveResultStatement() {
	    return this.getTypedRuleContext(FocusedPrimitiveResultStatementContext,0);
	};

	focusedNestedQuerySpecification() {
	    return this.getTypedRuleContext(FocusedNestedQuerySpecificationContext,0);
	};

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFocusedLinearQueryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFocusedLinearQueryStatement(this);
		}
	}


}



class FocusedLinearQueryStatementPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_focusedLinearQueryStatementPart;
    }

	useGraphClause() {
	    return this.getTypedRuleContext(UseGraphClauseContext,0);
	};

	simpleLinearQueryStatement() {
	    return this.getTypedRuleContext(SimpleLinearQueryStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFocusedLinearQueryStatementPart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFocusedLinearQueryStatementPart(this);
		}
	}


}



class FocusedLinearQueryAndPrimitiveResultStatementPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_focusedLinearQueryAndPrimitiveResultStatementPart;
    }

	useGraphClause() {
	    return this.getTypedRuleContext(UseGraphClauseContext,0);
	};

	simpleLinearQueryStatement() {
	    return this.getTypedRuleContext(SimpleLinearQueryStatementContext,0);
	};

	primitiveResultStatement() {
	    return this.getTypedRuleContext(PrimitiveResultStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFocusedLinearQueryAndPrimitiveResultStatementPart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFocusedLinearQueryAndPrimitiveResultStatementPart(this);
		}
	}


}



class FocusedPrimitiveResultStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_focusedPrimitiveResultStatement;
    }

	useGraphClause() {
	    return this.getTypedRuleContext(UseGraphClauseContext,0);
	};

	primitiveResultStatement() {
	    return this.getTypedRuleContext(PrimitiveResultStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFocusedPrimitiveResultStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFocusedPrimitiveResultStatement(this);
		}
	}


}



class FocusedNestedQuerySpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_focusedNestedQuerySpecification;
    }

	useGraphClause() {
	    return this.getTypedRuleContext(UseGraphClauseContext,0);
	};

	nestedQuerySpecification() {
	    return this.getTypedRuleContext(NestedQuerySpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFocusedNestedQuerySpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFocusedNestedQuerySpecification(this);
		}
	}


}



class AmbientLinearQueryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_ambientLinearQueryStatement;
    }

	primitiveResultStatement() {
	    return this.getTypedRuleContext(PrimitiveResultStatementContext,0);
	};

	simpleLinearQueryStatement() {
	    return this.getTypedRuleContext(SimpleLinearQueryStatementContext,0);
	};

	nestedQuerySpecification() {
	    return this.getTypedRuleContext(NestedQuerySpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterAmbientLinearQueryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitAmbientLinearQueryStatement(this);
		}
	}


}



class SimpleLinearQueryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simpleLinearQueryStatement;
    }

	simpleQueryStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimpleQueryStatementContext);
	    } else {
	        return this.getTypedRuleContext(SimpleQueryStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimpleLinearQueryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimpleLinearQueryStatement(this);
		}
	}


}



class SimpleQueryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simpleQueryStatement;
    }

	primitiveQueryStatement() {
	    return this.getTypedRuleContext(PrimitiveQueryStatementContext,0);
	};

	callQueryStatement() {
	    return this.getTypedRuleContext(CallQueryStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimpleQueryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimpleQueryStatement(this);
		}
	}


}



class PrimitiveQueryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_primitiveQueryStatement;
    }

	matchStatement() {
	    return this.getTypedRuleContext(MatchStatementContext,0);
	};

	letStatement() {
	    return this.getTypedRuleContext(LetStatementContext,0);
	};

	forStatement() {
	    return this.getTypedRuleContext(ForStatementContext,0);
	};

	filterStatement() {
	    return this.getTypedRuleContext(FilterStatementContext,0);
	};

	orderByAndPageStatement() {
	    return this.getTypedRuleContext(OrderByAndPageStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPrimitiveQueryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPrimitiveQueryStatement(this);
		}
	}


}



class MatchStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_matchStatement;
    }

	simpleMatchStatement() {
	    return this.getTypedRuleContext(SimpleMatchStatementContext,0);
	};

	optionalMatchStatement() {
	    return this.getTypedRuleContext(OptionalMatchStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterMatchStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitMatchStatement(this);
		}
	}


}



class SimpleMatchStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simpleMatchStatement;
    }

	MATCH() {
	    return this.getToken(GQLParser.MATCH, 0);
	};

	graphPatternBindingTable() {
	    return this.getTypedRuleContext(GraphPatternBindingTableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimpleMatchStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimpleMatchStatement(this);
		}
	}


}



class OptionalMatchStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_optionalMatchStatement;
    }

	OPTIONAL() {
	    return this.getToken(GQLParser.OPTIONAL, 0);
	};

	optionalOperand() {
	    return this.getTypedRuleContext(OptionalOperandContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterOptionalMatchStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitOptionalMatchStatement(this);
		}
	}


}



class OptionalOperandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_optionalOperand;
    }

	simpleMatchStatement() {
	    return this.getTypedRuleContext(SimpleMatchStatementContext,0);
	};

	LEFT_BRACE() {
	    return this.getToken(GQLParser.LEFT_BRACE, 0);
	};

	matchStatementBlock() {
	    return this.getTypedRuleContext(MatchStatementBlockContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GQLParser.RIGHT_BRACE, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterOptionalOperand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitOptionalOperand(this);
		}
	}


}



class MatchStatementBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_matchStatementBlock;
    }

	matchStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MatchStatementContext);
	    } else {
	        return this.getTypedRuleContext(MatchStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterMatchStatementBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitMatchStatementBlock(this);
		}
	}


}



class CallQueryStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_callQueryStatement;
    }

	callProcedureStatement() {
	    return this.getTypedRuleContext(CallProcedureStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCallQueryStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCallQueryStatement(this);
		}
	}


}



class FilterStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_filterStatement;
    }

	FILTER() {
	    return this.getToken(GQLParser.FILTER, 0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFilterStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFilterStatement(this);
		}
	}


}



class LetStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_letStatement;
    }

	LET() {
	    return this.getToken(GQLParser.LET, 0);
	};

	letVariableDefinitionList() {
	    return this.getTypedRuleContext(LetVariableDefinitionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLetStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLetStatement(this);
		}
	}


}



class LetVariableDefinitionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_letVariableDefinitionList;
    }

	letVariableDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LetVariableDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(LetVariableDefinitionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLetVariableDefinitionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLetVariableDefinitionList(this);
		}
	}


}



class LetVariableDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_letVariableDefinition;
    }

	valueVariableDefinition() {
	    return this.getTypedRuleContext(ValueVariableDefinitionContext,0);
	};

	valueVariable() {
	    return this.getTypedRuleContext(ValueVariableContext,0);
	};

	EQUALS_OPERATOR() {
	    return this.getToken(GQLParser.EQUALS_OPERATOR, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLetVariableDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLetVariableDefinition(this);
		}
	}


}



class ForStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_forStatement;
    }

	FOR() {
	    return this.getToken(GQLParser.FOR, 0);
	};

	forItem() {
	    return this.getTypedRuleContext(ForItemContext,0);
	};

	forOrdinalityOrOffset() {
	    return this.getTypedRuleContext(ForOrdinalityOrOffsetContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterForStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitForStatement(this);
		}
	}


}



class ForItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_forItem;
    }

	forItemAlias() {
	    return this.getTypedRuleContext(ForItemAliasContext,0);
	};

	expressionAtom() {
	    return this.getTypedRuleContext(ExpressionAtomContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterForItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitForItem(this);
		}
	}


}



class ForItemAliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_forItemAlias;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	IN() {
	    return this.getToken(GQLParser.IN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterForItemAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitForItemAlias(this);
		}
	}


}



class ForOrdinalityOrOffsetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_forOrdinalityOrOffset;
    }

	WITH() {
	    return this.getToken(GQLParser.WITH, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ORDINALITY() {
	    return this.getToken(GQLParser.ORDINALITY, 0);
	};

	OFFSET() {
	    return this.getToken(GQLParser.OFFSET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterForOrdinalityOrOffset(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitForOrdinalityOrOffset(this);
		}
	}


}



class OrderByAndPageStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_orderByAndPageStatement;
    }

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	offsetClause() {
	    return this.getTypedRuleContext(OffsetClauseContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterOrderByAndPageStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitOrderByAndPageStatement(this);
		}
	}


}



class PrimitiveResultStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_primitiveResultStatement;
    }

	returnStatement() {
	    return this.getTypedRuleContext(ReturnStatementContext,0);
	};

	orderByAndPageStatement() {
	    return this.getTypedRuleContext(OrderByAndPageStatementContext,0);
	};

	FINISH() {
	    return this.getToken(GQLParser.FINISH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPrimitiveResultStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPrimitiveResultStatement(this);
		}
	}


}



class ReturnStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_returnStatement;
    }

	RETURN() {
	    return this.getToken(GQLParser.RETURN, 0);
	};

	returnStatementBody() {
	    return this.getTypedRuleContext(ReturnStatementBodyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterReturnStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitReturnStatement(this);
		}
	}


}



class ReturnStatementBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_returnStatementBody;
    }

	ASTERISK() {
	    return this.getToken(GQLParser.ASTERISK, 0);
	};

	returnItemList() {
	    return this.getTypedRuleContext(ReturnItemListContext,0);
	};

	setQuantifier() {
	    return this.getTypedRuleContext(SetQuantifierContext,0);
	};

	groupByClause() {
	    return this.getTypedRuleContext(GroupByClauseContext,0);
	};

	NO() {
	    return this.getToken(GQLParser.NO, 0);
	};

	BINDINGS() {
	    return this.getToken(GQLParser.BINDINGS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterReturnStatementBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitReturnStatementBody(this);
		}
	}


}



class ReturnItemListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_returnItemList;
    }

	returnItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReturnItemContext);
	    } else {
	        return this.getTypedRuleContext(ReturnItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterReturnItemList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitReturnItemList(this);
		}
	}


}



class ReturnItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_returnItem;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	returnItemAlias() {
	    return this.getTypedRuleContext(ReturnItemAliasContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterReturnItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitReturnItem(this);
		}
	}


}



class ReturnItemAliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_returnItemAlias;
    }

	AS() {
	    return this.getToken(GQLParser.AS, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterReturnItemAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitReturnItemAlias(this);
		}
	}


}



class SelectStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_selectStatement;
    }

	SELECT() {
	    return this.getToken(GQLParser.SELECT, 0);
	};

	ASTERISK() {
	    return this.getToken(GQLParser.ASTERISK, 0);
	};

	selectItemList() {
	    return this.getTypedRuleContext(SelectItemListContext,0);
	};

	setQuantifier() {
	    return this.getTypedRuleContext(SetQuantifierContext,0);
	};

	selectStatementBody() {
	    return this.getTypedRuleContext(SelectStatementBodyContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	groupByClause() {
	    return this.getTypedRuleContext(GroupByClauseContext,0);
	};

	havingClause() {
	    return this.getTypedRuleContext(HavingClauseContext,0);
	};

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	offsetClause() {
	    return this.getTypedRuleContext(OffsetClauseContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSelectStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSelectStatement(this);
		}
	}


}



class SelectItemListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_selectItemList;
    }

	selectItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectItemContext);
	    } else {
	        return this.getTypedRuleContext(SelectItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSelectItemList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSelectItemList(this);
		}
	}


}



class SelectItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_selectItem;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	selectItemAlias() {
	    return this.getTypedRuleContext(SelectItemAliasContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSelectItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSelectItem(this);
		}
	}


}



class SelectItemAliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_selectItemAlias;
    }

	AS() {
	    return this.getToken(GQLParser.AS, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSelectItemAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSelectItemAlias(this);
		}
	}


}



class HavingClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_havingClause;
    }

	HAVING() {
	    return this.getToken(GQLParser.HAVING, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterHavingClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitHavingClause(this);
		}
	}


}



class SelectStatementBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_selectStatementBody;
    }

	FROM() {
	    return this.getToken(GQLParser.FROM, 0);
	};

	selectGraphMatchList() {
	    return this.getTypedRuleContext(SelectGraphMatchListContext,0);
	};

	selectQuerySpecification() {
	    return this.getTypedRuleContext(SelectQuerySpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSelectStatementBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSelectStatementBody(this);
		}
	}


}



class SelectGraphMatchListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_selectGraphMatchList;
    }

	selectGraphMatch = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectGraphMatchContext);
	    } else {
	        return this.getTypedRuleContext(SelectGraphMatchContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSelectGraphMatchList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSelectGraphMatchList(this);
		}
	}


}



class SelectGraphMatchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_selectGraphMatch;
    }

	graphExpression() {
	    return this.getTypedRuleContext(GraphExpressionContext,0);
	};

	matchStatement() {
	    return this.getTypedRuleContext(MatchStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSelectGraphMatch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSelectGraphMatch(this);
		}
	}


}



class SelectQuerySpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_selectQuerySpecification;
    }

	nestedQuerySpecification() {
	    return this.getTypedRuleContext(NestedQuerySpecificationContext,0);
	};

	graphExpression() {
	    return this.getTypedRuleContext(GraphExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSelectQuerySpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSelectQuerySpecification(this);
		}
	}


}



class CallProcedureStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_callProcedureStatement;
    }

	CALL() {
	    return this.getToken(GQLParser.CALL, 0);
	};

	procedureCall() {
	    return this.getTypedRuleContext(ProcedureCallContext,0);
	};

	OPTIONAL() {
	    return this.getToken(GQLParser.OPTIONAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCallProcedureStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCallProcedureStatement(this);
		}
	}


}



class ProcedureCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_procedureCall;
    }

	inlineProcedureCall() {
	    return this.getTypedRuleContext(InlineProcedureCallContext,0);
	};

	namedProcedureCall() {
	    return this.getTypedRuleContext(NamedProcedureCallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterProcedureCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitProcedureCall(this);
		}
	}


}



class InlineProcedureCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_inlineProcedureCall;
    }

	nestedProcedureSpecification() {
	    return this.getTypedRuleContext(NestedProcedureSpecificationContext,0);
	};

	variableScopeClause() {
	    return this.getTypedRuleContext(VariableScopeClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterInlineProcedureCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitInlineProcedureCall(this);
		}
	}


}



class VariableScopeClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_variableScopeClause;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	bindingVariableReferenceList() {
	    return this.getTypedRuleContext(BindingVariableReferenceListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterVariableScopeClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitVariableScopeClause(this);
		}
	}


}



class BindingVariableReferenceListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_bindingVariableReferenceList;
    }

	bindingVariableReference = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BindingVariableReferenceContext);
	    } else {
	        return this.getTypedRuleContext(BindingVariableReferenceContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterBindingVariableReferenceList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitBindingVariableReferenceList(this);
		}
	}


}



class NamedProcedureCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_namedProcedureCall;
    }

	procedureReference() {
	    return this.getTypedRuleContext(ProcedureReferenceContext,0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	procedureArgumentList() {
	    return this.getTypedRuleContext(ProcedureArgumentListContext,0);
	};

	yieldClause() {
	    return this.getTypedRuleContext(YieldClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNamedProcedureCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNamedProcedureCall(this);
		}
	}


}



class ProcedureArgumentListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_procedureArgumentList;
    }

	procedureArgument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProcedureArgumentContext);
	    } else {
	        return this.getTypedRuleContext(ProcedureArgumentContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterProcedureArgumentList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitProcedureArgumentList(this);
		}
	}


}



class ProcedureArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_procedureArgument;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterProcedureArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitProcedureArgument(this);
		}
	}


}



class UseGraphClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_useGraphClause;
    }

	USE() {
	    return this.getToken(GQLParser.USE, 0);
	};

	graphExpression() {
	    return this.getTypedRuleContext(GraphExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterUseGraphClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitUseGraphClause(this);
		}
	}


}



class AtSchemaClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_atSchemaClause;
    }

	AT() {
	    return this.getToken(GQLParser.AT, 0);
	};

	schemaReference() {
	    return this.getTypedRuleContext(SchemaReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterAtSchemaClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitAtSchemaClause(this);
		}
	}


}



class BindingVariableReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_bindingVariableReference;
    }

	bindingVariable() {
	    return this.getTypedRuleContext(BindingVariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterBindingVariableReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitBindingVariableReference(this);
		}
	}


}



class ElementVariableReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_elementVariableReference;
    }

	bindingVariableReference() {
	    return this.getTypedRuleContext(BindingVariableReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterElementVariableReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitElementVariableReference(this);
		}
	}


}



class PathVariableReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathVariableReference;
    }

	bindingVariableReference() {
	    return this.getTypedRuleContext(BindingVariableReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathVariableReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathVariableReference(this);
		}
	}


}



class ParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_parameter;
    }

	parameterName() {
	    return this.getTypedRuleContext(ParameterNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitParameter(this);
		}
	}


}



class GraphPatternBindingTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphPatternBindingTable;
    }

	graphPattern() {
	    return this.getTypedRuleContext(GraphPatternContext,0);
	};

	graphPatternYieldClause() {
	    return this.getTypedRuleContext(GraphPatternYieldClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGraphPatternBindingTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGraphPatternBindingTable(this);
		}
	}


}



class GraphPatternYieldClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphPatternYieldClause;
    }

	YIELD() {
	    return this.getToken(GQLParser.YIELD, 0);
	};

	graphPatternYieldItemList() {
	    return this.getTypedRuleContext(GraphPatternYieldItemListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGraphPatternYieldClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGraphPatternYieldClause(this);
		}
	}


}



class GraphPatternYieldItemListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphPatternYieldItemList;
    }

	graphPatternYieldItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GraphPatternYieldItemContext);
	    } else {
	        return this.getTypedRuleContext(GraphPatternYieldItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	NO() {
	    return this.getToken(GQLParser.NO, 0);
	};

	BINDINGS() {
	    return this.getToken(GQLParser.BINDINGS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGraphPatternYieldItemList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGraphPatternYieldItemList(this);
		}
	}


}



class GraphPatternYieldItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphPatternYieldItem;
    }

	elementVariableReference() {
	    return this.getTypedRuleContext(ElementVariableReferenceContext,0);
	};

	pathVariableReference() {
	    return this.getTypedRuleContext(PathVariableReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGraphPatternYieldItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGraphPatternYieldItem(this);
		}
	}


}



class GraphPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphPattern;
    }

	pathPatternList() {
	    return this.getTypedRuleContext(PathPatternListContext,0);
	};

	matchMode() {
	    return this.getTypedRuleContext(MatchModeContext,0);
	};

	keepClause() {
	    return this.getTypedRuleContext(KeepClauseContext,0);
	};

	graphPatternWhereClause() {
	    return this.getTypedRuleContext(GraphPatternWhereClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGraphPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGraphPattern(this);
		}
	}


}



class MatchModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_matchMode;
    }

	repeatableElementsMatchMode() {
	    return this.getTypedRuleContext(RepeatableElementsMatchModeContext,0);
	};

	differentEdgesMatchMode() {
	    return this.getTypedRuleContext(DifferentEdgesMatchModeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterMatchMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitMatchMode(this);
		}
	}


}



class RepeatableElementsMatchModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_repeatableElementsMatchMode;
    }

	REPEATABLE() {
	    return this.getToken(GQLParser.REPEATABLE, 0);
	};

	elementBindingsOrElements() {
	    return this.getTypedRuleContext(ElementBindingsOrElementsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterRepeatableElementsMatchMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitRepeatableElementsMatchMode(this);
		}
	}


}



class DifferentEdgesMatchModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_differentEdgesMatchMode;
    }

	DIFFERENT() {
	    return this.getToken(GQLParser.DIFFERENT, 0);
	};

	edgeBindingsOrEdges() {
	    return this.getTypedRuleContext(EdgeBindingsOrEdgesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDifferentEdgesMatchMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDifferentEdgesMatchMode(this);
		}
	}


}



class ElementBindingsOrElementsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_elementBindingsOrElements;
    }

	ELEMENT() {
	    return this.getToken(GQLParser.ELEMENT, 0);
	};

	BINDINGS() {
	    return this.getToken(GQLParser.BINDINGS, 0);
	};

	ELEMENTS() {
	    return this.getToken(GQLParser.ELEMENTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterElementBindingsOrElements(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitElementBindingsOrElements(this);
		}
	}


}



class EdgeBindingsOrEdgesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgeBindingsOrEdges;
    }

	EDGE_SYNONYM() {
	    return this.getToken(GQLParser.EDGE_SYNONYM, 0);
	};

	BINDINGS() {
	    return this.getToken(GQLParser.BINDINGS, 0);
	};

	EDGES_SYNONYM() {
	    return this.getToken(GQLParser.EDGES_SYNONYM, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterEdgeBindingsOrEdges(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitEdgeBindingsOrEdges(this);
		}
	}


}



class PathPatternListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathPatternList;
    }

	pathPattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathPatternContext);
	    } else {
	        return this.getTypedRuleContext(PathPatternContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathPatternList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathPatternList(this);
		}
	}


}



class PathPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathPattern;
    }

	pathPatternExpression() {
	    return this.getTypedRuleContext(PathPatternExpressionContext,0);
	};

	pathVariableDeclaration() {
	    return this.getTypedRuleContext(PathVariableDeclarationContext,0);
	};

	pathPatternPrefix() {
	    return this.getTypedRuleContext(PathPatternPrefixContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathPattern(this);
		}
	}


}



class PathVariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathVariableDeclaration;
    }

	pathVariable() {
	    return this.getTypedRuleContext(PathVariableContext,0);
	};

	EQUALS_OPERATOR() {
	    return this.getToken(GQLParser.EQUALS_OPERATOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathVariableDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathVariableDeclaration(this);
		}
	}


}



class KeepClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_keepClause;
    }

	KEEP() {
	    return this.getToken(GQLParser.KEEP, 0);
	};

	pathPatternPrefix() {
	    return this.getTypedRuleContext(PathPatternPrefixContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterKeepClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitKeepClause(this);
		}
	}


}



class GraphPatternWhereClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphPatternWhereClause;
    }

	WHERE() {
	    return this.getToken(GQLParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGraphPatternWhereClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGraphPatternWhereClause(this);
		}
	}


}



class PathPatternPrefixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathPatternPrefix;
    }

	pathModePrefix() {
	    return this.getTypedRuleContext(PathModePrefixContext,0);
	};

	pathSearchPrefix() {
	    return this.getTypedRuleContext(PathSearchPrefixContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathPatternPrefix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathPatternPrefix(this);
		}
	}


}



class PathModePrefixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathModePrefix;
    }

	pathMode() {
	    return this.getTypedRuleContext(PathModeContext,0);
	};

	pathOrPaths() {
	    return this.getTypedRuleContext(PathOrPathsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathModePrefix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathModePrefix(this);
		}
	}


}



class PathModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathMode;
    }

	WALK() {
	    return this.getToken(GQLParser.WALK, 0);
	};

	TRAIL() {
	    return this.getToken(GQLParser.TRAIL, 0);
	};

	SIMPLE() {
	    return this.getToken(GQLParser.SIMPLE, 0);
	};

	ACYCLIC() {
	    return this.getToken(GQLParser.ACYCLIC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathMode(this);
		}
	}


}



class PathSearchPrefixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathSearchPrefix;
    }

	allPathSearch() {
	    return this.getTypedRuleContext(AllPathSearchContext,0);
	};

	anyPathSearch() {
	    return this.getTypedRuleContext(AnyPathSearchContext,0);
	};

	shortestPathSearch() {
	    return this.getTypedRuleContext(ShortestPathSearchContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathSearchPrefix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathSearchPrefix(this);
		}
	}


}



class AllPathSearchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_allPathSearch;
    }

	ALL() {
	    return this.getToken(GQLParser.ALL, 0);
	};

	pathMode() {
	    return this.getTypedRuleContext(PathModeContext,0);
	};

	pathOrPaths() {
	    return this.getTypedRuleContext(PathOrPathsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterAllPathSearch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitAllPathSearch(this);
		}
	}


}



class PathOrPathsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathOrPaths;
    }

	PATH() {
	    return this.getToken(GQLParser.PATH, 0);
	};

	PATHS() {
	    return this.getToken(GQLParser.PATHS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathOrPaths(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathOrPaths(this);
		}
	}


}



class AnyPathSearchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_anyPathSearch;
    }

	ANY() {
	    return this.getToken(GQLParser.ANY, 0);
	};

	numberOfPaths() {
	    return this.getTypedRuleContext(NumberOfPathsContext,0);
	};

	pathMode() {
	    return this.getTypedRuleContext(PathModeContext,0);
	};

	pathOrPaths() {
	    return this.getTypedRuleContext(PathOrPathsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterAnyPathSearch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitAnyPathSearch(this);
		}
	}


}



class NumberOfPathsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_numberOfPaths;
    }

	unsignedIntegerSpecification() {
	    return this.getTypedRuleContext(UnsignedIntegerSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNumberOfPaths(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNumberOfPaths(this);
		}
	}


}



class ShortestPathSearchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_shortestPathSearch;
    }

	allShortestPathSearch() {
	    return this.getTypedRuleContext(AllShortestPathSearchContext,0);
	};

	anyShortestPathSearch() {
	    return this.getTypedRuleContext(AnyShortestPathSearchContext,0);
	};

	countedShortestPathSearch() {
	    return this.getTypedRuleContext(CountedShortestPathSearchContext,0);
	};

	countedShortestGroupSearch() {
	    return this.getTypedRuleContext(CountedShortestGroupSearchContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterShortestPathSearch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitShortestPathSearch(this);
		}
	}


}



class AllShortestPathSearchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_allShortestPathSearch;
    }

	ALL() {
	    return this.getToken(GQLParser.ALL, 0);
	};

	SHORTEST() {
	    return this.getToken(GQLParser.SHORTEST, 0);
	};

	pathMode() {
	    return this.getTypedRuleContext(PathModeContext,0);
	};

	pathOrPaths() {
	    return this.getTypedRuleContext(PathOrPathsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterAllShortestPathSearch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitAllShortestPathSearch(this);
		}
	}


}



class AnyShortestPathSearchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_anyShortestPathSearch;
    }

	ANY() {
	    return this.getToken(GQLParser.ANY, 0);
	};

	SHORTEST() {
	    return this.getToken(GQLParser.SHORTEST, 0);
	};

	pathMode() {
	    return this.getTypedRuleContext(PathModeContext,0);
	};

	pathOrPaths() {
	    return this.getTypedRuleContext(PathOrPathsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterAnyShortestPathSearch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitAnyShortestPathSearch(this);
		}
	}


}



class CountedShortestPathSearchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_countedShortestPathSearch;
    }

	SHORTEST() {
	    return this.getToken(GQLParser.SHORTEST, 0);
	};

	numberOfPaths() {
	    return this.getTypedRuleContext(NumberOfPathsContext,0);
	};

	pathMode() {
	    return this.getTypedRuleContext(PathModeContext,0);
	};

	pathOrPaths() {
	    return this.getTypedRuleContext(PathOrPathsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCountedShortestPathSearch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCountedShortestPathSearch(this);
		}
	}


}



class CountedShortestGroupSearchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_countedShortestGroupSearch;
    }

	SHORTEST() {
	    return this.getToken(GQLParser.SHORTEST, 0);
	};

	numberOfGroups() {
	    return this.getTypedRuleContext(NumberOfGroupsContext,0);
	};

	GROUP() {
	    return this.getToken(GQLParser.GROUP, 0);
	};

	GROUPS() {
	    return this.getToken(GQLParser.GROUPS, 0);
	};

	pathMode() {
	    return this.getTypedRuleContext(PathModeContext,0);
	};

	pathOrPaths() {
	    return this.getTypedRuleContext(PathOrPathsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCountedShortestGroupSearch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCountedShortestGroupSearch(this);
		}
	}


}



class NumberOfGroupsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_numberOfGroups;
    }

	unsignedIntegerSpecification() {
	    return this.getTypedRuleContext(UnsignedIntegerSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNumberOfGroups(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNumberOfGroups(this);
		}
	}


}



class PathPatternExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathPatternExpression;
    }

	pathTerm() {
	    return this.getTypedRuleContext(PathTermContext,0);
	};

	pathMultisetAlternation() {
	    return this.getTypedRuleContext(PathMultisetAlternationContext,0);
	};

	pathPatternUnion() {
	    return this.getTypedRuleContext(PathPatternUnionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathPatternExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathPatternExpression(this);
		}
	}


}



class PathMultisetAlternationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathMultisetAlternation;
    }

	pathTerm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathTermContext);
	    } else {
	        return this.getTypedRuleContext(PathTermContext,i);
	    }
	};

	MULTISET_ALTERNATION_OPERATOR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.MULTISET_ALTERNATION_OPERATOR);
	    } else {
	        return this.getToken(GQLParser.MULTISET_ALTERNATION_OPERATOR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathMultisetAlternation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathMultisetAlternation(this);
		}
	}


}



class PathPatternUnionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathPatternUnion;
    }

	pathTerm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathTermContext);
	    } else {
	        return this.getTypedRuleContext(PathTermContext,i);
	    }
	};

	VERTICAL_BAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.VERTICAL_BAR);
	    } else {
	        return this.getToken(GQLParser.VERTICAL_BAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathPatternUnion(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathPatternUnion(this);
		}
	}


}



class PathTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathTerm;
    }

	pathFactor = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathFactorContext);
	    } else {
	        return this.getTypedRuleContext(PathFactorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathTerm(this);
		}
	}


}



class PathFactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathFactor;
    }

	pathPrimary() {
	    return this.getTypedRuleContext(PathPrimaryContext,0);
	};

	quantifiedPathPrimary() {
	    return this.getTypedRuleContext(QuantifiedPathPrimaryContext,0);
	};

	questionedPathPrimary() {
	    return this.getTypedRuleContext(QuestionedPathPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathFactor(this);
		}
	}


}



class QuantifiedPathPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_quantifiedPathPrimary;
    }

	pathPrimary() {
	    return this.getTypedRuleContext(PathPrimaryContext,0);
	};

	graphPatternQuantifier() {
	    return this.getTypedRuleContext(GraphPatternQuantifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterQuantifiedPathPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitQuantifiedPathPrimary(this);
		}
	}


}



class QuestionedPathPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_questionedPathPrimary;
    }

	pathPrimary() {
	    return this.getTypedRuleContext(PathPrimaryContext,0);
	};

	QUESTION_MARK() {
	    return this.getToken(GQLParser.QUESTION_MARK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterQuestionedPathPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitQuestionedPathPrimary(this);
		}
	}


}



class PathPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathPrimary;
    }

	elementPattern() {
	    return this.getTypedRuleContext(ElementPatternContext,0);
	};

	parenthesizedPathPatternExpression() {
	    return this.getTypedRuleContext(ParenthesizedPathPatternExpressionContext,0);
	};

	simplifiedPathPatternExpression() {
	    return this.getTypedRuleContext(SimplifiedPathPatternExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathPrimary(this);
		}
	}


}



class ElementPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_elementPattern;
    }

	nodePattern() {
	    return this.getTypedRuleContext(NodePatternContext,0);
	};

	edgePattern() {
	    return this.getTypedRuleContext(EdgePatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterElementPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitElementPattern(this);
		}
	}


}



class NodePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nodePattern;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	elementPatternFiller() {
	    return this.getTypedRuleContext(ElementPatternFillerContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNodePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNodePattern(this);
		}
	}


}



class ElementPatternFillerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_elementPatternFiller;
    }

	elementVariableDeclaration() {
	    return this.getTypedRuleContext(ElementVariableDeclarationContext,0);
	};

	isLabelExpression() {
	    return this.getTypedRuleContext(IsLabelExpressionContext,0);
	};

	elementPatternPredicate() {
	    return this.getTypedRuleContext(ElementPatternPredicateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterElementPatternFiller(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitElementPatternFiller(this);
		}
	}


}



class ElementVariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_elementVariableDeclaration;
    }

	elementVariable() {
	    return this.getTypedRuleContext(ElementVariableContext,0);
	};

	TEMP() {
	    return this.getToken(GQLParser.TEMP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterElementVariableDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitElementVariableDeclaration(this);
		}
	}


}



class IsLabelExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_isLabelExpression;
    }

	isOrColon() {
	    return this.getTypedRuleContext(IsOrColonContext,0);
	};

	labelExpression() {
	    return this.getTypedRuleContext(LabelExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterIsLabelExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitIsLabelExpression(this);
		}
	}


}



class IsOrColonContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_isOrColon;
    }

	IS() {
	    return this.getToken(GQLParser.IS, 0);
	};

	COLON() {
	    return this.getToken(GQLParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterIsOrColon(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitIsOrColon(this);
		}
	}


}



class ElementPatternPredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_elementPatternPredicate;
    }

	elementPatternWhereClause() {
	    return this.getTypedRuleContext(ElementPatternWhereClauseContext,0);
	};

	elementPropertySpecification() {
	    return this.getTypedRuleContext(ElementPropertySpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterElementPatternPredicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitElementPatternPredicate(this);
		}
	}


}



class ElementPatternWhereClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_elementPatternWhereClause;
    }

	WHERE() {
	    return this.getToken(GQLParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterElementPatternWhereClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitElementPatternWhereClause(this);
		}
	}


}



class ElementPropertySpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_elementPropertySpecification;
    }

	LEFT_BRACE() {
	    return this.getToken(GQLParser.LEFT_BRACE, 0);
	};

	propertyKeyValuePairList() {
	    return this.getTypedRuleContext(PropertyKeyValuePairListContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GQLParser.RIGHT_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterElementPropertySpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitElementPropertySpecification(this);
		}
	}


}



class PropertyKeyValuePairListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_propertyKeyValuePairList;
    }

	propertyKeyValuePair = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PropertyKeyValuePairContext);
	    } else {
	        return this.getTypedRuleContext(PropertyKeyValuePairContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPropertyKeyValuePairList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPropertyKeyValuePairList(this);
		}
	}


}



class PropertyKeyValuePairContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_propertyKeyValuePair;
    }

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	COLON() {
	    return this.getToken(GQLParser.COLON, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPropertyKeyValuePair(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPropertyKeyValuePair(this);
		}
	}


}



class EdgePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgePattern;
    }

	fullEdgePattern() {
	    return this.getTypedRuleContext(FullEdgePatternContext,0);
	};

	abbreviatedEdgePattern() {
	    return this.getTypedRuleContext(AbbreviatedEdgePatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterEdgePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitEdgePattern(this);
		}
	}


}



class FullEdgePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fullEdgePattern;
    }

	fullEdgePointingLeft() {
	    return this.getTypedRuleContext(FullEdgePointingLeftContext,0);
	};

	fullEdgeUndirected() {
	    return this.getTypedRuleContext(FullEdgeUndirectedContext,0);
	};

	fullEdgePointingRight() {
	    return this.getTypedRuleContext(FullEdgePointingRightContext,0);
	};

	fullEdgeLeftOrUndirected() {
	    return this.getTypedRuleContext(FullEdgeLeftOrUndirectedContext,0);
	};

	fullEdgeUndirectedOrRight() {
	    return this.getTypedRuleContext(FullEdgeUndirectedOrRightContext,0);
	};

	fullEdgeLeftOrRight() {
	    return this.getTypedRuleContext(FullEdgeLeftOrRightContext,0);
	};

	fullEdgeAnyDirection() {
	    return this.getTypedRuleContext(FullEdgeAnyDirectionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFullEdgePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFullEdgePattern(this);
		}
	}


}



class FullEdgePointingLeftContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fullEdgePointingLeft;
    }

	LEFT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.LEFT_ANGLE_BRACKET, 0);
	};

	MINUS_SIGN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.MINUS_SIGN);
	    } else {
	        return this.getToken(GQLParser.MINUS_SIGN, i);
	    }
	};


	LEFT_BRACKET() {
	    return this.getToken(GQLParser.LEFT_BRACKET, 0);
	};

	elementPatternFiller() {
	    return this.getTypedRuleContext(ElementPatternFillerContext,0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(GQLParser.RIGHT_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFullEdgePointingLeft(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFullEdgePointingLeft(this);
		}
	}


}



class FullEdgeUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fullEdgeUndirected;
    }

	TILDE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.TILDE);
	    } else {
	        return this.getToken(GQLParser.TILDE, i);
	    }
	};


	LEFT_BRACKET() {
	    return this.getToken(GQLParser.LEFT_BRACKET, 0);
	};

	elementPatternFiller() {
	    return this.getTypedRuleContext(ElementPatternFillerContext,0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(GQLParser.RIGHT_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFullEdgeUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFullEdgeUndirected(this);
		}
	}


}



class FullEdgePointingRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fullEdgePointingRight;
    }

	MINUS_SIGN() {
	    return this.getToken(GQLParser.MINUS_SIGN, 0);
	};

	LEFT_BRACKET() {
	    return this.getToken(GQLParser.LEFT_BRACKET, 0);
	};

	elementPatternFiller() {
	    return this.getTypedRuleContext(ElementPatternFillerContext,0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(GQLParser.RIGHT_BRACKET, 0);
	};

	RIGHT_ARROW() {
	    return this.getToken(GQLParser.RIGHT_ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFullEdgePointingRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFullEdgePointingRight(this);
		}
	}


}



class FullEdgeLeftOrUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fullEdgeLeftOrUndirected;
    }

	LEFT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.LEFT_ANGLE_BRACKET, 0);
	};

	TILDE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.TILDE);
	    } else {
	        return this.getToken(GQLParser.TILDE, i);
	    }
	};


	LEFT_BRACKET() {
	    return this.getToken(GQLParser.LEFT_BRACKET, 0);
	};

	elementPatternFiller() {
	    return this.getTypedRuleContext(ElementPatternFillerContext,0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(GQLParser.RIGHT_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFullEdgeLeftOrUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFullEdgeLeftOrUndirected(this);
		}
	}


}



class FullEdgeUndirectedOrRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fullEdgeUndirectedOrRight;
    }

	TILDE() {
	    return this.getToken(GQLParser.TILDE, 0);
	};

	LEFT_BRACKET() {
	    return this.getToken(GQLParser.LEFT_BRACKET, 0);
	};

	elementPatternFiller() {
	    return this.getTypedRuleContext(ElementPatternFillerContext,0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(GQLParser.RIGHT_BRACKET, 0);
	};

	TILDE_RIGHT_ARROW() {
	    return this.getToken(GQLParser.TILDE_RIGHT_ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFullEdgeUndirectedOrRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFullEdgeUndirectedOrRight(this);
		}
	}


}



class FullEdgeLeftOrRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fullEdgeLeftOrRight;
    }

	LEFT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.LEFT_ANGLE_BRACKET, 0);
	};

	MINUS_SIGN() {
	    return this.getToken(GQLParser.MINUS_SIGN, 0);
	};

	LEFT_BRACKET() {
	    return this.getToken(GQLParser.LEFT_BRACKET, 0);
	};

	elementPatternFiller() {
	    return this.getTypedRuleContext(ElementPatternFillerContext,0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(GQLParser.RIGHT_BRACKET, 0);
	};

	RIGHT_ARROW() {
	    return this.getToken(GQLParser.RIGHT_ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFullEdgeLeftOrRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFullEdgeLeftOrRight(this);
		}
	}


}



class FullEdgeAnyDirectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fullEdgeAnyDirection;
    }

	MINUS_SIGN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.MINUS_SIGN);
	    } else {
	        return this.getToken(GQLParser.MINUS_SIGN, i);
	    }
	};


	LEFT_BRACKET() {
	    return this.getToken(GQLParser.LEFT_BRACKET, 0);
	};

	elementPatternFiller() {
	    return this.getTypedRuleContext(ElementPatternFillerContext,0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(GQLParser.RIGHT_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFullEdgeAnyDirection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFullEdgeAnyDirection(this);
		}
	}


}



class AbbreviatedEdgePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_abbreviatedEdgePattern;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class AbbreviatedEdgeLeftOrUndirectedContext extends AbbreviatedEdgePatternContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LEFT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.LEFT_ANGLE_BRACKET, 0);
	};

	TILDE() {
	    return this.getToken(GQLParser.TILDE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterAbbreviatedEdgeLeftOrUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitAbbreviatedEdgeLeftOrUndirected(this);
		}
	}


}

GQLParser.AbbreviatedEdgeLeftOrUndirectedContext = AbbreviatedEdgeLeftOrUndirectedContext;

class AbbreviatedEdgePointingLeftContext extends AbbreviatedEdgePatternContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LEFT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.LEFT_ANGLE_BRACKET, 0);
	};

	MINUS_SIGN() {
	    return this.getToken(GQLParser.MINUS_SIGN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterAbbreviatedEdgePointingLeft(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitAbbreviatedEdgePointingLeft(this);
		}
	}


}

GQLParser.AbbreviatedEdgePointingLeftContext = AbbreviatedEdgePointingLeftContext;

class AbbreviatedEdgePointingRightContext extends AbbreviatedEdgePatternContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	RIGHT_ARROW() {
	    return this.getToken(GQLParser.RIGHT_ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterAbbreviatedEdgePointingRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitAbbreviatedEdgePointingRight(this);
		}
	}


}

GQLParser.AbbreviatedEdgePointingRightContext = AbbreviatedEdgePointingRightContext;

class AbbreviatedEdgeUndirectedOrRightContext extends AbbreviatedEdgePatternContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TILDE_RIGHT_ARROW() {
	    return this.getToken(GQLParser.TILDE_RIGHT_ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterAbbreviatedEdgeUndirectedOrRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitAbbreviatedEdgeUndirectedOrRight(this);
		}
	}


}

GQLParser.AbbreviatedEdgeUndirectedOrRightContext = AbbreviatedEdgeUndirectedOrRightContext;

class AbbreviatedEdgeUndirectedContext extends AbbreviatedEdgePatternContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TILDE() {
	    return this.getToken(GQLParser.TILDE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterAbbreviatedEdgeUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitAbbreviatedEdgeUndirected(this);
		}
	}


}

GQLParser.AbbreviatedEdgeUndirectedContext = AbbreviatedEdgeUndirectedContext;

class AbbreviatedEdgeLeftOrRightContext extends AbbreviatedEdgePatternContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LEFT_MINUS_RIGHT() {
	    return this.getToken(GQLParser.LEFT_MINUS_RIGHT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterAbbreviatedEdgeLeftOrRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitAbbreviatedEdgeLeftOrRight(this);
		}
	}


}

GQLParser.AbbreviatedEdgeLeftOrRightContext = AbbreviatedEdgeLeftOrRightContext;

class AbbreviatedEdgeAnyDirectionContext extends AbbreviatedEdgePatternContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MINUS_SIGN() {
	    return this.getToken(GQLParser.MINUS_SIGN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterAbbreviatedEdgeAnyDirection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitAbbreviatedEdgeAnyDirection(this);
		}
	}


}

GQLParser.AbbreviatedEdgeAnyDirectionContext = AbbreviatedEdgeAnyDirectionContext;

class ParenthesizedPathPatternExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_parenthesizedPathPatternExpression;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	pathPatternExpression() {
	    return this.getTypedRuleContext(PathPatternExpressionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	subpathVariableDeclaration() {
	    return this.getTypedRuleContext(SubpathVariableDeclarationContext,0);
	};

	pathModePrefix() {
	    return this.getTypedRuleContext(PathModePrefixContext,0);
	};

	parenthesizedPathPatternWhereClause() {
	    return this.getTypedRuleContext(ParenthesizedPathPatternWhereClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterParenthesizedPathPatternExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitParenthesizedPathPatternExpression(this);
		}
	}


}



class SubpathVariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_subpathVariableDeclaration;
    }

	subpathVariable() {
	    return this.getTypedRuleContext(SubpathVariableContext,0);
	};

	EQUALS_OPERATOR() {
	    return this.getToken(GQLParser.EQUALS_OPERATOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSubpathVariableDeclaration(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSubpathVariableDeclaration(this);
		}
	}


}



class ParenthesizedPathPatternWhereClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_parenthesizedPathPatternWhereClause;
    }

	WHERE() {
	    return this.getToken(GQLParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterParenthesizedPathPatternWhereClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitParenthesizedPathPatternWhereClause(this);
		}
	}


}



class InsertGraphPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_insertGraphPattern;
    }

	insertPathPatternList() {
	    return this.getTypedRuleContext(InsertPathPatternListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterInsertGraphPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitInsertGraphPattern(this);
		}
	}


}



class InsertPathPatternListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_insertPathPatternList;
    }

	insertPathPattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InsertPathPatternContext);
	    } else {
	        return this.getTypedRuleContext(InsertPathPatternContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterInsertPathPatternList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitInsertPathPatternList(this);
		}
	}


}



class InsertPathPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_insertPathPattern;
    }

	insertNodePattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InsertNodePatternContext);
	    } else {
	        return this.getTypedRuleContext(InsertNodePatternContext,i);
	    }
	};

	insertEdgePattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InsertEdgePatternContext);
	    } else {
	        return this.getTypedRuleContext(InsertEdgePatternContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterInsertPathPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitInsertPathPattern(this);
		}
	}


}



class InsertNodePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_insertNodePattern;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	insertElementPatternFiller() {
	    return this.getTypedRuleContext(InsertElementPatternFillerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterInsertNodePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitInsertNodePattern(this);
		}
	}


}



class InsertEdgePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_insertEdgePattern;
    }

	insertEdgePointingLeft() {
	    return this.getTypedRuleContext(InsertEdgePointingLeftContext,0);
	};

	insertEdgePointingRight() {
	    return this.getTypedRuleContext(InsertEdgePointingRightContext,0);
	};

	insertEdgeUndirected() {
	    return this.getTypedRuleContext(InsertEdgeUndirectedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterInsertEdgePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitInsertEdgePattern(this);
		}
	}


}



class InsertEdgePointingLeftContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_insertEdgePointingLeft;
    }

	LEFT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.LEFT_ANGLE_BRACKET, 0);
	};

	MINUS_SIGN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.MINUS_SIGN);
	    } else {
	        return this.getToken(GQLParser.MINUS_SIGN, i);
	    }
	};


	LEFT_BRACKET() {
	    return this.getToken(GQLParser.LEFT_BRACKET, 0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(GQLParser.RIGHT_BRACKET, 0);
	};

	insertElementPatternFiller() {
	    return this.getTypedRuleContext(InsertElementPatternFillerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterInsertEdgePointingLeft(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitInsertEdgePointingLeft(this);
		}
	}


}



class InsertEdgePointingRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_insertEdgePointingRight;
    }

	MINUS_SIGN() {
	    return this.getToken(GQLParser.MINUS_SIGN, 0);
	};

	LEFT_BRACKET() {
	    return this.getToken(GQLParser.LEFT_BRACKET, 0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(GQLParser.RIGHT_BRACKET, 0);
	};

	RIGHT_ARROW() {
	    return this.getToken(GQLParser.RIGHT_ARROW, 0);
	};

	insertElementPatternFiller() {
	    return this.getTypedRuleContext(InsertElementPatternFillerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterInsertEdgePointingRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitInsertEdgePointingRight(this);
		}
	}


}



class InsertEdgeUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_insertEdgeUndirected;
    }

	TILDE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.TILDE);
	    } else {
	        return this.getToken(GQLParser.TILDE, i);
	    }
	};


	LEFT_BRACKET() {
	    return this.getToken(GQLParser.LEFT_BRACKET, 0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(GQLParser.RIGHT_BRACKET, 0);
	};

	insertElementPatternFiller() {
	    return this.getTypedRuleContext(InsertElementPatternFillerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterInsertEdgeUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitInsertEdgeUndirected(this);
		}
	}


}



class InsertElementPatternFillerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_insertElementPatternFiller;
    }

	elementVariableDeclaration() {
	    return this.getTypedRuleContext(ElementVariableDeclarationContext,0);
	};

	labelAndPropertySetSpecification() {
	    return this.getTypedRuleContext(LabelAndPropertySetSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterInsertElementPatternFiller(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitInsertElementPatternFiller(this);
		}
	}


}



class LabelAndPropertySetSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_labelAndPropertySetSpecification;
    }

	isOrColon() {
	    return this.getTypedRuleContext(IsOrColonContext,0);
	};

	labelSetSpecification() {
	    return this.getTypedRuleContext(LabelSetSpecificationContext,0);
	};

	elementPropertySpecification() {
	    return this.getTypedRuleContext(ElementPropertySpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLabelAndPropertySetSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLabelAndPropertySetSpecification(this);
		}
	}


}



class LabelExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_labelExpression;
    }

	labelTerm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LabelTermContext);
	    } else {
	        return this.getTypedRuleContext(LabelTermContext,i);
	    }
	};

	VERTICAL_BAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.VERTICAL_BAR);
	    } else {
	        return this.getToken(GQLParser.VERTICAL_BAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLabelExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLabelExpression(this);
		}
	}


}



class LabelTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_labelTerm;
    }

	labelFactor = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LabelFactorContext);
	    } else {
	        return this.getTypedRuleContext(LabelFactorContext,i);
	    }
	};

	AMPERSAND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.AMPERSAND);
	    } else {
	        return this.getToken(GQLParser.AMPERSAND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLabelTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLabelTerm(this);
		}
	}


}



class LabelFactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_labelFactor;
    }

	labelPrimary() {
	    return this.getTypedRuleContext(LabelPrimaryContext,0);
	};

	EXCLAMATION_MARK() {
	    return this.getToken(GQLParser.EXCLAMATION_MARK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLabelFactor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLabelFactor(this);
		}
	}


}



class LabelPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_labelPrimary;
    }

	labelName() {
	    return this.getTypedRuleContext(LabelNameContext,0);
	};

	wildcardLabel() {
	    return this.getTypedRuleContext(WildcardLabelContext,0);
	};

	parenthesizedLabelExpression() {
	    return this.getTypedRuleContext(ParenthesizedLabelExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLabelPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLabelPrimary(this);
		}
	}


}



class WildcardLabelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_wildcardLabel;
    }

	PERCENT() {
	    return this.getToken(GQLParser.PERCENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterWildcardLabel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitWildcardLabel(this);
		}
	}


}



class ParenthesizedLabelExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_parenthesizedLabelExpression;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	labelExpression() {
	    return this.getTypedRuleContext(LabelExpressionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterParenthesizedLabelExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitParenthesizedLabelExpression(this);
		}
	}


}



class GraphPatternQuantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphPatternQuantifier;
    }

	ASTERISK() {
	    return this.getToken(GQLParser.ASTERISK, 0);
	};

	PLUS_SIGN() {
	    return this.getToken(GQLParser.PLUS_SIGN, 0);
	};

	fixedQuantifier() {
	    return this.getTypedRuleContext(FixedQuantifierContext,0);
	};

	generalQuantifier() {
	    return this.getTypedRuleContext(GeneralQuantifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGraphPatternQuantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGraphPatternQuantifier(this);
		}
	}


}



class FixedQuantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fixedQuantifier;
    }

	LEFT_BRACE() {
	    return this.getToken(GQLParser.LEFT_BRACE, 0);
	};

	UNSIGNED_DECIMAL_INTEGER() {
	    return this.getToken(GQLParser.UNSIGNED_DECIMAL_INTEGER, 0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GQLParser.RIGHT_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFixedQuantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFixedQuantifier(this);
		}
	}


}



class GeneralQuantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_generalQuantifier;
    }

	LEFT_BRACE() {
	    return this.getToken(GQLParser.LEFT_BRACE, 0);
	};

	COMMA() {
	    return this.getToken(GQLParser.COMMA, 0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GQLParser.RIGHT_BRACE, 0);
	};

	lowerBound() {
	    return this.getTypedRuleContext(LowerBoundContext,0);
	};

	upperBound() {
	    return this.getTypedRuleContext(UpperBoundContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGeneralQuantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGeneralQuantifier(this);
		}
	}


}



class LowerBoundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_lowerBound;
    }

	UNSIGNED_DECIMAL_INTEGER() {
	    return this.getToken(GQLParser.UNSIGNED_DECIMAL_INTEGER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLowerBound(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLowerBound(this);
		}
	}


}



class UpperBoundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_upperBound;
    }

	UNSIGNED_DECIMAL_INTEGER() {
	    return this.getToken(GQLParser.UNSIGNED_DECIMAL_INTEGER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterUpperBound(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitUpperBound(this);
		}
	}


}



class SimplifiedPathPatternExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedPathPatternExpression;
    }

	simplifiedDefaultingLeft() {
	    return this.getTypedRuleContext(SimplifiedDefaultingLeftContext,0);
	};

	simplifiedDefaultingUndirected() {
	    return this.getTypedRuleContext(SimplifiedDefaultingUndirectedContext,0);
	};

	simplifiedDefaultingRight() {
	    return this.getTypedRuleContext(SimplifiedDefaultingRightContext,0);
	};

	simplifiedDefaultingLeftOrUndirected() {
	    return this.getTypedRuleContext(SimplifiedDefaultingLeftOrUndirectedContext,0);
	};

	simplifiedDefaultingUndirectedOrRight() {
	    return this.getTypedRuleContext(SimplifiedDefaultingUndirectedOrRightContext,0);
	};

	simplifiedDefaultingLeftOrRight() {
	    return this.getTypedRuleContext(SimplifiedDefaultingLeftOrRightContext,0);
	};

	simplifiedDefaultingAnyDirection() {
	    return this.getTypedRuleContext(SimplifiedDefaultingAnyDirectionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedPathPatternExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedPathPatternExpression(this);
		}
	}


}



class SimplifiedDefaultingLeftContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedDefaultingLeft;
    }

	LEFT_MINUS_SLASH() {
	    return this.getToken(GQLParser.LEFT_MINUS_SLASH, 0);
	};

	simplifiedContents() {
	    return this.getTypedRuleContext(SimplifiedContentsContext,0);
	};

	SOLIDUS() {
	    return this.getToken(GQLParser.SOLIDUS, 0);
	};

	MINUS_SIGN() {
	    return this.getToken(GQLParser.MINUS_SIGN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedDefaultingLeft(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedDefaultingLeft(this);
		}
	}


}



class SimplifiedDefaultingUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedDefaultingUndirected;
    }

	TILDE_SLASH() {
	    return this.getToken(GQLParser.TILDE_SLASH, 0);
	};

	simplifiedContents() {
	    return this.getTypedRuleContext(SimplifiedContentsContext,0);
	};

	SOLIDUS() {
	    return this.getToken(GQLParser.SOLIDUS, 0);
	};

	TILDE() {
	    return this.getToken(GQLParser.TILDE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedDefaultingUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedDefaultingUndirected(this);
		}
	}


}



class SimplifiedDefaultingRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedDefaultingRight;
    }

	MINUS_SLASH() {
	    return this.getToken(GQLParser.MINUS_SLASH, 0);
	};

	simplifiedContents() {
	    return this.getTypedRuleContext(SimplifiedContentsContext,0);
	};

	SLASH_MINUS_RIGHT() {
	    return this.getToken(GQLParser.SLASH_MINUS_RIGHT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedDefaultingRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedDefaultingRight(this);
		}
	}


}



class SimplifiedDefaultingLeftOrUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedDefaultingLeftOrUndirected;
    }

	LEFT_TILDE_SLASH() {
	    return this.getToken(GQLParser.LEFT_TILDE_SLASH, 0);
	};

	simplifiedContents() {
	    return this.getTypedRuleContext(SimplifiedContentsContext,0);
	};

	SOLIDUS() {
	    return this.getToken(GQLParser.SOLIDUS, 0);
	};

	TILDE() {
	    return this.getToken(GQLParser.TILDE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedDefaultingLeftOrUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedDefaultingLeftOrUndirected(this);
		}
	}


}



class SimplifiedDefaultingUndirectedOrRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedDefaultingUndirectedOrRight;
    }

	TILDE_SLASH() {
	    return this.getToken(GQLParser.TILDE_SLASH, 0);
	};

	simplifiedContents() {
	    return this.getTypedRuleContext(SimplifiedContentsContext,0);
	};

	SLASH_TILDE_RIGHT() {
	    return this.getToken(GQLParser.SLASH_TILDE_RIGHT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedDefaultingUndirectedOrRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedDefaultingUndirectedOrRight(this);
		}
	}


}



class SimplifiedDefaultingLeftOrRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedDefaultingLeftOrRight;
    }

	LEFT_MINUS_SLASH() {
	    return this.getToken(GQLParser.LEFT_MINUS_SLASH, 0);
	};

	simplifiedContents() {
	    return this.getTypedRuleContext(SimplifiedContentsContext,0);
	};

	SLASH_MINUS_RIGHT() {
	    return this.getToken(GQLParser.SLASH_MINUS_RIGHT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedDefaultingLeftOrRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedDefaultingLeftOrRight(this);
		}
	}


}



class SimplifiedDefaultingAnyDirectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedDefaultingAnyDirection;
    }

	MINUS_SLASH() {
	    return this.getToken(GQLParser.MINUS_SLASH, 0);
	};

	simplifiedContents() {
	    return this.getTypedRuleContext(SimplifiedContentsContext,0);
	};

	SOLIDUS() {
	    return this.getToken(GQLParser.SOLIDUS, 0);
	};

	MINUS_SIGN() {
	    return this.getToken(GQLParser.MINUS_SIGN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedDefaultingAnyDirection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedDefaultingAnyDirection(this);
		}
	}


}



class SimplifiedContentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedContents;
    }

	simplifiedTerm() {
	    return this.getTypedRuleContext(SimplifiedTermContext,0);
	};

	simplifiedPathUnion() {
	    return this.getTypedRuleContext(SimplifiedPathUnionContext,0);
	};

	simplifiedMultisetAlternation() {
	    return this.getTypedRuleContext(SimplifiedMultisetAlternationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedContents(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedContents(this);
		}
	}


}



class SimplifiedPathUnionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedPathUnion;
    }

	simplifiedTerm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimplifiedTermContext);
	    } else {
	        return this.getTypedRuleContext(SimplifiedTermContext,i);
	    }
	};

	VERTICAL_BAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.VERTICAL_BAR);
	    } else {
	        return this.getToken(GQLParser.VERTICAL_BAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedPathUnion(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedPathUnion(this);
		}
	}


}



class SimplifiedMultisetAlternationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedMultisetAlternation;
    }

	simplifiedTerm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimplifiedTermContext);
	    } else {
	        return this.getTypedRuleContext(SimplifiedTermContext,i);
	    }
	};

	MULTISET_ALTERNATION_OPERATOR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.MULTISET_ALTERNATION_OPERATOR);
	    } else {
	        return this.getToken(GQLParser.MULTISET_ALTERNATION_OPERATOR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedMultisetAlternation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedMultisetAlternation(this);
		}
	}


}



class SimplifiedTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedTerm;
    }

	simplifiedFactorLow = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimplifiedFactorLowContext);
	    } else {
	        return this.getTypedRuleContext(SimplifiedFactorLowContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedTerm(this);
		}
	}


}



class SimplifiedFactorLowContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedFactorLow;
    }

	simplifiedFactorHigh = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimplifiedFactorHighContext);
	    } else {
	        return this.getTypedRuleContext(SimplifiedFactorHighContext,i);
	    }
	};

	AMPERSAND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.AMPERSAND);
	    } else {
	        return this.getToken(GQLParser.AMPERSAND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedFactorLow(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedFactorLow(this);
		}
	}


}



class SimplifiedFactorHighContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedFactorHigh;
    }

	simplifiedTertiary() {
	    return this.getTypedRuleContext(SimplifiedTertiaryContext,0);
	};

	simplifiedQuantified() {
	    return this.getTypedRuleContext(SimplifiedQuantifiedContext,0);
	};

	simplifiedQuestioned() {
	    return this.getTypedRuleContext(SimplifiedQuestionedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedFactorHigh(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedFactorHigh(this);
		}
	}


}



class SimplifiedQuantifiedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedQuantified;
    }

	simplifiedTertiary() {
	    return this.getTypedRuleContext(SimplifiedTertiaryContext,0);
	};

	graphPatternQuantifier() {
	    return this.getTypedRuleContext(GraphPatternQuantifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedQuantified(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedQuantified(this);
		}
	}


}



class SimplifiedQuestionedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedQuestioned;
    }

	simplifiedTertiary() {
	    return this.getTypedRuleContext(SimplifiedTertiaryContext,0);
	};

	QUESTION_MARK() {
	    return this.getToken(GQLParser.QUESTION_MARK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedQuestioned(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedQuestioned(this);
		}
	}


}



class SimplifiedTertiaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedTertiary;
    }

	simplifiedDirectionOverride() {
	    return this.getTypedRuleContext(SimplifiedDirectionOverrideContext,0);
	};

	simplifiedSecondary() {
	    return this.getTypedRuleContext(SimplifiedSecondaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedTertiary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedTertiary(this);
		}
	}


}



class SimplifiedDirectionOverrideContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedDirectionOverride;
    }

	simplifiedOverrideLeft() {
	    return this.getTypedRuleContext(SimplifiedOverrideLeftContext,0);
	};

	simplifiedOverrideUndirected() {
	    return this.getTypedRuleContext(SimplifiedOverrideUndirectedContext,0);
	};

	simplifiedOverrideRight() {
	    return this.getTypedRuleContext(SimplifiedOverrideRightContext,0);
	};

	simplifiedOverrideLeftOrUndirected() {
	    return this.getTypedRuleContext(SimplifiedOverrideLeftOrUndirectedContext,0);
	};

	simplifiedOverrideUndirectedOrRight() {
	    return this.getTypedRuleContext(SimplifiedOverrideUndirectedOrRightContext,0);
	};

	simplifiedOverrideLeftOrRight() {
	    return this.getTypedRuleContext(SimplifiedOverrideLeftOrRightContext,0);
	};

	simplifiedOverrideAnyDirection() {
	    return this.getTypedRuleContext(SimplifiedOverrideAnyDirectionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedDirectionOverride(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedDirectionOverride(this);
		}
	}


}



class SimplifiedOverrideLeftContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedOverrideLeft;
    }

	LEFT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.LEFT_ANGLE_BRACKET, 0);
	};

	simplifiedSecondary() {
	    return this.getTypedRuleContext(SimplifiedSecondaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedOverrideLeft(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedOverrideLeft(this);
		}
	}


}



class SimplifiedOverrideUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedOverrideUndirected;
    }

	TILDE() {
	    return this.getToken(GQLParser.TILDE, 0);
	};

	simplifiedSecondary() {
	    return this.getTypedRuleContext(SimplifiedSecondaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedOverrideUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedOverrideUndirected(this);
		}
	}


}



class SimplifiedOverrideRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedOverrideRight;
    }

	simplifiedSecondary() {
	    return this.getTypedRuleContext(SimplifiedSecondaryContext,0);
	};

	RIGHT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.RIGHT_ANGLE_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedOverrideRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedOverrideRight(this);
		}
	}


}



class SimplifiedOverrideLeftOrUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedOverrideLeftOrUndirected;
    }

	LEFT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.LEFT_ANGLE_BRACKET, 0);
	};

	TILDE() {
	    return this.getToken(GQLParser.TILDE, 0);
	};

	simplifiedSecondary() {
	    return this.getTypedRuleContext(SimplifiedSecondaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedOverrideLeftOrUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedOverrideLeftOrUndirected(this);
		}
	}


}



class SimplifiedOverrideUndirectedOrRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedOverrideUndirectedOrRight;
    }

	TILDE() {
	    return this.getToken(GQLParser.TILDE, 0);
	};

	simplifiedSecondary() {
	    return this.getTypedRuleContext(SimplifiedSecondaryContext,0);
	};

	RIGHT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.RIGHT_ANGLE_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedOverrideUndirectedOrRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedOverrideUndirectedOrRight(this);
		}
	}


}



class SimplifiedOverrideLeftOrRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedOverrideLeftOrRight;
    }

	LEFT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.LEFT_ANGLE_BRACKET, 0);
	};

	simplifiedSecondary() {
	    return this.getTypedRuleContext(SimplifiedSecondaryContext,0);
	};

	RIGHT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.RIGHT_ANGLE_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedOverrideLeftOrRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedOverrideLeftOrRight(this);
		}
	}


}



class SimplifiedOverrideAnyDirectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedOverrideAnyDirection;
    }

	MINUS_SIGN() {
	    return this.getToken(GQLParser.MINUS_SIGN, 0);
	};

	simplifiedSecondary() {
	    return this.getTypedRuleContext(SimplifiedSecondaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedOverrideAnyDirection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedOverrideAnyDirection(this);
		}
	}


}



class SimplifiedSecondaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedSecondary;
    }

	simplifiedPrimary() {
	    return this.getTypedRuleContext(SimplifiedPrimaryContext,0);
	};

	simplifiedNegation() {
	    return this.getTypedRuleContext(SimplifiedNegationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedSecondary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedSecondary(this);
		}
	}


}



class SimplifiedNegationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedNegation;
    }

	EXCLAMATION_MARK() {
	    return this.getToken(GQLParser.EXCLAMATION_MARK, 0);
	};

	simplifiedPrimary() {
	    return this.getTypedRuleContext(SimplifiedPrimaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedNegation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedNegation(this);
		}
	}


}



class SimplifiedPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simplifiedPrimary;
    }

	labelName() {
	    return this.getTypedRuleContext(LabelNameContext,0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	simplifiedContents() {
	    return this.getTypedRuleContext(SimplifiedContentsContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimplifiedPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimplifiedPrimary(this);
		}
	}


}



class WhereClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_whereClause;
    }

	WHERE() {
	    return this.getToken(GQLParser.WHERE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterWhereClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitWhereClause(this);
		}
	}


}



class YieldClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_yieldClause;
    }

	YIELD() {
	    return this.getToken(GQLParser.YIELD, 0);
	};

	yieldItemList() {
	    return this.getTypedRuleContext(YieldItemListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterYieldClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitYieldClause(this);
		}
	}


}



class YieldItemListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_yieldItemList;
    }

	yieldItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(YieldItemContext);
	    } else {
	        return this.getTypedRuleContext(YieldItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterYieldItemList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitYieldItemList(this);
		}
	}


}



class YieldItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_yieldItem;
    }

	yieldItemName() {
	    return this.getTypedRuleContext(YieldItemNameContext,0);
	};

	yieldItemAlias() {
	    return this.getTypedRuleContext(YieldItemAliasContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterYieldItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitYieldItem(this);
		}
	}


}



class YieldItemNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_yieldItemName;
    }

	fieldName() {
	    return this.getTypedRuleContext(FieldNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterYieldItemName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitYieldItemName(this);
		}
	}


}



class YieldItemAliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_yieldItemAlias;
    }

	AS() {
	    return this.getToken(GQLParser.AS, 0);
	};

	bindingVariable() {
	    return this.getTypedRuleContext(BindingVariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterYieldItemAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitYieldItemAlias(this);
		}
	}


}



class GroupByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_groupByClause;
    }

	GROUP() {
	    return this.getToken(GQLParser.GROUP, 0);
	};

	BY() {
	    return this.getToken(GQLParser.BY, 0);
	};

	groupingElementList() {
	    return this.getTypedRuleContext(GroupingElementListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGroupByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGroupByClause(this);
		}
	}


}



class GroupingElementListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_groupingElementList;
    }

	groupingElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GroupingElementContext);
	    } else {
	        return this.getTypedRuleContext(GroupingElementContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(GQLParser.COMMA, 0);
	};

	emptyGroupingSet() {
	    return this.getTypedRuleContext(EmptyGroupingSetContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGroupingElementList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGroupingElementList(this);
		}
	}


}



class GroupingElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_groupingElement;
    }

	bindingVariableReference() {
	    return this.getTypedRuleContext(BindingVariableReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGroupingElement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGroupingElement(this);
		}
	}


}



class EmptyGroupingSetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_emptyGroupingSet;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterEmptyGroupingSet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitEmptyGroupingSet(this);
		}
	}


}



class OrderByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_orderByClause;
    }

	ORDER() {
	    return this.getToken(GQLParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(GQLParser.BY, 0);
	};

	sortSpecificationList() {
	    return this.getTypedRuleContext(SortSpecificationListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterOrderByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitOrderByClause(this);
		}
	}


}



class AggregateFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_aggregateFunction;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class GqlCountAllFunctionContext extends AggregateFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	COUNT() {
	    return this.getToken(GQLParser.COUNT, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	ASTERISK() {
	    return this.getToken(GQLParser.ASTERISK, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlCountAllFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlCountAllFunction(this);
		}
	}


}

GQLParser.GqlCountAllFunctionContext = GqlCountAllFunctionContext;

class GqlGeneralSetFunctionContext extends AggregateFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	generalSetFunctionType() {
	    return this.getTypedRuleContext(GeneralSetFunctionTypeContext,0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	setQuantifier() {
	    return this.getTypedRuleContext(SetQuantifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlGeneralSetFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlGeneralSetFunction(this);
		}
	}


}

GQLParser.GqlGeneralSetFunctionContext = GqlGeneralSetFunctionContext;

class GqlBinarySetFunctionContext extends AggregateFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        this.lhs = null;;
        this.rhs = null;;
        super.copyFrom(ctx);
    }

	binarySetFunctionType() {
	    return this.getTypedRuleContext(BinarySetFunctionTypeContext,0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	COMMA() {
	    return this.getToken(GQLParser.COMMA, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	setQuantifier() {
	    return this.getTypedRuleContext(SetQuantifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlBinarySetFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlBinarySetFunction(this);
		}
	}


}

GQLParser.GqlBinarySetFunctionContext = GqlBinarySetFunctionContext;

class GeneralSetFunctionTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_generalSetFunctionType;
    }

	AVG() {
	    return this.getToken(GQLParser.AVG, 0);
	};

	COUNT() {
	    return this.getToken(GQLParser.COUNT, 0);
	};

	MAX() {
	    return this.getToken(GQLParser.MAX, 0);
	};

	MIN() {
	    return this.getToken(GQLParser.MIN, 0);
	};

	SUM() {
	    return this.getToken(GQLParser.SUM, 0);
	};

	COLLECT() {
	    return this.getToken(GQLParser.COLLECT, 0);
	};

	STDDEV_SAMP() {
	    return this.getToken(GQLParser.STDDEV_SAMP, 0);
	};

	STDDEV_POP() {
	    return this.getToken(GQLParser.STDDEV_POP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGeneralSetFunctionType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGeneralSetFunctionType(this);
		}
	}


}



class SetQuantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_setQuantifier;
    }

	DISTINCT() {
	    return this.getToken(GQLParser.DISTINCT, 0);
	};

	ALL() {
	    return this.getToken(GQLParser.ALL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSetQuantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSetQuantifier(this);
		}
	}


}



class BinarySetFunctionTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_binarySetFunctionType;
    }

	PERCENTILE_CONT() {
	    return this.getToken(GQLParser.PERCENTILE_CONT, 0);
	};

	PERCENTILE_DISC() {
	    return this.getToken(GQLParser.PERCENTILE_DISC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterBinarySetFunctionType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitBinarySetFunctionType(this);
		}
	}


}



class SortSpecificationListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sortSpecificationList;
    }

	sortSpecification = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SortSpecificationContext);
	    } else {
	        return this.getTypedRuleContext(SortSpecificationContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSortSpecificationList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSortSpecificationList(this);
		}
	}


}



class SortSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sortSpecification;
    }

	sortKey() {
	    return this.getTypedRuleContext(SortKeyContext,0);
	};

	orderingSpecification() {
	    return this.getTypedRuleContext(OrderingSpecificationContext,0);
	};

	nullOrdering() {
	    return this.getTypedRuleContext(NullOrderingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSortSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSortSpecification(this);
		}
	}


}



class SortKeyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sortKey;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSortKey(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSortKey(this);
		}
	}


}



class OrderingSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_orderingSpecification;
    }

	ASC() {
	    return this.getToken(GQLParser.ASC, 0);
	};

	ASCENDING() {
	    return this.getToken(GQLParser.ASCENDING, 0);
	};

	DESC() {
	    return this.getToken(GQLParser.DESC, 0);
	};

	DESCENDING() {
	    return this.getToken(GQLParser.DESCENDING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterOrderingSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitOrderingSpecification(this);
		}
	}


}



class NullOrderingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nullOrdering;
    }

	NULLS() {
	    return this.getToken(GQLParser.NULLS, 0);
	};

	FIRST() {
	    return this.getToken(GQLParser.FIRST, 0);
	};

	LAST() {
	    return this.getToken(GQLParser.LAST, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNullOrdering(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNullOrdering(this);
		}
	}


}



class LimitClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_limitClause;
    }

	LIMIT() {
	    return this.getToken(GQLParser.LIMIT, 0);
	};

	unsignedIntegerSpecification() {
	    return this.getTypedRuleContext(UnsignedIntegerSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLimitClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLimitClause(this);
		}
	}


}



class OffsetClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_offsetClause;
    }

	offsetSynonym() {
	    return this.getTypedRuleContext(OffsetSynonymContext,0);
	};

	unsignedIntegerSpecification() {
	    return this.getTypedRuleContext(UnsignedIntegerSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterOffsetClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitOffsetClause(this);
		}
	}


}



class OffsetSynonymContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_offsetSynonym;
    }

	OFFSET() {
	    return this.getToken(GQLParser.OFFSET, 0);
	};

	SKIP_() {
	    return this.getToken(GQLParser.SKIP_, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterOffsetSynonym(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitOffsetSynonym(this);
		}
	}


}



class NestedGraphTypeSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nestedGraphTypeSpecification;
    }

	LEFT_BRACE() {
	    return this.getToken(GQLParser.LEFT_BRACE, 0);
	};

	graphTypeSpecificationBody() {
	    return this.getTypedRuleContext(GraphTypeSpecificationBodyContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GQLParser.RIGHT_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNestedGraphTypeSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNestedGraphTypeSpecification(this);
		}
	}


}



class GraphTypeSpecificationBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphTypeSpecificationBody;
    }

	elementTypeDefinitionList() {
	    return this.getTypedRuleContext(ElementTypeDefinitionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGraphTypeSpecificationBody(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGraphTypeSpecificationBody(this);
		}
	}


}



class ElementTypeDefinitionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_elementTypeDefinitionList;
    }

	elementTypeDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementTypeDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(ElementTypeDefinitionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterElementTypeDefinitionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitElementTypeDefinitionList(this);
		}
	}


}



class ElementTypeDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_elementTypeDefinition;
    }

	nodeTypeDefinition() {
	    return this.getTypedRuleContext(NodeTypeDefinitionContext,0);
	};

	edgeTypeDefinition() {
	    return this.getTypedRuleContext(EdgeTypeDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterElementTypeDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitElementTypeDefinition(this);
		}
	}


}



class NodeTypeDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nodeTypeDefinition;
    }

	nodeTypePattern() {
	    return this.getTypedRuleContext(NodeTypePatternContext,0);
	};

	NODE_SYNONYM() {
	    return this.getToken(GQLParser.NODE_SYNONYM, 0);
	};

	nodeTypePhrase() {
	    return this.getTypedRuleContext(NodeTypePhraseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNodeTypeDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNodeTypeDefinition(this);
		}
	}


}



class NodeTypePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nodeTypePattern;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	nodeTypeName() {
	    return this.getTypedRuleContext(NodeTypeNameContext,0);
	};

	nodeTypeFiller() {
	    return this.getTypedRuleContext(NodeTypeFillerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNodeTypePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNodeTypePattern(this);
		}
	}


}



class NodeTypePhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nodeTypePhrase;
    }

	nodeTypeName() {
	    return this.getTypedRuleContext(NodeTypeNameContext,0);
	};

	TYPE() {
	    return this.getToken(GQLParser.TYPE, 0);
	};

	nodeTypeFiller() {
	    return this.getTypedRuleContext(NodeTypeFillerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNodeTypePhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNodeTypePhrase(this);
		}
	}


}



class NodeTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nodeTypeName;
    }

	elementTypeName() {
	    return this.getTypedRuleContext(ElementTypeNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNodeTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNodeTypeName(this);
		}
	}


}



class NodeTypeFillerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nodeTypeFiller;
    }

	nodeTypeLabelSetDefinition() {
	    return this.getTypedRuleContext(NodeTypeLabelSetDefinitionContext,0);
	};

	nodeTypePropertyTypeSetDefinition() {
	    return this.getTypedRuleContext(NodeTypePropertyTypeSetDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNodeTypeFiller(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNodeTypeFiller(this);
		}
	}


}



class NodeTypeLabelSetDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nodeTypeLabelSetDefinition;
    }

	labelSetDefinition() {
	    return this.getTypedRuleContext(LabelSetDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNodeTypeLabelSetDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNodeTypeLabelSetDefinition(this);
		}
	}


}



class NodeTypePropertyTypeSetDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nodeTypePropertyTypeSetDefinition;
    }

	propertyTypeSetDefinition() {
	    return this.getTypedRuleContext(PropertyTypeSetDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNodeTypePropertyTypeSetDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNodeTypePropertyTypeSetDefinition(this);
		}
	}


}



class EdgeTypeDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgeTypeDefinition;
    }

	edgeTypePattern() {
	    return this.getTypedRuleContext(EdgeTypePatternContext,0);
	};

	EDGE_SYNONYM() {
	    return this.getToken(GQLParser.EDGE_SYNONYM, 0);
	};

	edgeTypePhrase() {
	    return this.getTypedRuleContext(EdgeTypePhraseContext,0);
	};

	edgeKind() {
	    return this.getTypedRuleContext(EdgeKindContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterEdgeTypeDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitEdgeTypeDefinition(this);
		}
	}


}



class EdgeTypePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgeTypePattern;
    }

	fullEdgeTypePattern() {
	    return this.getTypedRuleContext(FullEdgeTypePatternContext,0);
	};

	abbreviatedEdgeTypePattern() {
	    return this.getTypedRuleContext(AbbreviatedEdgeTypePatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterEdgeTypePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitEdgeTypePattern(this);
		}
	}


}



class EdgeTypePhraseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgeTypePhrase;
    }

	edgeTypeName() {
	    return this.getTypedRuleContext(EdgeTypeNameContext,0);
	};

	TYPE() {
	    return this.getToken(GQLParser.TYPE, 0);
	};

	edgeTypeFiller() {
	    return this.getTypedRuleContext(EdgeTypeFillerContext,0);
	};

	endpointDefinition() {
	    return this.getTypedRuleContext(EndpointDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterEdgeTypePhrase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitEdgeTypePhrase(this);
		}
	}


}



class EdgeTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgeTypeName;
    }

	elementTypeName() {
	    return this.getTypedRuleContext(ElementTypeNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterEdgeTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitEdgeTypeName(this);
		}
	}


}



class EdgeTypeFillerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgeTypeFiller;
    }

	edgeTypeLabelSetDefinition() {
	    return this.getTypedRuleContext(EdgeTypeLabelSetDefinitionContext,0);
	};

	edgeTypePropertyTypeSetDefinition() {
	    return this.getTypedRuleContext(EdgeTypePropertyTypeSetDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterEdgeTypeFiller(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitEdgeTypeFiller(this);
		}
	}


}



class EdgeTypeLabelSetDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgeTypeLabelSetDefinition;
    }

	labelSetDefinition() {
	    return this.getTypedRuleContext(LabelSetDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterEdgeTypeLabelSetDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitEdgeTypeLabelSetDefinition(this);
		}
	}


}



class EdgeTypePropertyTypeSetDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgeTypePropertyTypeSetDefinition;
    }

	propertyTypeSetDefinition() {
	    return this.getTypedRuleContext(PropertyTypeSetDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterEdgeTypePropertyTypeSetDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitEdgeTypePropertyTypeSetDefinition(this);
		}
	}


}



class FullEdgeTypePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fullEdgeTypePattern;
    }

	fullEdgeTypePatternPointingRight() {
	    return this.getTypedRuleContext(FullEdgeTypePatternPointingRightContext,0);
	};

	fullEdgeTypePatternPointingLeft() {
	    return this.getTypedRuleContext(FullEdgeTypePatternPointingLeftContext,0);
	};

	fullEdgeTypePatternUndirected() {
	    return this.getTypedRuleContext(FullEdgeTypePatternUndirectedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFullEdgeTypePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFullEdgeTypePattern(this);
		}
	}


}



class FullEdgeTypePatternPointingRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fullEdgeTypePatternPointingRight;
    }

	sourceNodeTypeReference() {
	    return this.getTypedRuleContext(SourceNodeTypeReferenceContext,0);
	};

	arcTypePointingRight() {
	    return this.getTypedRuleContext(ArcTypePointingRightContext,0);
	};

	destinationNodeTypeReference() {
	    return this.getTypedRuleContext(DestinationNodeTypeReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFullEdgeTypePatternPointingRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFullEdgeTypePatternPointingRight(this);
		}
	}


}



class FullEdgeTypePatternPointingLeftContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fullEdgeTypePatternPointingLeft;
    }

	destinationNodeTypeReference() {
	    return this.getTypedRuleContext(DestinationNodeTypeReferenceContext,0);
	};

	arcTypePointingLeft() {
	    return this.getTypedRuleContext(ArcTypePointingLeftContext,0);
	};

	sourceNodeTypeReference() {
	    return this.getTypedRuleContext(SourceNodeTypeReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFullEdgeTypePatternPointingLeft(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFullEdgeTypePatternPointingLeft(this);
		}
	}


}



class FullEdgeTypePatternUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fullEdgeTypePatternUndirected;
    }

	sourceNodeTypeReference() {
	    return this.getTypedRuleContext(SourceNodeTypeReferenceContext,0);
	};

	arcTypeUndirected() {
	    return this.getTypedRuleContext(ArcTypeUndirectedContext,0);
	};

	destinationNodeTypeReference() {
	    return this.getTypedRuleContext(DestinationNodeTypeReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFullEdgeTypePatternUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFullEdgeTypePatternUndirected(this);
		}
	}


}



class ArcTypePointingRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_arcTypePointingRight;
    }

	MINUS_SIGN() {
	    return this.getToken(GQLParser.MINUS_SIGN, 0);
	};

	LEFT_BRACKET() {
	    return this.getToken(GQLParser.LEFT_BRACKET, 0);
	};

	arcTypeFiller() {
	    return this.getTypedRuleContext(ArcTypeFillerContext,0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(GQLParser.RIGHT_BRACKET, 0);
	};

	RIGHT_ARROW() {
	    return this.getToken(GQLParser.RIGHT_ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterArcTypePointingRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitArcTypePointingRight(this);
		}
	}


}



class ArcTypePointingLeftContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_arcTypePointingLeft;
    }

	LEFT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.LEFT_ANGLE_BRACKET, 0);
	};

	MINUS_SIGN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.MINUS_SIGN);
	    } else {
	        return this.getToken(GQLParser.MINUS_SIGN, i);
	    }
	};


	LEFT_BRACKET() {
	    return this.getToken(GQLParser.LEFT_BRACKET, 0);
	};

	arcTypeFiller() {
	    return this.getTypedRuleContext(ArcTypeFillerContext,0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(GQLParser.RIGHT_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterArcTypePointingLeft(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitArcTypePointingLeft(this);
		}
	}


}



class ArcTypeUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_arcTypeUndirected;
    }

	TILDE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.TILDE);
	    } else {
	        return this.getToken(GQLParser.TILDE, i);
	    }
	};


	LEFT_BRACKET() {
	    return this.getToken(GQLParser.LEFT_BRACKET, 0);
	};

	arcTypeFiller() {
	    return this.getTypedRuleContext(ArcTypeFillerContext,0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(GQLParser.RIGHT_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterArcTypeUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitArcTypeUndirected(this);
		}
	}


}



class ArcTypeFillerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_arcTypeFiller;
    }

	edgeTypeName() {
	    return this.getTypedRuleContext(EdgeTypeNameContext,0);
	};

	edgeTypeFiller() {
	    return this.getTypedRuleContext(EdgeTypeFillerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterArcTypeFiller(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitArcTypeFiller(this);
		}
	}


}



class AbbreviatedEdgeTypePatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_abbreviatedEdgeTypePattern;
    }

	abbreviatedEdgeTypePatternPointingRight() {
	    return this.getTypedRuleContext(AbbreviatedEdgeTypePatternPointingRightContext,0);
	};

	abbreviatedEdgeTypePatternPointingLeft() {
	    return this.getTypedRuleContext(AbbreviatedEdgeTypePatternPointingLeftContext,0);
	};

	abbreviatedEdgeTypePatternUndirected() {
	    return this.getTypedRuleContext(AbbreviatedEdgeTypePatternUndirectedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterAbbreviatedEdgeTypePattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitAbbreviatedEdgeTypePattern(this);
		}
	}


}



class AbbreviatedEdgeTypePatternPointingRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_abbreviatedEdgeTypePatternPointingRight;
    }

	sourceNodeTypeReference() {
	    return this.getTypedRuleContext(SourceNodeTypeReferenceContext,0);
	};

	RIGHT_ARROW() {
	    return this.getToken(GQLParser.RIGHT_ARROW, 0);
	};

	destinationNodeTypeReference() {
	    return this.getTypedRuleContext(DestinationNodeTypeReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterAbbreviatedEdgeTypePatternPointingRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitAbbreviatedEdgeTypePatternPointingRight(this);
		}
	}


}



class AbbreviatedEdgeTypePatternPointingLeftContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_abbreviatedEdgeTypePatternPointingLeft;
    }

	destinationNodeTypeReference() {
	    return this.getTypedRuleContext(DestinationNodeTypeReferenceContext,0);
	};

	LEFT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.LEFT_ANGLE_BRACKET, 0);
	};

	MINUS_SIGN() {
	    return this.getToken(GQLParser.MINUS_SIGN, 0);
	};

	sourceNodeTypeReference() {
	    return this.getTypedRuleContext(SourceNodeTypeReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterAbbreviatedEdgeTypePatternPointingLeft(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitAbbreviatedEdgeTypePatternPointingLeft(this);
		}
	}


}



class AbbreviatedEdgeTypePatternUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_abbreviatedEdgeTypePatternUndirected;
    }

	sourceNodeTypeReference() {
	    return this.getTypedRuleContext(SourceNodeTypeReferenceContext,0);
	};

	TILDE() {
	    return this.getToken(GQLParser.TILDE, 0);
	};

	destinationNodeTypeReference() {
	    return this.getTypedRuleContext(DestinationNodeTypeReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterAbbreviatedEdgeTypePatternUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitAbbreviatedEdgeTypePatternUndirected(this);
		}
	}


}



class NodeTypeReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nodeTypeReference;
    }

	sourceNodeTypeReference() {
	    return this.getTypedRuleContext(SourceNodeTypeReferenceContext,0);
	};

	destinationNodeTypeReference() {
	    return this.getTypedRuleContext(DestinationNodeTypeReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNodeTypeReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNodeTypeReference(this);
		}
	}


}



class SourceNodeTypeReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sourceNodeTypeReference;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	sourceNodeTypeName() {
	    return this.getTypedRuleContext(SourceNodeTypeNameContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	nodeTypeFiller() {
	    return this.getTypedRuleContext(NodeTypeFillerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSourceNodeTypeReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSourceNodeTypeReference(this);
		}
	}


}



class DestinationNodeTypeReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_destinationNodeTypeReference;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	destinationNodeTypeName() {
	    return this.getTypedRuleContext(DestinationNodeTypeNameContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	nodeTypeFiller() {
	    return this.getTypedRuleContext(NodeTypeFillerContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDestinationNodeTypeReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDestinationNodeTypeReference(this);
		}
	}


}



class EdgeKindContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgeKind;
    }

	DIRECTED() {
	    return this.getToken(GQLParser.DIRECTED, 0);
	};

	UNDIRECTED() {
	    return this.getToken(GQLParser.UNDIRECTED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterEdgeKind(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitEdgeKind(this);
		}
	}


}



class EndpointDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_endpointDefinition;
    }

	CONNECTING() {
	    return this.getToken(GQLParser.CONNECTING, 0);
	};

	endpointPairDefinition() {
	    return this.getTypedRuleContext(EndpointPairDefinitionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterEndpointDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitEndpointDefinition(this);
		}
	}


}



class EndpointPairDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_endpointPairDefinition;
    }

	endpointPairDefinitionPointingRight() {
	    return this.getTypedRuleContext(EndpointPairDefinitionPointingRightContext,0);
	};

	endpointPairDefinitionPointingLeft() {
	    return this.getTypedRuleContext(EndpointPairDefinitionPointingLeftContext,0);
	};

	endpointPairDefinitionUndirected() {
	    return this.getTypedRuleContext(EndpointPairDefinitionUndirectedContext,0);
	};

	abbreviatedEdgeTypePattern() {
	    return this.getTypedRuleContext(AbbreviatedEdgeTypePatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterEndpointPairDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitEndpointPairDefinition(this);
		}
	}


}



class EndpointPairDefinitionPointingRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_endpointPairDefinitionPointingRight;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	sourceNodeTypeName() {
	    return this.getTypedRuleContext(SourceNodeTypeNameContext,0);
	};

	connectorPointingRight() {
	    return this.getTypedRuleContext(ConnectorPointingRightContext,0);
	};

	destinationNodeTypeName() {
	    return this.getTypedRuleContext(DestinationNodeTypeNameContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterEndpointPairDefinitionPointingRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitEndpointPairDefinitionPointingRight(this);
		}
	}


}



class EndpointPairDefinitionPointingLeftContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_endpointPairDefinitionPointingLeft;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	destinationNodeTypeName() {
	    return this.getTypedRuleContext(DestinationNodeTypeNameContext,0);
	};

	LEFT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.LEFT_ANGLE_BRACKET, 0);
	};

	MINUS_SIGN() {
	    return this.getToken(GQLParser.MINUS_SIGN, 0);
	};

	sourceNodeTypeName() {
	    return this.getTypedRuleContext(SourceNodeTypeNameContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterEndpointPairDefinitionPointingLeft(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitEndpointPairDefinitionPointingLeft(this);
		}
	}


}



class EndpointPairDefinitionUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_endpointPairDefinitionUndirected;
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	sourceNodeTypeName() {
	    return this.getTypedRuleContext(SourceNodeTypeNameContext,0);
	};

	connectorUndirected() {
	    return this.getTypedRuleContext(ConnectorUndirectedContext,0);
	};

	destinationNodeTypeName() {
	    return this.getTypedRuleContext(DestinationNodeTypeNameContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterEndpointPairDefinitionUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitEndpointPairDefinitionUndirected(this);
		}
	}


}



class ConnectorPointingRightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_connectorPointingRight;
    }

	TO() {
	    return this.getToken(GQLParser.TO, 0);
	};

	RIGHT_ARROW() {
	    return this.getToken(GQLParser.RIGHT_ARROW, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterConnectorPointingRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitConnectorPointingRight(this);
		}
	}


}



class ConnectorUndirectedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_connectorUndirected;
    }

	TO() {
	    return this.getToken(GQLParser.TO, 0);
	};

	TILDE() {
	    return this.getToken(GQLParser.TILDE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterConnectorUndirected(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitConnectorUndirected(this);
		}
	}


}



class SourceNodeTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sourceNodeTypeName;
    }

	elementTypeName() {
	    return this.getTypedRuleContext(ElementTypeNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSourceNodeTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSourceNodeTypeName(this);
		}
	}


}



class DestinationNodeTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_destinationNodeTypeName;
    }

	elementTypeName() {
	    return this.getTypedRuleContext(ElementTypeNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDestinationNodeTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDestinationNodeTypeName(this);
		}
	}


}



class LabelSetDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_labelSetDefinition;
    }

	LABEL() {
	    return this.getToken(GQLParser.LABEL, 0);
	};

	labelName() {
	    return this.getTypedRuleContext(LabelNameContext,0);
	};

	LABELS() {
	    return this.getToken(GQLParser.LABELS, 0);
	};

	labelSetSpecification() {
	    return this.getTypedRuleContext(LabelSetSpecificationContext,0);
	};

	isOrColon() {
	    return this.getTypedRuleContext(IsOrColonContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLabelSetDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLabelSetDefinition(this);
		}
	}


}



class PropertyTypeSetDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_propertyTypeSetDefinition;
    }

	LEFT_BRACE() {
	    return this.getToken(GQLParser.LEFT_BRACE, 0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GQLParser.RIGHT_BRACE, 0);
	};

	propertyTypeDefinitionList() {
	    return this.getTypedRuleContext(PropertyTypeDefinitionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPropertyTypeSetDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPropertyTypeSetDefinition(this);
		}
	}


}



class PropertyTypeDefinitionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_propertyTypeDefinitionList;
    }

	propertyTypeDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PropertyTypeDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(PropertyTypeDefinitionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPropertyTypeDefinitionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPropertyTypeDefinitionList(this);
		}
	}


}



class PropertyTypeDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_propertyTypeDefinition;
    }

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	propertyValueType() {
	    return this.getTypedRuleContext(PropertyValueTypeContext,0);
	};

	typed() {
	    return this.getTypedRuleContext(TypedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPropertyTypeDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPropertyTypeDefinition(this);
		}
	}


}



class PropertyValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_propertyValueType;
    }

	valueType() {
	    return this.getTypedRuleContext(ValueTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPropertyValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPropertyValueType(this);
		}
	}


}



class BindingTableTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_bindingTableType;
    }

	TABLE() {
	    return this.getToken(GQLParser.TABLE, 0);
	};

	fieldTypesSpecification() {
	    return this.getTypedRuleContext(FieldTypesSpecificationContext,0);
	};

	BINDING() {
	    return this.getToken(GQLParser.BINDING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterBindingTableType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitBindingTableType(this);
		}
	}


}



class ValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_valueType;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DynamicPropertyValueTypeContext extends ValueTypeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PROPERTY() {
	    return this.getToken(GQLParser.PROPERTY, 0);
	};

	VALUE() {
	    return this.getToken(GQLParser.VALUE, 0);
	};

	ANY() {
	    return this.getToken(GQLParser.ANY, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDynamicPropertyValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDynamicPropertyValueType(this);
		}
	}


}

GQLParser.DynamicPropertyValueTypeContext = DynamicPropertyValueTypeContext;

class PredefTypeContext extends ValueTypeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	predefinedType() {
	    return this.getTypedRuleContext(PredefinedTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPredefType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPredefType(this);
		}
	}


}

GQLParser.PredefTypeContext = PredefTypeContext;

class ListType1Context extends ValueTypeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	listValueTypeName() {
	    return this.getTypedRuleContext(ListValueTypeNameContext,0);
	};

	LEFT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.LEFT_ANGLE_BRACKET, 0);
	};

	valueType() {
	    return this.getTypedRuleContext(ValueTypeContext,0);
	};

	RIGHT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.RIGHT_ANGLE_BRACKET, 0);
	};

	LEFT_BRACKET() {
	    return this.getToken(GQLParser.LEFT_BRACKET, 0);
	};

	maxLength() {
	    return this.getTypedRuleContext(MaxLengthContext,0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(GQLParser.RIGHT_BRACKET, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterListType1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitListType1(this);
		}
	}


}

GQLParser.ListType1Context = ListType1Context;

class RecordType1Context extends ValueTypeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	RECORD() {
	    return this.getToken(GQLParser.RECORD, 0);
	};

	ANY() {
	    return this.getToken(GQLParser.ANY, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterRecordType1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitRecordType1(this);
		}
	}


}

GQLParser.RecordType1Context = RecordType1Context;

class ClosedDynamicUnionType2Context extends ValueTypeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueTypeContext);
	    } else {
	        return this.getTypedRuleContext(ValueTypeContext,i);
	    }
	};

	VERTICAL_BAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.VERTICAL_BAR);
	    } else {
	        return this.getToken(GQLParser.VERTICAL_BAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterClosedDynamicUnionType2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitClosedDynamicUnionType2(this);
		}
	}


}

GQLParser.ClosedDynamicUnionType2Context = ClosedDynamicUnionType2Context;

class RecordType2Context extends ValueTypeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	fieldTypesSpecification() {
	    return this.getTypedRuleContext(FieldTypesSpecificationContext,0);
	};

	RECORD() {
	    return this.getToken(GQLParser.RECORD, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterRecordType2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitRecordType2(this);
		}
	}


}

GQLParser.RecordType2Context = RecordType2Context;

class ListType2Context extends ValueTypeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	valueType() {
	    return this.getTypedRuleContext(ValueTypeContext,0);
	};

	listValueTypeName() {
	    return this.getTypedRuleContext(ListValueTypeNameContext,0);
	};

	LEFT_BRACKET() {
	    return this.getToken(GQLParser.LEFT_BRACKET, 0);
	};

	maxLength() {
	    return this.getTypedRuleContext(MaxLengthContext,0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(GQLParser.RIGHT_BRACKET, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterListType2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitListType2(this);
		}
	}


}

GQLParser.ListType2Context = ListType2Context;

class PathTypeContext extends ValueTypeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	pathValueType() {
	    return this.getTypedRuleContext(PathValueTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathType(this);
		}
	}


}

GQLParser.PathTypeContext = PathTypeContext;

class OpenDynamicUnionTypeContext extends ValueTypeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ANY() {
	    return this.getToken(GQLParser.ANY, 0);
	};

	VALUE() {
	    return this.getToken(GQLParser.VALUE, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterOpenDynamicUnionType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitOpenDynamicUnionType(this);
		}
	}


}

GQLParser.OpenDynamicUnionTypeContext = OpenDynamicUnionTypeContext;

class ClosedDynamicUnionType1Context extends ValueTypeContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ANY() {
	    return this.getToken(GQLParser.ANY, 0);
	};

	LEFT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.LEFT_ANGLE_BRACKET, 0);
	};

	valueType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValueTypeContext);
	    } else {
	        return this.getTypedRuleContext(ValueTypeContext,i);
	    }
	};

	RIGHT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.RIGHT_ANGLE_BRACKET, 0);
	};

	VALUE() {
	    return this.getToken(GQLParser.VALUE, 0);
	};

	VERTICAL_BAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.VERTICAL_BAR);
	    } else {
	        return this.getToken(GQLParser.VERTICAL_BAR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterClosedDynamicUnionType1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitClosedDynamicUnionType1(this);
		}
	}


}

GQLParser.ClosedDynamicUnionType1Context = ClosedDynamicUnionType1Context;

class TypedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_typed;
    }

	DOUBLE_COLON() {
	    return this.getToken(GQLParser.DOUBLE_COLON, 0);
	};

	TYPED() {
	    return this.getToken(GQLParser.TYPED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterTyped(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitTyped(this);
		}
	}


}



class PredefinedTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_predefinedType;
    }

	booleanType() {
	    return this.getTypedRuleContext(BooleanTypeContext,0);
	};

	characterStringType() {
	    return this.getTypedRuleContext(CharacterStringTypeContext,0);
	};

	byteStringType() {
	    return this.getTypedRuleContext(ByteStringTypeContext,0);
	};

	numericType() {
	    return this.getTypedRuleContext(NumericTypeContext,0);
	};

	temporalType() {
	    return this.getTypedRuleContext(TemporalTypeContext,0);
	};

	referenceValueType() {
	    return this.getTypedRuleContext(ReferenceValueTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPredefinedType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPredefinedType(this);
		}
	}


}



class BooleanTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_booleanType;
    }

	BOOL() {
	    return this.getToken(GQLParser.BOOL, 0);
	};

	BOOLEAN() {
	    return this.getToken(GQLParser.BOOLEAN, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterBooleanType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitBooleanType(this);
		}
	}


}



class CharacterStringTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_characterStringType;
    }

	STRING() {
	    return this.getToken(GQLParser.STRING, 0);
	};

	VARCHAR() {
	    return this.getToken(GQLParser.VARCHAR, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	maxLength() {
	    return this.getTypedRuleContext(MaxLengthContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCharacterStringType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCharacterStringType(this);
		}
	}


}



class ByteStringTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_byteStringType;
    }

	BYTES() {
	    return this.getToken(GQLParser.BYTES, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	maxLength() {
	    return this.getTypedRuleContext(MaxLengthContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	minLength() {
	    return this.getTypedRuleContext(MinLengthContext,0);
	};

	COMMA() {
	    return this.getToken(GQLParser.COMMA, 0);
	};

	BINARY() {
	    return this.getToken(GQLParser.BINARY, 0);
	};

	fixedLength() {
	    return this.getTypedRuleContext(FixedLengthContext,0);
	};

	VARBINARY() {
	    return this.getToken(GQLParser.VARBINARY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterByteStringType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitByteStringType(this);
		}
	}


}



class MinLengthContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_minLength;
    }

	UNSIGNED_DECIMAL_INTEGER() {
	    return this.getToken(GQLParser.UNSIGNED_DECIMAL_INTEGER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterMinLength(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitMinLength(this);
		}
	}


}



class MaxLengthContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_maxLength;
    }

	UNSIGNED_DECIMAL_INTEGER() {
	    return this.getToken(GQLParser.UNSIGNED_DECIMAL_INTEGER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterMaxLength(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitMaxLength(this);
		}
	}


}



class FixedLengthContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fixedLength;
    }

	UNSIGNED_DECIMAL_INTEGER() {
	    return this.getToken(GQLParser.UNSIGNED_DECIMAL_INTEGER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFixedLength(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFixedLength(this);
		}
	}


}



class NumericTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_numericType;
    }

	exactNumericType() {
	    return this.getTypedRuleContext(ExactNumericTypeContext,0);
	};

	approximateNumericType() {
	    return this.getTypedRuleContext(ApproximateNumericTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNumericType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNumericType(this);
		}
	}


}



class ExactNumericTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_exactNumericType;
    }

	binaryExactNumericType() {
	    return this.getTypedRuleContext(BinaryExactNumericTypeContext,0);
	};

	decimalExactNumericType() {
	    return this.getTypedRuleContext(DecimalExactNumericTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterExactNumericType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitExactNumericType(this);
		}
	}


}



class BinaryExactNumericTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_binaryExactNumericType;
    }

	signedBinaryExactNumericType() {
	    return this.getTypedRuleContext(SignedBinaryExactNumericTypeContext,0);
	};

	unsignedBinaryExactNumericType() {
	    return this.getTypedRuleContext(UnsignedBinaryExactNumericTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterBinaryExactNumericType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitBinaryExactNumericType(this);
		}
	}


}



class SignedBinaryExactNumericTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_signedBinaryExactNumericType;
    }

	INT8() {
	    return this.getToken(GQLParser.INT8, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	INT16() {
	    return this.getToken(GQLParser.INT16, 0);
	};

	INT32() {
	    return this.getToken(GQLParser.INT32, 0);
	};

	INT64() {
	    return this.getToken(GQLParser.INT64, 0);
	};

	INT128() {
	    return this.getToken(GQLParser.INT128, 0);
	};

	INT256() {
	    return this.getToken(GQLParser.INT256, 0);
	};

	SMALLINT() {
	    return this.getToken(GQLParser.SMALLINT, 0);
	};

	INT() {
	    return this.getToken(GQLParser.INT, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	precision() {
	    return this.getTypedRuleContext(PrecisionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	BIGINT() {
	    return this.getToken(GQLParser.BIGINT, 0);
	};

	verboseBinaryExactNumericType() {
	    return this.getTypedRuleContext(VerboseBinaryExactNumericTypeContext,0);
	};

	SIGNED() {
	    return this.getToken(GQLParser.SIGNED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSignedBinaryExactNumericType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSignedBinaryExactNumericType(this);
		}
	}


}



class UnsignedBinaryExactNumericTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_unsignedBinaryExactNumericType;
    }

	UINT8() {
	    return this.getToken(GQLParser.UINT8, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	UINT16() {
	    return this.getToken(GQLParser.UINT16, 0);
	};

	UINT32() {
	    return this.getToken(GQLParser.UINT32, 0);
	};

	UINT64() {
	    return this.getToken(GQLParser.UINT64, 0);
	};

	UINT128() {
	    return this.getToken(GQLParser.UINT128, 0);
	};

	UINT256() {
	    return this.getToken(GQLParser.UINT256, 0);
	};

	USMALLINT() {
	    return this.getToken(GQLParser.USMALLINT, 0);
	};

	UINT() {
	    return this.getToken(GQLParser.UINT, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	precision() {
	    return this.getTypedRuleContext(PrecisionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	UBIGINT() {
	    return this.getToken(GQLParser.UBIGINT, 0);
	};

	UNSIGNED() {
	    return this.getToken(GQLParser.UNSIGNED, 0);
	};

	verboseBinaryExactNumericType() {
	    return this.getTypedRuleContext(VerboseBinaryExactNumericTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterUnsignedBinaryExactNumericType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitUnsignedBinaryExactNumericType(this);
		}
	}


}



class VerboseBinaryExactNumericTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_verboseBinaryExactNumericType;
    }

	INTEGER8() {
	    return this.getToken(GQLParser.INTEGER8, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	INTEGER16() {
	    return this.getToken(GQLParser.INTEGER16, 0);
	};

	INTEGER32() {
	    return this.getToken(GQLParser.INTEGER32, 0);
	};

	INTEGER64() {
	    return this.getToken(GQLParser.INTEGER64, 0);
	};

	INTEGER128() {
	    return this.getToken(GQLParser.INTEGER128, 0);
	};

	INTEGER256() {
	    return this.getToken(GQLParser.INTEGER256, 0);
	};

	SMALL() {
	    return this.getToken(GQLParser.SMALL, 0);
	};

	INTEGER() {
	    return this.getToken(GQLParser.INTEGER, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	precision() {
	    return this.getTypedRuleContext(PrecisionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	BIG() {
	    return this.getToken(GQLParser.BIG, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterVerboseBinaryExactNumericType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitVerboseBinaryExactNumericType(this);
		}
	}


}



class DecimalExactNumericTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_decimalExactNumericType;
    }

	DECIMAL() {
	    return this.getToken(GQLParser.DECIMAL, 0);
	};

	DEC() {
	    return this.getToken(GQLParser.DEC, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	precision() {
	    return this.getTypedRuleContext(PrecisionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	COMMA() {
	    return this.getToken(GQLParser.COMMA, 0);
	};

	scale() {
	    return this.getTypedRuleContext(ScaleContext,0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDecimalExactNumericType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDecimalExactNumericType(this);
		}
	}


}



class PrecisionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_precision;
    }

	UNSIGNED_DECIMAL_INTEGER() {
	    return this.getToken(GQLParser.UNSIGNED_DECIMAL_INTEGER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPrecision(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPrecision(this);
		}
	}


}



class ScaleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_scale;
    }

	UNSIGNED_DECIMAL_INTEGER() {
	    return this.getToken(GQLParser.UNSIGNED_DECIMAL_INTEGER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterScale(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitScale(this);
		}
	}


}



class ApproximateNumericTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_approximateNumericType;
    }

	FLOAT16() {
	    return this.getToken(GQLParser.FLOAT16, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	FLOAT32() {
	    return this.getToken(GQLParser.FLOAT32, 0);
	};

	FLOAT64() {
	    return this.getToken(GQLParser.FLOAT64, 0);
	};

	FLOAT128() {
	    return this.getToken(GQLParser.FLOAT128, 0);
	};

	FLOAT256() {
	    return this.getToken(GQLParser.FLOAT256, 0);
	};

	FLOAT() {
	    return this.getToken(GQLParser.FLOAT, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	precision() {
	    return this.getTypedRuleContext(PrecisionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	COMMA() {
	    return this.getToken(GQLParser.COMMA, 0);
	};

	scale() {
	    return this.getTypedRuleContext(ScaleContext,0);
	};

	REAL() {
	    return this.getToken(GQLParser.REAL, 0);
	};

	DOUBLE() {
	    return this.getToken(GQLParser.DOUBLE, 0);
	};

	PRECISION() {
	    return this.getToken(GQLParser.PRECISION, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterApproximateNumericType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitApproximateNumericType(this);
		}
	}


}



class TemporalTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_temporalType;
    }

	temporalInstantType() {
	    return this.getTypedRuleContext(TemporalInstantTypeContext,0);
	};

	temporalDurationType() {
	    return this.getTypedRuleContext(TemporalDurationTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterTemporalType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitTemporalType(this);
		}
	}


}



class TemporalInstantTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_temporalInstantType;
    }

	datetimeType() {
	    return this.getTypedRuleContext(DatetimeTypeContext,0);
	};

	localdatetimeType() {
	    return this.getTypedRuleContext(LocaldatetimeTypeContext,0);
	};

	dateType() {
	    return this.getTypedRuleContext(DateTypeContext,0);
	};

	timeType() {
	    return this.getTypedRuleContext(TimeTypeContext,0);
	};

	localtimeType() {
	    return this.getTypedRuleContext(LocaltimeTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterTemporalInstantType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitTemporalInstantType(this);
		}
	}


}



class TemporalDurationTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_temporalDurationType;
    }

	durationType() {
	    return this.getTypedRuleContext(DurationTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterTemporalDurationType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitTemporalDurationType(this);
		}
	}


}



class DatetimeTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_datetimeType;
    }

	ZONED() {
	    return this.getToken(GQLParser.ZONED, 0);
	};

	DATETIME() {
	    return this.getToken(GQLParser.DATETIME, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	TIMESTAMP() {
	    return this.getToken(GQLParser.TIMESTAMP, 0);
	};

	WITH() {
	    return this.getToken(GQLParser.WITH, 0);
	};

	TIMEZONE() {
	    return this.getToken(GQLParser.TIMEZONE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDatetimeType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDatetimeType(this);
		}
	}


}



class LocaldatetimeTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_localdatetimeType;
    }

	LOCAL() {
	    return this.getToken(GQLParser.LOCAL, 0);
	};

	DATETIME() {
	    return this.getToken(GQLParser.DATETIME, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	TIMESTAMP() {
	    return this.getToken(GQLParser.TIMESTAMP, 0);
	};

	WITHOUT() {
	    return this.getToken(GQLParser.WITHOUT, 0);
	};

	TIMEZONE() {
	    return this.getToken(GQLParser.TIMEZONE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLocaldatetimeType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLocaldatetimeType(this);
		}
	}


}



class DateTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_dateType;
    }

	DATE() {
	    return this.getToken(GQLParser.DATE, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDateType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDateType(this);
		}
	}


}



class TimeTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_timeType;
    }

	ZONED() {
	    return this.getToken(GQLParser.ZONED, 0);
	};

	TIME() {
	    return this.getToken(GQLParser.TIME, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	WITH() {
	    return this.getToken(GQLParser.WITH, 0);
	};

	TIMEZONE() {
	    return this.getToken(GQLParser.TIMEZONE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterTimeType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitTimeType(this);
		}
	}


}



class LocaltimeTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_localtimeType;
    }

	LOCAL() {
	    return this.getToken(GQLParser.LOCAL, 0);
	};

	TIME() {
	    return this.getToken(GQLParser.TIME, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	WITHOUT() {
	    return this.getToken(GQLParser.WITHOUT, 0);
	};

	TIMEZONE() {
	    return this.getToken(GQLParser.TIMEZONE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLocaltimeType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLocaltimeType(this);
		}
	}


}



class DurationTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_durationType;
    }

	DURATION() {
	    return this.getToken(GQLParser.DURATION, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDurationType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDurationType(this);
		}
	}


}



class ReferenceValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_referenceValueType;
    }

	graphReferenceValueType() {
	    return this.getTypedRuleContext(GraphReferenceValueTypeContext,0);
	};

	bindingTableReferenceValueType() {
	    return this.getTypedRuleContext(BindingTableReferenceValueTypeContext,0);
	};

	nodeReferenceValueType() {
	    return this.getTypedRuleContext(NodeReferenceValueTypeContext,0);
	};

	edgeReferenceValueType() {
	    return this.getTypedRuleContext(EdgeReferenceValueTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterReferenceValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitReferenceValueType(this);
		}
	}


}



class GraphReferenceValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphReferenceValueType;
    }

	openGraphReferenceValueType() {
	    return this.getTypedRuleContext(OpenGraphReferenceValueTypeContext,0);
	};

	closedGraphReferenceValueType() {
	    return this.getTypedRuleContext(ClosedGraphReferenceValueTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGraphReferenceValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGraphReferenceValueType(this);
		}
	}


}



class ClosedGraphReferenceValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_closedGraphReferenceValueType;
    }

	GRAPH() {
	    return this.getToken(GQLParser.GRAPH, 0);
	};

	nestedGraphTypeSpecification() {
	    return this.getTypedRuleContext(NestedGraphTypeSpecificationContext,0);
	};

	PROPERTY() {
	    return this.getToken(GQLParser.PROPERTY, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterClosedGraphReferenceValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitClosedGraphReferenceValueType(this);
		}
	}


}



class OpenGraphReferenceValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_openGraphReferenceValueType;
    }

	ANY() {
	    return this.getToken(GQLParser.ANY, 0);
	};

	GRAPH() {
	    return this.getToken(GQLParser.GRAPH, 0);
	};

	PROPERTY() {
	    return this.getToken(GQLParser.PROPERTY, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterOpenGraphReferenceValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitOpenGraphReferenceValueType(this);
		}
	}


}



class BindingTableReferenceValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_bindingTableReferenceValueType;
    }

	bindingTableType() {
	    return this.getTypedRuleContext(BindingTableTypeContext,0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterBindingTableReferenceValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitBindingTableReferenceValueType(this);
		}
	}


}



class NodeReferenceValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nodeReferenceValueType;
    }

	openNodeReferenceValueType() {
	    return this.getTypedRuleContext(OpenNodeReferenceValueTypeContext,0);
	};

	closedNodeReferenceValueType() {
	    return this.getTypedRuleContext(ClosedNodeReferenceValueTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNodeReferenceValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNodeReferenceValueType(this);
		}
	}


}



class ClosedNodeReferenceValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_closedNodeReferenceValueType;
    }

	nodeTypeDefinition() {
	    return this.getTypedRuleContext(NodeTypeDefinitionContext,0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterClosedNodeReferenceValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitClosedNodeReferenceValueType(this);
		}
	}


}



class OpenNodeReferenceValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_openNodeReferenceValueType;
    }

	NODE_SYNONYM() {
	    return this.getToken(GQLParser.NODE_SYNONYM, 0);
	};

	ANY() {
	    return this.getToken(GQLParser.ANY, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterOpenNodeReferenceValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitOpenNodeReferenceValueType(this);
		}
	}


}



class EdgeReferenceValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_edgeReferenceValueType;
    }

	openEdgeReferenceValueType() {
	    return this.getTypedRuleContext(OpenEdgeReferenceValueTypeContext,0);
	};

	closedEdgeReferenceValueType() {
	    return this.getTypedRuleContext(ClosedEdgeReferenceValueTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterEdgeReferenceValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitEdgeReferenceValueType(this);
		}
	}


}



class ClosedEdgeReferenceValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_closedEdgeReferenceValueType;
    }

	edgeTypeDefinition() {
	    return this.getTypedRuleContext(EdgeTypeDefinitionContext,0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterClosedEdgeReferenceValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitClosedEdgeReferenceValueType(this);
		}
	}


}



class OpenEdgeReferenceValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_openEdgeReferenceValueType;
    }

	EDGE_SYNONYM() {
	    return this.getToken(GQLParser.EDGE_SYNONYM, 0);
	};

	ANY() {
	    return this.getToken(GQLParser.ANY, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterOpenEdgeReferenceValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitOpenEdgeReferenceValueType(this);
		}
	}


}



class ListValueTypeNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_listValueTypeName;
    }

	listValueTypeNameSynonym() {
	    return this.getTypedRuleContext(ListValueTypeNameSynonymContext,0);
	};

	GROUP() {
	    return this.getToken(GQLParser.GROUP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterListValueTypeName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitListValueTypeName(this);
		}
	}


}



class ListValueTypeNameSynonymContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_listValueTypeNameSynonym;
    }

	LIST() {
	    return this.getToken(GQLParser.LIST, 0);
	};

	ARRAY() {
	    return this.getToken(GQLParser.ARRAY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterListValueTypeNameSynonym(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitListValueTypeNameSynonym(this);
		}
	}


}



class FieldTypesSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fieldTypesSpecification;
    }

	LEFT_BRACE() {
	    return this.getToken(GQLParser.LEFT_BRACE, 0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GQLParser.RIGHT_BRACE, 0);
	};

	fieldTypeList() {
	    return this.getTypedRuleContext(FieldTypeListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFieldTypesSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFieldTypesSpecification(this);
		}
	}


}



class FieldTypeListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fieldTypeList;
    }

	fieldType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FieldTypeContext);
	    } else {
	        return this.getTypedRuleContext(FieldTypeContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFieldTypeList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFieldTypeList(this);
		}
	}


}



class PathValueTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathValueType;
    }

	PATH() {
	    return this.getToken(GQLParser.PATH, 0);
	};

	notNull() {
	    return this.getTypedRuleContext(NotNullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathValueType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathValueType(this);
		}
	}


}



class NotNullContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_notNull;
    }

	NOT() {
	    return this.getToken(GQLParser.NOT, 0);
	};

	NULL() {
	    return this.getToken(GQLParser.NULL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNotNull(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNotNull(this);
		}
	}


}



class FieldTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_fieldType;
    }

	fieldName() {
	    return this.getTypedRuleContext(FieldNameContext,0);
	};

	valueType() {
	    return this.getTypedRuleContext(ValueTypeContext,0);
	};

	typed() {
	    return this.getTypedRuleContext(TypedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFieldType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFieldType(this);
		}
	}


}



class SchemaReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_schemaReference;
    }

	absoluteCatalogSchemaReference() {
	    return this.getTypedRuleContext(AbsoluteCatalogSchemaReferenceContext,0);
	};

	relativeCatalogSchemaReference() {
	    return this.getTypedRuleContext(RelativeCatalogSchemaReferenceContext,0);
	};

	referenceParameter() {
	    return this.getTypedRuleContext(ReferenceParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSchemaReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSchemaReference(this);
		}
	}


}



class AbsoluteCatalogSchemaReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_absoluteCatalogSchemaReference;
    }

	SOLIDUS() {
	    return this.getToken(GQLParser.SOLIDUS, 0);
	};

	absoluteDirectoryPath() {
	    return this.getTypedRuleContext(AbsoluteDirectoryPathContext,0);
	};

	schemaName() {
	    return this.getTypedRuleContext(SchemaNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterAbsoluteCatalogSchemaReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitAbsoluteCatalogSchemaReference(this);
		}
	}


}



class CatalogSchemaParentAndNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_catalogSchemaParentAndName;
    }

	absoluteDirectoryPath() {
	    return this.getTypedRuleContext(AbsoluteDirectoryPathContext,0);
	};

	schemaName() {
	    return this.getTypedRuleContext(SchemaNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCatalogSchemaParentAndName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCatalogSchemaParentAndName(this);
		}
	}


}



class RelativeCatalogSchemaReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_relativeCatalogSchemaReference;
    }

	predefinedSchemaReference() {
	    return this.getTypedRuleContext(PredefinedSchemaReferenceContext,0);
	};

	relativeDirectoryPath() {
	    return this.getTypedRuleContext(RelativeDirectoryPathContext,0);
	};

	schemaName() {
	    return this.getTypedRuleContext(SchemaNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterRelativeCatalogSchemaReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitRelativeCatalogSchemaReference(this);
		}
	}


}



class PredefinedSchemaReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_predefinedSchemaReference;
    }

	HOME_SCHEMA() {
	    return this.getToken(GQLParser.HOME_SCHEMA, 0);
	};

	CURRENT_SCHEMA() {
	    return this.getToken(GQLParser.CURRENT_SCHEMA, 0);
	};

	PERIOD() {
	    return this.getToken(GQLParser.PERIOD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPredefinedSchemaReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPredefinedSchemaReference(this);
		}
	}


}



class AbsoluteDirectoryPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_absoluteDirectoryPath;
    }

	SOLIDUS() {
	    return this.getToken(GQLParser.SOLIDUS, 0);
	};

	simpleDirectoryPath() {
	    return this.getTypedRuleContext(SimpleDirectoryPathContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterAbsoluteDirectoryPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitAbsoluteDirectoryPath(this);
		}
	}


}



class RelativeDirectoryPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_relativeDirectoryPath;
    }

	DOUBLE_PERIOD = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.DOUBLE_PERIOD);
	    } else {
	        return this.getToken(GQLParser.DOUBLE_PERIOD, i);
	    }
	};


	SOLIDUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.SOLIDUS);
	    } else {
	        return this.getToken(GQLParser.SOLIDUS, i);
	    }
	};


	simpleDirectoryPath() {
	    return this.getTypedRuleContext(SimpleDirectoryPathContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterRelativeDirectoryPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitRelativeDirectoryPath(this);
		}
	}


}



class SimpleDirectoryPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simpleDirectoryPath;
    }

	directoryName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DirectoryNameContext);
	    } else {
	        return this.getTypedRuleContext(DirectoryNameContext,i);
	    }
	};

	SOLIDUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.SOLIDUS);
	    } else {
	        return this.getToken(GQLParser.SOLIDUS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimpleDirectoryPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimpleDirectoryPath(this);
		}
	}


}



class GraphReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphReference;
    }

	catalogObjectParentReference() {
	    return this.getTypedRuleContext(CatalogObjectParentReferenceContext,0);
	};

	graphName() {
	    return this.getTypedRuleContext(GraphNameContext,0);
	};

	delimitedGraphName() {
	    return this.getTypedRuleContext(DelimitedGraphNameContext,0);
	};

	homeGraph() {
	    return this.getTypedRuleContext(HomeGraphContext,0);
	};

	referenceParameter() {
	    return this.getTypedRuleContext(ReferenceParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGraphReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGraphReference(this);
		}
	}


}



class CatalogGraphParentAndNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_catalogGraphParentAndName;
    }

	graphName() {
	    return this.getTypedRuleContext(GraphNameContext,0);
	};

	catalogObjectParentReference() {
	    return this.getTypedRuleContext(CatalogObjectParentReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCatalogGraphParentAndName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCatalogGraphParentAndName(this);
		}
	}


}



class HomeGraphContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_homeGraph;
    }

	HOME_PROPERTY_GRAPH() {
	    return this.getToken(GQLParser.HOME_PROPERTY_GRAPH, 0);
	};

	HOME_GRAPH() {
	    return this.getToken(GQLParser.HOME_GRAPH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterHomeGraph(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitHomeGraph(this);
		}
	}


}



class GraphTypeReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_graphTypeReference;
    }

	catalogGraphTypeParentAndName() {
	    return this.getTypedRuleContext(CatalogGraphTypeParentAndNameContext,0);
	};

	referenceParameter() {
	    return this.getTypedRuleContext(ReferenceParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGraphTypeReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGraphTypeReference(this);
		}
	}


}



class CatalogGraphTypeParentAndNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_catalogGraphTypeParentAndName;
    }

	graphTypeName() {
	    return this.getTypedRuleContext(GraphTypeNameContext,0);
	};

	catalogObjectParentReference() {
	    return this.getTypedRuleContext(CatalogObjectParentReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCatalogGraphTypeParentAndName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCatalogGraphTypeParentAndName(this);
		}
	}


}



class BindingTableReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_bindingTableReference;
    }

	catalogObjectParentReference() {
	    return this.getTypedRuleContext(CatalogObjectParentReferenceContext,0);
	};

	bindingTableName() {
	    return this.getTypedRuleContext(BindingTableNameContext,0);
	};

	delimitedBindingTableName() {
	    return this.getTypedRuleContext(DelimitedBindingTableNameContext,0);
	};

	referenceParameter() {
	    return this.getTypedRuleContext(ReferenceParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterBindingTableReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitBindingTableReference(this);
		}
	}


}



class CatalogBindingTableParentAndNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_catalogBindingTableParentAndName;
    }

	bindingTableName() {
	    return this.getTypedRuleContext(BindingTableNameContext,0);
	};

	catalogObjectParentReference() {
	    return this.getTypedRuleContext(CatalogObjectParentReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCatalogBindingTableParentAndName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCatalogBindingTableParentAndName(this);
		}
	}


}



class ProcedureReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_procedureReference;
    }

	catalogProcedureParentAndName() {
	    return this.getTypedRuleContext(CatalogProcedureParentAndNameContext,0);
	};

	referenceParameter() {
	    return this.getTypedRuleContext(ReferenceParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterProcedureReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitProcedureReference(this);
		}
	}


}



class CatalogProcedureParentAndNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_catalogProcedureParentAndName;
    }

	procedureName() {
	    return this.getTypedRuleContext(ProcedureNameContext,0);
	};

	catalogObjectParentReference() {
	    return this.getTypedRuleContext(CatalogObjectParentReferenceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCatalogProcedureParentAndName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCatalogProcedureParentAndName(this);
		}
	}


}



class CatalogObjectParentReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_catalogObjectParentReference;
    }

	schemaReference() {
	    return this.getTypedRuleContext(SchemaReferenceContext,0);
	};

	SOLIDUS() {
	    return this.getToken(GQLParser.SOLIDUS, 0);
	};

	objectName = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ObjectNameContext);
	    } else {
	        return this.getTypedRuleContext(ObjectNameContext,i);
	    }
	};

	PERIOD = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.PERIOD);
	    } else {
	        return this.getToken(GQLParser.PERIOD, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCatalogObjectParentReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCatalogObjectParentReference(this);
		}
	}


}



class ReferenceParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_referenceParameter;
    }

	parameter() {
	    return this.getTypedRuleContext(ParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterReferenceParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitReferenceParameter(this);
		}
	}


}



class ExternalObjectReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_externalObjectReference;
    }

	I_DONT_KNOW_3() {
	    return this.getToken(GQLParser.I_DONT_KNOW_3, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterExternalObjectReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitExternalObjectReference(this);
		}
	}


}



class ComparisonPredicateCondContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_comparisonPredicateCond;
    }

	compOp() {
	    return this.getTypedRuleContext(CompOpContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterComparisonPredicateCond(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitComparisonPredicateCond(this);
		}
	}


}



class CompOpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_compOp;
    }

	EQUALS_OPERATOR() {
	    return this.getToken(GQLParser.EQUALS_OPERATOR, 0);
	};

	NOT_EQUALS_OPERATOR() {
	    return this.getToken(GQLParser.NOT_EQUALS_OPERATOR, 0);
	};

	LEFT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.LEFT_ANGLE_BRACKET, 0);
	};

	RIGHT_ANGLE_BRACKET() {
	    return this.getToken(GQLParser.RIGHT_ANGLE_BRACKET, 0);
	};

	LESS_THAN_OR_EQUALS_OPERATOR() {
	    return this.getToken(GQLParser.LESS_THAN_OR_EQUALS_OPERATOR, 0);
	};

	GREATER_THAN_OR_EQUALS_OPERATOR() {
	    return this.getToken(GQLParser.GREATER_THAN_OR_EQUALS_OPERATOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCompOp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCompOp(this);
		}
	}


}



class NullPredicateCondContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_nullPredicateCond;
    }

	IS() {
	    return this.getToken(GQLParser.IS, 0);
	};

	NULL() {
	    return this.getToken(GQLParser.NULL, 0);
	};

	NOT() {
	    return this.getToken(GQLParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNullPredicateCond(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNullPredicateCond(this);
		}
	}


}



class NormalizedPredicateCondContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_normalizedPredicateCond;
    }

	IS() {
	    return this.getToken(GQLParser.IS, 0);
	};

	NORMALIZED() {
	    return this.getToken(GQLParser.NORMALIZED, 0);
	};

	NOT() {
	    return this.getToken(GQLParser.NOT, 0);
	};

	normalForm() {
	    return this.getTypedRuleContext(NormalFormContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNormalizedPredicateCond(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNormalizedPredicateCond(this);
		}
	}


}



class DirectedPredicateCondContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_directedPredicateCond;
    }

	IS() {
	    return this.getToken(GQLParser.IS, 0);
	};

	DIRECTED() {
	    return this.getToken(GQLParser.DIRECTED, 0);
	};

	NOT() {
	    return this.getToken(GQLParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDirectedPredicateCond(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDirectedPredicateCond(this);
		}
	}


}



class LabeledPredicateCondContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_labeledPredicateCond;
    }

	labelExpression() {
	    return this.getTypedRuleContext(LabelExpressionContext,0);
	};

	IS() {
	    return this.getToken(GQLParser.IS, 0);
	};

	LABELED() {
	    return this.getToken(GQLParser.LABELED, 0);
	};

	COLON() {
	    return this.getToken(GQLParser.COLON, 0);
	};

	NOT() {
	    return this.getToken(GQLParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLabeledPredicateCond(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLabeledPredicateCond(this);
		}
	}


}



class SourceDestinationPredicateCondContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_sourceDestinationPredicateCond;
    }

	IS() {
	    return this.getToken(GQLParser.IS, 0);
	};

	OF() {
	    return this.getToken(GQLParser.OF, 0);
	};

	elementVariableReference() {
	    return this.getTypedRuleContext(ElementVariableReferenceContext,0);
	};

	SOURCE() {
	    return this.getToken(GQLParser.SOURCE, 0);
	};

	DESTINATION() {
	    return this.getToken(GQLParser.DESTINATION, 0);
	};

	NOT() {
	    return this.getToken(GQLParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSourceDestinationPredicateCond(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSourceDestinationPredicateCond(this);
		}
	}


}



class UnsignedValueSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_unsignedValueSpecification;
    }

	unsignedLiteral() {
	    return this.getTypedRuleContext(UnsignedLiteralContext,0);
	};

	parameterValueSpecification() {
	    return this.getTypedRuleContext(ParameterValueSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterUnsignedValueSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitUnsignedValueSpecification(this);
		}
	}


}



class UnsignedIntegerSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_unsignedIntegerSpecification;
    }

	integerLiteral() {
	    return this.getTypedRuleContext(IntegerLiteralContext,0);
	};

	parameter() {
	    return this.getTypedRuleContext(ParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterUnsignedIntegerSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitUnsignedIntegerSpecification(this);
		}
	}


}



class ParameterValueSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_parameterValueSpecification;
    }

	parameter() {
	    return this.getTypedRuleContext(ParameterContext,0);
	};

	predefinedParameter() {
	    return this.getTypedRuleContext(PredefinedParameterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterParameterValueSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitParameterValueSpecification(this);
		}
	}


}



class PredefinedParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_predefinedParameter;
    }

	CURRENT_USER() {
	    return this.getToken(GQLParser.CURRENT_USER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPredefinedParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPredefinedParameter(this);
		}
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class GqlPredicateExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expressionPredicate() {
	    return this.getTypedRuleContext(ExpressionPredicateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlPredicateExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlPredicateExpression(this);
		}
	}


}

GQLParser.GqlPredicateExpressionContext = GqlPredicateExpressionContext;

class GqlNotExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NOT() {
	    return this.getToken(GQLParser.NOT, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlNotExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlNotExpression(this);
		}
	}


}

GQLParser.GqlNotExpressionContext = GqlNotExpressionContext;

class GqlLogicalXorExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.lhs = null;;
        this.rhs = null;;
        super.copyFrom(ctx);
    }

	XOR() {
	    return this.getToken(GQLParser.XOR, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlLogicalXorExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlLogicalXorExpression(this);
		}
	}


}

GQLParser.GqlLogicalXorExpressionContext = GqlLogicalXorExpressionContext;

class GqlLogicalOrExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.lhs = null;;
        this.rhs = null;;
        super.copyFrom(ctx);
    }

	OR() {
	    return this.getToken(GQLParser.OR, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlLogicalOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlLogicalOrExpression(this);
		}
	}


}

GQLParser.GqlLogicalOrExpressionContext = GqlLogicalOrExpressionContext;

class GqlLogicalAndExpressionContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.lhs = null;;
        this.rhs = null;;
        super.copyFrom(ctx);
    }

	AND() {
	    return this.getToken(GQLParser.AND, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlLogicalAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlLogicalAndExpression(this);
		}
	}


}

GQLParser.GqlLogicalAndExpressionContext = GqlLogicalAndExpressionContext;

class ExpressionPredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_expressionPredicate;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class GqlAtomExpressionContext extends ExpressionPredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expressionAtom() {
	    return this.getTypedRuleContext(ExpressionAtomContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlAtomExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlAtomExpression(this);
		}
	}


}

GQLParser.GqlAtomExpressionContext = GqlAtomExpressionContext;

class GqlNormalizedExpressionContext extends ExpressionPredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expressionPredicate() {
	    return this.getTypedRuleContext(ExpressionPredicateContext,0);
	};

	normalizedPredicateCond() {
	    return this.getTypedRuleContext(NormalizedPredicateCondContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlNormalizedExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlNormalizedExpression(this);
		}
	}


}

GQLParser.GqlNormalizedExpressionContext = GqlNormalizedExpressionContext;

class GqlSameExpressionContext extends ExpressionPredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SAME() {
	    return this.getToken(GQLParser.SAME, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	elementVariableReference = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementVariableReferenceContext);
	    } else {
	        return this.getTypedRuleContext(ElementVariableReferenceContext,i);
	    }
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlSameExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlSameExpression(this);
		}
	}


}

GQLParser.GqlSameExpressionContext = GqlSameExpressionContext;

class GqlDirectedExpressionContext extends ExpressionPredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	elementVariableReference() {
	    return this.getTypedRuleContext(ElementVariableReferenceContext,0);
	};

	directedPredicateCond() {
	    return this.getTypedRuleContext(DirectedPredicateCondContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlDirectedExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlDirectedExpression(this);
		}
	}


}

GQLParser.GqlDirectedExpressionContext = GqlDirectedExpressionContext;

class GqlBooleanTestExpressionContext extends ExpressionPredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expressionPredicate() {
	    return this.getTypedRuleContext(ExpressionPredicateContext,0);
	};

	IS() {
	    return this.getToken(GQLParser.IS, 0);
	};

	truthValue() {
	    return this.getTypedRuleContext(TruthValueContext,0);
	};

	NOT() {
	    return this.getToken(GQLParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlBooleanTestExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlBooleanTestExpression(this);
		}
	}


}

GQLParser.GqlBooleanTestExpressionContext = GqlBooleanTestExpressionContext;

class GqlGraphRefValueExpressionContext extends ExpressionPredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	GRAPH() {
	    return this.getToken(GQLParser.GRAPH, 0);
	};

	graphExpression() {
	    return this.getTypedRuleContext(GraphExpressionContext,0);
	};

	PROPERTY() {
	    return this.getToken(GQLParser.PROPERTY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlGraphRefValueExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlGraphRefValueExpression(this);
		}
	}


}

GQLParser.GqlGraphRefValueExpressionContext = GqlGraphRefValueExpressionContext;

class GqlAllDifferentExpressionContext extends ExpressionPredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ALL_DIFFERENT() {
	    return this.getToken(GQLParser.ALL_DIFFERENT, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	elementVariableReference = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ElementVariableReferenceContext);
	    } else {
	        return this.getTypedRuleContext(ElementVariableReferenceContext,i);
	    }
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlAllDifferentExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlAllDifferentExpression(this);
		}
	}


}

GQLParser.GqlAllDifferentExpressionContext = GqlAllDifferentExpressionContext;

class GqlExistsExpressionContext extends ExpressionPredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EXISTS() {
	    return this.getToken(GQLParser.EXISTS, 0);
	};

	LEFT_BRACE() {
	    return this.getToken(GQLParser.LEFT_BRACE, 0);
	};

	graphPattern() {
	    return this.getTypedRuleContext(GraphPatternContext,0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GQLParser.RIGHT_BRACE, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	matchStatementBlock() {
	    return this.getTypedRuleContext(MatchStatementBlockContext,0);
	};

	nestedQuerySpecification() {
	    return this.getTypedRuleContext(NestedQuerySpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlExistsExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlExistsExpression(this);
		}
	}


}

GQLParser.GqlExistsExpressionContext = GqlExistsExpressionContext;

class GqlLetExpressionContext extends ExpressionPredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LET() {
	    return this.getToken(GQLParser.LET, 0);
	};

	letVariableDefinitionList() {
	    return this.getTypedRuleContext(LetVariableDefinitionListContext,0);
	};

	IN() {
	    return this.getToken(GQLParser.IN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	END() {
	    return this.getToken(GQLParser.END, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlLetExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlLetExpression(this);
		}
	}


}

GQLParser.GqlLetExpressionContext = GqlLetExpressionContext;

class GqlComparisonExpressionContext extends ExpressionPredicateContext {

    constructor(parser, ctx) {
        super(parser);
        this.lhs = null;;
        this.rhs = null;;
        super.copyFrom(ctx);
    }

	compOp() {
	    return this.getTypedRuleContext(CompOpContext,0);
	};

	expressionPredicate = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionPredicateContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionPredicateContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlComparisonExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlComparisonExpression(this);
		}
	}


}

GQLParser.GqlComparisonExpressionContext = GqlComparisonExpressionContext;

class GqlLabeledExpressionContext extends ExpressionPredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	elementVariableReference() {
	    return this.getTypedRuleContext(ElementVariableReferenceContext,0);
	};

	labeledPredicateCond() {
	    return this.getTypedRuleContext(LabeledPredicateCondContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlLabeledExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlLabeledExpression(this);
		}
	}


}

GQLParser.GqlLabeledExpressionContext = GqlLabeledExpressionContext;

class GqlPropertyExistExpressionContext extends ExpressionPredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PROPERTY_EXISTS() {
	    return this.getToken(GQLParser.PROPERTY_EXISTS, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	elementVariableReference() {
	    return this.getTypedRuleContext(ElementVariableReferenceContext,0);
	};

	COMMA() {
	    return this.getToken(GQLParser.COMMA, 0);
	};

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlPropertyExistExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlPropertyExistExpression(this);
		}
	}


}

GQLParser.GqlPropertyExistExpressionContext = GqlPropertyExistExpressionContext;

class GqlNullExpressionContext extends ExpressionPredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expressionPredicate() {
	    return this.getTypedRuleContext(ExpressionPredicateContext,0);
	};

	nullPredicateCond() {
	    return this.getTypedRuleContext(NullPredicateCondContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlNullExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlNullExpression(this);
		}
	}


}

GQLParser.GqlNullExpressionContext = GqlNullExpressionContext;

class GqlSourceDestinationExpressionContext extends ExpressionPredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	elementVariableReference() {
	    return this.getTypedRuleContext(ElementVariableReferenceContext,0);
	};

	sourceDestinationPredicateCond() {
	    return this.getTypedRuleContext(SourceDestinationPredicateCondContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlSourceDestinationExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlSourceDestinationExpression(this);
		}
	}


}

GQLParser.GqlSourceDestinationExpressionContext = GqlSourceDestinationExpressionContext;

class GqlBindingTableValueExpressionContext extends ExpressionPredicateContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TABLE() {
	    return this.getToken(GQLParser.TABLE, 0);
	};

	bindingTableExpression() {
	    return this.getTypedRuleContext(BindingTableExpressionContext,0);
	};

	BINDING() {
	    return this.getToken(GQLParser.BINDING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlBindingTableValueExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlBindingTableValueExpression(this);
		}
	}


}

GQLParser.GqlBindingTableValueExpressionContext = GqlBindingTableValueExpressionContext;

class ExpressionAtomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_expressionAtom;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class GqlParameterExpressionContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	parameterValueSpecification() {
	    return this.getTypedRuleContext(ParameterValueSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlParameterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlParameterExpression(this);
		}
	}


}

GQLParser.GqlParameterExpressionContext = GqlParameterExpressionContext;

class GqlUnaryExpressionContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	unaryOperator() {
	    return this.getTypedRuleContext(UnaryOperatorContext,0);
	};

	expressionAtom() {
	    return this.getTypedRuleContext(ExpressionAtomContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlUnaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlUnaryExpression(this);
		}
	}


}

GQLParser.GqlUnaryExpressionContext = GqlUnaryExpressionContext;

class GqlPropertyReferenceContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expressionAtom() {
	    return this.getTypedRuleContext(ExpressionAtomContext,0);
	};

	PERIOD() {
	    return this.getToken(GQLParser.PERIOD, 0);
	};

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlPropertyReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlPropertyReference(this);
		}
	}


}

GQLParser.GqlPropertyReferenceContext = GqlPropertyReferenceContext;

class GqlHighArithmeticExpressionContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        this.lhs = null;;
        this.op = null;;
        this.rhs = null;;
        super.copyFrom(ctx);
    }

	expressionAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionAtomContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionAtomContext,i);
	    }
	};

	ASTERISK() {
	    return this.getToken(GQLParser.ASTERISK, 0);
	};

	SOLIDUS() {
	    return this.getToken(GQLParser.SOLIDUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlHighArithmeticExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlHighArithmeticExpression(this);
		}
	}


}

GQLParser.GqlHighArithmeticExpressionContext = GqlHighArithmeticExpressionContext;

class GqlValueQueryExpressionContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	VALUE() {
	    return this.getToken(GQLParser.VALUE, 0);
	};

	nestedQuerySpecification() {
	    return this.getTypedRuleContext(NestedQuerySpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlValueQueryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlValueQueryExpression(this);
		}
	}


}

GQLParser.GqlValueQueryExpressionContext = GqlValueQueryExpressionContext;

class GqlLiteralExpressionContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	unsignedLiteral() {
	    return this.getTypedRuleContext(UnsignedLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlLiteralExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlLiteralExpression(this);
		}
	}


}

GQLParser.GqlLiteralExpressionContext = GqlLiteralExpressionContext;

class GqlCollectionExpressionContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	collectionValueConstructor() {
	    return this.getTypedRuleContext(CollectionValueConstructorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlCollectionExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlCollectionExpression(this);
		}
	}


}

GQLParser.GqlCollectionExpressionContext = GqlCollectionExpressionContext;

class GqlConcatenationExpressionContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expressionAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionAtomContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionAtomContext,i);
	    }
	};

	CONCATENATION_OPERATOR() {
	    return this.getToken(GQLParser.CONCATENATION_OPERATOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlConcatenationExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlConcatenationExpression(this);
		}
	}


}

GQLParser.GqlConcatenationExpressionContext = GqlConcatenationExpressionContext;

class GqlLowArithmeticExpressionContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        this.lhs = null;;
        this.op = null;;
        this.rhs = null;;
        super.copyFrom(ctx);
    }

	expressionAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionAtomContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionAtomContext,i);
	    }
	};

	PLUS_SIGN() {
	    return this.getToken(GQLParser.PLUS_SIGN, 0);
	};

	MINUS_SIGN() {
	    return this.getToken(GQLParser.MINUS_SIGN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlLowArithmeticExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlLowArithmeticExpression(this);
		}
	}


}

GQLParser.GqlLowArithmeticExpressionContext = GqlLowArithmeticExpressionContext;

class GqlParenthesizedExpressionContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlParenthesizedExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlParenthesizedExpression(this);
		}
	}


}

GQLParser.GqlParenthesizedExpressionContext = GqlParenthesizedExpressionContext;

class GqlFunctionExpressionContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	functionCall() {
	    return this.getTypedRuleContext(FunctionCallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlFunctionExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlFunctionExpression(this);
		}
	}


}

GQLParser.GqlFunctionExpressionContext = GqlFunctionExpressionContext;

class GqlVariableExpressionContext extends ExpressionAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlVariableExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlVariableExpression(this);
		}
	}


}

GQLParser.GqlVariableExpressionContext = GqlVariableExpressionContext;

class TruthValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_truthValue;
    }

	TRUE() {
	    return this.getToken(GQLParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(GQLParser.FALSE, 0);
	};

	UNKNOWN() {
	    return this.getToken(GQLParser.UNKNOWN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterTruthValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitTruthValue(this);
		}
	}


}



class UnaryOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_unaryOperator;
    }

	EXCLAMATION_MARK() {
	    return this.getToken(GQLParser.EXCLAMATION_MARK, 0);
	};

	PLUS_SIGN() {
	    return this.getToken(GQLParser.PLUS_SIGN, 0);
	};

	MINUS_SIGN() {
	    return this.getToken(GQLParser.MINUS_SIGN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterUnaryOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitUnaryOperator(this);
		}
	}


}



class FunctionCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_functionCall;
    }

	numericFunction() {
	    return this.getTypedRuleContext(NumericFunctionContext,0);
	};

	aggregateFunction() {
	    return this.getTypedRuleContext(AggregateFunctionContext,0);
	};

	caseFunction() {
	    return this.getTypedRuleContext(CaseFunctionContext,0);
	};

	castFunction() {
	    return this.getTypedRuleContext(CastFunctionContext,0);
	};

	elementIdFunction() {
	    return this.getTypedRuleContext(ElementIdFunctionContext,0);
	};

	datetimeValueFunction() {
	    return this.getTypedRuleContext(DatetimeValueFunctionContext,0);
	};

	durationFunction() {
	    return this.getTypedRuleContext(DurationFunctionContext,0);
	};

	listFunction() {
	    return this.getTypedRuleContext(ListFunctionContext,0);
	};

	stringFunction() {
	    return this.getTypedRuleContext(StringFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFunctionCall(this);
		}
	}


}



class NumericFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_numericFunction;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class GqlTwoArgScalarFunctionContext extends NumericFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	twoArgNumericFunctionName() {
	    return this.getTypedRuleContext(TwoArgNumericFunctionNameContext,0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	functionParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FunctionParameterContext);
	    } else {
	        return this.getTypedRuleContext(FunctionParameterContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(GQLParser.COMMA, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlTwoArgScalarFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlTwoArgScalarFunction(this);
		}
	}


}

GQLParser.GqlTwoArgScalarFunctionContext = GqlTwoArgScalarFunctionContext;

class GqlOneArgScalarFunctionContext extends NumericFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	oneArgNumericFunctionName() {
	    return this.getTypedRuleContext(OneArgNumericFunctionNameContext,0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	functionParameter() {
	    return this.getTypedRuleContext(FunctionParameterContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlOneArgScalarFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlOneArgScalarFunction(this);
		}
	}


}

GQLParser.GqlOneArgScalarFunctionContext = GqlOneArgScalarFunctionContext;

class FunctionParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_functionParameter;
    }

	unsignedLiteral() {
	    return this.getTypedRuleContext(UnsignedLiteralContext,0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	propertyReference() {
	    return this.getTypedRuleContext(PropertyReferenceContext,0);
	};

	functionCall() {
	    return this.getTypedRuleContext(FunctionCallContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterFunctionParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitFunctionParameter(this);
		}
	}


}



class PropertyReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_propertyReference;
    }

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	PERIOD() {
	    return this.getToken(GQLParser.PERIOD, 0);
	};

	propertyName() {
	    return this.getTypedRuleContext(PropertyNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPropertyReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPropertyReference(this);
		}
	}


}



class OneArgNumericFunctionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_oneArgNumericFunctionName;
    }

	CHAR_LENGTH() {
	    return this.getToken(GQLParser.CHAR_LENGTH, 0);
	};

	CHARACTER_LENGTH() {
	    return this.getToken(GQLParser.CHARACTER_LENGTH, 0);
	};

	BYTE_LENGTH() {
	    return this.getToken(GQLParser.BYTE_LENGTH, 0);
	};

	OCTET_LENGTH() {
	    return this.getToken(GQLParser.OCTET_LENGTH, 0);
	};

	PATH_LENGTH() {
	    return this.getToken(GQLParser.PATH_LENGTH, 0);
	};

	ABS() {
	    return this.getToken(GQLParser.ABS, 0);
	};

	SIN() {
	    return this.getToken(GQLParser.SIN, 0);
	};

	COS() {
	    return this.getToken(GQLParser.COS, 0);
	};

	TAN() {
	    return this.getToken(GQLParser.TAN, 0);
	};

	COT() {
	    return this.getToken(GQLParser.COT, 0);
	};

	SINH() {
	    return this.getToken(GQLParser.SINH, 0);
	};

	COSH() {
	    return this.getToken(GQLParser.COSH, 0);
	};

	TANH() {
	    return this.getToken(GQLParser.TANH, 0);
	};

	ASIN() {
	    return this.getToken(GQLParser.ASIN, 0);
	};

	ACOS() {
	    return this.getToken(GQLParser.ACOS, 0);
	};

	ATAN() {
	    return this.getToken(GQLParser.ATAN, 0);
	};

	DEGREES() {
	    return this.getToken(GQLParser.DEGREES, 0);
	};

	RADIANS() {
	    return this.getToken(GQLParser.RADIANS, 0);
	};

	LOG10() {
	    return this.getToken(GQLParser.LOG10, 0);
	};

	LN() {
	    return this.getToken(GQLParser.LN, 0);
	};

	EXP() {
	    return this.getToken(GQLParser.EXP, 0);
	};

	SQRT() {
	    return this.getToken(GQLParser.SQRT, 0);
	};

	FLOOR() {
	    return this.getToken(GQLParser.FLOOR, 0);
	};

	CEIL() {
	    return this.getToken(GQLParser.CEIL, 0);
	};

	CEILING() {
	    return this.getToken(GQLParser.CEILING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterOneArgNumericFunctionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitOneArgNumericFunctionName(this);
		}
	}


}



class TwoArgNumericFunctionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_twoArgNumericFunctionName;
    }

	MOD() {
	    return this.getToken(GQLParser.MOD, 0);
	};

	LOG() {
	    return this.getToken(GQLParser.LOG, 0);
	};

	POWER() {
	    return this.getToken(GQLParser.POWER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterTwoArgNumericFunctionName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitTwoArgNumericFunctionName(this);
		}
	}


}



class StringFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_stringFunction;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class GqlSubstringFunctionContext extends StringFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        this.dir = null;;
        this.str = null;;
        this.strLen = null;;
        super.copyFrom(ctx);
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	COMMA() {
	    return this.getToken(GQLParser.COMMA, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	expressionAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionAtomContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionAtomContext,i);
	    }
	};

	LEFT() {
	    return this.getToken(GQLParser.LEFT, 0);
	};

	RIGHT() {
	    return this.getToken(GQLParser.RIGHT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlSubstringFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlSubstringFunction(this);
		}
	}


}

GQLParser.GqlSubstringFunctionContext = GqlSubstringFunctionContext;

class GqlMultiTrimStringFunctionContext extends StringFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        this.dir = null;;
        this.trimSrc = null;;
        this.delChar = null;;
        super.copyFrom(ctx);
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	expressionAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionAtomContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionAtomContext,i);
	    }
	};

	BTRIM() {
	    return this.getToken(GQLParser.BTRIM, 0);
	};

	LTRIM() {
	    return this.getToken(GQLParser.LTRIM, 0);
	};

	RTRIM() {
	    return this.getToken(GQLParser.RTRIM, 0);
	};

	COMMA() {
	    return this.getToken(GQLParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlMultiTrimStringFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlMultiTrimStringFunction(this);
		}
	}


}

GQLParser.GqlMultiTrimStringFunctionContext = GqlMultiTrimStringFunctionContext;

class GqlFoldStringFunctionContext extends StringFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        this.dir = null;;
        super.copyFrom(ctx);
    }

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	expressionAtom() {
	    return this.getTypedRuleContext(ExpressionAtomContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	UPPER() {
	    return this.getToken(GQLParser.UPPER, 0);
	};

	LOWER() {
	    return this.getToken(GQLParser.LOWER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlFoldStringFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlFoldStringFunction(this);
		}
	}


}

GQLParser.GqlFoldStringFunctionContext = GqlFoldStringFunctionContext;

class GqlSingleTrimStringFunctionContext extends StringFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        this.trimSrc = null;;
        super.copyFrom(ctx);
    }

	TRIM() {
	    return this.getToken(GQLParser.TRIM, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	expressionAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionAtomContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionAtomContext,i);
	    }
	};

	FROM() {
	    return this.getToken(GQLParser.FROM, 0);
	};

	trimSpecification() {
	    return this.getTypedRuleContext(TrimSpecificationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlSingleTrimStringFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlSingleTrimStringFunction(this);
		}
	}


}

GQLParser.GqlSingleTrimStringFunctionContext = GqlSingleTrimStringFunctionContext;

class GqlNormStringFunctionContext extends StringFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NORMALIZE() {
	    return this.getToken(GQLParser.NORMALIZE, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	expressionAtom() {
	    return this.getTypedRuleContext(ExpressionAtomContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	COMMA() {
	    return this.getToken(GQLParser.COMMA, 0);
	};

	normalForm() {
	    return this.getTypedRuleContext(NormalFormContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlNormStringFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlNormStringFunction(this);
		}
	}


}

GQLParser.GqlNormStringFunctionContext = GqlNormStringFunctionContext;

class ListFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_listFunction;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class GqlElementsOfPathFunctionContext extends ListFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ELEMENTS() {
	    return this.getToken(GQLParser.ELEMENTS, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	expressionAtom() {
	    return this.getTypedRuleContext(ExpressionAtomContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlElementsOfPathFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlElementsOfPathFunction(this);
		}
	}


}

GQLParser.GqlElementsOfPathFunctionContext = GqlElementsOfPathFunctionContext;

class GqlListTrimFunctionContext extends ListFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        this.list = null;;
        this.trim = null;;
        super.copyFrom(ctx);
    }

	TRIM() {
	    return this.getToken(GQLParser.TRIM, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	COMMA() {
	    return this.getToken(GQLParser.COMMA, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	expressionAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionAtomContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionAtomContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlListTrimFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlListTrimFunction(this);
		}
	}


}

GQLParser.GqlListTrimFunctionContext = GqlListTrimFunctionContext;

class CaseFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_caseFunction;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class GqlCoalesceCaseFunctionContext extends CaseFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	COALESCE() {
	    return this.getToken(GQLParser.COALESCE, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlCoalesceCaseFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlCoalesceCaseFunction(this);
		}
	}


}

GQLParser.GqlCoalesceCaseFunctionContext = GqlCoalesceCaseFunctionContext;

class GqlSimpleCaseFunctionContext extends CaseFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CASE() {
	    return this.getToken(GQLParser.CASE, 0);
	};

	expressionAtom() {
	    return this.getTypedRuleContext(ExpressionAtomContext,0);
	};

	END() {
	    return this.getToken(GQLParser.END, 0);
	};

	simpleWhenClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimpleWhenClauseContext);
	    } else {
	        return this.getTypedRuleContext(SimpleWhenClauseContext,i);
	    }
	};

	elseClause() {
	    return this.getTypedRuleContext(ElseClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlSimpleCaseFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlSimpleCaseFunction(this);
		}
	}


}

GQLParser.GqlSimpleCaseFunctionContext = GqlSimpleCaseFunctionContext;

class GqlNullIfCaseFunctionContext extends CaseFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        this.lhs = null;;
        this.rhs = null;;
        super.copyFrom(ctx);
    }

	NULLIF() {
	    return this.getToken(GQLParser.NULLIF, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	COMMA() {
	    return this.getToken(GQLParser.COMMA, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlNullIfCaseFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlNullIfCaseFunction(this);
		}
	}


}

GQLParser.GqlNullIfCaseFunctionContext = GqlNullIfCaseFunctionContext;

class GqlSearchedCaseFunctionContext extends CaseFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CASE() {
	    return this.getToken(GQLParser.CASE, 0);
	};

	END() {
	    return this.getToken(GQLParser.END, 0);
	};

	searchedWhenClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SearchedWhenClauseContext);
	    } else {
	        return this.getTypedRuleContext(SearchedWhenClauseContext,i);
	    }
	};

	elseClause() {
	    return this.getTypedRuleContext(ElseClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlSearchedCaseFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlSearchedCaseFunction(this);
		}
	}


}

GQLParser.GqlSearchedCaseFunctionContext = GqlSearchedCaseFunctionContext;

class SimpleWhenClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_simpleWhenClause;
    }

	WHEN() {
	    return this.getToken(GQLParser.WHEN, 0);
	};

	whenOperand = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WhenOperandContext);
	    } else {
	        return this.getTypedRuleContext(WhenOperandContext,i);
	    }
	};

	THEN() {
	    return this.getToken(GQLParser.THEN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSimpleWhenClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSimpleWhenClause(this);
		}
	}


}



class SearchedWhenClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_searchedWhenClause;
    }

	WHEN() {
	    return this.getToken(GQLParser.WHEN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	THEN() {
	    return this.getToken(GQLParser.THEN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterSearchedWhenClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitSearchedWhenClause(this);
		}
	}


}



class ElseClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_elseClause;
    }

	ELSE() {
	    return this.getToken(GQLParser.ELSE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterElseClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitElseClause(this);
		}
	}


}



class WhenOperandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_whenOperand;
    }

	expressionAtom() {
	    return this.getTypedRuleContext(ExpressionAtomContext,0);
	};

	comparisonPredicateCond() {
	    return this.getTypedRuleContext(ComparisonPredicateCondContext,0);
	};

	nullPredicateCond() {
	    return this.getTypedRuleContext(NullPredicateCondContext,0);
	};

	directedPredicateCond() {
	    return this.getTypedRuleContext(DirectedPredicateCondContext,0);
	};

	labeledPredicateCond() {
	    return this.getTypedRuleContext(LabeledPredicateCondContext,0);
	};

	sourceDestinationPredicateCond() {
	    return this.getTypedRuleContext(SourceDestinationPredicateCondContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterWhenOperand(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitWhenOperand(this);
		}
	}


}



class CastFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_castFunction;
    }

	CAST() {
	    return this.getToken(GQLParser.CAST, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	AS() {
	    return this.getToken(GQLParser.AS, 0);
	};

	valueType() {
	    return this.getTypedRuleContext(ValueTypeContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCastFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCastFunction(this);
		}
	}


}



class ElementIdFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_elementIdFunction;
    }

	ELEMENT_ID() {
	    return this.getToken(GQLParser.ELEMENT_ID, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterElementIdFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitElementIdFunction(this);
		}
	}


}



class DatetimeValueFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_datetimeValueFunction;
    }

	dateFunction() {
	    return this.getTypedRuleContext(DateFunctionContext,0);
	};

	timeFunction() {
	    return this.getTypedRuleContext(TimeFunctionContext,0);
	};

	datetimeFunction() {
	    return this.getTypedRuleContext(DatetimeFunctionContext,0);
	};

	localTimeFunction() {
	    return this.getTypedRuleContext(LocalTimeFunctionContext,0);
	};

	localDatetimeFunction() {
	    return this.getTypedRuleContext(LocalDatetimeFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDatetimeValueFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDatetimeValueFunction(this);
		}
	}


}



class DateFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_dateFunction;
    }

	CURRENT_DATE() {
	    return this.getToken(GQLParser.CURRENT_DATE, 0);
	};

	DATE() {
	    return this.getToken(GQLParser.DATE, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	dateFunctionParameters() {
	    return this.getTypedRuleContext(DateFunctionParametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDateFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDateFunction(this);
		}
	}


}



class TimeFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_timeFunction;
    }

	CURRENT_TIME() {
	    return this.getToken(GQLParser.CURRENT_TIME, 0);
	};

	ZONED_TIME() {
	    return this.getToken(GQLParser.ZONED_TIME, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	timeFunctionParameters() {
	    return this.getTypedRuleContext(TimeFunctionParametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterTimeFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitTimeFunction(this);
		}
	}


}



class LocalTimeFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_localTimeFunction;
    }

	LOCAL_TIME() {
	    return this.getToken(GQLParser.LOCAL_TIME, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	timeFunctionParameters() {
	    return this.getTypedRuleContext(TimeFunctionParametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLocalTimeFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLocalTimeFunction(this);
		}
	}


}



class DatetimeFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_datetimeFunction;
    }

	CURRENT_TIMESTAMP() {
	    return this.getToken(GQLParser.CURRENT_TIMESTAMP, 0);
	};

	ZONED_DATETIME() {
	    return this.getToken(GQLParser.ZONED_DATETIME, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	datetimeFunctionParameters() {
	    return this.getTypedRuleContext(DatetimeFunctionParametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDatetimeFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDatetimeFunction(this);
		}
	}


}



class LocalDatetimeFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_localDatetimeFunction;
    }

	LOCAL_TIMESTAMP() {
	    return this.getToken(GQLParser.LOCAL_TIMESTAMP, 0);
	};

	LOCAL_DATETIME() {
	    return this.getToken(GQLParser.LOCAL_DATETIME, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	datetimeFunctionParameters() {
	    return this.getTypedRuleContext(DatetimeFunctionParametersContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterLocalDatetimeFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitLocalDatetimeFunction(this);
		}
	}


}



class DateFunctionParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_dateFunctionParameters;
    }

	dateString() {
	    return this.getTypedRuleContext(DateStringContext,0);
	};

	recordValueConstructor() {
	    return this.getTypedRuleContext(RecordValueConstructorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDateFunctionParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDateFunctionParameters(this);
		}
	}


}



class TimeFunctionParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_timeFunctionParameters;
    }

	timeString() {
	    return this.getTypedRuleContext(TimeStringContext,0);
	};

	recordValueConstructor() {
	    return this.getTypedRuleContext(RecordValueConstructorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterTimeFunctionParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitTimeFunctionParameters(this);
		}
	}


}



class DatetimeFunctionParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_datetimeFunctionParameters;
    }

	datetimeString() {
	    return this.getTypedRuleContext(DatetimeStringContext,0);
	};

	recordValueConstructor() {
	    return this.getTypedRuleContext(RecordValueConstructorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDatetimeFunctionParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDatetimeFunctionParameters(this);
		}
	}


}



class DateStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_dateString;
    }

	unbrokenCharacterStringLiteral() {
	    return this.getTypedRuleContext(UnbrokenCharacterStringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDateString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDateString(this);
		}
	}


}



class TimeStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_timeString;
    }

	unbrokenCharacterStringLiteral() {
	    return this.getTypedRuleContext(UnbrokenCharacterStringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterTimeString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitTimeString(this);
		}
	}


}



class DatetimeStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_datetimeString;
    }

	unbrokenCharacterStringLiteral() {
	    return this.getTypedRuleContext(UnbrokenCharacterStringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDatetimeString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDatetimeString(this);
		}
	}


}



class DurationFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_durationFunction;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class GqlDatetimeSubtractionFunctionContext extends DurationFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DURATION_BETWEEN() {
	    return this.getToken(GQLParser.DURATION_BETWEEN, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	expressionAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionAtomContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionAtomContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(GQLParser.COMMA, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlDatetimeSubtractionFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlDatetimeSubtractionFunction(this);
		}
	}


}

GQLParser.GqlDatetimeSubtractionFunctionContext = GqlDatetimeSubtractionFunctionContext;

class GqlDurationFunctionContext extends DurationFunctionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DURATION() {
	    return this.getToken(GQLParser.DURATION, 0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	durationFunctionParameters() {
	    return this.getTypedRuleContext(DurationFunctionParametersContext,0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGqlDurationFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGqlDurationFunction(this);
		}
	}


}

GQLParser.GqlDurationFunctionContext = GqlDurationFunctionContext;

class DurationFunctionParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_durationFunctionParameters;
    }

	durationString() {
	    return this.getTypedRuleContext(DurationStringContext,0);
	};

	recordValueConstructor() {
	    return this.getTypedRuleContext(RecordValueConstructorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDurationFunctionParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDurationFunctionParameters(this);
		}
	}


}



class DurationStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_durationString;
    }

	unbrokenCharacterStringLiteral() {
	    return this.getTypedRuleContext(UnbrokenCharacterStringLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterDurationString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitDurationString(this);
		}
	}


}



class GeneralFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_generalFunction;
    }

	functionName() {
	    return this.getTypedRuleContext(FunctionNameContext,0);
	};

	LEFT_PAREN() {
	    return this.getToken(GQLParser.LEFT_PAREN, 0);
	};

	RIGHT_PAREN() {
	    return this.getToken(GQLParser.RIGHT_PAREN, 0);
	};

	procedureArgumentList() {
	    return this.getTypedRuleContext(ProcedureArgumentListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGeneralFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGeneralFunction(this);
		}
	}


}



class CollectionValueConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_collectionValueConstructor;
    }

	listValueConstructor() {
	    return this.getTypedRuleContext(ListValueConstructorContext,0);
	};

	recordValueConstructor() {
	    return this.getTypedRuleContext(RecordValueConstructorContext,0);
	};

	pathValueConstructor() {
	    return this.getTypedRuleContext(PathValueConstructorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterCollectionValueConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitCollectionValueConstructor(this);
		}
	}


}



class TrimSpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_trimSpecification;
    }

	LEADING() {
	    return this.getToken(GQLParser.LEADING, 0);
	};

	TRAILING() {
	    return this.getToken(GQLParser.TRAILING, 0);
	};

	BOTH() {
	    return this.getToken(GQLParser.BOTH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterTrimSpecification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitTrimSpecification(this);
		}
	}


}



class NormalFormContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_normalForm;
    }

	NFC() {
	    return this.getToken(GQLParser.NFC, 0);
	};

	NFD() {
	    return this.getToken(GQLParser.NFD, 0);
	};

	NFKC() {
	    return this.getToken(GQLParser.NFKC, 0);
	};

	NFKD() {
	    return this.getToken(GQLParser.NFKD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterNormalForm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitNormalForm(this);
		}
	}


}



class ListValueConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_listValueConstructor;
    }

	LEFT_BRACKET() {
	    return this.getToken(GQLParser.LEFT_BRACKET, 0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(GQLParser.RIGHT_BRACKET, 0);
	};

	listValueTypeName() {
	    return this.getTypedRuleContext(ListValueTypeNameContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterListValueConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitListValueConstructor(this);
		}
	}


}



class RecordValueConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_recordValueConstructor;
    }

	LEFT_BRACE() {
	    return this.getToken(GQLParser.LEFT_BRACE, 0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GQLParser.RIGHT_BRACE, 0);
	};

	RECORD() {
	    return this.getToken(GQLParser.RECORD, 0);
	};

	field = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FieldContext);
	    } else {
	        return this.getTypedRuleContext(FieldContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterRecordValueConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitRecordValueConstructor(this);
		}
	}


}



class FieldContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_field;
        this.key = null;
        this.value = null;
    }

	COLON() {
	    return this.getToken(GQLParser.COLON, 0);
	};

	fieldName() {
	    return this.getTypedRuleContext(FieldNameContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterField(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitField(this);
		}
	}


}



class PathValueConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_pathValueConstructor;
    }

	PATH() {
	    return this.getToken(GQLParser.PATH, 0);
	};

	LEFT_BRACKET() {
	    return this.getToken(GQLParser.LEFT_BRACKET, 0);
	};

	expressionAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionAtomContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionAtomContext,i);
	    }
	};

	RIGHT_BRACKET() {
	    return this.getToken(GQLParser.RIGHT_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterPathValueConstructor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitPathValueConstructor(this);
		}
	}


}



class UnsignedLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_unsignedLiteral;
    }

	unsignedNumericLiteral() {
	    return this.getTypedRuleContext(UnsignedNumericLiteralContext,0);
	};

	generalLiteral() {
	    return this.getTypedRuleContext(GeneralLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterUnsignedLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitUnsignedLiteral(this);
		}
	}


}



class GeneralLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_generalLiteral;
    }

	predefinedTypeLiteral() {
	    return this.getTypedRuleContext(PredefinedTypeLiteralContext,0);
	};

	listLiteral() {
	    return this.getTypedRuleContext(ListLiteralContext,0);
	};

	recordLiteral() {
	    return this.getTypedRuleContext(RecordLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterGeneralLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitGeneralLiteral(this);
		}
	}


}



class ListLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_listLiteral;
    }

	LEFT_BRACKET() {
	    return this.getToken(GQLParser.LEFT_BRACKET, 0);
	};

	RIGHT_BRACKET() {
	    return this.getToken(GQLParser.RIGHT_BRACKET, 0);
	};

	listValueTypeName() {
	    return this.getTypedRuleContext(ListValueTypeNameContext,0);
	};

	generalLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GeneralLiteralContext);
	    } else {
	        return this.getTypedRuleContext(GeneralLiteralContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterListLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitListLiteral(this);
		}
	}


}



class RecordLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_recordLiteral;
    }

	LEFT_BRACE() {
	    return this.getToken(GQLParser.LEFT_BRACE, 0);
	};

	RIGHT_BRACE() {
	    return this.getToken(GQLParser.RIGHT_BRACE, 0);
	};

	RECORD() {
	    return this.getToken(GQLParser.RECORD, 0);
	};

	recordFieldLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RecordFieldLiteralContext);
	    } else {
	        return this.getTypedRuleContext(RecordFieldLiteralContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(GQLParser.COMMA);
	    } else {
	        return this.getToken(GQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterRecordLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitRecordLiteral(this);
		}
	}


}



class RecordFieldLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = GQLParser.RULE_recordFieldLiteral;
        this.key = null;
        this.value = null;
    }

	COLON() {
	    return this.getToken(GQLParser.COLON, 0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	generalLiteral() {
	    return this.getTypedRuleContext(GeneralLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.enterRecordFieldLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof GQLParserListener ) {
	        listener.exitRecordFieldLiteral(this);
		}
	}


}




GQLParser.RootContext = RootContext; 
GQLParser.GqlProgramContext = GqlProgramContext; 
GQLParser.ProgramActivityContext = ProgramActivityContext; 
GQLParser.SessionActivityContext = SessionActivityContext; 
GQLParser.SessionActivityCommandContext = SessionActivityCommandContext; 
GQLParser.TransactionActivityContext = TransactionActivityContext; 
GQLParser.EndTransactionCommandContext = EndTransactionCommandContext; 
GQLParser.SessionSetCommandContext = SessionSetCommandContext; 
GQLParser.SessionSetSchemaClauseContext = SessionSetSchemaClauseContext; 
GQLParser.SessionSetGraphClauseContext = SessionSetGraphClauseContext; 
GQLParser.SessionSetTimeZoneClauseContext = SessionSetTimeZoneClauseContext; 
GQLParser.SetTimeZoneValueContext = SetTimeZoneValueContext; 
GQLParser.SessionSetParameterClauseContext = SessionSetParameterClauseContext; 
GQLParser.SessionSetGraphParameterClauseContext = SessionSetGraphParameterClauseContext; 
GQLParser.SessionSetBindingTableParameterClauseContext = SessionSetBindingTableParameterClauseContext; 
GQLParser.SessionSetValueParameterClauseContext = SessionSetValueParameterClauseContext; 
GQLParser.SessionSetParameterNameContext = SessionSetParameterNameContext; 
GQLParser.SessionResetCommandContext = SessionResetCommandContext; 
GQLParser.SessionResetArgumentsContext = SessionResetArgumentsContext; 
GQLParser.SessionCloseCommandContext = SessionCloseCommandContext; 
GQLParser.StartTransactionCommandContext = StartTransactionCommandContext; 
GQLParser.TransactionCharacteristicsContext = TransactionCharacteristicsContext; 
GQLParser.TransactionModeContext = TransactionModeContext; 
GQLParser.TransactionAccessModeContext = TransactionAccessModeContext; 
GQLParser.ImplementationDefinedAccessModeContext = ImplementationDefinedAccessModeContext; 
GQLParser.RollbackCommandContext = RollbackCommandContext; 
GQLParser.CommitCommandContext = CommitCommandContext; 
GQLParser.NestedProcedureSpecificationContext = NestedProcedureSpecificationContext; 
GQLParser.ProcedureSpecificationContext = ProcedureSpecificationContext; 
GQLParser.CatalogModifyingProcedureSpecificationContext = CatalogModifyingProcedureSpecificationContext; 
GQLParser.NestedDataModifyingProcedureSpecificationContext = NestedDataModifyingProcedureSpecificationContext; 
GQLParser.DataModifyingProcedureSpecificationContext = DataModifyingProcedureSpecificationContext; 
GQLParser.NestedQuerySpecificationContext = NestedQuerySpecificationContext; 
GQLParser.QuerySpecificationContext = QuerySpecificationContext; 
GQLParser.UnsignedNumericLiteralContext = UnsignedNumericLiteralContext; 
GQLParser.IntegerLiteralContext = IntegerLiteralContext; 
GQLParser.FloatLiteralContext = FloatLiteralContext; 
GQLParser.UnbrokenSingleQuotedCharacterSequenceContext = UnbrokenSingleQuotedCharacterSequenceContext; 
GQLParser.UnbrokenDoubleQuotedCharacterSequenceContext = UnbrokenDoubleQuotedCharacterSequenceContext; 
GQLParser.UnbrokenAccentQuotedCharacterSequenceContext = UnbrokenAccentQuotedCharacterSequenceContext; 
GQLParser.SingleQuotedCharacterSequenceContext = SingleQuotedCharacterSequenceContext; 
GQLParser.DoubleQuotedCharacterSequenceContext = DoubleQuotedCharacterSequenceContext; 
GQLParser.AccentQuotedCharacterSequenceContext = AccentQuotedCharacterSequenceContext; 
GQLParser.UnbrokenCharacterStringLiteralContext = UnbrokenCharacterStringLiteralContext; 
GQLParser.NullLiteralContext = NullLiteralContext; 
GQLParser.TemporalLiteralContext = TemporalLiteralContext; 
GQLParser.SqlDatetimeLiteralContext = SqlDatetimeLiteralContext; 
GQLParser.DateLiteralContext = DateLiteralContext; 
GQLParser.TimeLiteralContext = TimeLiteralContext; 
GQLParser.DatetimeLiteralContext = DatetimeLiteralContext; 
GQLParser.DurationLiteralContext = DurationLiteralContext; 
GQLParser.SqlIntervalLiteralContext = SqlIntervalLiteralContext; 
GQLParser.SqlIntervalTypeContext = SqlIntervalTypeContext; 
GQLParser.IdentifierContext = IdentifierContext; 
GQLParser.DelimitedIdentifierContext = DelimitedIdentifierContext; 
GQLParser.ObjectNameContext = ObjectNameContext; 
GQLParser.ObjectNameOrBindingVariableContext = ObjectNameOrBindingVariableContext; 
GQLParser.DirectoryNameContext = DirectoryNameContext; 
GQLParser.SchemaNameContext = SchemaNameContext; 
GQLParser.GraphNameContext = GraphNameContext; 
GQLParser.DelimitedGraphNameContext = DelimitedGraphNameContext; 
GQLParser.GraphTypeNameContext = GraphTypeNameContext; 
GQLParser.ElementTypeNameContext = ElementTypeNameContext; 
GQLParser.BindingTableNameContext = BindingTableNameContext; 
GQLParser.DelimitedBindingTableNameContext = DelimitedBindingTableNameContext; 
GQLParser.ProcedureNameContext = ProcedureNameContext; 
GQLParser.LabelNameContext = LabelNameContext; 
GQLParser.FunctionNameContext = FunctionNameContext; 
GQLParser.PropertyNameContext = PropertyNameContext; 
GQLParser.FieldNameContext = FieldNameContext; 
GQLParser.ParameterNameContext = ParameterNameContext; 
GQLParser.VariableContext = VariableContext; 
GQLParser.GraphVariableContext = GraphVariableContext; 
GQLParser.GraphPatternVariableContext = GraphPatternVariableContext; 
GQLParser.PathOrSubpathVariableContext = PathOrSubpathVariableContext; 
GQLParser.ElementVariableContext = ElementVariableContext; 
GQLParser.PathVariableContext = PathVariableContext; 
GQLParser.SubpathVariableContext = SubpathVariableContext; 
GQLParser.BindingTableVariableContext = BindingTableVariableContext; 
GQLParser.ValueVariableContext = ValueVariableContext; 
GQLParser.BindingVariableContext = BindingVariableContext; 
GQLParser.PredefinedTypeLiteralContext = PredefinedTypeLiteralContext; 
GQLParser.BooleanLiteralContext = BooleanLiteralContext; 
GQLParser.CharacterStringLiteralContext = CharacterStringLiteralContext; 
GQLParser.ByteStringLiteralContext = ByteStringLiteralContext; 
GQLParser.ProcedureBodyContext = ProcedureBodyContext; 
GQLParser.BindingVariableDefinitionBlockContext = BindingVariableDefinitionBlockContext; 
GQLParser.BindingVariableDefinitionContext = BindingVariableDefinitionContext; 
GQLParser.StatementBlockContext = StatementBlockContext; 
GQLParser.StatementContext = StatementContext; 
GQLParser.NextStatementContext = NextStatementContext; 
GQLParser.GraphVariableDefinitionContext = GraphVariableDefinitionContext; 
GQLParser.OptTypedGraphInitializerContext = OptTypedGraphInitializerContext; 
GQLParser.GraphInitializerContext = GraphInitializerContext; 
GQLParser.BindingTableVariableDefinitionContext = BindingTableVariableDefinitionContext; 
GQLParser.OptTypedBindingTableInitializerContext = OptTypedBindingTableInitializerContext; 
GQLParser.BindingTableInitializerContext = BindingTableInitializerContext; 
GQLParser.ValueVariableDefinitionContext = ValueVariableDefinitionContext; 
GQLParser.OptTypedValueInitializerContext = OptTypedValueInitializerContext; 
GQLParser.GraphExpressionContext = GraphExpressionContext; 
GQLParser.CurrentGraphContext = CurrentGraphContext; 
GQLParser.NestedGraphQuerySpecificationContext = NestedGraphQuerySpecificationContext; 
GQLParser.BindingTableExpressionContext = BindingTableExpressionContext; 
GQLParser.NestedBindingTableQuerySpecificationContext = NestedBindingTableQuerySpecificationContext; 
GQLParser.ObjectExpressionPrimaryContext = ObjectExpressionPrimaryContext; 
GQLParser.LinearCatalogModifyingStatementContext = LinearCatalogModifyingStatementContext; 
GQLParser.SimpleCatalogModifyingStatementContext = SimpleCatalogModifyingStatementContext; 
GQLParser.PrimitiveCatalogModifyingStatementContext = PrimitiveCatalogModifyingStatementContext; 
GQLParser.CreateSchemaStatementContext = CreateSchemaStatementContext; 
GQLParser.DropSchemaStatementContext = DropSchemaStatementContext; 
GQLParser.CreateGraphStatementContext = CreateGraphStatementContext; 
GQLParser.OpenGraphTypeContext = OpenGraphTypeContext; 
GQLParser.OfGraphTypeContext = OfGraphTypeContext; 
GQLParser.GraphTypeLikeGraphContext = GraphTypeLikeGraphContext; 
GQLParser.GraphSourceContext = GraphSourceContext; 
GQLParser.DropGraphStatementContext = DropGraphStatementContext; 
GQLParser.CreateGraphTypeStatementContext = CreateGraphTypeStatementContext; 
GQLParser.GraphTypeSourceContext = GraphTypeSourceContext; 
GQLParser.CopyOfGraphTypeContext = CopyOfGraphTypeContext; 
GQLParser.DropGraphTypeStatementContext = DropGraphTypeStatementContext; 
GQLParser.CallCatalogModifyingProcedureStatementContext = CallCatalogModifyingProcedureStatementContext; 
GQLParser.LinearDataModifyingStatementContext = LinearDataModifyingStatementContext; 
GQLParser.FocusedLinearDataModifyingStatementContext = FocusedLinearDataModifyingStatementContext; 
GQLParser.FocusedLinearDataModifyingStatementBodyContext = FocusedLinearDataModifyingStatementBodyContext; 
GQLParser.FocusedNestedDataModifyingProcedureSpecificationContext = FocusedNestedDataModifyingProcedureSpecificationContext; 
GQLParser.AmbientLinearDataModifyingStatementContext = AmbientLinearDataModifyingStatementContext; 
GQLParser.AmbientLinearDataModifyingStatementBodyContext = AmbientLinearDataModifyingStatementBodyContext; 
GQLParser.SimpleLinearDataAccessingStatementContext = SimpleLinearDataAccessingStatementContext; 
GQLParser.SimpleDataAccessingStatementContext = SimpleDataAccessingStatementContext; 
GQLParser.SimpleDataModifyingStatementContext = SimpleDataModifyingStatementContext; 
GQLParser.PrimitiveDataModifyingStatementContext = PrimitiveDataModifyingStatementContext; 
GQLParser.InsertStatementContext = InsertStatementContext; 
GQLParser.SetStatementContext = SetStatementContext; 
GQLParser.SetItemListContext = SetItemListContext; 
GQLParser.SetItemContext = SetItemContext; 
GQLParser.SetPropertyItemContext = SetPropertyItemContext; 
GQLParser.SetAllPropertiesItemContext = SetAllPropertiesItemContext; 
GQLParser.SetLabelItemContext = SetLabelItemContext; 
GQLParser.LabelSetSpecificationContext = LabelSetSpecificationContext; 
GQLParser.RemoveStatementContext = RemoveStatementContext; 
GQLParser.RemoveItemListContext = RemoveItemListContext; 
GQLParser.RemoveItemContext = RemoveItemContext; 
GQLParser.RemovePropertyItemContext = RemovePropertyItemContext; 
GQLParser.RemoveLabelItemContext = RemoveLabelItemContext; 
GQLParser.DeleteStatementContext = DeleteStatementContext; 
GQLParser.DeleteItemListContext = DeleteItemListContext; 
GQLParser.DeleteItemContext = DeleteItemContext; 
GQLParser.CallDataModifyingProcedureStatementContext = CallDataModifyingProcedureStatementContext; 
GQLParser.CompositeQueryStatementContext = CompositeQueryStatementContext; 
GQLParser.CompositeQueryExpressionContext = CompositeQueryExpressionContext; 
GQLParser.QueryConjunctionContext = QueryConjunctionContext; 
GQLParser.SetOperatorContext = SetOperatorContext; 
GQLParser.CompositeQueryPrimaryContext = CompositeQueryPrimaryContext; 
GQLParser.LinearQueryStatementContext = LinearQueryStatementContext; 
GQLParser.FocusedLinearQueryStatementContext = FocusedLinearQueryStatementContext; 
GQLParser.FocusedLinearQueryStatementPartContext = FocusedLinearQueryStatementPartContext; 
GQLParser.FocusedLinearQueryAndPrimitiveResultStatementPartContext = FocusedLinearQueryAndPrimitiveResultStatementPartContext; 
GQLParser.FocusedPrimitiveResultStatementContext = FocusedPrimitiveResultStatementContext; 
GQLParser.FocusedNestedQuerySpecificationContext = FocusedNestedQuerySpecificationContext; 
GQLParser.AmbientLinearQueryStatementContext = AmbientLinearQueryStatementContext; 
GQLParser.SimpleLinearQueryStatementContext = SimpleLinearQueryStatementContext; 
GQLParser.SimpleQueryStatementContext = SimpleQueryStatementContext; 
GQLParser.PrimitiveQueryStatementContext = PrimitiveQueryStatementContext; 
GQLParser.MatchStatementContext = MatchStatementContext; 
GQLParser.SimpleMatchStatementContext = SimpleMatchStatementContext; 
GQLParser.OptionalMatchStatementContext = OptionalMatchStatementContext; 
GQLParser.OptionalOperandContext = OptionalOperandContext; 
GQLParser.MatchStatementBlockContext = MatchStatementBlockContext; 
GQLParser.CallQueryStatementContext = CallQueryStatementContext; 
GQLParser.FilterStatementContext = FilterStatementContext; 
GQLParser.LetStatementContext = LetStatementContext; 
GQLParser.LetVariableDefinitionListContext = LetVariableDefinitionListContext; 
GQLParser.LetVariableDefinitionContext = LetVariableDefinitionContext; 
GQLParser.ForStatementContext = ForStatementContext; 
GQLParser.ForItemContext = ForItemContext; 
GQLParser.ForItemAliasContext = ForItemAliasContext; 
GQLParser.ForOrdinalityOrOffsetContext = ForOrdinalityOrOffsetContext; 
GQLParser.OrderByAndPageStatementContext = OrderByAndPageStatementContext; 
GQLParser.PrimitiveResultStatementContext = PrimitiveResultStatementContext; 
GQLParser.ReturnStatementContext = ReturnStatementContext; 
GQLParser.ReturnStatementBodyContext = ReturnStatementBodyContext; 
GQLParser.ReturnItemListContext = ReturnItemListContext; 
GQLParser.ReturnItemContext = ReturnItemContext; 
GQLParser.ReturnItemAliasContext = ReturnItemAliasContext; 
GQLParser.SelectStatementContext = SelectStatementContext; 
GQLParser.SelectItemListContext = SelectItemListContext; 
GQLParser.SelectItemContext = SelectItemContext; 
GQLParser.SelectItemAliasContext = SelectItemAliasContext; 
GQLParser.HavingClauseContext = HavingClauseContext; 
GQLParser.SelectStatementBodyContext = SelectStatementBodyContext; 
GQLParser.SelectGraphMatchListContext = SelectGraphMatchListContext; 
GQLParser.SelectGraphMatchContext = SelectGraphMatchContext; 
GQLParser.SelectQuerySpecificationContext = SelectQuerySpecificationContext; 
GQLParser.CallProcedureStatementContext = CallProcedureStatementContext; 
GQLParser.ProcedureCallContext = ProcedureCallContext; 
GQLParser.InlineProcedureCallContext = InlineProcedureCallContext; 
GQLParser.VariableScopeClauseContext = VariableScopeClauseContext; 
GQLParser.BindingVariableReferenceListContext = BindingVariableReferenceListContext; 
GQLParser.NamedProcedureCallContext = NamedProcedureCallContext; 
GQLParser.ProcedureArgumentListContext = ProcedureArgumentListContext; 
GQLParser.ProcedureArgumentContext = ProcedureArgumentContext; 
GQLParser.UseGraphClauseContext = UseGraphClauseContext; 
GQLParser.AtSchemaClauseContext = AtSchemaClauseContext; 
GQLParser.BindingVariableReferenceContext = BindingVariableReferenceContext; 
GQLParser.ElementVariableReferenceContext = ElementVariableReferenceContext; 
GQLParser.PathVariableReferenceContext = PathVariableReferenceContext; 
GQLParser.ParameterContext = ParameterContext; 
GQLParser.GraphPatternBindingTableContext = GraphPatternBindingTableContext; 
GQLParser.GraphPatternYieldClauseContext = GraphPatternYieldClauseContext; 
GQLParser.GraphPatternYieldItemListContext = GraphPatternYieldItemListContext; 
GQLParser.GraphPatternYieldItemContext = GraphPatternYieldItemContext; 
GQLParser.GraphPatternContext = GraphPatternContext; 
GQLParser.MatchModeContext = MatchModeContext; 
GQLParser.RepeatableElementsMatchModeContext = RepeatableElementsMatchModeContext; 
GQLParser.DifferentEdgesMatchModeContext = DifferentEdgesMatchModeContext; 
GQLParser.ElementBindingsOrElementsContext = ElementBindingsOrElementsContext; 
GQLParser.EdgeBindingsOrEdgesContext = EdgeBindingsOrEdgesContext; 
GQLParser.PathPatternListContext = PathPatternListContext; 
GQLParser.PathPatternContext = PathPatternContext; 
GQLParser.PathVariableDeclarationContext = PathVariableDeclarationContext; 
GQLParser.KeepClauseContext = KeepClauseContext; 
GQLParser.GraphPatternWhereClauseContext = GraphPatternWhereClauseContext; 
GQLParser.PathPatternPrefixContext = PathPatternPrefixContext; 
GQLParser.PathModePrefixContext = PathModePrefixContext; 
GQLParser.PathModeContext = PathModeContext; 
GQLParser.PathSearchPrefixContext = PathSearchPrefixContext; 
GQLParser.AllPathSearchContext = AllPathSearchContext; 
GQLParser.PathOrPathsContext = PathOrPathsContext; 
GQLParser.AnyPathSearchContext = AnyPathSearchContext; 
GQLParser.NumberOfPathsContext = NumberOfPathsContext; 
GQLParser.ShortestPathSearchContext = ShortestPathSearchContext; 
GQLParser.AllShortestPathSearchContext = AllShortestPathSearchContext; 
GQLParser.AnyShortestPathSearchContext = AnyShortestPathSearchContext; 
GQLParser.CountedShortestPathSearchContext = CountedShortestPathSearchContext; 
GQLParser.CountedShortestGroupSearchContext = CountedShortestGroupSearchContext; 
GQLParser.NumberOfGroupsContext = NumberOfGroupsContext; 
GQLParser.PathPatternExpressionContext = PathPatternExpressionContext; 
GQLParser.PathMultisetAlternationContext = PathMultisetAlternationContext; 
GQLParser.PathPatternUnionContext = PathPatternUnionContext; 
GQLParser.PathTermContext = PathTermContext; 
GQLParser.PathFactorContext = PathFactorContext; 
GQLParser.QuantifiedPathPrimaryContext = QuantifiedPathPrimaryContext; 
GQLParser.QuestionedPathPrimaryContext = QuestionedPathPrimaryContext; 
GQLParser.PathPrimaryContext = PathPrimaryContext; 
GQLParser.ElementPatternContext = ElementPatternContext; 
GQLParser.NodePatternContext = NodePatternContext; 
GQLParser.ElementPatternFillerContext = ElementPatternFillerContext; 
GQLParser.ElementVariableDeclarationContext = ElementVariableDeclarationContext; 
GQLParser.IsLabelExpressionContext = IsLabelExpressionContext; 
GQLParser.IsOrColonContext = IsOrColonContext; 
GQLParser.ElementPatternPredicateContext = ElementPatternPredicateContext; 
GQLParser.ElementPatternWhereClauseContext = ElementPatternWhereClauseContext; 
GQLParser.ElementPropertySpecificationContext = ElementPropertySpecificationContext; 
GQLParser.PropertyKeyValuePairListContext = PropertyKeyValuePairListContext; 
GQLParser.PropertyKeyValuePairContext = PropertyKeyValuePairContext; 
GQLParser.EdgePatternContext = EdgePatternContext; 
GQLParser.FullEdgePatternContext = FullEdgePatternContext; 
GQLParser.FullEdgePointingLeftContext = FullEdgePointingLeftContext; 
GQLParser.FullEdgeUndirectedContext = FullEdgeUndirectedContext; 
GQLParser.FullEdgePointingRightContext = FullEdgePointingRightContext; 
GQLParser.FullEdgeLeftOrUndirectedContext = FullEdgeLeftOrUndirectedContext; 
GQLParser.FullEdgeUndirectedOrRightContext = FullEdgeUndirectedOrRightContext; 
GQLParser.FullEdgeLeftOrRightContext = FullEdgeLeftOrRightContext; 
GQLParser.FullEdgeAnyDirectionContext = FullEdgeAnyDirectionContext; 
GQLParser.AbbreviatedEdgePatternContext = AbbreviatedEdgePatternContext; 
GQLParser.ParenthesizedPathPatternExpressionContext = ParenthesizedPathPatternExpressionContext; 
GQLParser.SubpathVariableDeclarationContext = SubpathVariableDeclarationContext; 
GQLParser.ParenthesizedPathPatternWhereClauseContext = ParenthesizedPathPatternWhereClauseContext; 
GQLParser.InsertGraphPatternContext = InsertGraphPatternContext; 
GQLParser.InsertPathPatternListContext = InsertPathPatternListContext; 
GQLParser.InsertPathPatternContext = InsertPathPatternContext; 
GQLParser.InsertNodePatternContext = InsertNodePatternContext; 
GQLParser.InsertEdgePatternContext = InsertEdgePatternContext; 
GQLParser.InsertEdgePointingLeftContext = InsertEdgePointingLeftContext; 
GQLParser.InsertEdgePointingRightContext = InsertEdgePointingRightContext; 
GQLParser.InsertEdgeUndirectedContext = InsertEdgeUndirectedContext; 
GQLParser.InsertElementPatternFillerContext = InsertElementPatternFillerContext; 
GQLParser.LabelAndPropertySetSpecificationContext = LabelAndPropertySetSpecificationContext; 
GQLParser.LabelExpressionContext = LabelExpressionContext; 
GQLParser.LabelTermContext = LabelTermContext; 
GQLParser.LabelFactorContext = LabelFactorContext; 
GQLParser.LabelPrimaryContext = LabelPrimaryContext; 
GQLParser.WildcardLabelContext = WildcardLabelContext; 
GQLParser.ParenthesizedLabelExpressionContext = ParenthesizedLabelExpressionContext; 
GQLParser.GraphPatternQuantifierContext = GraphPatternQuantifierContext; 
GQLParser.FixedQuantifierContext = FixedQuantifierContext; 
GQLParser.GeneralQuantifierContext = GeneralQuantifierContext; 
GQLParser.LowerBoundContext = LowerBoundContext; 
GQLParser.UpperBoundContext = UpperBoundContext; 
GQLParser.SimplifiedPathPatternExpressionContext = SimplifiedPathPatternExpressionContext; 
GQLParser.SimplifiedDefaultingLeftContext = SimplifiedDefaultingLeftContext; 
GQLParser.SimplifiedDefaultingUndirectedContext = SimplifiedDefaultingUndirectedContext; 
GQLParser.SimplifiedDefaultingRightContext = SimplifiedDefaultingRightContext; 
GQLParser.SimplifiedDefaultingLeftOrUndirectedContext = SimplifiedDefaultingLeftOrUndirectedContext; 
GQLParser.SimplifiedDefaultingUndirectedOrRightContext = SimplifiedDefaultingUndirectedOrRightContext; 
GQLParser.SimplifiedDefaultingLeftOrRightContext = SimplifiedDefaultingLeftOrRightContext; 
GQLParser.SimplifiedDefaultingAnyDirectionContext = SimplifiedDefaultingAnyDirectionContext; 
GQLParser.SimplifiedContentsContext = SimplifiedContentsContext; 
GQLParser.SimplifiedPathUnionContext = SimplifiedPathUnionContext; 
GQLParser.SimplifiedMultisetAlternationContext = SimplifiedMultisetAlternationContext; 
GQLParser.SimplifiedTermContext = SimplifiedTermContext; 
GQLParser.SimplifiedFactorLowContext = SimplifiedFactorLowContext; 
GQLParser.SimplifiedFactorHighContext = SimplifiedFactorHighContext; 
GQLParser.SimplifiedQuantifiedContext = SimplifiedQuantifiedContext; 
GQLParser.SimplifiedQuestionedContext = SimplifiedQuestionedContext; 
GQLParser.SimplifiedTertiaryContext = SimplifiedTertiaryContext; 
GQLParser.SimplifiedDirectionOverrideContext = SimplifiedDirectionOverrideContext; 
GQLParser.SimplifiedOverrideLeftContext = SimplifiedOverrideLeftContext; 
GQLParser.SimplifiedOverrideUndirectedContext = SimplifiedOverrideUndirectedContext; 
GQLParser.SimplifiedOverrideRightContext = SimplifiedOverrideRightContext; 
GQLParser.SimplifiedOverrideLeftOrUndirectedContext = SimplifiedOverrideLeftOrUndirectedContext; 
GQLParser.SimplifiedOverrideUndirectedOrRightContext = SimplifiedOverrideUndirectedOrRightContext; 
GQLParser.SimplifiedOverrideLeftOrRightContext = SimplifiedOverrideLeftOrRightContext; 
GQLParser.SimplifiedOverrideAnyDirectionContext = SimplifiedOverrideAnyDirectionContext; 
GQLParser.SimplifiedSecondaryContext = SimplifiedSecondaryContext; 
GQLParser.SimplifiedNegationContext = SimplifiedNegationContext; 
GQLParser.SimplifiedPrimaryContext = SimplifiedPrimaryContext; 
GQLParser.WhereClauseContext = WhereClauseContext; 
GQLParser.YieldClauseContext = YieldClauseContext; 
GQLParser.YieldItemListContext = YieldItemListContext; 
GQLParser.YieldItemContext = YieldItemContext; 
GQLParser.YieldItemNameContext = YieldItemNameContext; 
GQLParser.YieldItemAliasContext = YieldItemAliasContext; 
GQLParser.GroupByClauseContext = GroupByClauseContext; 
GQLParser.GroupingElementListContext = GroupingElementListContext; 
GQLParser.GroupingElementContext = GroupingElementContext; 
GQLParser.EmptyGroupingSetContext = EmptyGroupingSetContext; 
GQLParser.OrderByClauseContext = OrderByClauseContext; 
GQLParser.AggregateFunctionContext = AggregateFunctionContext; 
GQLParser.GeneralSetFunctionTypeContext = GeneralSetFunctionTypeContext; 
GQLParser.SetQuantifierContext = SetQuantifierContext; 
GQLParser.BinarySetFunctionTypeContext = BinarySetFunctionTypeContext; 
GQLParser.SortSpecificationListContext = SortSpecificationListContext; 
GQLParser.SortSpecificationContext = SortSpecificationContext; 
GQLParser.SortKeyContext = SortKeyContext; 
GQLParser.OrderingSpecificationContext = OrderingSpecificationContext; 
GQLParser.NullOrderingContext = NullOrderingContext; 
GQLParser.LimitClauseContext = LimitClauseContext; 
GQLParser.OffsetClauseContext = OffsetClauseContext; 
GQLParser.OffsetSynonymContext = OffsetSynonymContext; 
GQLParser.NestedGraphTypeSpecificationContext = NestedGraphTypeSpecificationContext; 
GQLParser.GraphTypeSpecificationBodyContext = GraphTypeSpecificationBodyContext; 
GQLParser.ElementTypeDefinitionListContext = ElementTypeDefinitionListContext; 
GQLParser.ElementTypeDefinitionContext = ElementTypeDefinitionContext; 
GQLParser.NodeTypeDefinitionContext = NodeTypeDefinitionContext; 
GQLParser.NodeTypePatternContext = NodeTypePatternContext; 
GQLParser.NodeTypePhraseContext = NodeTypePhraseContext; 
GQLParser.NodeTypeNameContext = NodeTypeNameContext; 
GQLParser.NodeTypeFillerContext = NodeTypeFillerContext; 
GQLParser.NodeTypeLabelSetDefinitionContext = NodeTypeLabelSetDefinitionContext; 
GQLParser.NodeTypePropertyTypeSetDefinitionContext = NodeTypePropertyTypeSetDefinitionContext; 
GQLParser.EdgeTypeDefinitionContext = EdgeTypeDefinitionContext; 
GQLParser.EdgeTypePatternContext = EdgeTypePatternContext; 
GQLParser.EdgeTypePhraseContext = EdgeTypePhraseContext; 
GQLParser.EdgeTypeNameContext = EdgeTypeNameContext; 
GQLParser.EdgeTypeFillerContext = EdgeTypeFillerContext; 
GQLParser.EdgeTypeLabelSetDefinitionContext = EdgeTypeLabelSetDefinitionContext; 
GQLParser.EdgeTypePropertyTypeSetDefinitionContext = EdgeTypePropertyTypeSetDefinitionContext; 
GQLParser.FullEdgeTypePatternContext = FullEdgeTypePatternContext; 
GQLParser.FullEdgeTypePatternPointingRightContext = FullEdgeTypePatternPointingRightContext; 
GQLParser.FullEdgeTypePatternPointingLeftContext = FullEdgeTypePatternPointingLeftContext; 
GQLParser.FullEdgeTypePatternUndirectedContext = FullEdgeTypePatternUndirectedContext; 
GQLParser.ArcTypePointingRightContext = ArcTypePointingRightContext; 
GQLParser.ArcTypePointingLeftContext = ArcTypePointingLeftContext; 
GQLParser.ArcTypeUndirectedContext = ArcTypeUndirectedContext; 
GQLParser.ArcTypeFillerContext = ArcTypeFillerContext; 
GQLParser.AbbreviatedEdgeTypePatternContext = AbbreviatedEdgeTypePatternContext; 
GQLParser.AbbreviatedEdgeTypePatternPointingRightContext = AbbreviatedEdgeTypePatternPointingRightContext; 
GQLParser.AbbreviatedEdgeTypePatternPointingLeftContext = AbbreviatedEdgeTypePatternPointingLeftContext; 
GQLParser.AbbreviatedEdgeTypePatternUndirectedContext = AbbreviatedEdgeTypePatternUndirectedContext; 
GQLParser.NodeTypeReferenceContext = NodeTypeReferenceContext; 
GQLParser.SourceNodeTypeReferenceContext = SourceNodeTypeReferenceContext; 
GQLParser.DestinationNodeTypeReferenceContext = DestinationNodeTypeReferenceContext; 
GQLParser.EdgeKindContext = EdgeKindContext; 
GQLParser.EndpointDefinitionContext = EndpointDefinitionContext; 
GQLParser.EndpointPairDefinitionContext = EndpointPairDefinitionContext; 
GQLParser.EndpointPairDefinitionPointingRightContext = EndpointPairDefinitionPointingRightContext; 
GQLParser.EndpointPairDefinitionPointingLeftContext = EndpointPairDefinitionPointingLeftContext; 
GQLParser.EndpointPairDefinitionUndirectedContext = EndpointPairDefinitionUndirectedContext; 
GQLParser.ConnectorPointingRightContext = ConnectorPointingRightContext; 
GQLParser.ConnectorUndirectedContext = ConnectorUndirectedContext; 
GQLParser.SourceNodeTypeNameContext = SourceNodeTypeNameContext; 
GQLParser.DestinationNodeTypeNameContext = DestinationNodeTypeNameContext; 
GQLParser.LabelSetDefinitionContext = LabelSetDefinitionContext; 
GQLParser.PropertyTypeSetDefinitionContext = PropertyTypeSetDefinitionContext; 
GQLParser.PropertyTypeDefinitionListContext = PropertyTypeDefinitionListContext; 
GQLParser.PropertyTypeDefinitionContext = PropertyTypeDefinitionContext; 
GQLParser.PropertyValueTypeContext = PropertyValueTypeContext; 
GQLParser.BindingTableTypeContext = BindingTableTypeContext; 
GQLParser.ValueTypeContext = ValueTypeContext; 
GQLParser.TypedContext = TypedContext; 
GQLParser.PredefinedTypeContext = PredefinedTypeContext; 
GQLParser.BooleanTypeContext = BooleanTypeContext; 
GQLParser.CharacterStringTypeContext = CharacterStringTypeContext; 
GQLParser.ByteStringTypeContext = ByteStringTypeContext; 
GQLParser.MinLengthContext = MinLengthContext; 
GQLParser.MaxLengthContext = MaxLengthContext; 
GQLParser.FixedLengthContext = FixedLengthContext; 
GQLParser.NumericTypeContext = NumericTypeContext; 
GQLParser.ExactNumericTypeContext = ExactNumericTypeContext; 
GQLParser.BinaryExactNumericTypeContext = BinaryExactNumericTypeContext; 
GQLParser.SignedBinaryExactNumericTypeContext = SignedBinaryExactNumericTypeContext; 
GQLParser.UnsignedBinaryExactNumericTypeContext = UnsignedBinaryExactNumericTypeContext; 
GQLParser.VerboseBinaryExactNumericTypeContext = VerboseBinaryExactNumericTypeContext; 
GQLParser.DecimalExactNumericTypeContext = DecimalExactNumericTypeContext; 
GQLParser.PrecisionContext = PrecisionContext; 
GQLParser.ScaleContext = ScaleContext; 
GQLParser.ApproximateNumericTypeContext = ApproximateNumericTypeContext; 
GQLParser.TemporalTypeContext = TemporalTypeContext; 
GQLParser.TemporalInstantTypeContext = TemporalInstantTypeContext; 
GQLParser.TemporalDurationTypeContext = TemporalDurationTypeContext; 
GQLParser.DatetimeTypeContext = DatetimeTypeContext; 
GQLParser.LocaldatetimeTypeContext = LocaldatetimeTypeContext; 
GQLParser.DateTypeContext = DateTypeContext; 
GQLParser.TimeTypeContext = TimeTypeContext; 
GQLParser.LocaltimeTypeContext = LocaltimeTypeContext; 
GQLParser.DurationTypeContext = DurationTypeContext; 
GQLParser.ReferenceValueTypeContext = ReferenceValueTypeContext; 
GQLParser.GraphReferenceValueTypeContext = GraphReferenceValueTypeContext; 
GQLParser.ClosedGraphReferenceValueTypeContext = ClosedGraphReferenceValueTypeContext; 
GQLParser.OpenGraphReferenceValueTypeContext = OpenGraphReferenceValueTypeContext; 
GQLParser.BindingTableReferenceValueTypeContext = BindingTableReferenceValueTypeContext; 
GQLParser.NodeReferenceValueTypeContext = NodeReferenceValueTypeContext; 
GQLParser.ClosedNodeReferenceValueTypeContext = ClosedNodeReferenceValueTypeContext; 
GQLParser.OpenNodeReferenceValueTypeContext = OpenNodeReferenceValueTypeContext; 
GQLParser.EdgeReferenceValueTypeContext = EdgeReferenceValueTypeContext; 
GQLParser.ClosedEdgeReferenceValueTypeContext = ClosedEdgeReferenceValueTypeContext; 
GQLParser.OpenEdgeReferenceValueTypeContext = OpenEdgeReferenceValueTypeContext; 
GQLParser.ListValueTypeNameContext = ListValueTypeNameContext; 
GQLParser.ListValueTypeNameSynonymContext = ListValueTypeNameSynonymContext; 
GQLParser.FieldTypesSpecificationContext = FieldTypesSpecificationContext; 
GQLParser.FieldTypeListContext = FieldTypeListContext; 
GQLParser.PathValueTypeContext = PathValueTypeContext; 
GQLParser.NotNullContext = NotNullContext; 
GQLParser.FieldTypeContext = FieldTypeContext; 
GQLParser.SchemaReferenceContext = SchemaReferenceContext; 
GQLParser.AbsoluteCatalogSchemaReferenceContext = AbsoluteCatalogSchemaReferenceContext; 
GQLParser.CatalogSchemaParentAndNameContext = CatalogSchemaParentAndNameContext; 
GQLParser.RelativeCatalogSchemaReferenceContext = RelativeCatalogSchemaReferenceContext; 
GQLParser.PredefinedSchemaReferenceContext = PredefinedSchemaReferenceContext; 
GQLParser.AbsoluteDirectoryPathContext = AbsoluteDirectoryPathContext; 
GQLParser.RelativeDirectoryPathContext = RelativeDirectoryPathContext; 
GQLParser.SimpleDirectoryPathContext = SimpleDirectoryPathContext; 
GQLParser.GraphReferenceContext = GraphReferenceContext; 
GQLParser.CatalogGraphParentAndNameContext = CatalogGraphParentAndNameContext; 
GQLParser.HomeGraphContext = HomeGraphContext; 
GQLParser.GraphTypeReferenceContext = GraphTypeReferenceContext; 
GQLParser.CatalogGraphTypeParentAndNameContext = CatalogGraphTypeParentAndNameContext; 
GQLParser.BindingTableReferenceContext = BindingTableReferenceContext; 
GQLParser.CatalogBindingTableParentAndNameContext = CatalogBindingTableParentAndNameContext; 
GQLParser.ProcedureReferenceContext = ProcedureReferenceContext; 
GQLParser.CatalogProcedureParentAndNameContext = CatalogProcedureParentAndNameContext; 
GQLParser.CatalogObjectParentReferenceContext = CatalogObjectParentReferenceContext; 
GQLParser.ReferenceParameterContext = ReferenceParameterContext; 
GQLParser.ExternalObjectReferenceContext = ExternalObjectReferenceContext; 
GQLParser.ComparisonPredicateCondContext = ComparisonPredicateCondContext; 
GQLParser.CompOpContext = CompOpContext; 
GQLParser.NullPredicateCondContext = NullPredicateCondContext; 
GQLParser.NormalizedPredicateCondContext = NormalizedPredicateCondContext; 
GQLParser.DirectedPredicateCondContext = DirectedPredicateCondContext; 
GQLParser.LabeledPredicateCondContext = LabeledPredicateCondContext; 
GQLParser.SourceDestinationPredicateCondContext = SourceDestinationPredicateCondContext; 
GQLParser.UnsignedValueSpecificationContext = UnsignedValueSpecificationContext; 
GQLParser.UnsignedIntegerSpecificationContext = UnsignedIntegerSpecificationContext; 
GQLParser.ParameterValueSpecificationContext = ParameterValueSpecificationContext; 
GQLParser.PredefinedParameterContext = PredefinedParameterContext; 
GQLParser.ExpressionContext = ExpressionContext; 
GQLParser.ExpressionPredicateContext = ExpressionPredicateContext; 
GQLParser.ExpressionAtomContext = ExpressionAtomContext; 
GQLParser.TruthValueContext = TruthValueContext; 
GQLParser.UnaryOperatorContext = UnaryOperatorContext; 
GQLParser.FunctionCallContext = FunctionCallContext; 
GQLParser.NumericFunctionContext = NumericFunctionContext; 
GQLParser.FunctionParameterContext = FunctionParameterContext; 
GQLParser.PropertyReferenceContext = PropertyReferenceContext; 
GQLParser.OneArgNumericFunctionNameContext = OneArgNumericFunctionNameContext; 
GQLParser.TwoArgNumericFunctionNameContext = TwoArgNumericFunctionNameContext; 
GQLParser.StringFunctionContext = StringFunctionContext; 
GQLParser.ListFunctionContext = ListFunctionContext; 
GQLParser.CaseFunctionContext = CaseFunctionContext; 
GQLParser.SimpleWhenClauseContext = SimpleWhenClauseContext; 
GQLParser.SearchedWhenClauseContext = SearchedWhenClauseContext; 
GQLParser.ElseClauseContext = ElseClauseContext; 
GQLParser.WhenOperandContext = WhenOperandContext; 
GQLParser.CastFunctionContext = CastFunctionContext; 
GQLParser.ElementIdFunctionContext = ElementIdFunctionContext; 
GQLParser.DatetimeValueFunctionContext = DatetimeValueFunctionContext; 
GQLParser.DateFunctionContext = DateFunctionContext; 
GQLParser.TimeFunctionContext = TimeFunctionContext; 
GQLParser.LocalTimeFunctionContext = LocalTimeFunctionContext; 
GQLParser.DatetimeFunctionContext = DatetimeFunctionContext; 
GQLParser.LocalDatetimeFunctionContext = LocalDatetimeFunctionContext; 
GQLParser.DateFunctionParametersContext = DateFunctionParametersContext; 
GQLParser.TimeFunctionParametersContext = TimeFunctionParametersContext; 
GQLParser.DatetimeFunctionParametersContext = DatetimeFunctionParametersContext; 
GQLParser.DateStringContext = DateStringContext; 
GQLParser.TimeStringContext = TimeStringContext; 
GQLParser.DatetimeStringContext = DatetimeStringContext; 
GQLParser.DurationFunctionContext = DurationFunctionContext; 
GQLParser.DurationFunctionParametersContext = DurationFunctionParametersContext; 
GQLParser.DurationStringContext = DurationStringContext; 
GQLParser.GeneralFunctionContext = GeneralFunctionContext; 
GQLParser.CollectionValueConstructorContext = CollectionValueConstructorContext; 
GQLParser.TrimSpecificationContext = TrimSpecificationContext; 
GQLParser.NormalFormContext = NormalFormContext; 
GQLParser.ListValueConstructorContext = ListValueConstructorContext; 
GQLParser.RecordValueConstructorContext = RecordValueConstructorContext; 
GQLParser.FieldContext = FieldContext; 
GQLParser.PathValueConstructorContext = PathValueConstructorContext; 
GQLParser.UnsignedLiteralContext = UnsignedLiteralContext; 
GQLParser.GeneralLiteralContext = GeneralLiteralContext; 
GQLParser.ListLiteralContext = ListLiteralContext; 
GQLParser.RecordLiteralContext = RecordLiteralContext; 
GQLParser.RecordFieldLiteralContext = RecordFieldLiteralContext; 
