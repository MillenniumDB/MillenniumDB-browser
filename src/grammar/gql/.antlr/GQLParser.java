// Generated from /home/zeus/MDB/MillenniumDB-browser/src/grammar/gql/GQLParser.g4 by ANTLR 4.13.1
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue"})
public class GQLParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.13.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		AMPERSAND=1, ASTERISK=2, CIRCUMFLEX=3, COLON=4, COMMA=5, DOLLAR_SIGN=6, 
		EQUALS_OPERATOR=7, EXCLAMATION_MARK=8, RIGHT_ANGLE_BRACKET=9, LEFT_BRACE=10, 
		LEFT_BRACKET=11, LEFT_PAREN=12, LEFT_ANGLE_BRACKET=13, MINUS_SIGN=14, 
		PERCENT=15, PERIOD=16, PLUS_SIGN=17, QUESTION_MARK=18, REVERSE_SOLIDUS=19, 
		RIGHT_BRACE=20, RIGHT_BRACKET=21, RIGHT_PAREN=22, SEMICOLON=23, SOLIDUS=24, 
		TILDE=25, UNDERSCORE=26, VERTICAL_BAR=27, ABS=28, ACOS=29, ACYCLIC=30, 
		ALL=31, ALL_DIFFERENT=32, AND=33, ANY=34, ARRAY=35, AS=36, ASC=37, ASCENDING=38, 
		ASIN=39, AT=40, ATAN=41, AVG=42, BIG=43, BIGINT=44, BINARY=45, BINDING=46, 
		BINDINGS=47, BOOL=48, BOOLEAN=49, BOTH=50, BTRIM=51, BY=52, BYTE_LENGTH=53, 
		BYTES=54, CALL=55, CASE=56, CAST=57, CEIL=58, CEILING=59, CHAR_LENGTH=60, 
		CHARACTER_LENGTH=61, CHARACTERISTICS=62, CLOSE=63, COALESCE=64, COLLECT=65, 
		COMMIT=66, CONNECTING=67, COPY=68, COS=69, COSH=70, COT=71, COUNT=72, 
		CREATE=73, CURRENT_DATE=74, CURRENT_GRAPH=75, CURRENT_PROPERTY_GRAPH=76, 
		CURRENT_SCHEMA=77, CURRENT_TIME=78, CURRENT_TIMESTAMP=79, CURRENT_USER=80, 
		DATE=81, DATETIME=82, DEC=83, DECIMAL=84, DEGREES=85, DELETE=86, DESC=87, 
		DESCENDING=88, DESTINATION=89, DETACH=90, DIFFERENT=91, DIRECTED=92, DISTINCT=93, 
		DOUBLE=94, DROP=95, DURATION=96, DURATION_BETWEEN=97, ELEMENT=98, ELEMENT_ID=99, 
		ELEMENTS=100, ELSE=101, END=102, EXCEPT=103, EXISTS=104, EXP=105, K_FALSE=106, 
		FILTER=107, FINISH=108, FIRST=109, FLOAT=110, FLOAT128=111, FLOAT16=112, 
		FLOAT256=113, FLOAT32=114, FLOAT64=115, FLOOR=116, FOR=117, FROM=118, 
		GRAPH=119, GROUP=120, GROUPS=121, HAVING=122, HOME_GRAPH=123, HOME_PROPERTY_GRAPH=124, 
		HOME_SCHEMA=125, I_DONT_KNOW_1=126, I_DONT_KNOW_2=127, I_DONT_KNOW_3=128, 
		I_DONT_KNOW_4=129, I_DONT_KNOW_5=130, IF=131, IN=132, INSERT=133, INT=134, 
		INT8=135, INT16=136, INT32=137, INT64=138, INT128=139, INT256=140, INTEGER=141, 
		INTEGER8=142, INTEGER16=143, INTEGER32=144, INTEGER64=145, INTEGER128=146, 
		INTEGER256=147, INTERSECT=148, IS=149, KEEP=150, LABEL=151, LABELED=152, 
		LABELS=153, LAST=154, LEADING=155, LEFT=156, LET=157, LIKE=158, LIMIT=159, 
		LIST=160, LN=161, LOCAL=162, LOCAL_DATETIME=163, LOCAL_TIME=164, LOCAL_TIMESTAMP=165, 
		LOG=166, LOG10=167, LOWER=168, LTRIM=169, MATCH=170, MAX=171, MIN=172, 
		MOD=173, NEXT=174, NFC=175, NFD=176, NFKC=177, NFKD=178, NO=179, NODETACH=180, 
		NORMALIZE=181, NORMALIZED=182, NOT=183, NULL=184, NULLIF=185, NULLS=186, 
		OCTET_LENGTH=187, OF=188, OFFSET=189, SKIP_=190, ONLY=191, OPEN=192, OPTIONAL=193, 
		OR=194, ORDER=195, ORDINALITY=196, OTHERWISE=197, PARAMETER=198, PARAMETERS=199, 
		PATH=200, PATH_LENGTH=201, PATHS=202, PERCENTILE_CONT=203, PERCENTILE_DISC=204, 
		POWER=205, PRECISION=206, PROPERTY=207, PROPERTY_EXISTS=208, RADIANS=209, 
		READ=210, REAL=211, RECORD=212, REMOVE=213, REPEATABLE=214, REPLACE=215, 
		RESET=216, RETURN=217, ROLLBACK=218, RTRIM=219, RIGHT=220, SAME=221, SCHEMA=222, 
		SELECT=223, SESSION=224, SET=225, SHORTEST=226, SIGNED=227, SIMPLE=228, 
		SIN=229, SINH=230, SMALL=231, SMALLINT=232, SOURCE=233, SQRT=234, START=235, 
		STDDEV_POP=236, STDDEV_SAMP=237, STRING=238, SUM=239, TABLE=240, TAN=241, 
		TANH=242, TEMP=243, THEN=244, TIME=245, TIMESTAMP=246, TIMEZONE=247, TO=248, 
		TRAIL=249, TRAILING=250, TRANSACTION=251, TRIM=252, K_TRUE=253, TYPE=254, 
		TYPED=255, UBIGINT=256, UINT=257, UINT128=258, UINT16=259, UINT256=260, 
		UINT32=261, UINT64=262, UINT8=263, UNDIRECTED=264, UNION=265, UNKNOWN=266, 
		UNSIGNED=267, UPPER=268, USE=269, USMALLINT=270, VALUE=271, VARBINARY=272, 
		VARCHAR=273, VARIABLE=274, WALK=275, WHEN=276, WHERE=277, WITH=278, WITHOUT=279, 
		WRITE=280, XOR=281, YIELD=282, ZONE=283, ZONED=284, ZONED_DATETIME=285, 
		ZONED_TIME=286, INTERVAL_DAY=287, INTERVAL_WEEK=288, INTERVAL_MONTH=289, 
		INTERVAL_YEAR=290, EDGE_SYNONYM=291, EDGES_SYNONYM=292, NODE_SYNONYM=293, 
		KEY_WORD=294, RESERVED_WORD=295, PRE_RESERVED_WORD=296, NON_RESERVED_WORD=297, 
		MULTISET_ALTERNATION_OPERATOR=298, CONCATENATION_OPERATOR=299, DOUBLE_COLON=300, 
		DOUBLE_PERIOD=301, GREATER_THAN_OR_EQUALS_OPERATOR=302, LEFT_MINUS_RIGHT=303, 
		LEFT_MINUS_SLASH=304, LEFT_TILDE_SLASH=305, LESS_THAN_OR_EQUALS_OPERATOR=306, 
		MINUS_SLASH=307, NOT_EQUALS_OPERATOR=308, RIGHT_ARROW=309, SLASH_MINUS_RIGHT=310, 
		SLASH_TILDE_RIGHT=311, TILDE_RIGHT_ARROW=312, TILDE_SLASH=313, DOUBLE_SOLIDUS=314, 
		ESCAPED_CHARACTER=315, ESCAPED_REVERSE_SOLIDUS=316, ESCAPED_QUOTE=317, 
		ESCAPED_DOUBLE_QUOTE=318, ESCAPED_GRAVE_ACCENT=319, ESCAPED_TAB=320, ESCAPED_BACKSPACE=321, 
		ESCAPED_NEWLINE=322, ESCAPED_CARRIAGE_RETURN=323, ESCAPED_FORM_FEED=324, 
		UNICODE_ESCAPE_VALUE=325, UNICODE_4_DIGIT_ESCAPE_VALUE=326, UNICODE_6_DIGIT_ESCAPE_VALUE=327, 
		UNSIGNED_DECIMAL_INTEGER=328, UNSIGNED_HEXADECIMAL_INTEGER=329, UNSIGNED_OCTAL_INTEGER=330, 
		UNSIGNED_BINARY_INTEGER=331, UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION=332, 
		UNSIGNED_DECIMAL_IN_COMMON_NOTATION=333, FOUR_DIGIT=334, DOUBLE_DIGIT=335, 
		SINGLE_QUOTED_STRING_LITERAL=336, DOUBLE_QUOTED_STRING_LITERAL=337, ACCENT_QUOTED_STRING_LITERAL=338, 
		BYTE_STRING_LITERAL=339, QUOTE=340, DOUBLE_QUOTE=341, GRAVE_ACCENT=342, 
		REGULAR_IDENTIFIER=343, IDENTIFIER_START=344, IDENTIFIER_EXTEND=345, SP=346, 
		SEPARATOR=347, WHITESPACE=348, Comment=349, BIDIRECTIONAL_CONTROL_CHARACTER=350, 
		COMMENT=351, SIMPLE_COMMENT=352, SIMPLE_COMMENT_INTRODUCER=353, SIMPLE_COMMENT_CHARACTER=354, 
		BRACKETED_COMMENT=355, BRACKETED_COMMENT_INTRODUCER=356, BRACKETED_COMMENT_TERMINATOR=357, 
		BRACKETED_COMMENT_CONTENTS=358, GQL_TERMINAL_CHARACTER=359, GQL_LANGUAGE_CHARACTER=360, 
		SIMPLE_LATIN_LETTER=361, SIMPLE_LATIN_LOWER_CASE_LETTER=362, SIMPLE_LATIN_UPPER_CASE_LETTER=363, 
		OTHER_DIGIT=364, GQL_SPECIAL_CHARACTER=365, OTHER_LANGUAGE_CHARACTER=366;
	public static final int
		RULE_root = 0, RULE_gqlProgram = 1, RULE_programActivity = 2, RULE_sessionActivity = 3, 
		RULE_sessionActivityCommand = 4, RULE_transactionActivity = 5, RULE_endTransactionCommand = 6, 
		RULE_sessionSetCommand = 7, RULE_sessionSetSchemaClause = 8, RULE_sessionSetGraphClause = 9, 
		RULE_sessionSetTimeZoneClause = 10, RULE_setTimeZoneValue = 11, RULE_sessionSetParameterClause = 12, 
		RULE_sessionSetGraphParameterClause = 13, RULE_sessionSetBindingTableParameterClause = 14, 
		RULE_sessionSetValueParameterClause = 15, RULE_sessionSetParameterName = 16, 
		RULE_sessionResetCommand = 17, RULE_sessionResetArguments = 18, RULE_sessionCloseCommand = 19, 
		RULE_startTransactionCommand = 20, RULE_transactionCharacteristics = 21, 
		RULE_transactionMode = 22, RULE_transactionAccessMode = 23, RULE_implementationDefinedAccessMode = 24, 
		RULE_rollbackCommand = 25, RULE_commitCommand = 26, RULE_nestedProcedureSpecification = 27, 
		RULE_procedureSpecification = 28, RULE_catalogModifyingProcedureSpecification = 29, 
		RULE_nestedDataModifyingProcedureSpecification = 30, RULE_dataModifyingProcedureSpecification = 31, 
		RULE_nestedQuerySpecification = 32, RULE_querySpecification = 33, RULE_unsignedNumericLiteral = 34, 
		RULE_integerLiteral = 35, RULE_floatLiteral = 36, RULE_unbrokenSingleQuotedCharacterSequence = 37, 
		RULE_unbrokenDoubleQuotedCharacterSequence = 38, RULE_unbrokenAccentQuotedCharacterSequence = 39, 
		RULE_singleQuotedCharacterSequence = 40, RULE_doubleQuotedCharacterSequence = 41, 
		RULE_accentQuotedCharacterSequence = 42, RULE_unbrokenCharacterStringLiteral = 43, 
		RULE_nullLiteral = 44, RULE_temporalLiteral = 45, RULE_sqlDatetimeLiteral = 46, 
		RULE_dateLiteral = 47, RULE_timeLiteral = 48, RULE_datetimeLiteral = 49, 
		RULE_durationLiteral = 50, RULE_sqlIntervalLiteral = 51, RULE_sqlIntervalType = 52, 
		RULE_identifier = 53, RULE_delimitedIdentifier = 54, RULE_objectName = 55, 
		RULE_objectNameOrBindingVariable = 56, RULE_directoryName = 57, RULE_schemaName = 58, 
		RULE_graphName = 59, RULE_delimitedGraphName = 60, RULE_graphTypeName = 61, 
		RULE_elementTypeName = 62, RULE_bindingTableName = 63, RULE_delimitedBindingTableName = 64, 
		RULE_procedureName = 65, RULE_labelName = 66, RULE_functionName = 67, 
		RULE_propertyName = 68, RULE_fieldName = 69, RULE_parameterName = 70, 
		RULE_variable = 71, RULE_graphVariable = 72, RULE_graphPatternVariable = 73, 
		RULE_pathOrSubpathVariable = 74, RULE_elementVariable = 75, RULE_pathVariable = 76, 
		RULE_subpathVariable = 77, RULE_bindingTableVariable = 78, RULE_valueVariable = 79, 
		RULE_bindingVariable = 80, RULE_predefinedTypeLiteral = 81, RULE_booleanLiteral = 82, 
		RULE_characterStringLiteral = 83, RULE_byteStringLiteral = 84, RULE_procedureBody = 85, 
		RULE_bindingVariableDefinitionBlock = 86, RULE_bindingVariableDefinition = 87, 
		RULE_statementBlock = 88, RULE_statement = 89, RULE_nextStatement = 90, 
		RULE_graphVariableDefinition = 91, RULE_optTypedGraphInitializer = 92, 
		RULE_graphInitializer = 93, RULE_bindingTableVariableDefinition = 94, 
		RULE_optTypedBindingTableInitializer = 95, RULE_bindingTableInitializer = 96, 
		RULE_valueVariableDefinition = 97, RULE_optTypedValueInitializer = 98, 
		RULE_graphExpression = 99, RULE_currentGraph = 100, RULE_nestedGraphQuerySpecification = 101, 
		RULE_bindingTableExpression = 102, RULE_nestedBindingTableQuerySpecification = 103, 
		RULE_objectExpressionPrimary = 104, RULE_linearCatalogModifyingStatement = 105, 
		RULE_simpleCatalogModifyingStatement = 106, RULE_primitiveCatalogModifyingStatement = 107, 
		RULE_createSchemaStatement = 108, RULE_dropSchemaStatement = 109, RULE_createGraphStatement = 110, 
		RULE_openGraphType = 111, RULE_ofGraphType = 112, RULE_graphTypeLikeGraph = 113, 
		RULE_graphSource = 114, RULE_dropGraphStatement = 115, RULE_createGraphTypeStatement = 116, 
		RULE_graphTypeSource = 117, RULE_copyOfGraphType = 118, RULE_dropGraphTypeStatement = 119, 
		RULE_callCatalogModifyingProcedureStatement = 120, RULE_linearDataModifyingStatement = 121, 
		RULE_focusedLinearDataModifyingStatement = 122, RULE_focusedLinearDataModifyingStatementBody = 123, 
		RULE_focusedNestedDataModifyingProcedureSpecification = 124, RULE_ambientLinearDataModifyingStatement = 125, 
		RULE_ambientLinearDataModifyingStatementBody = 126, RULE_simpleLinearDataAccessingStatement = 127, 
		RULE_simpleDataAccessingStatement = 128, RULE_simpleDataModifyingStatement = 129, 
		RULE_primitiveDataModifyingStatement = 130, RULE_insertStatement = 131, 
		RULE_setStatement = 132, RULE_setItemList = 133, RULE_setItem = 134, RULE_setPropertyItem = 135, 
		RULE_setAllPropertiesItem = 136, RULE_setLabelItem = 137, RULE_labelSetSpecification = 138, 
		RULE_removeStatement = 139, RULE_removeItemList = 140, RULE_removeItem = 141, 
		RULE_removePropertyItem = 142, RULE_removeLabelItem = 143, RULE_deleteStatement = 144, 
		RULE_deleteItemList = 145, RULE_deleteItem = 146, RULE_callDataModifyingProcedureStatement = 147, 
		RULE_compositeQueryStatement = 148, RULE_compositeQueryExpression = 149, 
		RULE_queryConjunction = 150, RULE_setOperator = 151, RULE_compositeQueryPrimary = 152, 
		RULE_linearQueryStatement = 153, RULE_focusedLinearQueryStatement = 154, 
		RULE_focusedLinearQueryStatementPart = 155, RULE_focusedLinearQueryAndPrimitiveResultStatementPart = 156, 
		RULE_focusedPrimitiveResultStatement = 157, RULE_focusedNestedQuerySpecification = 158, 
		RULE_ambientLinearQueryStatement = 159, RULE_simpleLinearQueryStatement = 160, 
		RULE_simpleQueryStatement = 161, RULE_primitiveQueryStatement = 162, RULE_matchStatement = 163, 
		RULE_simpleMatchStatement = 164, RULE_optionalMatchStatement = 165, RULE_optionalOperand = 166, 
		RULE_matchStatementBlock = 167, RULE_callQueryStatement = 168, RULE_filterStatement = 169, 
		RULE_letStatement = 170, RULE_letVariableDefinitionList = 171, RULE_letVariableDefinition = 172, 
		RULE_forStatement = 173, RULE_forItem = 174, RULE_forItemAlias = 175, 
		RULE_forOrdinalityOrOffset = 176, RULE_orderByAndPageStatement = 177, 
		RULE_primitiveResultStatement = 178, RULE_returnStatement = 179, RULE_returnStatementBody = 180, 
		RULE_returnItemList = 181, RULE_returnItem = 182, RULE_returnItemAlias = 183, 
		RULE_selectStatement = 184, RULE_selectItemList = 185, RULE_selectItem = 186, 
		RULE_selectItemAlias = 187, RULE_havingClause = 188, RULE_selectStatementBody = 189, 
		RULE_selectGraphMatchList = 190, RULE_selectGraphMatch = 191, RULE_selectQuerySpecification = 192, 
		RULE_callProcedureStatement = 193, RULE_procedureCall = 194, RULE_inlineProcedureCall = 195, 
		RULE_variableScopeClause = 196, RULE_bindingVariableReferenceList = 197, 
		RULE_namedProcedureCall = 198, RULE_procedureArgumentList = 199, RULE_procedureArgument = 200, 
		RULE_useGraphClause = 201, RULE_atSchemaClause = 202, RULE_bindingVariableReference = 203, 
		RULE_elementVariableReference = 204, RULE_pathVariableReference = 205, 
		RULE_parameter = 206, RULE_graphPatternBindingTable = 207, RULE_graphPatternYieldClause = 208, 
		RULE_graphPatternYieldItemList = 209, RULE_graphPatternYieldItem = 210, 
		RULE_graphPattern = 211, RULE_matchMode = 212, RULE_repeatableElementsMatchMode = 213, 
		RULE_differentEdgesMatchMode = 214, RULE_elementBindingsOrElements = 215, 
		RULE_edgeBindingsOrEdges = 216, RULE_pathPatternList = 217, RULE_pathPattern = 218, 
		RULE_pathVariableDeclaration = 219, RULE_keepClause = 220, RULE_graphPatternWhereClause = 221, 
		RULE_pathPatternPrefix = 222, RULE_pathModePrefix = 223, RULE_pathMode = 224, 
		RULE_pathSearchPrefix = 225, RULE_allPathSearch = 226, RULE_pathOrPaths = 227, 
		RULE_anyPathSearch = 228, RULE_numberOfPaths = 229, RULE_shortestPathSearch = 230, 
		RULE_allShortestPathSearch = 231, RULE_anyShortestPathSearch = 232, RULE_countedShortestPathSearch = 233, 
		RULE_countedShortestGroupSearch = 234, RULE_numberOfGroups = 235, RULE_pathPatternExpression = 236, 
		RULE_pathMultisetAlternation = 237, RULE_pathPatternUnion = 238, RULE_pathTerm = 239, 
		RULE_pathFactor = 240, RULE_quantifiedPathPrimary = 241, RULE_questionedPathPrimary = 242, 
		RULE_pathPrimary = 243, RULE_elementPattern = 244, RULE_nodePattern = 245, 
		RULE_elementPatternFiller = 246, RULE_elementVariableDeclaration = 247, 
		RULE_isLabelExpression = 248, RULE_isOrColon = 249, RULE_elementPatternPredicate = 250, 
		RULE_elementPatternWhereClause = 251, RULE_elementPropertySpecification = 252, 
		RULE_propertyKeyValuePairList = 253, RULE_propertyKeyValuePair = 254, 
		RULE_edgePattern = 255, RULE_fullEdgePattern = 256, RULE_fullEdgePointingLeft = 257, 
		RULE_fullEdgeUndirected = 258, RULE_fullEdgePointingRight = 259, RULE_fullEdgeLeftOrUndirected = 260, 
		RULE_fullEdgeUndirectedOrRight = 261, RULE_fullEdgeLeftOrRight = 262, 
		RULE_fullEdgeAnyDirection = 263, RULE_abbreviatedEdgePattern = 264, RULE_parenthesizedPathPatternExpression = 265, 
		RULE_subpathVariableDeclaration = 266, RULE_parenthesizedPathPatternWhereClause = 267, 
		RULE_insertGraphPattern = 268, RULE_insertPathPatternList = 269, RULE_insertPathPattern = 270, 
		RULE_insertNodePattern = 271, RULE_insertEdgePattern = 272, RULE_insertEdgePointingLeft = 273, 
		RULE_insertEdgePointingRight = 274, RULE_insertEdgeUndirected = 275, RULE_insertElementPatternFiller = 276, 
		RULE_labelAndPropertySetSpecification = 277, RULE_labelExpression = 278, 
		RULE_labelTerm = 279, RULE_labelFactor = 280, RULE_labelPrimary = 281, 
		RULE_wildcardLabel = 282, RULE_parenthesizedLabelExpression = 283, RULE_graphPatternQuantifier = 284, 
		RULE_fixedQuantifier = 285, RULE_generalQuantifier = 286, RULE_lowerBound = 287, 
		RULE_upperBound = 288, RULE_simplifiedPathPatternExpression = 289, RULE_simplifiedDefaultingLeft = 290, 
		RULE_simplifiedDefaultingUndirected = 291, RULE_simplifiedDefaultingRight = 292, 
		RULE_simplifiedDefaultingLeftOrUndirected = 293, RULE_simplifiedDefaultingUndirectedOrRight = 294, 
		RULE_simplifiedDefaultingLeftOrRight = 295, RULE_simplifiedDefaultingAnyDirection = 296, 
		RULE_simplifiedContents = 297, RULE_simplifiedPathUnion = 298, RULE_simplifiedMultisetAlternation = 299, 
		RULE_simplifiedTerm = 300, RULE_simplifiedFactorLow = 301, RULE_simplifiedFactorHigh = 302, 
		RULE_simplifiedQuantified = 303, RULE_simplifiedQuestioned = 304, RULE_simplifiedTertiary = 305, 
		RULE_simplifiedDirectionOverride = 306, RULE_simplifiedOverrideLeft = 307, 
		RULE_simplifiedOverrideUndirected = 308, RULE_simplifiedOverrideRight = 309, 
		RULE_simplifiedOverrideLeftOrUndirected = 310, RULE_simplifiedOverrideUndirectedOrRight = 311, 
		RULE_simplifiedOverrideLeftOrRight = 312, RULE_simplifiedOverrideAnyDirection = 313, 
		RULE_simplifiedSecondary = 314, RULE_simplifiedNegation = 315, RULE_simplifiedPrimary = 316, 
		RULE_whereClause = 317, RULE_yieldClause = 318, RULE_yieldItemList = 319, 
		RULE_yieldItem = 320, RULE_yieldItemName = 321, RULE_yieldItemAlias = 322, 
		RULE_groupByClause = 323, RULE_groupingElementList = 324, RULE_groupingElement = 325, 
		RULE_emptyGroupingSet = 326, RULE_orderByClause = 327, RULE_aggregateFunction = 328, 
		RULE_generalSetFunctionType = 329, RULE_setQuantifier = 330, RULE_binarySetFunctionType = 331, 
		RULE_sortSpecificationList = 332, RULE_sortSpecification = 333, RULE_sortKey = 334, 
		RULE_orderingSpecification = 335, RULE_nullOrdering = 336, RULE_limitClause = 337, 
		RULE_offsetClause = 338, RULE_offsetSynonym = 339, RULE_nestedGraphTypeSpecification = 340, 
		RULE_graphTypeSpecificationBody = 341, RULE_elementTypeDefinitionList = 342, 
		RULE_elementTypeDefinition = 343, RULE_nodeTypeDefinition = 344, RULE_nodeTypePattern = 345, 
		RULE_nodeTypePhrase = 346, RULE_nodeTypeName = 347, RULE_nodeTypeFiller = 348, 
		RULE_nodeTypeLabelSetDefinition = 349, RULE_nodeTypePropertyTypeSetDefinition = 350, 
		RULE_edgeTypeDefinition = 351, RULE_edgeTypePattern = 352, RULE_edgeTypePhrase = 353, 
		RULE_edgeTypeName = 354, RULE_edgeTypeFiller = 355, RULE_edgeTypeLabelSetDefinition = 356, 
		RULE_edgeTypePropertyTypeSetDefinition = 357, RULE_fullEdgeTypePattern = 358, 
		RULE_fullEdgeTypePatternPointingRight = 359, RULE_fullEdgeTypePatternPointingLeft = 360, 
		RULE_fullEdgeTypePatternUndirected = 361, RULE_arcTypePointingRight = 362, 
		RULE_arcTypePointingLeft = 363, RULE_arcTypeUndirected = 364, RULE_arcTypeFiller = 365, 
		RULE_abbreviatedEdgeTypePattern = 366, RULE_abbreviatedEdgeTypePatternPointingRight = 367, 
		RULE_abbreviatedEdgeTypePatternPointingLeft = 368, RULE_abbreviatedEdgeTypePatternUndirected = 369, 
		RULE_nodeTypeReference = 370, RULE_sourceNodeTypeReference = 371, RULE_destinationNodeTypeReference = 372, 
		RULE_edgeKind = 373, RULE_endpointDefinition = 374, RULE_endpointPairDefinition = 375, 
		RULE_endpointPairDefinitionPointingRight = 376, RULE_endpointPairDefinitionPointingLeft = 377, 
		RULE_endpointPairDefinitionUndirected = 378, RULE_connectorPointingRight = 379, 
		RULE_connectorUndirected = 380, RULE_sourceNodeTypeName = 381, RULE_destinationNodeTypeName = 382, 
		RULE_labelSetDefinition = 383, RULE_propertyTypeSetDefinition = 384, RULE_propertyTypeDefinitionList = 385, 
		RULE_propertyTypeDefinition = 386, RULE_propertyValueType = 387, RULE_bindingTableType = 388, 
		RULE_valueType = 389, RULE_typed = 390, RULE_predefinedType = 391, RULE_booleanType = 392, 
		RULE_characterStringType = 393, RULE_byteStringType = 394, RULE_minLength = 395, 
		RULE_maxLength = 396, RULE_fixedLength = 397, RULE_numericType = 398, 
		RULE_exactNumericType = 399, RULE_binaryExactNumericType = 400, RULE_signedBinaryExactNumericType = 401, 
		RULE_unsignedBinaryExactNumericType = 402, RULE_verboseBinaryExactNumericType = 403, 
		RULE_decimalExactNumericType = 404, RULE_precision = 405, RULE_scale = 406, 
		RULE_approximateNumericType = 407, RULE_temporalType = 408, RULE_temporalInstantType = 409, 
		RULE_temporalDurationType = 410, RULE_datetimeType = 411, RULE_localdatetimeType = 412, 
		RULE_dateType = 413, RULE_timeType = 414, RULE_localtimeType = 415, RULE_durationType = 416, 
		RULE_referenceValueType = 417, RULE_graphReferenceValueType = 418, RULE_closedGraphReferenceValueType = 419, 
		RULE_openGraphReferenceValueType = 420, RULE_bindingTableReferenceValueType = 421, 
		RULE_nodeReferenceValueType = 422, RULE_closedNodeReferenceValueType = 423, 
		RULE_openNodeReferenceValueType = 424, RULE_edgeReferenceValueType = 425, 
		RULE_closedEdgeReferenceValueType = 426, RULE_openEdgeReferenceValueType = 427, 
		RULE_listValueTypeName = 428, RULE_listValueTypeNameSynonym = 429, RULE_fieldTypesSpecification = 430, 
		RULE_fieldTypeList = 431, RULE_pathValueType = 432, RULE_notNull = 433, 
		RULE_fieldType = 434, RULE_schemaReference = 435, RULE_absoluteCatalogSchemaReference = 436, 
		RULE_catalogSchemaParentAndName = 437, RULE_relativeCatalogSchemaReference = 438, 
		RULE_predefinedSchemaReference = 439, RULE_absoluteDirectoryPath = 440, 
		RULE_relativeDirectoryPath = 441, RULE_simpleDirectoryPath = 442, RULE_graphReference = 443, 
		RULE_catalogGraphParentAndName = 444, RULE_homeGraph = 445, RULE_graphTypeReference = 446, 
		RULE_catalogGraphTypeParentAndName = 447, RULE_bindingTableReference = 448, 
		RULE_catalogBindingTableParentAndName = 449, RULE_procedureReference = 450, 
		RULE_catalogProcedureParentAndName = 451, RULE_catalogObjectParentReference = 452, 
		RULE_referenceParameter = 453, RULE_externalObjectReference = 454, RULE_comparisonPredicateCond = 455, 
		RULE_compOp = 456, RULE_nullPredicateCond = 457, RULE_normalizedPredicateCond = 458, 
		RULE_directedPredicateCond = 459, RULE_labeledPredicateCond = 460, RULE_sourceDestinationPredicateCond = 461, 
		RULE_unsignedValueSpecification = 462, RULE_unsignedIntegerSpecification = 463, 
		RULE_parameterValueSpecification = 464, RULE_predefinedParameter = 465, 
		RULE_expression = 466, RULE_expressionPredicate = 467, RULE_expressionAtom = 468, 
		RULE_truthValue = 469, RULE_unaryOperator = 470, RULE_functionCall = 471, 
		RULE_numericFunction = 472, RULE_functionParameter = 473, RULE_propertyReference = 474, 
		RULE_oneArgNumericFunctionName = 475, RULE_twoArgNumericFunctionName = 476, 
		RULE_stringFunction = 477, RULE_listFunction = 478, RULE_caseFunction = 479, 
		RULE_simpleWhenClause = 480, RULE_searchedWhenClause = 481, RULE_elseClause = 482, 
		RULE_whenOperand = 483, RULE_castFunction = 484, RULE_elementIdFunction = 485, 
		RULE_datetimeValueFunction = 486, RULE_dateFunction = 487, RULE_timeFunction = 488, 
		RULE_localTimeFunction = 489, RULE_datetimeFunction = 490, RULE_localDatetimeFunction = 491, 
		RULE_dateFunctionParameters = 492, RULE_timeFunctionParameters = 493, 
		RULE_datetimeFunctionParameters = 494, RULE_dateString = 495, RULE_timeString = 496, 
		RULE_datetimeString = 497, RULE_durationFunction = 498, RULE_durationFunctionParameters = 499, 
		RULE_durationString = 500, RULE_generalFunction = 501, RULE_collectionValueConstructor = 502, 
		RULE_trimSpecification = 503, RULE_normalForm = 504, RULE_listValueConstructor = 505, 
		RULE_recordValueConstructor = 506, RULE_field = 507, RULE_pathValueConstructor = 508, 
		RULE_unsignedLiteral = 509, RULE_generalLiteral = 510, RULE_listLiteral = 511, 
		RULE_recordLiteral = 512, RULE_recordFieldLiteral = 513, RULE_keyword = 514;
	private static String[] makeRuleNames() {
		return new String[] {
			"root", "gqlProgram", "programActivity", "sessionActivity", "sessionActivityCommand", 
			"transactionActivity", "endTransactionCommand", "sessionSetCommand", 
			"sessionSetSchemaClause", "sessionSetGraphClause", "sessionSetTimeZoneClause", 
			"setTimeZoneValue", "sessionSetParameterClause", "sessionSetGraphParameterClause", 
			"sessionSetBindingTableParameterClause", "sessionSetValueParameterClause", 
			"sessionSetParameterName", "sessionResetCommand", "sessionResetArguments", 
			"sessionCloseCommand", "startTransactionCommand", "transactionCharacteristics", 
			"transactionMode", "transactionAccessMode", "implementationDefinedAccessMode", 
			"rollbackCommand", "commitCommand", "nestedProcedureSpecification", "procedureSpecification", 
			"catalogModifyingProcedureSpecification", "nestedDataModifyingProcedureSpecification", 
			"dataModifyingProcedureSpecification", "nestedQuerySpecification", "querySpecification", 
			"unsignedNumericLiteral", "integerLiteral", "floatLiteral", "unbrokenSingleQuotedCharacterSequence", 
			"unbrokenDoubleQuotedCharacterSequence", "unbrokenAccentQuotedCharacterSequence", 
			"singleQuotedCharacterSequence", "doubleQuotedCharacterSequence", "accentQuotedCharacterSequence", 
			"unbrokenCharacterStringLiteral", "nullLiteral", "temporalLiteral", "sqlDatetimeLiteral", 
			"dateLiteral", "timeLiteral", "datetimeLiteral", "durationLiteral", "sqlIntervalLiteral", 
			"sqlIntervalType", "identifier", "delimitedIdentifier", "objectName", 
			"objectNameOrBindingVariable", "directoryName", "schemaName", "graphName", 
			"delimitedGraphName", "graphTypeName", "elementTypeName", "bindingTableName", 
			"delimitedBindingTableName", "procedureName", "labelName", "functionName", 
			"propertyName", "fieldName", "parameterName", "variable", "graphVariable", 
			"graphPatternVariable", "pathOrSubpathVariable", "elementVariable", "pathVariable", 
			"subpathVariable", "bindingTableVariable", "valueVariable", "bindingVariable", 
			"predefinedTypeLiteral", "booleanLiteral", "characterStringLiteral", 
			"byteStringLiteral", "procedureBody", "bindingVariableDefinitionBlock", 
			"bindingVariableDefinition", "statementBlock", "statement", "nextStatement", 
			"graphVariableDefinition", "optTypedGraphInitializer", "graphInitializer", 
			"bindingTableVariableDefinition", "optTypedBindingTableInitializer", 
			"bindingTableInitializer", "valueVariableDefinition", "optTypedValueInitializer", 
			"graphExpression", "currentGraph", "nestedGraphQuerySpecification", "bindingTableExpression", 
			"nestedBindingTableQuerySpecification", "objectExpressionPrimary", "linearCatalogModifyingStatement", 
			"simpleCatalogModifyingStatement", "primitiveCatalogModifyingStatement", 
			"createSchemaStatement", "dropSchemaStatement", "createGraphStatement", 
			"openGraphType", "ofGraphType", "graphTypeLikeGraph", "graphSource", 
			"dropGraphStatement", "createGraphTypeStatement", "graphTypeSource", 
			"copyOfGraphType", "dropGraphTypeStatement", "callCatalogModifyingProcedureStatement", 
			"linearDataModifyingStatement", "focusedLinearDataModifyingStatement", 
			"focusedLinearDataModifyingStatementBody", "focusedNestedDataModifyingProcedureSpecification", 
			"ambientLinearDataModifyingStatement", "ambientLinearDataModifyingStatementBody", 
			"simpleLinearDataAccessingStatement", "simpleDataAccessingStatement", 
			"simpleDataModifyingStatement", "primitiveDataModifyingStatement", "insertStatement", 
			"setStatement", "setItemList", "setItem", "setPropertyItem", "setAllPropertiesItem", 
			"setLabelItem", "labelSetSpecification", "removeStatement", "removeItemList", 
			"removeItem", "removePropertyItem", "removeLabelItem", "deleteStatement", 
			"deleteItemList", "deleteItem", "callDataModifyingProcedureStatement", 
			"compositeQueryStatement", "compositeQueryExpression", "queryConjunction", 
			"setOperator", "compositeQueryPrimary", "linearQueryStatement", "focusedLinearQueryStatement", 
			"focusedLinearQueryStatementPart", "focusedLinearQueryAndPrimitiveResultStatementPart", 
			"focusedPrimitiveResultStatement", "focusedNestedQuerySpecification", 
			"ambientLinearQueryStatement", "simpleLinearQueryStatement", "simpleQueryStatement", 
			"primitiveQueryStatement", "matchStatement", "simpleMatchStatement", 
			"optionalMatchStatement", "optionalOperand", "matchStatementBlock", "callQueryStatement", 
			"filterStatement", "letStatement", "letVariableDefinitionList", "letVariableDefinition", 
			"forStatement", "forItem", "forItemAlias", "forOrdinalityOrOffset", "orderByAndPageStatement", 
			"primitiveResultStatement", "returnStatement", "returnStatementBody", 
			"returnItemList", "returnItem", "returnItemAlias", "selectStatement", 
			"selectItemList", "selectItem", "selectItemAlias", "havingClause", "selectStatementBody", 
			"selectGraphMatchList", "selectGraphMatch", "selectQuerySpecification", 
			"callProcedureStatement", "procedureCall", "inlineProcedureCall", "variableScopeClause", 
			"bindingVariableReferenceList", "namedProcedureCall", "procedureArgumentList", 
			"procedureArgument", "useGraphClause", "atSchemaClause", "bindingVariableReference", 
			"elementVariableReference", "pathVariableReference", "parameter", "graphPatternBindingTable", 
			"graphPatternYieldClause", "graphPatternYieldItemList", "graphPatternYieldItem", 
			"graphPattern", "matchMode", "repeatableElementsMatchMode", "differentEdgesMatchMode", 
			"elementBindingsOrElements", "edgeBindingsOrEdges", "pathPatternList", 
			"pathPattern", "pathVariableDeclaration", "keepClause", "graphPatternWhereClause", 
			"pathPatternPrefix", "pathModePrefix", "pathMode", "pathSearchPrefix", 
			"allPathSearch", "pathOrPaths", "anyPathSearch", "numberOfPaths", "shortestPathSearch", 
			"allShortestPathSearch", "anyShortestPathSearch", "countedShortestPathSearch", 
			"countedShortestGroupSearch", "numberOfGroups", "pathPatternExpression", 
			"pathMultisetAlternation", "pathPatternUnion", "pathTerm", "pathFactor", 
			"quantifiedPathPrimary", "questionedPathPrimary", "pathPrimary", "elementPattern", 
			"nodePattern", "elementPatternFiller", "elementVariableDeclaration", 
			"isLabelExpression", "isOrColon", "elementPatternPredicate", "elementPatternWhereClause", 
			"elementPropertySpecification", "propertyKeyValuePairList", "propertyKeyValuePair", 
			"edgePattern", "fullEdgePattern", "fullEdgePointingLeft", "fullEdgeUndirected", 
			"fullEdgePointingRight", "fullEdgeLeftOrUndirected", "fullEdgeUndirectedOrRight", 
			"fullEdgeLeftOrRight", "fullEdgeAnyDirection", "abbreviatedEdgePattern", 
			"parenthesizedPathPatternExpression", "subpathVariableDeclaration", "parenthesizedPathPatternWhereClause", 
			"insertGraphPattern", "insertPathPatternList", "insertPathPattern", "insertNodePattern", 
			"insertEdgePattern", "insertEdgePointingLeft", "insertEdgePointingRight", 
			"insertEdgeUndirected", "insertElementPatternFiller", "labelAndPropertySetSpecification", 
			"labelExpression", "labelTerm", "labelFactor", "labelPrimary", "wildcardLabel", 
			"parenthesizedLabelExpression", "graphPatternQuantifier", "fixedQuantifier", 
			"generalQuantifier", "lowerBound", "upperBound", "simplifiedPathPatternExpression", 
			"simplifiedDefaultingLeft", "simplifiedDefaultingUndirected", "simplifiedDefaultingRight", 
			"simplifiedDefaultingLeftOrUndirected", "simplifiedDefaultingUndirectedOrRight", 
			"simplifiedDefaultingLeftOrRight", "simplifiedDefaultingAnyDirection", 
			"simplifiedContents", "simplifiedPathUnion", "simplifiedMultisetAlternation", 
			"simplifiedTerm", "simplifiedFactorLow", "simplifiedFactorHigh", "simplifiedQuantified", 
			"simplifiedQuestioned", "simplifiedTertiary", "simplifiedDirectionOverride", 
			"simplifiedOverrideLeft", "simplifiedOverrideUndirected", "simplifiedOverrideRight", 
			"simplifiedOverrideLeftOrUndirected", "simplifiedOverrideUndirectedOrRight", 
			"simplifiedOverrideLeftOrRight", "simplifiedOverrideAnyDirection", "simplifiedSecondary", 
			"simplifiedNegation", "simplifiedPrimary", "whereClause", "yieldClause", 
			"yieldItemList", "yieldItem", "yieldItemName", "yieldItemAlias", "groupByClause", 
			"groupingElementList", "groupingElement", "emptyGroupingSet", "orderByClause", 
			"aggregateFunction", "generalSetFunctionType", "setQuantifier", "binarySetFunctionType", 
			"sortSpecificationList", "sortSpecification", "sortKey", "orderingSpecification", 
			"nullOrdering", "limitClause", "offsetClause", "offsetSynonym", "nestedGraphTypeSpecification", 
			"graphTypeSpecificationBody", "elementTypeDefinitionList", "elementTypeDefinition", 
			"nodeTypeDefinition", "nodeTypePattern", "nodeTypePhrase", "nodeTypeName", 
			"nodeTypeFiller", "nodeTypeLabelSetDefinition", "nodeTypePropertyTypeSetDefinition", 
			"edgeTypeDefinition", "edgeTypePattern", "edgeTypePhrase", "edgeTypeName", 
			"edgeTypeFiller", "edgeTypeLabelSetDefinition", "edgeTypePropertyTypeSetDefinition", 
			"fullEdgeTypePattern", "fullEdgeTypePatternPointingRight", "fullEdgeTypePatternPointingLeft", 
			"fullEdgeTypePatternUndirected", "arcTypePointingRight", "arcTypePointingLeft", 
			"arcTypeUndirected", "arcTypeFiller", "abbreviatedEdgeTypePattern", "abbreviatedEdgeTypePatternPointingRight", 
			"abbreviatedEdgeTypePatternPointingLeft", "abbreviatedEdgeTypePatternUndirected", 
			"nodeTypeReference", "sourceNodeTypeReference", "destinationNodeTypeReference", 
			"edgeKind", "endpointDefinition", "endpointPairDefinition", "endpointPairDefinitionPointingRight", 
			"endpointPairDefinitionPointingLeft", "endpointPairDefinitionUndirected", 
			"connectorPointingRight", "connectorUndirected", "sourceNodeTypeName", 
			"destinationNodeTypeName", "labelSetDefinition", "propertyTypeSetDefinition", 
			"propertyTypeDefinitionList", "propertyTypeDefinition", "propertyValueType", 
			"bindingTableType", "valueType", "typed", "predefinedType", "booleanType", 
			"characterStringType", "byteStringType", "minLength", "maxLength", "fixedLength", 
			"numericType", "exactNumericType", "binaryExactNumericType", "signedBinaryExactNumericType", 
			"unsignedBinaryExactNumericType", "verboseBinaryExactNumericType", "decimalExactNumericType", 
			"precision", "scale", "approximateNumericType", "temporalType", "temporalInstantType", 
			"temporalDurationType", "datetimeType", "localdatetimeType", "dateType", 
			"timeType", "localtimeType", "durationType", "referenceValueType", "graphReferenceValueType", 
			"closedGraphReferenceValueType", "openGraphReferenceValueType", "bindingTableReferenceValueType", 
			"nodeReferenceValueType", "closedNodeReferenceValueType", "openNodeReferenceValueType", 
			"edgeReferenceValueType", "closedEdgeReferenceValueType", "openEdgeReferenceValueType", 
			"listValueTypeName", "listValueTypeNameSynonym", "fieldTypesSpecification", 
			"fieldTypeList", "pathValueType", "notNull", "fieldType", "schemaReference", 
			"absoluteCatalogSchemaReference", "catalogSchemaParentAndName", "relativeCatalogSchemaReference", 
			"predefinedSchemaReference", "absoluteDirectoryPath", "relativeDirectoryPath", 
			"simpleDirectoryPath", "graphReference", "catalogGraphParentAndName", 
			"homeGraph", "graphTypeReference", "catalogGraphTypeParentAndName", "bindingTableReference", 
			"catalogBindingTableParentAndName", "procedureReference", "catalogProcedureParentAndName", 
			"catalogObjectParentReference", "referenceParameter", "externalObjectReference", 
			"comparisonPredicateCond", "compOp", "nullPredicateCond", "normalizedPredicateCond", 
			"directedPredicateCond", "labeledPredicateCond", "sourceDestinationPredicateCond", 
			"unsignedValueSpecification", "unsignedIntegerSpecification", "parameterValueSpecification", 
			"predefinedParameter", "expression", "expressionPredicate", "expressionAtom", 
			"truthValue", "unaryOperator", "functionCall", "numericFunction", "functionParameter", 
			"propertyReference", "oneArgNumericFunctionName", "twoArgNumericFunctionName", 
			"stringFunction", "listFunction", "caseFunction", "simpleWhenClause", 
			"searchedWhenClause", "elseClause", "whenOperand", "castFunction", "elementIdFunction", 
			"datetimeValueFunction", "dateFunction", "timeFunction", "localTimeFunction", 
			"datetimeFunction", "localDatetimeFunction", "dateFunctionParameters", 
			"timeFunctionParameters", "datetimeFunctionParameters", "dateString", 
			"timeString", "datetimeString", "durationFunction", "durationFunctionParameters", 
			"durationString", "generalFunction", "collectionValueConstructor", "trimSpecification", 
			"normalForm", "listValueConstructor", "recordValueConstructor", "field", 
			"pathValueConstructor", "unsignedLiteral", "generalLiteral", "listLiteral", 
			"recordLiteral", "recordFieldLiteral", "keyword"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'&'", "'*'", "'^'", "':'", "','", "'$'", "'='", "'!'", "'>'", 
			"'{'", "'['", "'('", "'<'", "'-'", "'%'", "'.'", "'+'", "'?'", "'\\'", 
			"'}'", "']'", "')'", "';'", "'/'", "'~'", "'_'", "'|'", "'ABS'", "'ACOS'", 
			"'ACYCLIC'", "'ALL'", "'ALL_DIFFERENT'", "'AND'", "'ANY'", "'ARRAY'", 
			"'AS'", "'ASC'", "'ASCENDING'", "'ASIN'", "'AT'", "'ATAN'", "'AVG'", 
			"'BIG'", "'BIGINT'", "'BINARY'", "'BINDING'", "'BINDINGS'", "'BOOL'", 
			"'BOOLEAN'", "'BOTH'", "'BTRIM'", "'BY'", "'BYTE_LENGTH'", "'BYTES'", 
			"'CALL'", "'CASE'", "'CAST'", "'CEIL'", "'CEILING'", "'CHAR_LENGTH'", 
			"'CHARACTER_LENGTH'", "'CHARACTERISTICS'", "'CLOSE'", "'COALESCE'", "'COLLECT'", 
			"'COMMIT'", "'CONNECTING'", "'COPY'", "'COS'", "'COSH'", "'COT'", "'COUNT'", 
			"'CREATE'", "'CURRENT_DATE'", "'CURRENT_GRAPH'", "'CURRENT_PROPERTY_GRAPH'", 
			"'CURRENT_SCHEMA'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'CURRENT_USER'", 
			"'DATE'", "'DATETIME'", "'DEC'", "'DECIMAL'", "'DEGREES'", "'DELETE'", 
			"'DESC'", "'DESCENDING'", "'DESTINATION'", "'DETACH'", "'DIFFERENT'", 
			"'DIRECTED'", "'DISTINCT'", "'DOUBLE'", "'DROP'", "'DURATION'", "'DURATION_BETWEEN'", 
			"'ELEMENT'", "'ELEMENT_ID'", "'ELEMENTS'", "'ELSE'", "'END'", "'EXCEPT'", 
			"'EXISTS'", "'EXP'", "'FALSE'", "'FILTER'", "'FINISH'", "'FIRST'", "'FLOAT'", 
			"'FLOAT128'", "'FLOAT16'", "'FLOAT256'", "'FLOAT32'", "'FLOAT64'", "'FLOOR'", 
			"'FOR'", "'FROM'", "'GRAPH'", "'GROUP'", "'GROUPS'", "'HAVING'", "'HOME_GRAPH'", 
			"'HOME_PROPERTY_GRAPH'", "'HOME_SCHEMA'", "'I_DONT_KNOW_1'", "'I_DONT_KNOW_2'", 
			"'I_DONT_KNOW_3'", "'I_DONT_KNOW_4'", "'I_DONT_KNOW_5'", "'IF'", "'IN'", 
			"'INSERT'", "'INT'", "'INT8'", "'INT16'", "'INT32'", "'INT64'", "'INT128'", 
			"'INT256'", "'INTEGER'", "'INTEGER8'", "'INTEGER16'", "'INTEGER32'", 
			"'INTEGER64'", "'INTEGER128'", "'INTEGER256'", "'INTERSECT'", "'IS'", 
			"'KEEP'", "'LABEL'", "'LABELED'", "'LABELS'", "'LAST'", "'LEADING'", 
			"'LEFT'", "'LET'", "'LIKE'", "'LIMIT'", "'LIST'", "'LN'", "'LOCAL'", 
			"'LOCAL_DATETIME'", "'LOCAL_TIME'", "'LOCAL_TIMESTAMP'", "'LOG'", "'LOG10'", 
			"'LOWER'", "'LTRIM'", "'MATCH'", "'MAX'", "'MIN'", "'MOD'", "'NEXT'", 
			"'NFC'", "'NFD'", "'NFKC'", "'NFKD'", "'NO'", "'NODETACH'", "'NORMALIZE'", 
			"'NORMALIZED'", "'NOT'", "'NULL'", "'NULLIF'", "'NULLS'", "'OCTET_LENGTH'", 
			"'OF'", "'OFFSET'", "'SKIP'", "'ONLY'", "'OPEN'", "'OPTIONAL'", "'OR'", 
			"'ORDER'", "'ORDINALITY'", "'OTHERWISE'", "'PARAMETER'", "'PARAMETERS'", 
			"'PATH'", "'PATH_LENGTH'", "'PATHS'", "'PERCENTILE_CONT'", "'PERCENTILE_DISC'", 
			"'POWER'", "'PRECISION'", "'PROPERTY'", "'PROPERTY_EXISTS'", "'RADIANS'", 
			"'READ'", "'REAL'", "'RECORD'", "'REMOVE'", "'REPEATABLE'", "'REPLACE'", 
			"'RESET'", "'RETURN'", "'ROLLBACK'", "'RTRIM'", "'RIGHT'", "'SAME'", 
			"'SCHEMA'", "'SELECT'", "'SESSION'", "'SET'", "'SHORTEST'", "'SIGNED'", 
			"'SIMPLE'", "'SIN'", "'SINH'", "'SMALL'", "'SMALLINT'", "'SOURCE'", "'SQRT'", 
			"'START'", "'STDDEV_POP'", "'STDDEV_SAMP'", "'STRING'", "'SUM'", "'TABLE'", 
			"'TAN'", "'TANH'", "'TEMP'", "'THEN'", "'TIME'", "'TIMESTAMP'", "'TIMEZONE'", 
			"'TO'", "'TRAIL'", "'TRAILING'", "'TRANSACTION'", "'TRIM'", "'TRUE'", 
			"'TYPE'", "'TYPED'", "'UBIGINT'", "'UINT'", "'UINT128'", "'UINT16'", 
			"'UINT256'", "'UINT32'", "'UINT64'", "'UINT8'", "'UNDIRECTED'", "'UNION'", 
			"'UNKNOWN'", "'UNSIGNED'", "'UPPER'", "'USE'", "'USMALLINT'", "'VALUE'", 
			"'VARBINARY'", "'VARCHAR'", "'VARIABLE'", "'WALK'", "'WHEN'", "'WHERE'", 
			"'WITH'", "'WITHOUT'", "'WRITE'", "'XOR'", "'YIELD'", "'ZONE'", "'ZONED'", 
			"'ZONED_DATETIME'", "'ZONED_TIME'", null, null, null, null, null, null, 
			null, null, "'I_DONT_KNOW_12'", null, null, "'|+|'", "'||'", "'::'", 
			"'..'", "'>='", "'<->'", "'<-/'", "'<~/'", "'<='", "'-/'", "'<>'", "'->'", 
			"'/->'", "'/~>'", "'~>'", "'~/'", "'//'", null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, "'''", "'\"'", "'`'", 
			null, null, null, null, null, null, null, "'\\u202A'", null, null, null, 
			"'I_DONT_KNOW_15'", null, "'/*'", "'*/'", "'I_DONT_KNOW_16'", null, null, 
			null, null, null, "'I_DONT_KNOW_18'", null, "'I_DONT_KNOW_20'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "AMPERSAND", "ASTERISK", "CIRCUMFLEX", "COLON", "COMMA", "DOLLAR_SIGN", 
			"EQUALS_OPERATOR", "EXCLAMATION_MARK", "RIGHT_ANGLE_BRACKET", "LEFT_BRACE", 
			"LEFT_BRACKET", "LEFT_PAREN", "LEFT_ANGLE_BRACKET", "MINUS_SIGN", "PERCENT", 
			"PERIOD", "PLUS_SIGN", "QUESTION_MARK", "REVERSE_SOLIDUS", "RIGHT_BRACE", 
			"RIGHT_BRACKET", "RIGHT_PAREN", "SEMICOLON", "SOLIDUS", "TILDE", "UNDERSCORE", 
			"VERTICAL_BAR", "ABS", "ACOS", "ACYCLIC", "ALL", "ALL_DIFFERENT", "AND", 
			"ANY", "ARRAY", "AS", "ASC", "ASCENDING", "ASIN", "AT", "ATAN", "AVG", 
			"BIG", "BIGINT", "BINARY", "BINDING", "BINDINGS", "BOOL", "BOOLEAN", 
			"BOTH", "BTRIM", "BY", "BYTE_LENGTH", "BYTES", "CALL", "CASE", "CAST", 
			"CEIL", "CEILING", "CHAR_LENGTH", "CHARACTER_LENGTH", "CHARACTERISTICS", 
			"CLOSE", "COALESCE", "COLLECT", "COMMIT", "CONNECTING", "COPY", "COS", 
			"COSH", "COT", "COUNT", "CREATE", "CURRENT_DATE", "CURRENT_GRAPH", "CURRENT_PROPERTY_GRAPH", 
			"CURRENT_SCHEMA", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", 
			"DATE", "DATETIME", "DEC", "DECIMAL", "DEGREES", "DELETE", "DESC", "DESCENDING", 
			"DESTINATION", "DETACH", "DIFFERENT", "DIRECTED", "DISTINCT", "DOUBLE", 
			"DROP", "DURATION", "DURATION_BETWEEN", "ELEMENT", "ELEMENT_ID", "ELEMENTS", 
			"ELSE", "END", "EXCEPT", "EXISTS", "EXP", "K_FALSE", "FILTER", "FINISH", 
			"FIRST", "FLOAT", "FLOAT128", "FLOAT16", "FLOAT256", "FLOAT32", "FLOAT64", 
			"FLOOR", "FOR", "FROM", "GRAPH", "GROUP", "GROUPS", "HAVING", "HOME_GRAPH", 
			"HOME_PROPERTY_GRAPH", "HOME_SCHEMA", "I_DONT_KNOW_1", "I_DONT_KNOW_2", 
			"I_DONT_KNOW_3", "I_DONT_KNOW_4", "I_DONT_KNOW_5", "IF", "IN", "INSERT", 
			"INT", "INT8", "INT16", "INT32", "INT64", "INT128", "INT256", "INTEGER", 
			"INTEGER8", "INTEGER16", "INTEGER32", "INTEGER64", "INTEGER128", "INTEGER256", 
			"INTERSECT", "IS", "KEEP", "LABEL", "LABELED", "LABELS", "LAST", "LEADING", 
			"LEFT", "LET", "LIKE", "LIMIT", "LIST", "LN", "LOCAL", "LOCAL_DATETIME", 
			"LOCAL_TIME", "LOCAL_TIMESTAMP", "LOG", "LOG10", "LOWER", "LTRIM", "MATCH", 
			"MAX", "MIN", "MOD", "NEXT", "NFC", "NFD", "NFKC", "NFKD", "NO", "NODETACH", 
			"NORMALIZE", "NORMALIZED", "NOT", "NULL", "NULLIF", "NULLS", "OCTET_LENGTH", 
			"OF", "OFFSET", "SKIP_", "ONLY", "OPEN", "OPTIONAL", "OR", "ORDER", "ORDINALITY", 
			"OTHERWISE", "PARAMETER", "PARAMETERS", "PATH", "PATH_LENGTH", "PATHS", 
			"PERCENTILE_CONT", "PERCENTILE_DISC", "POWER", "PRECISION", "PROPERTY", 
			"PROPERTY_EXISTS", "RADIANS", "READ", "REAL", "RECORD", "REMOVE", "REPEATABLE", 
			"REPLACE", "RESET", "RETURN", "ROLLBACK", "RTRIM", "RIGHT", "SAME", "SCHEMA", 
			"SELECT", "SESSION", "SET", "SHORTEST", "SIGNED", "SIMPLE", "SIN", "SINH", 
			"SMALL", "SMALLINT", "SOURCE", "SQRT", "START", "STDDEV_POP", "STDDEV_SAMP", 
			"STRING", "SUM", "TABLE", "TAN", "TANH", "TEMP", "THEN", "TIME", "TIMESTAMP", 
			"TIMEZONE", "TO", "TRAIL", "TRAILING", "TRANSACTION", "TRIM", "K_TRUE", 
			"TYPE", "TYPED", "UBIGINT", "UINT", "UINT128", "UINT16", "UINT256", "UINT32", 
			"UINT64", "UINT8", "UNDIRECTED", "UNION", "UNKNOWN", "UNSIGNED", "UPPER", 
			"USE", "USMALLINT", "VALUE", "VARBINARY", "VARCHAR", "VARIABLE", "WALK", 
			"WHEN", "WHERE", "WITH", "WITHOUT", "WRITE", "XOR", "YIELD", "ZONE", 
			"ZONED", "ZONED_DATETIME", "ZONED_TIME", "INTERVAL_DAY", "INTERVAL_WEEK", 
			"INTERVAL_MONTH", "INTERVAL_YEAR", "EDGE_SYNONYM", "EDGES_SYNONYM", "NODE_SYNONYM", 
			"KEY_WORD", "RESERVED_WORD", "PRE_RESERVED_WORD", "NON_RESERVED_WORD", 
			"MULTISET_ALTERNATION_OPERATOR", "CONCATENATION_OPERATOR", "DOUBLE_COLON", 
			"DOUBLE_PERIOD", "GREATER_THAN_OR_EQUALS_OPERATOR", "LEFT_MINUS_RIGHT", 
			"LEFT_MINUS_SLASH", "LEFT_TILDE_SLASH", "LESS_THAN_OR_EQUALS_OPERATOR", 
			"MINUS_SLASH", "NOT_EQUALS_OPERATOR", "RIGHT_ARROW", "SLASH_MINUS_RIGHT", 
			"SLASH_TILDE_RIGHT", "TILDE_RIGHT_ARROW", "TILDE_SLASH", "DOUBLE_SOLIDUS", 
			"ESCAPED_CHARACTER", "ESCAPED_REVERSE_SOLIDUS", "ESCAPED_QUOTE", "ESCAPED_DOUBLE_QUOTE", 
			"ESCAPED_GRAVE_ACCENT", "ESCAPED_TAB", "ESCAPED_BACKSPACE", "ESCAPED_NEWLINE", 
			"ESCAPED_CARRIAGE_RETURN", "ESCAPED_FORM_FEED", "UNICODE_ESCAPE_VALUE", 
			"UNICODE_4_DIGIT_ESCAPE_VALUE", "UNICODE_6_DIGIT_ESCAPE_VALUE", "UNSIGNED_DECIMAL_INTEGER", 
			"UNSIGNED_HEXADECIMAL_INTEGER", "UNSIGNED_OCTAL_INTEGER", "UNSIGNED_BINARY_INTEGER", 
			"UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION", "UNSIGNED_DECIMAL_IN_COMMON_NOTATION", 
			"FOUR_DIGIT", "DOUBLE_DIGIT", "SINGLE_QUOTED_STRING_LITERAL", "DOUBLE_QUOTED_STRING_LITERAL", 
			"ACCENT_QUOTED_STRING_LITERAL", "BYTE_STRING_LITERAL", "QUOTE", "DOUBLE_QUOTE", 
			"GRAVE_ACCENT", "REGULAR_IDENTIFIER", "IDENTIFIER_START", "IDENTIFIER_EXTEND", 
			"SP", "SEPARATOR", "WHITESPACE", "Comment", "BIDIRECTIONAL_CONTROL_CHARACTER", 
			"COMMENT", "SIMPLE_COMMENT", "SIMPLE_COMMENT_INTRODUCER", "SIMPLE_COMMENT_CHARACTER", 
			"BRACKETED_COMMENT", "BRACKETED_COMMENT_INTRODUCER", "BRACKETED_COMMENT_TERMINATOR", 
			"BRACKETED_COMMENT_CONTENTS", "GQL_TERMINAL_CHARACTER", "GQL_LANGUAGE_CHARACTER", 
			"SIMPLE_LATIN_LETTER", "SIMPLE_LATIN_LOWER_CASE_LETTER", "SIMPLE_LATIN_UPPER_CASE_LETTER", 
			"OTHER_DIGIT", "GQL_SPECIAL_CHARACTER", "OTHER_LANGUAGE_CHARACTER"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "GQLParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public GQLParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RootContext extends ParserRuleContext {
		public GqlProgramContext gqlProgram() {
			return getRuleContext(GqlProgramContext.class,0);
		}
		public TerminalNode EOF() { return getToken(GQLParser.EOF, 0); }
		public TerminalNode SEMICOLON() { return getToken(GQLParser.SEMICOLON, 0); }
		public RootContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_root; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterRoot(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitRoot(this);
		}
	}

	public final RootContext root() throws RecognitionException {
		RootContext _localctx = new RootContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1030);
			gqlProgram();
			setState(1032);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEMICOLON) {
				{
				setState(1031);
				match(SEMICOLON);
				}
			}

			setState(1034);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GqlProgramContext extends ParserRuleContext {
		public ProgramActivityContext programActivity() {
			return getRuleContext(ProgramActivityContext.class,0);
		}
		public SessionCloseCommandContext sessionCloseCommand() {
			return getRuleContext(SessionCloseCommandContext.class,0);
		}
		public GqlProgramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_gqlProgram; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlProgram(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlProgram(this);
		}
	}

	public final GqlProgramContext gqlProgram() throws RecognitionException {
		GqlProgramContext _localctx = new GqlProgramContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_gqlProgram);
		int _la;
		try {
			setState(1041);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,2,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1036);
				programActivity();
				setState(1038);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SESSION) {
					{
					setState(1037);
					sessionCloseCommand();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1040);
				sessionCloseCommand();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ProgramActivityContext extends ParserRuleContext {
		public SessionActivityContext sessionActivity() {
			return getRuleContext(SessionActivityContext.class,0);
		}
		public TransactionActivityContext transactionActivity() {
			return getRuleContext(TransactionActivityContext.class,0);
		}
		public ProgramActivityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_programActivity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterProgramActivity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitProgramActivity(this);
		}
	}

	public final ProgramActivityContext programActivity() throws RecognitionException {
		ProgramActivityContext _localctx = new ProgramActivityContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_programActivity);
		try {
			setState(1045);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SESSION:
				enterOuterAlt(_localctx, 1);
				{
				setState(1043);
				sessionActivity();
				}
				break;
			case LEFT_BRACE:
			case AT:
			case BINDING:
			case CALL:
			case COMMIT:
			case CREATE:
			case DELETE:
			case DETACH:
			case DROP:
			case FILTER:
			case FINISH:
			case FOR:
			case GRAPH:
			case INSERT:
			case LET:
			case LIMIT:
			case MATCH:
			case NODETACH:
			case OFFSET:
			case SKIP_:
			case OPTIONAL:
			case ORDER:
			case PROPERTY:
			case REMOVE:
			case RETURN:
			case ROLLBACK:
			case SELECT:
			case SET:
			case START:
			case TABLE:
			case USE:
			case VALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1044);
				transactionActivity();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SessionActivityContext extends ParserRuleContext {
		public List<SessionActivityCommandContext> sessionActivityCommand() {
			return getRuleContexts(SessionActivityCommandContext.class);
		}
		public SessionActivityCommandContext sessionActivityCommand(int i) {
			return getRuleContext(SessionActivityCommandContext.class,i);
		}
		public SessionActivityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sessionActivity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSessionActivity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSessionActivity(this);
		}
	}

	public final SessionActivityContext sessionActivity() throws RecognitionException {
		SessionActivityContext _localctx = new SessionActivityContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_sessionActivity);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1048); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(1047);
					sessionActivityCommand();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1050); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,4,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SessionActivityCommandContext extends ParserRuleContext {
		public SessionSetCommandContext sessionSetCommand() {
			return getRuleContext(SessionSetCommandContext.class,0);
		}
		public SessionResetCommandContext sessionResetCommand() {
			return getRuleContext(SessionResetCommandContext.class,0);
		}
		public SessionActivityCommandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sessionActivityCommand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSessionActivityCommand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSessionActivityCommand(this);
		}
	}

	public final SessionActivityCommandContext sessionActivityCommand() throws RecognitionException {
		SessionActivityCommandContext _localctx = new SessionActivityCommandContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_sessionActivityCommand);
		try {
			setState(1054);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,5,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1052);
				sessionSetCommand();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1053);
				sessionResetCommand();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TransactionActivityContext extends ParserRuleContext {
		public StartTransactionCommandContext startTransactionCommand() {
			return getRuleContext(StartTransactionCommandContext.class,0);
		}
		public ProcedureSpecificationContext procedureSpecification() {
			return getRuleContext(ProcedureSpecificationContext.class,0);
		}
		public EndTransactionCommandContext endTransactionCommand() {
			return getRuleContext(EndTransactionCommandContext.class,0);
		}
		public TransactionActivityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionActivity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterTransactionActivity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitTransactionActivity(this);
		}
	}

	public final TransactionActivityContext transactionActivity() throws RecognitionException {
		TransactionActivityContext _localctx = new TransactionActivityContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_transactionActivity);
		int _la;
		try {
			setState(1068);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case START:
				enterOuterAlt(_localctx, 1);
				{
				setState(1056);
				startTransactionCommand();
				setState(1061);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 36100265274770432L) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & 1153009517081010177L) != 0) || ((((_la - 157)) & ~0x3f) == 0 && ((1L << (_la - 157)) & 1226105355042299909L) != 0) || ((((_la - 223)) & ~0x3f) == 0 && ((1L << (_la - 223)) & 351843721019397L) != 0)) {
					{
					setState(1057);
					procedureSpecification();
					setState(1059);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMIT || _la==ROLLBACK) {
						{
						setState(1058);
						endTransactionCommand();
						}
					}

					}
				}

				}
				break;
			case LEFT_BRACE:
			case AT:
			case BINDING:
			case CALL:
			case CREATE:
			case DELETE:
			case DETACH:
			case DROP:
			case FILTER:
			case FINISH:
			case FOR:
			case GRAPH:
			case INSERT:
			case LET:
			case LIMIT:
			case MATCH:
			case NODETACH:
			case OFFSET:
			case SKIP_:
			case OPTIONAL:
			case ORDER:
			case PROPERTY:
			case REMOVE:
			case RETURN:
			case SELECT:
			case SET:
			case TABLE:
			case USE:
			case VALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1063);
				procedureSpecification();
				setState(1065);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMIT || _la==ROLLBACK) {
					{
					setState(1064);
					endTransactionCommand();
					}
				}

				}
				break;
			case COMMIT:
			case ROLLBACK:
				enterOuterAlt(_localctx, 3);
				{
				setState(1067);
				endTransactionCommand();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EndTransactionCommandContext extends ParserRuleContext {
		public RollbackCommandContext rollbackCommand() {
			return getRuleContext(RollbackCommandContext.class,0);
		}
		public CommitCommandContext commitCommand() {
			return getRuleContext(CommitCommandContext.class,0);
		}
		public EndTransactionCommandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_endTransactionCommand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterEndTransactionCommand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitEndTransactionCommand(this);
		}
	}

	public final EndTransactionCommandContext endTransactionCommand() throws RecognitionException {
		EndTransactionCommandContext _localctx = new EndTransactionCommandContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_endTransactionCommand);
		try {
			setState(1072);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ROLLBACK:
				enterOuterAlt(_localctx, 1);
				{
				setState(1070);
				rollbackCommand();
				}
				break;
			case COMMIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1071);
				commitCommand();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SessionSetCommandContext extends ParserRuleContext {
		public TerminalNode SESSION() { return getToken(GQLParser.SESSION, 0); }
		public TerminalNode SET() { return getToken(GQLParser.SET, 0); }
		public SessionSetSchemaClauseContext sessionSetSchemaClause() {
			return getRuleContext(SessionSetSchemaClauseContext.class,0);
		}
		public SessionSetGraphClauseContext sessionSetGraphClause() {
			return getRuleContext(SessionSetGraphClauseContext.class,0);
		}
		public SessionSetTimeZoneClauseContext sessionSetTimeZoneClause() {
			return getRuleContext(SessionSetTimeZoneClauseContext.class,0);
		}
		public SessionSetParameterClauseContext sessionSetParameterClause() {
			return getRuleContext(SessionSetParameterClauseContext.class,0);
		}
		public SessionSetCommandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sessionSetCommand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSessionSetCommand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSessionSetCommand(this);
		}
	}

	public final SessionSetCommandContext sessionSetCommand() throws RecognitionException {
		SessionSetCommandContext _localctx = new SessionSetCommandContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_sessionSetCommand);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1074);
			match(SESSION);
			setState(1075);
			match(SET);
			setState(1080);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
			case 1:
				{
				setState(1076);
				sessionSetSchemaClause();
				}
				break;
			case 2:
				{
				setState(1077);
				sessionSetGraphClause();
				}
				break;
			case 3:
				{
				setState(1078);
				sessionSetTimeZoneClause();
				}
				break;
			case 4:
				{
				setState(1079);
				sessionSetParameterClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SessionSetSchemaClauseContext extends ParserRuleContext {
		public TerminalNode SCHEMA() { return getToken(GQLParser.SCHEMA, 0); }
		public SchemaReferenceContext schemaReference() {
			return getRuleContext(SchemaReferenceContext.class,0);
		}
		public SessionSetSchemaClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sessionSetSchemaClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSessionSetSchemaClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSessionSetSchemaClause(this);
		}
	}

	public final SessionSetSchemaClauseContext sessionSetSchemaClause() throws RecognitionException {
		SessionSetSchemaClauseContext _localctx = new SessionSetSchemaClauseContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_sessionSetSchemaClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1082);
			match(SCHEMA);
			setState(1083);
			schemaReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SessionSetGraphClauseContext extends ParserRuleContext {
		public TerminalNode GRAPH() { return getToken(GQLParser.GRAPH, 0); }
		public GraphExpressionContext graphExpression() {
			return getRuleContext(GraphExpressionContext.class,0);
		}
		public TerminalNode PROPERTY() { return getToken(GQLParser.PROPERTY, 0); }
		public SessionSetGraphClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sessionSetGraphClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSessionSetGraphClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSessionSetGraphClause(this);
		}
	}

	public final SessionSetGraphClauseContext sessionSetGraphClause() throws RecognitionException {
		SessionSetGraphClauseContext _localctx = new SessionSetGraphClauseContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_sessionSetGraphClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1086);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PROPERTY) {
				{
				setState(1085);
				match(PROPERTY);
				}
			}

			setState(1088);
			match(GRAPH);
			setState(1089);
			graphExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SessionSetTimeZoneClauseContext extends ParserRuleContext {
		public TerminalNode TIME() { return getToken(GQLParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(GQLParser.ZONE, 0); }
		public SetTimeZoneValueContext setTimeZoneValue() {
			return getRuleContext(SetTimeZoneValueContext.class,0);
		}
		public SessionSetTimeZoneClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sessionSetTimeZoneClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSessionSetTimeZoneClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSessionSetTimeZoneClause(this);
		}
	}

	public final SessionSetTimeZoneClauseContext sessionSetTimeZoneClause() throws RecognitionException {
		SessionSetTimeZoneClauseContext _localctx = new SessionSetTimeZoneClauseContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_sessionSetTimeZoneClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1091);
			match(TIME);
			setState(1092);
			match(ZONE);
			setState(1093);
			setTimeZoneValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetTimeZoneValueContext extends ParserRuleContext {
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public SetTimeZoneValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setTimeZoneValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSetTimeZoneValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSetTimeZoneValue(this);
		}
	}

	public final SetTimeZoneValueContext setTimeZoneValue() throws RecognitionException {
		SetTimeZoneValueContext _localctx = new SetTimeZoneValueContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_setTimeZoneValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1095);
			expressionAtom(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SessionSetParameterClauseContext extends ParserRuleContext {
		public SessionSetGraphParameterClauseContext sessionSetGraphParameterClause() {
			return getRuleContext(SessionSetGraphParameterClauseContext.class,0);
		}
		public SessionSetBindingTableParameterClauseContext sessionSetBindingTableParameterClause() {
			return getRuleContext(SessionSetBindingTableParameterClauseContext.class,0);
		}
		public SessionSetValueParameterClauseContext sessionSetValueParameterClause() {
			return getRuleContext(SessionSetValueParameterClauseContext.class,0);
		}
		public SessionSetParameterClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sessionSetParameterClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSessionSetParameterClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSessionSetParameterClause(this);
		}
	}

	public final SessionSetParameterClauseContext sessionSetParameterClause() throws RecognitionException {
		SessionSetParameterClauseContext _localctx = new SessionSetParameterClauseContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_sessionSetParameterClause);
		try {
			setState(1100);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GRAPH:
			case PROPERTY:
				enterOuterAlt(_localctx, 1);
				{
				setState(1097);
				sessionSetGraphParameterClause();
				}
				break;
			case BINDING:
			case TABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1098);
				sessionSetBindingTableParameterClause();
				}
				break;
			case VALUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1099);
				sessionSetValueParameterClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SessionSetGraphParameterClauseContext extends ParserRuleContext {
		public TerminalNode GRAPH() { return getToken(GQLParser.GRAPH, 0); }
		public SessionSetParameterNameContext sessionSetParameterName() {
			return getRuleContext(SessionSetParameterNameContext.class,0);
		}
		public OptTypedGraphInitializerContext optTypedGraphInitializer() {
			return getRuleContext(OptTypedGraphInitializerContext.class,0);
		}
		public TerminalNode PROPERTY() { return getToken(GQLParser.PROPERTY, 0); }
		public SessionSetGraphParameterClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sessionSetGraphParameterClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSessionSetGraphParameterClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSessionSetGraphParameterClause(this);
		}
	}

	public final SessionSetGraphParameterClauseContext sessionSetGraphParameterClause() throws RecognitionException {
		SessionSetGraphParameterClauseContext _localctx = new SessionSetGraphParameterClauseContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_sessionSetGraphParameterClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1103);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PROPERTY) {
				{
				setState(1102);
				match(PROPERTY);
				}
			}

			setState(1105);
			match(GRAPH);
			setState(1106);
			sessionSetParameterName();
			setState(1107);
			optTypedGraphInitializer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SessionSetBindingTableParameterClauseContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(GQLParser.TABLE, 0); }
		public SessionSetParameterNameContext sessionSetParameterName() {
			return getRuleContext(SessionSetParameterNameContext.class,0);
		}
		public OptTypedBindingTableInitializerContext optTypedBindingTableInitializer() {
			return getRuleContext(OptTypedBindingTableInitializerContext.class,0);
		}
		public TerminalNode BINDING() { return getToken(GQLParser.BINDING, 0); }
		public SessionSetBindingTableParameterClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sessionSetBindingTableParameterClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSessionSetBindingTableParameterClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSessionSetBindingTableParameterClause(this);
		}
	}

	public final SessionSetBindingTableParameterClauseContext sessionSetBindingTableParameterClause() throws RecognitionException {
		SessionSetBindingTableParameterClauseContext _localctx = new SessionSetBindingTableParameterClauseContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_sessionSetBindingTableParameterClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1110);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BINDING) {
				{
				setState(1109);
				match(BINDING);
				}
			}

			setState(1112);
			match(TABLE);
			setState(1113);
			sessionSetParameterName();
			setState(1114);
			optTypedBindingTableInitializer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SessionSetValueParameterClauseContext extends ParserRuleContext {
		public TerminalNode VALUE() { return getToken(GQLParser.VALUE, 0); }
		public SessionSetParameterNameContext sessionSetParameterName() {
			return getRuleContext(SessionSetParameterNameContext.class,0);
		}
		public OptTypedValueInitializerContext optTypedValueInitializer() {
			return getRuleContext(OptTypedValueInitializerContext.class,0);
		}
		public SessionSetValueParameterClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sessionSetValueParameterClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSessionSetValueParameterClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSessionSetValueParameterClause(this);
		}
	}

	public final SessionSetValueParameterClauseContext sessionSetValueParameterClause() throws RecognitionException {
		SessionSetValueParameterClauseContext _localctx = new SessionSetValueParameterClauseContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_sessionSetValueParameterClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1116);
			match(VALUE);
			setState(1117);
			sessionSetParameterName();
			setState(1118);
			optTypedValueInitializer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SessionSetParameterNameContext extends ParserRuleContext {
		public ParameterNameContext parameterName() {
			return getRuleContext(ParameterNameContext.class,0);
		}
		public TerminalNode IF() { return getToken(GQLParser.IF, 0); }
		public TerminalNode NOT() { return getToken(GQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(GQLParser.EXISTS, 0); }
		public SessionSetParameterNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sessionSetParameterName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSessionSetParameterName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSessionSetParameterName(this);
		}
	}

	public final SessionSetParameterNameContext sessionSetParameterName() throws RecognitionException {
		SessionSetParameterNameContext _localctx = new SessionSetParameterNameContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_sessionSetParameterName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1123);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1120);
				match(IF);
				setState(1121);
				match(NOT);
				setState(1122);
				match(EXISTS);
				}
			}

			setState(1125);
			parameterName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SessionResetCommandContext extends ParserRuleContext {
		public TerminalNode SESSION() { return getToken(GQLParser.SESSION, 0); }
		public TerminalNode RESET() { return getToken(GQLParser.RESET, 0); }
		public SessionResetArgumentsContext sessionResetArguments() {
			return getRuleContext(SessionResetArgumentsContext.class,0);
		}
		public SessionResetCommandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sessionResetCommand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSessionResetCommand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSessionResetCommand(this);
		}
	}

	public final SessionResetCommandContext sessionResetCommand() throws RecognitionException {
		SessionResetCommandContext _localctx = new SessionResetCommandContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_sessionResetCommand);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1127);
			match(SESSION);
			setState(1128);
			match(RESET);
			setState(1130);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 4611686020574871616L) != 0) || _la==GRAPH || ((((_la - 198)) & ~0x3f) == 0 && ((1L << (_la - 198)) & 140737505133059L) != 0)) {
				{
				setState(1129);
				sessionResetArguments();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SessionResetArgumentsContext extends ParserRuleContext {
		public TerminalNode PARAMETERS() { return getToken(GQLParser.PARAMETERS, 0); }
		public TerminalNode CHARACTERISTICS() { return getToken(GQLParser.CHARACTERISTICS, 0); }
		public TerminalNode ALL() { return getToken(GQLParser.ALL, 0); }
		public TerminalNode SCHEMA() { return getToken(GQLParser.SCHEMA, 0); }
		public TerminalNode GRAPH() { return getToken(GQLParser.GRAPH, 0); }
		public TerminalNode PROPERTY() { return getToken(GQLParser.PROPERTY, 0); }
		public TerminalNode TIME() { return getToken(GQLParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(GQLParser.ZONE, 0); }
		public ParameterNameContext parameterName() {
			return getRuleContext(ParameterNameContext.class,0);
		}
		public TerminalNode PARAMETER() { return getToken(GQLParser.PARAMETER, 0); }
		public SessionResetArgumentsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sessionResetArguments; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSessionResetArguments(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSessionResetArguments(this);
		}
	}

	public final SessionResetArgumentsContext sessionResetArguments() throws RecognitionException {
		SessionResetArgumentsContext _localctx = new SessionResetArgumentsContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_sessionResetArguments);
		int _la;
		try {
			setState(1147);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
			case CHARACTERISTICS:
			case PARAMETERS:
				enterOuterAlt(_localctx, 1);
				{
				setState(1133);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(1132);
					match(ALL);
					}
				}

				setState(1135);
				_la = _input.LA(1);
				if ( !(_la==CHARACTERISTICS || _la==PARAMETERS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SCHEMA:
				enterOuterAlt(_localctx, 2);
				{
				setState(1136);
				match(SCHEMA);
				}
				break;
			case GRAPH:
			case PROPERTY:
				enterOuterAlt(_localctx, 3);
				{
				setState(1138);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROPERTY) {
					{
					setState(1137);
					match(PROPERTY);
					}
				}

				setState(1140);
				match(GRAPH);
				}
				break;
			case TIME:
				enterOuterAlt(_localctx, 4);
				{
				setState(1141);
				match(TIME);
				setState(1142);
				match(ZONE);
				}
				break;
			case DOLLAR_SIGN:
			case PARAMETER:
				enterOuterAlt(_localctx, 5);
				{
				setState(1144);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARAMETER) {
					{
					setState(1143);
					match(PARAMETER);
					}
				}

				setState(1146);
				parameterName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SessionCloseCommandContext extends ParserRuleContext {
		public TerminalNode SESSION() { return getToken(GQLParser.SESSION, 0); }
		public TerminalNode CLOSE() { return getToken(GQLParser.CLOSE, 0); }
		public SessionCloseCommandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sessionCloseCommand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSessionCloseCommand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSessionCloseCommand(this);
		}
	}

	public final SessionCloseCommandContext sessionCloseCommand() throws RecognitionException {
		SessionCloseCommandContext _localctx = new SessionCloseCommandContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_sessionCloseCommand);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1149);
			match(SESSION);
			setState(1150);
			match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StartTransactionCommandContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(GQLParser.START, 0); }
		public TerminalNode TRANSACTION() { return getToken(GQLParser.TRANSACTION, 0); }
		public TransactionCharacteristicsContext transactionCharacteristics() {
			return getRuleContext(TransactionCharacteristicsContext.class,0);
		}
		public StartTransactionCommandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startTransactionCommand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterStartTransactionCommand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitStartTransactionCommand(this);
		}
	}

	public final StartTransactionCommandContext startTransactionCommand() throws RecognitionException {
		StartTransactionCommandContext _localctx = new StartTransactionCommandContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_startTransactionCommand);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1152);
			match(START);
			setState(1153);
			match(TRANSACTION);
			setState(1155);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==I_DONT_KNOW_1 || _la==READ) {
				{
				setState(1154);
				transactionCharacteristics();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TransactionCharacteristicsContext extends ParserRuleContext {
		public List<TransactionModeContext> transactionMode() {
			return getRuleContexts(TransactionModeContext.class);
		}
		public TransactionModeContext transactionMode(int i) {
			return getRuleContext(TransactionModeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQLParser.COMMA, i);
		}
		public TransactionCharacteristicsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionCharacteristics; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterTransactionCharacteristics(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitTransactionCharacteristics(this);
		}
	}

	public final TransactionCharacteristicsContext transactionCharacteristics() throws RecognitionException {
		TransactionCharacteristicsContext _localctx = new TransactionCharacteristicsContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_transactionCharacteristics);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1157);
			transactionMode();
			setState(1162);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1158);
				match(COMMA);
				setState(1159);
				transactionMode();
				}
				}
				setState(1164);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TransactionModeContext extends ParserRuleContext {
		public TransactionAccessModeContext transactionAccessMode() {
			return getRuleContext(TransactionAccessModeContext.class,0);
		}
		public ImplementationDefinedAccessModeContext implementationDefinedAccessMode() {
			return getRuleContext(ImplementationDefinedAccessModeContext.class,0);
		}
		public TransactionModeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionMode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterTransactionMode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitTransactionMode(this);
		}
	}

	public final TransactionModeContext transactionMode() throws RecognitionException {
		TransactionModeContext _localctx = new TransactionModeContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_transactionMode);
		try {
			setState(1167);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ:
				enterOuterAlt(_localctx, 1);
				{
				setState(1165);
				transactionAccessMode();
				}
				break;
			case I_DONT_KNOW_1:
				enterOuterAlt(_localctx, 2);
				{
				setState(1166);
				implementationDefinedAccessMode();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TransactionAccessModeContext extends ParserRuleContext {
		public TerminalNode READ() { return getToken(GQLParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(GQLParser.ONLY, 0); }
		public TerminalNode WRITE() { return getToken(GQLParser.WRITE, 0); }
		public TransactionAccessModeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionAccessMode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterTransactionAccessMode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitTransactionAccessMode(this);
		}
	}

	public final TransactionAccessModeContext transactionAccessMode() throws RecognitionException {
		TransactionAccessModeContext _localctx = new TransactionAccessModeContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_transactionAccessMode);
		try {
			setState(1173);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,25,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1169);
				match(READ);
				setState(1170);
				match(ONLY);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1171);
				match(READ);
				setState(1172);
				match(WRITE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ImplementationDefinedAccessModeContext extends ParserRuleContext {
		public TerminalNode I_DONT_KNOW_1() { return getToken(GQLParser.I_DONT_KNOW_1, 0); }
		public ImplementationDefinedAccessModeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_implementationDefinedAccessMode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterImplementationDefinedAccessMode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitImplementationDefinedAccessMode(this);
		}
	}

	public final ImplementationDefinedAccessModeContext implementationDefinedAccessMode() throws RecognitionException {
		ImplementationDefinedAccessModeContext _localctx = new ImplementationDefinedAccessModeContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_implementationDefinedAccessMode);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1175);
			match(I_DONT_KNOW_1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RollbackCommandContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(GQLParser.ROLLBACK, 0); }
		public RollbackCommandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollbackCommand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterRollbackCommand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitRollbackCommand(this);
		}
	}

	public final RollbackCommandContext rollbackCommand() throws RecognitionException {
		RollbackCommandContext _localctx = new RollbackCommandContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_rollbackCommand);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1177);
			match(ROLLBACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CommitCommandContext extends ParserRuleContext {
		public TerminalNode COMMIT() { return getToken(GQLParser.COMMIT, 0); }
		public CommitCommandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commitCommand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterCommitCommand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitCommitCommand(this);
		}
	}

	public final CommitCommandContext commitCommand() throws RecognitionException {
		CommitCommandContext _localctx = new CommitCommandContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_commitCommand);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1179);
			match(COMMIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NestedProcedureSpecificationContext extends ParserRuleContext {
		public TerminalNode LEFT_BRACE() { return getToken(GQLParser.LEFT_BRACE, 0); }
		public ProcedureSpecificationContext procedureSpecification() {
			return getRuleContext(ProcedureSpecificationContext.class,0);
		}
		public TerminalNode RIGHT_BRACE() { return getToken(GQLParser.RIGHT_BRACE, 0); }
		public NestedProcedureSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nestedProcedureSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterNestedProcedureSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitNestedProcedureSpecification(this);
		}
	}

	public final NestedProcedureSpecificationContext nestedProcedureSpecification() throws RecognitionException {
		NestedProcedureSpecificationContext _localctx = new NestedProcedureSpecificationContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_nestedProcedureSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1181);
			match(LEFT_BRACE);
			setState(1182);
			procedureSpecification();
			setState(1183);
			match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ProcedureSpecificationContext extends ParserRuleContext {
		public ProcedureBodyContext procedureBody() {
			return getRuleContext(ProcedureBodyContext.class,0);
		}
		public ProcedureSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterProcedureSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitProcedureSpecification(this);
		}
	}

	public final ProcedureSpecificationContext procedureSpecification() throws RecognitionException {
		ProcedureSpecificationContext _localctx = new ProcedureSpecificationContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_procedureSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1185);
			procedureBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CatalogModifyingProcedureSpecificationContext extends ParserRuleContext {
		public ProcedureBodyContext procedureBody() {
			return getRuleContext(ProcedureBodyContext.class,0);
		}
		public CatalogModifyingProcedureSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_catalogModifyingProcedureSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterCatalogModifyingProcedureSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitCatalogModifyingProcedureSpecification(this);
		}
	}

	public final CatalogModifyingProcedureSpecificationContext catalogModifyingProcedureSpecification() throws RecognitionException {
		CatalogModifyingProcedureSpecificationContext _localctx = new CatalogModifyingProcedureSpecificationContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_catalogModifyingProcedureSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1187);
			procedureBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NestedDataModifyingProcedureSpecificationContext extends ParserRuleContext {
		public TerminalNode LEFT_BRACE() { return getToken(GQLParser.LEFT_BRACE, 0); }
		public DataModifyingProcedureSpecificationContext dataModifyingProcedureSpecification() {
			return getRuleContext(DataModifyingProcedureSpecificationContext.class,0);
		}
		public TerminalNode RIGHT_BRACE() { return getToken(GQLParser.RIGHT_BRACE, 0); }
		public NestedDataModifyingProcedureSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nestedDataModifyingProcedureSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterNestedDataModifyingProcedureSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitNestedDataModifyingProcedureSpecification(this);
		}
	}

	public final NestedDataModifyingProcedureSpecificationContext nestedDataModifyingProcedureSpecification() throws RecognitionException {
		NestedDataModifyingProcedureSpecificationContext _localctx = new NestedDataModifyingProcedureSpecificationContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_nestedDataModifyingProcedureSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1189);
			match(LEFT_BRACE);
			setState(1190);
			dataModifyingProcedureSpecification();
			setState(1191);
			match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DataModifyingProcedureSpecificationContext extends ParserRuleContext {
		public ProcedureBodyContext procedureBody() {
			return getRuleContext(ProcedureBodyContext.class,0);
		}
		public DataModifyingProcedureSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataModifyingProcedureSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterDataModifyingProcedureSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitDataModifyingProcedureSpecification(this);
		}
	}

	public final DataModifyingProcedureSpecificationContext dataModifyingProcedureSpecification() throws RecognitionException {
		DataModifyingProcedureSpecificationContext _localctx = new DataModifyingProcedureSpecificationContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_dataModifyingProcedureSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1193);
			procedureBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NestedQuerySpecificationContext extends ParserRuleContext {
		public TerminalNode LEFT_BRACE() { return getToken(GQLParser.LEFT_BRACE, 0); }
		public ProcedureSpecificationContext procedureSpecification() {
			return getRuleContext(ProcedureSpecificationContext.class,0);
		}
		public TerminalNode RIGHT_BRACE() { return getToken(GQLParser.RIGHT_BRACE, 0); }
		public NestedQuerySpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nestedQuerySpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterNestedQuerySpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitNestedQuerySpecification(this);
		}
	}

	public final NestedQuerySpecificationContext nestedQuerySpecification() throws RecognitionException {
		NestedQuerySpecificationContext _localctx = new NestedQuerySpecificationContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_nestedQuerySpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1195);
			match(LEFT_BRACE);
			setState(1196);
			procedureSpecification();
			setState(1197);
			match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QuerySpecificationContext extends ParserRuleContext {
		public ProcedureBodyContext procedureBody() {
			return getRuleContext(ProcedureBodyContext.class,0);
		}
		public QuerySpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterQuerySpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitQuerySpecification(this);
		}
	}

	public final QuerySpecificationContext querySpecification() throws RecognitionException {
		QuerySpecificationContext _localctx = new QuerySpecificationContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_querySpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1199);
			procedureBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnsignedNumericLiteralContext extends ParserRuleContext {
		public IntegerLiteralContext integerLiteral() {
			return getRuleContext(IntegerLiteralContext.class,0);
		}
		public FloatLiteralContext floatLiteral() {
			return getRuleContext(FloatLiteralContext.class,0);
		}
		public UnsignedNumericLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unsignedNumericLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterUnsignedNumericLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitUnsignedNumericLiteral(this);
		}
	}

	public final UnsignedNumericLiteralContext unsignedNumericLiteral() throws RecognitionException {
		UnsignedNumericLiteralContext _localctx = new UnsignedNumericLiteralContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_unsignedNumericLiteral);
		try {
			setState(1203);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNSIGNED_DECIMAL_INTEGER:
			case UNSIGNED_HEXADECIMAL_INTEGER:
			case UNSIGNED_OCTAL_INTEGER:
			case UNSIGNED_BINARY_INTEGER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1201);
				integerLiteral();
				}
				break;
			case UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION:
			case UNSIGNED_DECIMAL_IN_COMMON_NOTATION:
				enterOuterAlt(_localctx, 2);
				{
				setState(1202);
				floatLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IntegerLiteralContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_DECIMAL_INTEGER() { return getToken(GQLParser.UNSIGNED_DECIMAL_INTEGER, 0); }
		public TerminalNode UNSIGNED_OCTAL_INTEGER() { return getToken(GQLParser.UNSIGNED_OCTAL_INTEGER, 0); }
		public TerminalNode UNSIGNED_HEXADECIMAL_INTEGER() { return getToken(GQLParser.UNSIGNED_HEXADECIMAL_INTEGER, 0); }
		public TerminalNode UNSIGNED_BINARY_INTEGER() { return getToken(GQLParser.UNSIGNED_BINARY_INTEGER, 0); }
		public IntegerLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_integerLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterIntegerLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitIntegerLiteral(this);
		}
	}

	public final IntegerLiteralContext integerLiteral() throws RecognitionException {
		IntegerLiteralContext _localctx = new IntegerLiteralContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_integerLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1205);
			_la = _input.LA(1);
			if ( !(((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & 15L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FloatLiteralContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_DECIMAL_IN_COMMON_NOTATION() { return getToken(GQLParser.UNSIGNED_DECIMAL_IN_COMMON_NOTATION, 0); }
		public TerminalNode UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION() { return getToken(GQLParser.UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION, 0); }
		public FloatLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_floatLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterFloatLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitFloatLiteral(this);
		}
	}

	public final FloatLiteralContext floatLiteral() throws RecognitionException {
		FloatLiteralContext _localctx = new FloatLiteralContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_floatLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1207);
			_la = _input.LA(1);
			if ( !(_la==UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION || _la==UNSIGNED_DECIMAL_IN_COMMON_NOTATION) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnbrokenSingleQuotedCharacterSequenceContext extends ParserRuleContext {
		public TerminalNode SINGLE_QUOTED_STRING_LITERAL() { return getToken(GQLParser.SINGLE_QUOTED_STRING_LITERAL, 0); }
		public UnbrokenSingleQuotedCharacterSequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unbrokenSingleQuotedCharacterSequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterUnbrokenSingleQuotedCharacterSequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitUnbrokenSingleQuotedCharacterSequence(this);
		}
	}

	public final UnbrokenSingleQuotedCharacterSequenceContext unbrokenSingleQuotedCharacterSequence() throws RecognitionException {
		UnbrokenSingleQuotedCharacterSequenceContext _localctx = new UnbrokenSingleQuotedCharacterSequenceContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_unbrokenSingleQuotedCharacterSequence);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1209);
			match(SINGLE_QUOTED_STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnbrokenDoubleQuotedCharacterSequenceContext extends ParserRuleContext {
		public TerminalNode DOUBLE_QUOTED_STRING_LITERAL() { return getToken(GQLParser.DOUBLE_QUOTED_STRING_LITERAL, 0); }
		public UnbrokenDoubleQuotedCharacterSequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unbrokenDoubleQuotedCharacterSequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterUnbrokenDoubleQuotedCharacterSequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitUnbrokenDoubleQuotedCharacterSequence(this);
		}
	}

	public final UnbrokenDoubleQuotedCharacterSequenceContext unbrokenDoubleQuotedCharacterSequence() throws RecognitionException {
		UnbrokenDoubleQuotedCharacterSequenceContext _localctx = new UnbrokenDoubleQuotedCharacterSequenceContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_unbrokenDoubleQuotedCharacterSequence);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1211);
			match(DOUBLE_QUOTED_STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnbrokenAccentQuotedCharacterSequenceContext extends ParserRuleContext {
		public TerminalNode ACCENT_QUOTED_STRING_LITERAL() { return getToken(GQLParser.ACCENT_QUOTED_STRING_LITERAL, 0); }
		public UnbrokenAccentQuotedCharacterSequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unbrokenAccentQuotedCharacterSequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterUnbrokenAccentQuotedCharacterSequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitUnbrokenAccentQuotedCharacterSequence(this);
		}
	}

	public final UnbrokenAccentQuotedCharacterSequenceContext unbrokenAccentQuotedCharacterSequence() throws RecognitionException {
		UnbrokenAccentQuotedCharacterSequenceContext _localctx = new UnbrokenAccentQuotedCharacterSequenceContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_unbrokenAccentQuotedCharacterSequence);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1213);
			match(ACCENT_QUOTED_STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SingleQuotedCharacterSequenceContext extends ParserRuleContext {
		public List<UnbrokenSingleQuotedCharacterSequenceContext> unbrokenSingleQuotedCharacterSequence() {
			return getRuleContexts(UnbrokenSingleQuotedCharacterSequenceContext.class);
		}
		public UnbrokenSingleQuotedCharacterSequenceContext unbrokenSingleQuotedCharacterSequence(int i) {
			return getRuleContext(UnbrokenSingleQuotedCharacterSequenceContext.class,i);
		}
		public List<TerminalNode> VERTICAL_BAR() { return getTokens(GQLParser.VERTICAL_BAR); }
		public TerminalNode VERTICAL_BAR(int i) {
			return getToken(GQLParser.VERTICAL_BAR, i);
		}
		public SingleQuotedCharacterSequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleQuotedCharacterSequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSingleQuotedCharacterSequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSingleQuotedCharacterSequence(this);
		}
	}

	public final SingleQuotedCharacterSequenceContext singleQuotedCharacterSequence() throws RecognitionException {
		SingleQuotedCharacterSequenceContext _localctx = new SingleQuotedCharacterSequenceContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_singleQuotedCharacterSequence);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1215);
			unbrokenSingleQuotedCharacterSequence();
			setState(1220);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,27,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1216);
					match(VERTICAL_BAR);
					setState(1217);
					unbrokenSingleQuotedCharacterSequence();
					}
					} 
				}
				setState(1222);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,27,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DoubleQuotedCharacterSequenceContext extends ParserRuleContext {
		public List<UnbrokenDoubleQuotedCharacterSequenceContext> unbrokenDoubleQuotedCharacterSequence() {
			return getRuleContexts(UnbrokenDoubleQuotedCharacterSequenceContext.class);
		}
		public UnbrokenDoubleQuotedCharacterSequenceContext unbrokenDoubleQuotedCharacterSequence(int i) {
			return getRuleContext(UnbrokenDoubleQuotedCharacterSequenceContext.class,i);
		}
		public List<TerminalNode> VERTICAL_BAR() { return getTokens(GQLParser.VERTICAL_BAR); }
		public TerminalNode VERTICAL_BAR(int i) {
			return getToken(GQLParser.VERTICAL_BAR, i);
		}
		public DoubleQuotedCharacterSequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_doubleQuotedCharacterSequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterDoubleQuotedCharacterSequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitDoubleQuotedCharacterSequence(this);
		}
	}

	public final DoubleQuotedCharacterSequenceContext doubleQuotedCharacterSequence() throws RecognitionException {
		DoubleQuotedCharacterSequenceContext _localctx = new DoubleQuotedCharacterSequenceContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_doubleQuotedCharacterSequence);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1223);
			unbrokenDoubleQuotedCharacterSequence();
			setState(1228);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,28,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1224);
					match(VERTICAL_BAR);
					setState(1225);
					unbrokenDoubleQuotedCharacterSequence();
					}
					} 
				}
				setState(1230);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,28,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AccentQuotedCharacterSequenceContext extends ParserRuleContext {
		public List<UnbrokenAccentQuotedCharacterSequenceContext> unbrokenAccentQuotedCharacterSequence() {
			return getRuleContexts(UnbrokenAccentQuotedCharacterSequenceContext.class);
		}
		public UnbrokenAccentQuotedCharacterSequenceContext unbrokenAccentQuotedCharacterSequence(int i) {
			return getRuleContext(UnbrokenAccentQuotedCharacterSequenceContext.class,i);
		}
		public List<TerminalNode> VERTICAL_BAR() { return getTokens(GQLParser.VERTICAL_BAR); }
		public TerminalNode VERTICAL_BAR(int i) {
			return getToken(GQLParser.VERTICAL_BAR, i);
		}
		public AccentQuotedCharacterSequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_accentQuotedCharacterSequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterAccentQuotedCharacterSequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitAccentQuotedCharacterSequence(this);
		}
	}

	public final AccentQuotedCharacterSequenceContext accentQuotedCharacterSequence() throws RecognitionException {
		AccentQuotedCharacterSequenceContext _localctx = new AccentQuotedCharacterSequenceContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_accentQuotedCharacterSequence);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1231);
			unbrokenAccentQuotedCharacterSequence();
			setState(1236);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,29,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1232);
					match(VERTICAL_BAR);
					setState(1233);
					unbrokenAccentQuotedCharacterSequence();
					}
					} 
				}
				setState(1238);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,29,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnbrokenCharacterStringLiteralContext extends ParserRuleContext {
		public UnbrokenSingleQuotedCharacterSequenceContext unbrokenSingleQuotedCharacterSequence() {
			return getRuleContext(UnbrokenSingleQuotedCharacterSequenceContext.class,0);
		}
		public UnbrokenDoubleQuotedCharacterSequenceContext unbrokenDoubleQuotedCharacterSequence() {
			return getRuleContext(UnbrokenDoubleQuotedCharacterSequenceContext.class,0);
		}
		public UnbrokenCharacterStringLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unbrokenCharacterStringLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterUnbrokenCharacterStringLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitUnbrokenCharacterStringLiteral(this);
		}
	}

	public final UnbrokenCharacterStringLiteralContext unbrokenCharacterStringLiteral() throws RecognitionException {
		UnbrokenCharacterStringLiteralContext _localctx = new UnbrokenCharacterStringLiteralContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_unbrokenCharacterStringLiteral);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1241);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SINGLE_QUOTED_STRING_LITERAL:
				{
				setState(1239);
				unbrokenSingleQuotedCharacterSequence();
				}
				break;
			case DOUBLE_QUOTED_STRING_LITERAL:
				{
				setState(1240);
				unbrokenDoubleQuotedCharacterSequence();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NullLiteralContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(GQLParser.NULL, 0); }
		public NullLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterNullLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitNullLiteral(this);
		}
	}

	public final NullLiteralContext nullLiteral() throws RecognitionException {
		NullLiteralContext _localctx = new NullLiteralContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_nullLiteral);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1243);
			match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TemporalLiteralContext extends ParserRuleContext {
		public DateLiteralContext dateLiteral() {
			return getRuleContext(DateLiteralContext.class,0);
		}
		public TimeLiteralContext timeLiteral() {
			return getRuleContext(TimeLiteralContext.class,0);
		}
		public DatetimeLiteralContext datetimeLiteral() {
			return getRuleContext(DatetimeLiteralContext.class,0);
		}
		public SqlDatetimeLiteralContext sqlDatetimeLiteral() {
			return getRuleContext(SqlDatetimeLiteralContext.class,0);
		}
		public TemporalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_temporalLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterTemporalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitTemporalLiteral(this);
		}
	}

	public final TemporalLiteralContext temporalLiteral() throws RecognitionException {
		TemporalLiteralContext _localctx = new TemporalLiteralContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_temporalLiteral);
		try {
			setState(1249);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,31,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1245);
				dateLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1246);
				timeLiteral();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1247);
				datetimeLiteral();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1248);
				sqlDatetimeLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SqlDatetimeLiteralContext extends ParserRuleContext {
		public TerminalNode DATE() { return getToken(GQLParser.DATE, 0); }
		public List<TerminalNode> QUOTE() { return getTokens(GQLParser.QUOTE); }
		public TerminalNode QUOTE(int i) {
			return getToken(GQLParser.QUOTE, i);
		}
		public TerminalNode FOUR_DIGIT() { return getToken(GQLParser.FOUR_DIGIT, 0); }
		public List<TerminalNode> MINUS_SIGN() { return getTokens(GQLParser.MINUS_SIGN); }
		public TerminalNode MINUS_SIGN(int i) {
			return getToken(GQLParser.MINUS_SIGN, i);
		}
		public List<TerminalNode> DOUBLE_DIGIT() { return getTokens(GQLParser.DOUBLE_DIGIT); }
		public TerminalNode DOUBLE_DIGIT(int i) {
			return getToken(GQLParser.DOUBLE_DIGIT, i);
		}
		public TerminalNode TIME() { return getToken(GQLParser.TIME, 0); }
		public List<TerminalNode> COLON() { return getTokens(GQLParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(GQLParser.COLON, i);
		}
		public TerminalNode TIMESTAMP() { return getToken(GQLParser.TIMESTAMP, 0); }
		public TerminalNode DATETIME() { return getToken(GQLParser.DATETIME, 0); }
		public SqlDatetimeLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlDatetimeLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSqlDatetimeLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSqlDatetimeLiteral(this);
		}
	}

	public final SqlDatetimeLiteralContext sqlDatetimeLiteral() throws RecognitionException {
		SqlDatetimeLiteralContext _localctx = new SqlDatetimeLiteralContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_sqlDatetimeLiteral);
		try {
			setState(1293);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1251);
				match(DATE);
				setState(1252);
				match(QUOTE);
				setState(1253);
				match(FOUR_DIGIT);
				setState(1254);
				match(MINUS_SIGN);
				setState(1255);
				match(DOUBLE_DIGIT);
				setState(1256);
				match(MINUS_SIGN);
				setState(1257);
				match(DOUBLE_DIGIT);
				setState(1258);
				match(QUOTE);
				}
				break;
			case TIME:
				enterOuterAlt(_localctx, 2);
				{
				setState(1259);
				match(TIME);
				setState(1260);
				match(QUOTE);
				setState(1261);
				match(DOUBLE_DIGIT);
				setState(1262);
				match(COLON);
				setState(1263);
				match(DOUBLE_DIGIT);
				setState(1264);
				match(COLON);
				setState(1265);
				match(DOUBLE_DIGIT);
				setState(1266);
				match(QUOTE);
				}
				break;
			case TIMESTAMP:
				enterOuterAlt(_localctx, 3);
				{
				setState(1267);
				match(TIMESTAMP);
				setState(1268);
				match(QUOTE);
				setState(1269);
				match(FOUR_DIGIT);
				setState(1270);
				match(MINUS_SIGN);
				setState(1271);
				match(DOUBLE_DIGIT);
				setState(1272);
				match(MINUS_SIGN);
				setState(1273);
				match(DOUBLE_DIGIT);
				setState(1274);
				match(DOUBLE_DIGIT);
				setState(1275);
				match(COLON);
				setState(1276);
				match(DOUBLE_DIGIT);
				setState(1277);
				match(COLON);
				setState(1278);
				match(DOUBLE_DIGIT);
				setState(1279);
				match(QUOTE);
				}
				break;
			case DATETIME:
				enterOuterAlt(_localctx, 4);
				{
				setState(1280);
				match(DATETIME);
				setState(1281);
				match(QUOTE);
				setState(1282);
				match(FOUR_DIGIT);
				setState(1283);
				match(MINUS_SIGN);
				setState(1284);
				match(DOUBLE_DIGIT);
				setState(1285);
				match(MINUS_SIGN);
				setState(1286);
				match(DOUBLE_DIGIT);
				setState(1287);
				match(DOUBLE_DIGIT);
				setState(1288);
				match(COLON);
				setState(1289);
				match(DOUBLE_DIGIT);
				setState(1290);
				match(COLON);
				setState(1291);
				match(DOUBLE_DIGIT);
				setState(1292);
				match(QUOTE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DateLiteralContext extends ParserRuleContext {
		public TerminalNode DATE() { return getToken(GQLParser.DATE, 0); }
		public UnbrokenCharacterStringLiteralContext unbrokenCharacterStringLiteral() {
			return getRuleContext(UnbrokenCharacterStringLiteralContext.class,0);
		}
		public DateLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dateLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterDateLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitDateLiteral(this);
		}
	}

	public final DateLiteralContext dateLiteral() throws RecognitionException {
		DateLiteralContext _localctx = new DateLiteralContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_dateLiteral);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1295);
			match(DATE);
			setState(1296);
			unbrokenCharacterStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TimeLiteralContext extends ParserRuleContext {
		public TerminalNode TIME() { return getToken(GQLParser.TIME, 0); }
		public UnbrokenCharacterStringLiteralContext unbrokenCharacterStringLiteral() {
			return getRuleContext(UnbrokenCharacterStringLiteralContext.class,0);
		}
		public TimeLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timeLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterTimeLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitTimeLiteral(this);
		}
	}

	public final TimeLiteralContext timeLiteral() throws RecognitionException {
		TimeLiteralContext _localctx = new TimeLiteralContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_timeLiteral);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1298);
			match(TIME);
			setState(1299);
			unbrokenCharacterStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DatetimeLiteralContext extends ParserRuleContext {
		public UnbrokenCharacterStringLiteralContext unbrokenCharacterStringLiteral() {
			return getRuleContext(UnbrokenCharacterStringLiteralContext.class,0);
		}
		public TerminalNode DATETIME() { return getToken(GQLParser.DATETIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(GQLParser.TIMESTAMP, 0); }
		public DatetimeLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetimeLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterDatetimeLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitDatetimeLiteral(this);
		}
	}

	public final DatetimeLiteralContext datetimeLiteral() throws RecognitionException {
		DatetimeLiteralContext _localctx = new DatetimeLiteralContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_datetimeLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1301);
			_la = _input.LA(1);
			if ( !(_la==DATETIME || _la==TIMESTAMP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1302);
			unbrokenCharacterStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DurationLiteralContext extends ParserRuleContext {
		public TerminalNode DURATION() { return getToken(GQLParser.DURATION, 0); }
		public UnbrokenCharacterStringLiteralContext unbrokenCharacterStringLiteral() {
			return getRuleContext(UnbrokenCharacterStringLiteralContext.class,0);
		}
		public SqlIntervalLiteralContext sqlIntervalLiteral() {
			return getRuleContext(SqlIntervalLiteralContext.class,0);
		}
		public DurationLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_durationLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterDurationLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitDurationLiteral(this);
		}
	}

	public final DurationLiteralContext durationLiteral() throws RecognitionException {
		DurationLiteralContext _localctx = new DurationLiteralContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_durationLiteral);
		try {
			setState(1307);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DURATION:
				enterOuterAlt(_localctx, 1);
				{
				setState(1304);
				match(DURATION);
				setState(1305);
				unbrokenCharacterStringLiteral();
				}
				break;
			case UNSIGNED_DECIMAL_INTEGER:
				enterOuterAlt(_localctx, 2);
				{
				setState(1306);
				sqlIntervalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SqlIntervalLiteralContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_DECIMAL_INTEGER() { return getToken(GQLParser.UNSIGNED_DECIMAL_INTEGER, 0); }
		public SqlIntervalTypeContext sqlIntervalType() {
			return getRuleContext(SqlIntervalTypeContext.class,0);
		}
		public SqlIntervalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlIntervalLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSqlIntervalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSqlIntervalLiteral(this);
		}
	}

	public final SqlIntervalLiteralContext sqlIntervalLiteral() throws RecognitionException {
		SqlIntervalLiteralContext _localctx = new SqlIntervalLiteralContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_sqlIntervalLiteral);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1309);
			match(UNSIGNED_DECIMAL_INTEGER);
			setState(1310);
			sqlIntervalType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SqlIntervalTypeContext extends ParserRuleContext {
		public TerminalNode INTERVAL_DAY() { return getToken(GQLParser.INTERVAL_DAY, 0); }
		public TerminalNode INTERVAL_WEEK() { return getToken(GQLParser.INTERVAL_WEEK, 0); }
		public TerminalNode INTERVAL_MONTH() { return getToken(GQLParser.INTERVAL_MONTH, 0); }
		public TerminalNode INTERVAL_YEAR() { return getToken(GQLParser.INTERVAL_YEAR, 0); }
		public SqlIntervalTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlIntervalType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSqlIntervalType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSqlIntervalType(this);
		}
	}

	public final SqlIntervalTypeContext sqlIntervalType() throws RecognitionException {
		SqlIntervalTypeContext _localctx = new SqlIntervalTypeContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_sqlIntervalType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1312);
			_la = _input.LA(1);
			if ( !(((((_la - 287)) & ~0x3f) == 0 && ((1L << (_la - 287)) & 15L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IdentifierContext extends ParserRuleContext {
		public TerminalNode REGULAR_IDENTIFIER() { return getToken(GQLParser.REGULAR_IDENTIFIER, 0); }
		public DelimitedIdentifierContext delimitedIdentifier() {
			return getRuleContext(DelimitedIdentifierContext.class,0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitIdentifier(this);
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_identifier);
		try {
			setState(1316);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REGULAR_IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1314);
				match(REGULAR_IDENTIFIER);
				}
				break;
			case DOUBLE_QUOTED_STRING_LITERAL:
			case ACCENT_QUOTED_STRING_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1315);
				delimitedIdentifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DelimitedIdentifierContext extends ParserRuleContext {
		public DoubleQuotedCharacterSequenceContext doubleQuotedCharacterSequence() {
			return getRuleContext(DoubleQuotedCharacterSequenceContext.class,0);
		}
		public AccentQuotedCharacterSequenceContext accentQuotedCharacterSequence() {
			return getRuleContext(AccentQuotedCharacterSequenceContext.class,0);
		}
		public DelimitedIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delimitedIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterDelimitedIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitDelimitedIdentifier(this);
		}
	}

	public final DelimitedIdentifierContext delimitedIdentifier() throws RecognitionException {
		DelimitedIdentifierContext _localctx = new DelimitedIdentifierContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_delimitedIdentifier);
		try {
			setState(1320);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOUBLE_QUOTED_STRING_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1318);
				doubleQuotedCharacterSequence();
				}
				break;
			case ACCENT_QUOTED_STRING_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1319);
				accentQuotedCharacterSequence();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ObjectNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ObjectNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_objectName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterObjectName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitObjectName(this);
		}
	}

	public final ObjectNameContext objectName() throws RecognitionException {
		ObjectNameContext _localctx = new ObjectNameContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_objectName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1322);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ObjectNameOrBindingVariableContext extends ParserRuleContext {
		public TerminalNode REGULAR_IDENTIFIER() { return getToken(GQLParser.REGULAR_IDENTIFIER, 0); }
		public ObjectNameOrBindingVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_objectNameOrBindingVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterObjectNameOrBindingVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitObjectNameOrBindingVariable(this);
		}
	}

	public final ObjectNameOrBindingVariableContext objectNameOrBindingVariable() throws RecognitionException {
		ObjectNameOrBindingVariableContext _localctx = new ObjectNameOrBindingVariableContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_objectNameOrBindingVariable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1324);
			match(REGULAR_IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DirectoryNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public DirectoryNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_directoryName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterDirectoryName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitDirectoryName(this);
		}
	}

	public final DirectoryNameContext directoryName() throws RecognitionException {
		DirectoryNameContext _localctx = new DirectoryNameContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_directoryName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1326);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SchemaNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSchemaName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSchemaName(this);
		}
	}

	public final SchemaNameContext schemaName() throws RecognitionException {
		SchemaNameContext _localctx = new SchemaNameContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_schemaName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1328);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GraphNameContext extends ParserRuleContext {
		public TerminalNode REGULAR_IDENTIFIER() { return getToken(GQLParser.REGULAR_IDENTIFIER, 0); }
		public DelimitedGraphNameContext delimitedGraphName() {
			return getRuleContext(DelimitedGraphNameContext.class,0);
		}
		public GraphNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_graphName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGraphName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGraphName(this);
		}
	}

	public final GraphNameContext graphName() throws RecognitionException {
		GraphNameContext _localctx = new GraphNameContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_graphName);
		try {
			setState(1332);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REGULAR_IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1330);
				match(REGULAR_IDENTIFIER);
				}
				break;
			case DOUBLE_QUOTED_STRING_LITERAL:
			case ACCENT_QUOTED_STRING_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1331);
				delimitedGraphName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DelimitedGraphNameContext extends ParserRuleContext {
		public DelimitedIdentifierContext delimitedIdentifier() {
			return getRuleContext(DelimitedIdentifierContext.class,0);
		}
		public DelimitedGraphNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delimitedGraphName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterDelimitedGraphName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitDelimitedGraphName(this);
		}
	}

	public final DelimitedGraphNameContext delimitedGraphName() throws RecognitionException {
		DelimitedGraphNameContext _localctx = new DelimitedGraphNameContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_delimitedGraphName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1334);
			delimitedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GraphTypeNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public GraphTypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_graphTypeName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGraphTypeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGraphTypeName(this);
		}
	}

	public final GraphTypeNameContext graphTypeName() throws RecognitionException {
		GraphTypeNameContext _localctx = new GraphTypeNameContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_graphTypeName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1336);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ElementTypeNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ElementTypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elementTypeName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterElementTypeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitElementTypeName(this);
		}
	}

	public final ElementTypeNameContext elementTypeName() throws RecognitionException {
		ElementTypeNameContext _localctx = new ElementTypeNameContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_elementTypeName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1338);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BindingTableNameContext extends ParserRuleContext {
		public TerminalNode REGULAR_IDENTIFIER() { return getToken(GQLParser.REGULAR_IDENTIFIER, 0); }
		public DelimitedBindingTableNameContext delimitedBindingTableName() {
			return getRuleContext(DelimitedBindingTableNameContext.class,0);
		}
		public BindingTableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bindingTableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterBindingTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitBindingTableName(this);
		}
	}

	public final BindingTableNameContext bindingTableName() throws RecognitionException {
		BindingTableNameContext _localctx = new BindingTableNameContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_bindingTableName);
		try {
			setState(1342);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REGULAR_IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1340);
				match(REGULAR_IDENTIFIER);
				}
				break;
			case DOUBLE_QUOTED_STRING_LITERAL:
			case ACCENT_QUOTED_STRING_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1341);
				delimitedBindingTableName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DelimitedBindingTableNameContext extends ParserRuleContext {
		public DelimitedIdentifierContext delimitedIdentifier() {
			return getRuleContext(DelimitedIdentifierContext.class,0);
		}
		public DelimitedBindingTableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delimitedBindingTableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterDelimitedBindingTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitDelimitedBindingTableName(this);
		}
	}

	public final DelimitedBindingTableNameContext delimitedBindingTableName() throws RecognitionException {
		DelimitedBindingTableNameContext _localctx = new DelimitedBindingTableNameContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_delimitedBindingTableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1344);
			delimitedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ProcedureNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ProcedureNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterProcedureName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitProcedureName(this);
		}
	}

	public final ProcedureNameContext procedureName() throws RecognitionException {
		ProcedureNameContext _localctx = new ProcedureNameContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_procedureName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1346);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LabelNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public KeywordContext keyword() {
			return getRuleContext(KeywordContext.class,0);
		}
		public LabelNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labelName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterLabelName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitLabelName(this);
		}
	}

	public final LabelNameContext labelName() throws RecognitionException {
		LabelNameContext _localctx = new LabelNameContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_labelName);
		try {
			setState(1350);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOUBLE_QUOTED_STRING_LITERAL:
			case ACCENT_QUOTED_STRING_LITERAL:
			case REGULAR_IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1348);
				identifier();
				}
				break;
			case ABS:
			case ACOS:
			case ACYCLIC:
			case ALL:
			case ALL_DIFFERENT:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASCENDING:
			case ASIN:
			case AT:
			case ATAN:
			case AVG:
			case BIG:
			case BIGINT:
			case BINARY:
			case BINDING:
			case BINDINGS:
			case BOOL:
			case BOOLEAN:
			case BOTH:
			case BTRIM:
			case BY:
			case BYTE_LENGTH:
			case BYTES:
			case CALL:
			case CASE:
			case CAST:
			case CEIL:
			case CEILING:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case CHARACTERISTICS:
			case CLOSE:
			case COALESCE:
			case COLLECT:
			case COMMIT:
			case CONNECTING:
			case COPY:
			case COS:
			case COSH:
			case COT:
			case COUNT:
			case CREATE:
			case CURRENT_DATE:
			case CURRENT_GRAPH:
			case CURRENT_PROPERTY_GRAPH:
			case CURRENT_SCHEMA:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DATE:
			case DATETIME:
			case DEC:
			case DECIMAL:
			case DEGREES:
			case DELETE:
			case DESC:
			case DESCENDING:
			case DESTINATION:
			case DETACH:
			case DIFFERENT:
			case DIRECTED:
			case DISTINCT:
			case DOUBLE:
			case DROP:
			case DURATION:
			case DURATION_BETWEEN:
			case ELEMENT:
			case ELEMENT_ID:
			case ELEMENTS:
			case ELSE:
			case END:
			case EXCEPT:
			case EXISTS:
			case EXP:
			case K_FALSE:
			case FILTER:
			case FINISH:
			case FIRST:
			case FLOAT:
			case FLOAT128:
			case FLOAT16:
			case FLOAT256:
			case FLOAT32:
			case FLOAT64:
			case FLOOR:
			case FOR:
			case FROM:
			case GRAPH:
			case GROUP:
			case GROUPS:
			case HAVING:
			case HOME_GRAPH:
			case HOME_PROPERTY_GRAPH:
			case HOME_SCHEMA:
			case I_DONT_KNOW_1:
			case I_DONT_KNOW_2:
			case I_DONT_KNOW_3:
			case I_DONT_KNOW_4:
			case I_DONT_KNOW_5:
			case IF:
			case IN:
			case INSERT:
			case INT:
			case INT8:
			case INT16:
			case INT32:
			case INT64:
			case INT128:
			case INT256:
			case INTEGER:
			case INTEGER8:
			case INTEGER16:
			case INTEGER32:
			case INTEGER64:
			case INTEGER128:
			case INTEGER256:
			case INTERSECT:
			case IS:
			case KEEP:
			case LABEL:
			case LABELED:
			case LABELS:
			case LAST:
			case LEADING:
			case LEFT:
			case LET:
			case LIKE:
			case LIMIT:
			case LIST:
			case LN:
			case LOCAL:
			case LOCAL_DATETIME:
			case LOCAL_TIME:
			case LOCAL_TIMESTAMP:
			case LOG:
			case LOG10:
			case LOWER:
			case LTRIM:
			case MATCH:
			case MAX:
			case MIN:
			case MOD:
			case NEXT:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case NO:
			case NODETACH:
			case NORMALIZE:
			case NORMALIZED:
			case NOT:
			case NULL:
			case NULLIF:
			case NULLS:
			case OCTET_LENGTH:
			case OF:
			case OFFSET:
			case SKIP_:
			case ONLY:
			case OPEN:
			case OPTIONAL:
			case OR:
			case ORDER:
			case ORDINALITY:
			case OTHERWISE:
			case PARAMETER:
			case PARAMETERS:
			case PATH:
			case PATH_LENGTH:
			case PATHS:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POWER:
			case PRECISION:
			case PROPERTY:
			case PROPERTY_EXISTS:
			case RADIANS:
			case READ:
			case REAL:
			case RECORD:
			case REMOVE:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RETURN:
			case ROLLBACK:
			case RTRIM:
			case RIGHT:
			case SAME:
			case SCHEMA:
			case SELECT:
			case SESSION:
			case SET:
			case SHORTEST:
			case SIGNED:
			case SIMPLE:
			case SIN:
			case SINH:
			case SMALL:
			case SMALLINT:
			case SOURCE:
			case SQRT:
			case START:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STRING:
			case SUM:
			case TABLE:
			case TAN:
			case TANH:
			case TEMP:
			case THEN:
			case TIME:
			case TIMESTAMP:
			case TIMEZONE:
			case TO:
			case TRAIL:
			case TRAILING:
			case TRANSACTION:
			case TRIM:
			case K_TRUE:
			case TYPE:
			case TYPED:
			case UBIGINT:
			case UINT:
			case UINT128:
			case UINT16:
			case UINT256:
			case UINT32:
			case UINT64:
			case UINT8:
			case UNDIRECTED:
			case UNION:
			case UNKNOWN:
			case UNSIGNED:
			case UPPER:
			case USE:
			case USMALLINT:
			case VALUE:
			case VARBINARY:
			case VARCHAR:
			case VARIABLE:
			case WALK:
			case WHEN:
			case WHERE:
			case WITH:
			case WITHOUT:
			case WRITE:
			case XOR:
			case YIELD:
			case ZONE:
			case ZONED:
			case ZONED_DATETIME:
			case ZONED_TIME:
			case INTERVAL_DAY:
			case INTERVAL_WEEK:
			case INTERVAL_MONTH:
			case INTERVAL_YEAR:
			case EDGE_SYNONYM:
			case EDGES_SYNONYM:
			case NODE_SYNONYM:
			case KEY_WORD:
			case PRE_RESERVED_WORD:
				enterOuterAlt(_localctx, 2);
				{
				setState(1349);
				keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FunctionNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public FunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterFunctionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitFunctionName(this);
		}
	}

	public final FunctionNameContext functionName() throws RecognitionException {
		FunctionNameContext _localctx = new FunctionNameContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_functionName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1352);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PropertyNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public KeywordContext keyword() {
			return getRuleContext(KeywordContext.class,0);
		}
		public PropertyNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_propertyName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterPropertyName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitPropertyName(this);
		}
	}

	public final PropertyNameContext propertyName() throws RecognitionException {
		PropertyNameContext _localctx = new PropertyNameContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_propertyName);
		try {
			setState(1356);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOUBLE_QUOTED_STRING_LITERAL:
			case ACCENT_QUOTED_STRING_LITERAL:
			case REGULAR_IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1354);
				identifier();
				}
				break;
			case ABS:
			case ACOS:
			case ACYCLIC:
			case ALL:
			case ALL_DIFFERENT:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASCENDING:
			case ASIN:
			case AT:
			case ATAN:
			case AVG:
			case BIG:
			case BIGINT:
			case BINARY:
			case BINDING:
			case BINDINGS:
			case BOOL:
			case BOOLEAN:
			case BOTH:
			case BTRIM:
			case BY:
			case BYTE_LENGTH:
			case BYTES:
			case CALL:
			case CASE:
			case CAST:
			case CEIL:
			case CEILING:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case CHARACTERISTICS:
			case CLOSE:
			case COALESCE:
			case COLLECT:
			case COMMIT:
			case CONNECTING:
			case COPY:
			case COS:
			case COSH:
			case COT:
			case COUNT:
			case CREATE:
			case CURRENT_DATE:
			case CURRENT_GRAPH:
			case CURRENT_PROPERTY_GRAPH:
			case CURRENT_SCHEMA:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DATE:
			case DATETIME:
			case DEC:
			case DECIMAL:
			case DEGREES:
			case DELETE:
			case DESC:
			case DESCENDING:
			case DESTINATION:
			case DETACH:
			case DIFFERENT:
			case DIRECTED:
			case DISTINCT:
			case DOUBLE:
			case DROP:
			case DURATION:
			case DURATION_BETWEEN:
			case ELEMENT:
			case ELEMENT_ID:
			case ELEMENTS:
			case ELSE:
			case END:
			case EXCEPT:
			case EXISTS:
			case EXP:
			case K_FALSE:
			case FILTER:
			case FINISH:
			case FIRST:
			case FLOAT:
			case FLOAT128:
			case FLOAT16:
			case FLOAT256:
			case FLOAT32:
			case FLOAT64:
			case FLOOR:
			case FOR:
			case FROM:
			case GRAPH:
			case GROUP:
			case GROUPS:
			case HAVING:
			case HOME_GRAPH:
			case HOME_PROPERTY_GRAPH:
			case HOME_SCHEMA:
			case I_DONT_KNOW_1:
			case I_DONT_KNOW_2:
			case I_DONT_KNOW_3:
			case I_DONT_KNOW_4:
			case I_DONT_KNOW_5:
			case IF:
			case IN:
			case INSERT:
			case INT:
			case INT8:
			case INT16:
			case INT32:
			case INT64:
			case INT128:
			case INT256:
			case INTEGER:
			case INTEGER8:
			case INTEGER16:
			case INTEGER32:
			case INTEGER64:
			case INTEGER128:
			case INTEGER256:
			case INTERSECT:
			case IS:
			case KEEP:
			case LABEL:
			case LABELED:
			case LABELS:
			case LAST:
			case LEADING:
			case LEFT:
			case LET:
			case LIKE:
			case LIMIT:
			case LIST:
			case LN:
			case LOCAL:
			case LOCAL_DATETIME:
			case LOCAL_TIME:
			case LOCAL_TIMESTAMP:
			case LOG:
			case LOG10:
			case LOWER:
			case LTRIM:
			case MATCH:
			case MAX:
			case MIN:
			case MOD:
			case NEXT:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case NO:
			case NODETACH:
			case NORMALIZE:
			case NORMALIZED:
			case NOT:
			case NULL:
			case NULLIF:
			case NULLS:
			case OCTET_LENGTH:
			case OF:
			case OFFSET:
			case SKIP_:
			case ONLY:
			case OPEN:
			case OPTIONAL:
			case OR:
			case ORDER:
			case ORDINALITY:
			case OTHERWISE:
			case PARAMETER:
			case PARAMETERS:
			case PATH:
			case PATH_LENGTH:
			case PATHS:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POWER:
			case PRECISION:
			case PROPERTY:
			case PROPERTY_EXISTS:
			case RADIANS:
			case READ:
			case REAL:
			case RECORD:
			case REMOVE:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RETURN:
			case ROLLBACK:
			case RTRIM:
			case RIGHT:
			case SAME:
			case SCHEMA:
			case SELECT:
			case SESSION:
			case SET:
			case SHORTEST:
			case SIGNED:
			case SIMPLE:
			case SIN:
			case SINH:
			case SMALL:
			case SMALLINT:
			case SOURCE:
			case SQRT:
			case START:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STRING:
			case SUM:
			case TABLE:
			case TAN:
			case TANH:
			case TEMP:
			case THEN:
			case TIME:
			case TIMESTAMP:
			case TIMEZONE:
			case TO:
			case TRAIL:
			case TRAILING:
			case TRANSACTION:
			case TRIM:
			case K_TRUE:
			case TYPE:
			case TYPED:
			case UBIGINT:
			case UINT:
			case UINT128:
			case UINT16:
			case UINT256:
			case UINT32:
			case UINT64:
			case UINT8:
			case UNDIRECTED:
			case UNION:
			case UNKNOWN:
			case UNSIGNED:
			case UPPER:
			case USE:
			case USMALLINT:
			case VALUE:
			case VARBINARY:
			case VARCHAR:
			case VARIABLE:
			case WALK:
			case WHEN:
			case WHERE:
			case WITH:
			case WITHOUT:
			case WRITE:
			case XOR:
			case YIELD:
			case ZONE:
			case ZONED:
			case ZONED_DATETIME:
			case ZONED_TIME:
			case INTERVAL_DAY:
			case INTERVAL_WEEK:
			case INTERVAL_MONTH:
			case INTERVAL_YEAR:
			case EDGE_SYNONYM:
			case EDGES_SYNONYM:
			case NODE_SYNONYM:
			case KEY_WORD:
			case PRE_RESERVED_WORD:
				enterOuterAlt(_localctx, 2);
				{
				setState(1355);
				keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FieldNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public KeywordContext keyword() {
			return getRuleContext(KeywordContext.class,0);
		}
		public FieldNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterFieldName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitFieldName(this);
		}
	}

	public final FieldNameContext fieldName() throws RecognitionException {
		FieldNameContext _localctx = new FieldNameContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_fieldName);
		try {
			setState(1360);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOUBLE_QUOTED_STRING_LITERAL:
			case ACCENT_QUOTED_STRING_LITERAL:
			case REGULAR_IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1358);
				identifier();
				}
				break;
			case ABS:
			case ACOS:
			case ACYCLIC:
			case ALL:
			case ALL_DIFFERENT:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASCENDING:
			case ASIN:
			case AT:
			case ATAN:
			case AVG:
			case BIG:
			case BIGINT:
			case BINARY:
			case BINDING:
			case BINDINGS:
			case BOOL:
			case BOOLEAN:
			case BOTH:
			case BTRIM:
			case BY:
			case BYTE_LENGTH:
			case BYTES:
			case CALL:
			case CASE:
			case CAST:
			case CEIL:
			case CEILING:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case CHARACTERISTICS:
			case CLOSE:
			case COALESCE:
			case COLLECT:
			case COMMIT:
			case CONNECTING:
			case COPY:
			case COS:
			case COSH:
			case COT:
			case COUNT:
			case CREATE:
			case CURRENT_DATE:
			case CURRENT_GRAPH:
			case CURRENT_PROPERTY_GRAPH:
			case CURRENT_SCHEMA:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DATE:
			case DATETIME:
			case DEC:
			case DECIMAL:
			case DEGREES:
			case DELETE:
			case DESC:
			case DESCENDING:
			case DESTINATION:
			case DETACH:
			case DIFFERENT:
			case DIRECTED:
			case DISTINCT:
			case DOUBLE:
			case DROP:
			case DURATION:
			case DURATION_BETWEEN:
			case ELEMENT:
			case ELEMENT_ID:
			case ELEMENTS:
			case ELSE:
			case END:
			case EXCEPT:
			case EXISTS:
			case EXP:
			case K_FALSE:
			case FILTER:
			case FINISH:
			case FIRST:
			case FLOAT:
			case FLOAT128:
			case FLOAT16:
			case FLOAT256:
			case FLOAT32:
			case FLOAT64:
			case FLOOR:
			case FOR:
			case FROM:
			case GRAPH:
			case GROUP:
			case GROUPS:
			case HAVING:
			case HOME_GRAPH:
			case HOME_PROPERTY_GRAPH:
			case HOME_SCHEMA:
			case I_DONT_KNOW_1:
			case I_DONT_KNOW_2:
			case I_DONT_KNOW_3:
			case I_DONT_KNOW_4:
			case I_DONT_KNOW_5:
			case IF:
			case IN:
			case INSERT:
			case INT:
			case INT8:
			case INT16:
			case INT32:
			case INT64:
			case INT128:
			case INT256:
			case INTEGER:
			case INTEGER8:
			case INTEGER16:
			case INTEGER32:
			case INTEGER64:
			case INTEGER128:
			case INTEGER256:
			case INTERSECT:
			case IS:
			case KEEP:
			case LABEL:
			case LABELED:
			case LABELS:
			case LAST:
			case LEADING:
			case LEFT:
			case LET:
			case LIKE:
			case LIMIT:
			case LIST:
			case LN:
			case LOCAL:
			case LOCAL_DATETIME:
			case LOCAL_TIME:
			case LOCAL_TIMESTAMP:
			case LOG:
			case LOG10:
			case LOWER:
			case LTRIM:
			case MATCH:
			case MAX:
			case MIN:
			case MOD:
			case NEXT:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case NO:
			case NODETACH:
			case NORMALIZE:
			case NORMALIZED:
			case NOT:
			case NULL:
			case NULLIF:
			case NULLS:
			case OCTET_LENGTH:
			case OF:
			case OFFSET:
			case SKIP_:
			case ONLY:
			case OPEN:
			case OPTIONAL:
			case OR:
			case ORDER:
			case ORDINALITY:
			case OTHERWISE:
			case PARAMETER:
			case PARAMETERS:
			case PATH:
			case PATH_LENGTH:
			case PATHS:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POWER:
			case PRECISION:
			case PROPERTY:
			case PROPERTY_EXISTS:
			case RADIANS:
			case READ:
			case REAL:
			case RECORD:
			case REMOVE:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RETURN:
			case ROLLBACK:
			case RTRIM:
			case RIGHT:
			case SAME:
			case SCHEMA:
			case SELECT:
			case SESSION:
			case SET:
			case SHORTEST:
			case SIGNED:
			case SIMPLE:
			case SIN:
			case SINH:
			case SMALL:
			case SMALLINT:
			case SOURCE:
			case SQRT:
			case START:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STRING:
			case SUM:
			case TABLE:
			case TAN:
			case TANH:
			case TEMP:
			case THEN:
			case TIME:
			case TIMESTAMP:
			case TIMEZONE:
			case TO:
			case TRAIL:
			case TRAILING:
			case TRANSACTION:
			case TRIM:
			case K_TRUE:
			case TYPE:
			case TYPED:
			case UBIGINT:
			case UINT:
			case UINT128:
			case UINT16:
			case UINT256:
			case UINT32:
			case UINT64:
			case UINT8:
			case UNDIRECTED:
			case UNION:
			case UNKNOWN:
			case UNSIGNED:
			case UPPER:
			case USE:
			case USMALLINT:
			case VALUE:
			case VARBINARY:
			case VARCHAR:
			case VARIABLE:
			case WALK:
			case WHEN:
			case WHERE:
			case WITH:
			case WITHOUT:
			case WRITE:
			case XOR:
			case YIELD:
			case ZONE:
			case ZONED:
			case ZONED_DATETIME:
			case ZONED_TIME:
			case INTERVAL_DAY:
			case INTERVAL_WEEK:
			case INTERVAL_MONTH:
			case INTERVAL_YEAR:
			case EDGE_SYNONYM:
			case EDGES_SYNONYM:
			case NODE_SYNONYM:
			case KEY_WORD:
			case PRE_RESERVED_WORD:
				enterOuterAlt(_localctx, 2);
				{
				setState(1359);
				keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ParameterNameContext extends ParserRuleContext {
		public TerminalNode DOLLAR_SIGN() { return getToken(GQLParser.DOLLAR_SIGN, 0); }
		public UnsignedNumericLiteralContext unsignedNumericLiteral() {
			return getRuleContext(UnsignedNumericLiteralContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ParameterNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterParameterName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitParameterName(this);
		}
	}

	public final ParameterNameContext parameterName() throws RecognitionException {
		ParameterNameContext _localctx = new ParameterNameContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_parameterName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1362);
			match(DOLLAR_SIGN);
			setState(1365);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNSIGNED_DECIMAL_INTEGER:
			case UNSIGNED_HEXADECIMAL_INTEGER:
			case UNSIGNED_OCTAL_INTEGER:
			case UNSIGNED_BINARY_INTEGER:
			case UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION:
			case UNSIGNED_DECIMAL_IN_COMMON_NOTATION:
				{
				setState(1363);
				unsignedNumericLiteral();
				}
				break;
			case DOUBLE_QUOTED_STRING_LITERAL:
			case ACCENT_QUOTED_STRING_LITERAL:
			case REGULAR_IDENTIFIER:
				{
				setState(1364);
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VariableContext extends ParserRuleContext {
		public BindingVariableContext bindingVariable() {
			return getRuleContext(BindingVariableContext.class,0);
		}
		public VariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitVariable(this);
		}
	}

	public final VariableContext variable() throws RecognitionException {
		VariableContext _localctx = new VariableContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_variable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1367);
			bindingVariable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GraphVariableContext extends ParserRuleContext {
		public BindingVariableContext bindingVariable() {
			return getRuleContext(BindingVariableContext.class,0);
		}
		public GraphVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_graphVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGraphVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGraphVariable(this);
		}
	}

	public final GraphVariableContext graphVariable() throws RecognitionException {
		GraphVariableContext _localctx = new GraphVariableContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_graphVariable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1369);
			bindingVariable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GraphPatternVariableContext extends ParserRuleContext {
		public ElementVariableContext elementVariable() {
			return getRuleContext(ElementVariableContext.class,0);
		}
		public PathOrSubpathVariableContext pathOrSubpathVariable() {
			return getRuleContext(PathOrSubpathVariableContext.class,0);
		}
		public GraphPatternVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_graphPatternVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGraphPatternVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGraphPatternVariable(this);
		}
	}

	public final GraphPatternVariableContext graphPatternVariable() throws RecognitionException {
		GraphPatternVariableContext _localctx = new GraphPatternVariableContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_graphPatternVariable);
		try {
			setState(1373);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,42,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1371);
				elementVariable();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1372);
				pathOrSubpathVariable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PathOrSubpathVariableContext extends ParserRuleContext {
		public PathVariableContext pathVariable() {
			return getRuleContext(PathVariableContext.class,0);
		}
		public SubpathVariableContext subpathVariable() {
			return getRuleContext(SubpathVariableContext.class,0);
		}
		public PathOrSubpathVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pathOrSubpathVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterPathOrSubpathVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitPathOrSubpathVariable(this);
		}
	}

	public final PathOrSubpathVariableContext pathOrSubpathVariable() throws RecognitionException {
		PathOrSubpathVariableContext _localctx = new PathOrSubpathVariableContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_pathOrSubpathVariable);
		try {
			setState(1377);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,43,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1375);
				pathVariable();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1376);
				subpathVariable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ElementVariableContext extends ParserRuleContext {
		public BindingVariableContext bindingVariable() {
			return getRuleContext(BindingVariableContext.class,0);
		}
		public ElementVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elementVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterElementVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitElementVariable(this);
		}
	}

	public final ElementVariableContext elementVariable() throws RecognitionException {
		ElementVariableContext _localctx = new ElementVariableContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_elementVariable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1379);
			bindingVariable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PathVariableContext extends ParserRuleContext {
		public BindingVariableContext bindingVariable() {
			return getRuleContext(BindingVariableContext.class,0);
		}
		public PathVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pathVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterPathVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitPathVariable(this);
		}
	}

	public final PathVariableContext pathVariable() throws RecognitionException {
		PathVariableContext _localctx = new PathVariableContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_pathVariable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1381);
			bindingVariable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SubpathVariableContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SubpathVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpathVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSubpathVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSubpathVariable(this);
		}
	}

	public final SubpathVariableContext subpathVariable() throws RecognitionException {
		SubpathVariableContext _localctx = new SubpathVariableContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_subpathVariable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1383);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BindingTableVariableContext extends ParserRuleContext {
		public BindingVariableContext bindingVariable() {
			return getRuleContext(BindingVariableContext.class,0);
		}
		public BindingTableVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bindingTableVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterBindingTableVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitBindingTableVariable(this);
		}
	}

	public final BindingTableVariableContext bindingTableVariable() throws RecognitionException {
		BindingTableVariableContext _localctx = new BindingTableVariableContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_bindingTableVariable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1385);
			bindingVariable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ValueVariableContext extends ParserRuleContext {
		public BindingVariableContext bindingVariable() {
			return getRuleContext(BindingVariableContext.class,0);
		}
		public ValueVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valueVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterValueVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitValueVariable(this);
		}
	}

	public final ValueVariableContext valueVariable() throws RecognitionException {
		ValueVariableContext _localctx = new ValueVariableContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_valueVariable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1387);
			bindingVariable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BindingVariableContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public KeywordContext keyword() {
			return getRuleContext(KeywordContext.class,0);
		}
		public BindingVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bindingVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterBindingVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitBindingVariable(this);
		}
	}

	public final BindingVariableContext bindingVariable() throws RecognitionException {
		BindingVariableContext _localctx = new BindingVariableContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_bindingVariable);
		try {
			setState(1391);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOUBLE_QUOTED_STRING_LITERAL:
			case ACCENT_QUOTED_STRING_LITERAL:
			case REGULAR_IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1389);
				identifier();
				}
				break;
			case ABS:
			case ACOS:
			case ACYCLIC:
			case ALL:
			case ALL_DIFFERENT:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASCENDING:
			case ASIN:
			case AT:
			case ATAN:
			case AVG:
			case BIG:
			case BIGINT:
			case BINARY:
			case BINDING:
			case BINDINGS:
			case BOOL:
			case BOOLEAN:
			case BOTH:
			case BTRIM:
			case BY:
			case BYTE_LENGTH:
			case BYTES:
			case CALL:
			case CASE:
			case CAST:
			case CEIL:
			case CEILING:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case CHARACTERISTICS:
			case CLOSE:
			case COALESCE:
			case COLLECT:
			case COMMIT:
			case CONNECTING:
			case COPY:
			case COS:
			case COSH:
			case COT:
			case COUNT:
			case CREATE:
			case CURRENT_DATE:
			case CURRENT_GRAPH:
			case CURRENT_PROPERTY_GRAPH:
			case CURRENT_SCHEMA:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DATE:
			case DATETIME:
			case DEC:
			case DECIMAL:
			case DEGREES:
			case DELETE:
			case DESC:
			case DESCENDING:
			case DESTINATION:
			case DETACH:
			case DIFFERENT:
			case DIRECTED:
			case DISTINCT:
			case DOUBLE:
			case DROP:
			case DURATION:
			case DURATION_BETWEEN:
			case ELEMENT:
			case ELEMENT_ID:
			case ELEMENTS:
			case ELSE:
			case END:
			case EXCEPT:
			case EXISTS:
			case EXP:
			case K_FALSE:
			case FILTER:
			case FINISH:
			case FIRST:
			case FLOAT:
			case FLOAT128:
			case FLOAT16:
			case FLOAT256:
			case FLOAT32:
			case FLOAT64:
			case FLOOR:
			case FOR:
			case FROM:
			case GRAPH:
			case GROUP:
			case GROUPS:
			case HAVING:
			case HOME_GRAPH:
			case HOME_PROPERTY_GRAPH:
			case HOME_SCHEMA:
			case I_DONT_KNOW_1:
			case I_DONT_KNOW_2:
			case I_DONT_KNOW_3:
			case I_DONT_KNOW_4:
			case I_DONT_KNOW_5:
			case IF:
			case IN:
			case INSERT:
			case INT:
			case INT8:
			case INT16:
			case INT32:
			case INT64:
			case INT128:
			case INT256:
			case INTEGER:
			case INTEGER8:
			case INTEGER16:
			case INTEGER32:
			case INTEGER64:
			case INTEGER128:
			case INTEGER256:
			case INTERSECT:
			case IS:
			case KEEP:
			case LABEL:
			case LABELED:
			case LABELS:
			case LAST:
			case LEADING:
			case LEFT:
			case LET:
			case LIKE:
			case LIMIT:
			case LIST:
			case LN:
			case LOCAL:
			case LOCAL_DATETIME:
			case LOCAL_TIME:
			case LOCAL_TIMESTAMP:
			case LOG:
			case LOG10:
			case LOWER:
			case LTRIM:
			case MATCH:
			case MAX:
			case MIN:
			case MOD:
			case NEXT:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case NO:
			case NODETACH:
			case NORMALIZE:
			case NORMALIZED:
			case NOT:
			case NULL:
			case NULLIF:
			case NULLS:
			case OCTET_LENGTH:
			case OF:
			case OFFSET:
			case SKIP_:
			case ONLY:
			case OPEN:
			case OPTIONAL:
			case OR:
			case ORDER:
			case ORDINALITY:
			case OTHERWISE:
			case PARAMETER:
			case PARAMETERS:
			case PATH:
			case PATH_LENGTH:
			case PATHS:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POWER:
			case PRECISION:
			case PROPERTY:
			case PROPERTY_EXISTS:
			case RADIANS:
			case READ:
			case REAL:
			case RECORD:
			case REMOVE:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RETURN:
			case ROLLBACK:
			case RTRIM:
			case RIGHT:
			case SAME:
			case SCHEMA:
			case SELECT:
			case SESSION:
			case SET:
			case SHORTEST:
			case SIGNED:
			case SIMPLE:
			case SIN:
			case SINH:
			case SMALL:
			case SMALLINT:
			case SOURCE:
			case SQRT:
			case START:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STRING:
			case SUM:
			case TABLE:
			case TAN:
			case TANH:
			case TEMP:
			case THEN:
			case TIME:
			case TIMESTAMP:
			case TIMEZONE:
			case TO:
			case TRAIL:
			case TRAILING:
			case TRANSACTION:
			case TRIM:
			case K_TRUE:
			case TYPE:
			case TYPED:
			case UBIGINT:
			case UINT:
			case UINT128:
			case UINT16:
			case UINT256:
			case UINT32:
			case UINT64:
			case UINT8:
			case UNDIRECTED:
			case UNION:
			case UNKNOWN:
			case UNSIGNED:
			case UPPER:
			case USE:
			case USMALLINT:
			case VALUE:
			case VARBINARY:
			case VARCHAR:
			case VARIABLE:
			case WALK:
			case WHEN:
			case WHERE:
			case WITH:
			case WITHOUT:
			case WRITE:
			case XOR:
			case YIELD:
			case ZONE:
			case ZONED:
			case ZONED_DATETIME:
			case ZONED_TIME:
			case INTERVAL_DAY:
			case INTERVAL_WEEK:
			case INTERVAL_MONTH:
			case INTERVAL_YEAR:
			case EDGE_SYNONYM:
			case EDGES_SYNONYM:
			case NODE_SYNONYM:
			case KEY_WORD:
			case PRE_RESERVED_WORD:
				enterOuterAlt(_localctx, 2);
				{
				setState(1390);
				keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PredefinedTypeLiteralContext extends ParserRuleContext {
		public BooleanLiteralContext booleanLiteral() {
			return getRuleContext(BooleanLiteralContext.class,0);
		}
		public CharacterStringLiteralContext characterStringLiteral() {
			return getRuleContext(CharacterStringLiteralContext.class,0);
		}
		public ByteStringLiteralContext byteStringLiteral() {
			return getRuleContext(ByteStringLiteralContext.class,0);
		}
		public TemporalLiteralContext temporalLiteral() {
			return getRuleContext(TemporalLiteralContext.class,0);
		}
		public DurationLiteralContext durationLiteral() {
			return getRuleContext(DurationLiteralContext.class,0);
		}
		public NullLiteralContext nullLiteral() {
			return getRuleContext(NullLiteralContext.class,0);
		}
		public PredefinedTypeLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predefinedTypeLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterPredefinedTypeLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitPredefinedTypeLiteral(this);
		}
	}

	public final PredefinedTypeLiteralContext predefinedTypeLiteral() throws RecognitionException {
		PredefinedTypeLiteralContext _localctx = new PredefinedTypeLiteralContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_predefinedTypeLiteral);
		try {
			setState(1399);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case K_FALSE:
			case K_TRUE:
			case UNKNOWN:
				enterOuterAlt(_localctx, 1);
				{
				setState(1393);
				booleanLiteral();
				}
				break;
			case SINGLE_QUOTED_STRING_LITERAL:
			case DOUBLE_QUOTED_STRING_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1394);
				characterStringLiteral();
				}
				break;
			case BYTE_STRING_LITERAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(1395);
				byteStringLiteral();
				}
				break;
			case DATE:
			case DATETIME:
			case TIME:
			case TIMESTAMP:
				enterOuterAlt(_localctx, 4);
				{
				setState(1396);
				temporalLiteral();
				}
				break;
			case DURATION:
			case UNSIGNED_DECIMAL_INTEGER:
				enterOuterAlt(_localctx, 5);
				{
				setState(1397);
				durationLiteral();
				}
				break;
			case NULL:
				enterOuterAlt(_localctx, 6);
				{
				setState(1398);
				nullLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BooleanLiteralContext extends ParserRuleContext {
		public TerminalNode K_TRUE() { return getToken(GQLParser.K_TRUE, 0); }
		public TerminalNode K_FALSE() { return getToken(GQLParser.K_FALSE, 0); }
		public TerminalNode UNKNOWN() { return getToken(GQLParser.UNKNOWN, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterBooleanLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitBooleanLiteral(this);
		}
	}

	public final BooleanLiteralContext booleanLiteral() throws RecognitionException {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_booleanLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1401);
			_la = _input.LA(1);
			if ( !(_la==K_FALSE || _la==K_TRUE || _la==UNKNOWN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CharacterStringLiteralContext extends ParserRuleContext {
		public SingleQuotedCharacterSequenceContext singleQuotedCharacterSequence() {
			return getRuleContext(SingleQuotedCharacterSequenceContext.class,0);
		}
		public DoubleQuotedCharacterSequenceContext doubleQuotedCharacterSequence() {
			return getRuleContext(DoubleQuotedCharacterSequenceContext.class,0);
		}
		public CharacterStringLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_characterStringLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterCharacterStringLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitCharacterStringLiteral(this);
		}
	}

	public final CharacterStringLiteralContext characterStringLiteral() throws RecognitionException {
		CharacterStringLiteralContext _localctx = new CharacterStringLiteralContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_characterStringLiteral);
		try {
			setState(1405);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SINGLE_QUOTED_STRING_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1403);
				singleQuotedCharacterSequence();
				}
				break;
			case DOUBLE_QUOTED_STRING_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1404);
				doubleQuotedCharacterSequence();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ByteStringLiteralContext extends ParserRuleContext {
		public TerminalNode BYTE_STRING_LITERAL() { return getToken(GQLParser.BYTE_STRING_LITERAL, 0); }
		public ByteStringLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_byteStringLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterByteStringLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitByteStringLiteral(this);
		}
	}

	public final ByteStringLiteralContext byteStringLiteral() throws RecognitionException {
		ByteStringLiteralContext _localctx = new ByteStringLiteralContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_byteStringLiteral);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1407);
			match(BYTE_STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ProcedureBodyContext extends ParserRuleContext {
		public StatementBlockContext statementBlock() {
			return getRuleContext(StatementBlockContext.class,0);
		}
		public AtSchemaClauseContext atSchemaClause() {
			return getRuleContext(AtSchemaClauseContext.class,0);
		}
		public BindingVariableDefinitionBlockContext bindingVariableDefinitionBlock() {
			return getRuleContext(BindingVariableDefinitionBlockContext.class,0);
		}
		public ProcedureBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureBody; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterProcedureBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitProcedureBody(this);
		}
	}

	public final ProcedureBodyContext procedureBody() throws RecognitionException {
		ProcedureBodyContext _localctx = new ProcedureBodyContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_procedureBody);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1410);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT) {
				{
				setState(1409);
				atSchemaClause();
				}
			}

			setState(1413);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BINDING || _la==GRAPH || _la==PROPERTY || _la==TABLE || _la==VALUE) {
				{
				setState(1412);
				bindingVariableDefinitionBlock();
				}
			}

			setState(1415);
			statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BindingVariableDefinitionBlockContext extends ParserRuleContext {
		public List<BindingVariableDefinitionContext> bindingVariableDefinition() {
			return getRuleContexts(BindingVariableDefinitionContext.class);
		}
		public BindingVariableDefinitionContext bindingVariableDefinition(int i) {
			return getRuleContext(BindingVariableDefinitionContext.class,i);
		}
		public BindingVariableDefinitionBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bindingVariableDefinitionBlock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterBindingVariableDefinitionBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitBindingVariableDefinitionBlock(this);
		}
	}

	public final BindingVariableDefinitionBlockContext bindingVariableDefinitionBlock() throws RecognitionException {
		BindingVariableDefinitionBlockContext _localctx = new BindingVariableDefinitionBlockContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_bindingVariableDefinitionBlock);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1418); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1417);
				bindingVariableDefinition();
				}
				}
				setState(1420); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==BINDING || _la==GRAPH || _la==PROPERTY || _la==TABLE || _la==VALUE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BindingVariableDefinitionContext extends ParserRuleContext {
		public GraphVariableDefinitionContext graphVariableDefinition() {
			return getRuleContext(GraphVariableDefinitionContext.class,0);
		}
		public BindingTableVariableDefinitionContext bindingTableVariableDefinition() {
			return getRuleContext(BindingTableVariableDefinitionContext.class,0);
		}
		public ValueVariableDefinitionContext valueVariableDefinition() {
			return getRuleContext(ValueVariableDefinitionContext.class,0);
		}
		public BindingVariableDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bindingVariableDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterBindingVariableDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitBindingVariableDefinition(this);
		}
	}

	public final BindingVariableDefinitionContext bindingVariableDefinition() throws RecognitionException {
		BindingVariableDefinitionContext _localctx = new BindingVariableDefinitionContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_bindingVariableDefinition);
		try {
			setState(1425);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GRAPH:
			case PROPERTY:
				enterOuterAlt(_localctx, 1);
				{
				setState(1422);
				graphVariableDefinition();
				}
				break;
			case BINDING:
			case TABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1423);
				bindingTableVariableDefinition();
				}
				break;
			case VALUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1424);
				valueVariableDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StatementBlockContext extends ParserRuleContext {
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public List<NextStatementContext> nextStatement() {
			return getRuleContexts(NextStatementContext.class);
		}
		public NextStatementContext nextStatement(int i) {
			return getRuleContext(NextStatementContext.class,i);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statementBlock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterStatementBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitStatementBlock(this);
		}
	}

	public final StatementBlockContext statementBlock() throws RecognitionException {
		StatementBlockContext _localctx = new StatementBlockContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_statementBlock);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1427);
			statement();
			setState(1431);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==NEXT) {
				{
				{
				setState(1428);
				nextStatement();
				}
				}
				setState(1433);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StatementContext extends ParserRuleContext {
		public LinearCatalogModifyingStatementContext linearCatalogModifyingStatement() {
			return getRuleContext(LinearCatalogModifyingStatementContext.class,0);
		}
		public LinearDataModifyingStatementContext linearDataModifyingStatement() {
			return getRuleContext(LinearDataModifyingStatementContext.class,0);
		}
		public CompositeQueryStatementContext compositeQueryStatement() {
			return getRuleContext(CompositeQueryStatementContext.class,0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitStatement(this);
		}
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_statement);
		try {
			setState(1437);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,52,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1434);
				linearCatalogModifyingStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1435);
				linearDataModifyingStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1436);
				compositeQueryStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NextStatementContext extends ParserRuleContext {
		public TerminalNode NEXT() { return getToken(GQLParser.NEXT, 0); }
		public StatementContext statement() {
			return getRuleContext(StatementContext.class,0);
		}
		public YieldClauseContext yieldClause() {
			return getRuleContext(YieldClauseContext.class,0);
		}
		public NextStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nextStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterNextStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitNextStatement(this);
		}
	}

	public final NextStatementContext nextStatement() throws RecognitionException {
		NextStatementContext _localctx = new NextStatementContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_nextStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1439);
			match(NEXT);
			setState(1441);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==YIELD) {
				{
				setState(1440);
				yieldClause();
				}
			}

			setState(1443);
			statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GraphVariableDefinitionContext extends ParserRuleContext {
		public TerminalNode GRAPH() { return getToken(GQLParser.GRAPH, 0); }
		public GraphVariableContext graphVariable() {
			return getRuleContext(GraphVariableContext.class,0);
		}
		public OptTypedGraphInitializerContext optTypedGraphInitializer() {
			return getRuleContext(OptTypedGraphInitializerContext.class,0);
		}
		public TerminalNode PROPERTY() { return getToken(GQLParser.PROPERTY, 0); }
		public GraphVariableDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_graphVariableDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGraphVariableDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGraphVariableDefinition(this);
		}
	}

	public final GraphVariableDefinitionContext graphVariableDefinition() throws RecognitionException {
		GraphVariableDefinitionContext _localctx = new GraphVariableDefinitionContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_graphVariableDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1446);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PROPERTY) {
				{
				setState(1445);
				match(PROPERTY);
				}
			}

			setState(1448);
			match(GRAPH);
			setState(1449);
			graphVariable();
			setState(1450);
			optTypedGraphInitializer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptTypedGraphInitializerContext extends ParserRuleContext {
		public GraphInitializerContext graphInitializer() {
			return getRuleContext(GraphInitializerContext.class,0);
		}
		public GraphReferenceValueTypeContext graphReferenceValueType() {
			return getRuleContext(GraphReferenceValueTypeContext.class,0);
		}
		public TypedContext typed() {
			return getRuleContext(TypedContext.class,0);
		}
		public OptTypedGraphInitializerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optTypedGraphInitializer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterOptTypedGraphInitializer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitOptTypedGraphInitializer(this);
		}
	}

	public final OptTypedGraphInitializerContext optTypedGraphInitializer() throws RecognitionException {
		OptTypedGraphInitializerContext _localctx = new OptTypedGraphInitializerContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_optTypedGraphInitializer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1456);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ANY || _la==GRAPH || _la==PROPERTY || _la==TYPED || _la==DOUBLE_COLON) {
				{
				setState(1453);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TYPED || _la==DOUBLE_COLON) {
					{
					setState(1452);
					typed();
					}
				}

				setState(1455);
				graphReferenceValueType();
				}
			}

			setState(1458);
			graphInitializer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GraphInitializerContext extends ParserRuleContext {
		public TerminalNode EQUALS_OPERATOR() { return getToken(GQLParser.EQUALS_OPERATOR, 0); }
		public GraphExpressionContext graphExpression() {
			return getRuleContext(GraphExpressionContext.class,0);
		}
		public GraphInitializerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_graphInitializer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGraphInitializer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGraphInitializer(this);
		}
	}

	public final GraphInitializerContext graphInitializer() throws RecognitionException {
		GraphInitializerContext _localctx = new GraphInitializerContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_graphInitializer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1460);
			match(EQUALS_OPERATOR);
			setState(1461);
			graphExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BindingTableVariableDefinitionContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(GQLParser.TABLE, 0); }
		public BindingTableVariableContext bindingTableVariable() {
			return getRuleContext(BindingTableVariableContext.class,0);
		}
		public OptTypedBindingTableInitializerContext optTypedBindingTableInitializer() {
			return getRuleContext(OptTypedBindingTableInitializerContext.class,0);
		}
		public TerminalNode BINDING() { return getToken(GQLParser.BINDING, 0); }
		public BindingTableVariableDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bindingTableVariableDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterBindingTableVariableDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitBindingTableVariableDefinition(this);
		}
	}

	public final BindingTableVariableDefinitionContext bindingTableVariableDefinition() throws RecognitionException {
		BindingTableVariableDefinitionContext _localctx = new BindingTableVariableDefinitionContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_bindingTableVariableDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1464);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BINDING) {
				{
				setState(1463);
				match(BINDING);
				}
			}

			setState(1466);
			match(TABLE);
			setState(1467);
			bindingTableVariable();
			setState(1468);
			optTypedBindingTableInitializer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptTypedBindingTableInitializerContext extends ParserRuleContext {
		public BindingTableInitializerContext bindingTableInitializer() {
			return getRuleContext(BindingTableInitializerContext.class,0);
		}
		public BindingTableReferenceValueTypeContext bindingTableReferenceValueType() {
			return getRuleContext(BindingTableReferenceValueTypeContext.class,0);
		}
		public TypedContext typed() {
			return getRuleContext(TypedContext.class,0);
		}
		public OptTypedBindingTableInitializerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optTypedBindingTableInitializer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterOptTypedBindingTableInitializer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitOptTypedBindingTableInitializer(this);
		}
	}

	public final OptTypedBindingTableInitializerContext optTypedBindingTableInitializer() throws RecognitionException {
		OptTypedBindingTableInitializerContext _localctx = new OptTypedBindingTableInitializerContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_optTypedBindingTableInitializer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1474);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BINDING || ((((_la - 240)) & ~0x3f) == 0 && ((1L << (_la - 240)) & 1152921504606879745L) != 0)) {
				{
				setState(1471);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TYPED || _la==DOUBLE_COLON) {
					{
					setState(1470);
					typed();
					}
				}

				setState(1473);
				bindingTableReferenceValueType();
				}
			}

			setState(1476);
			bindingTableInitializer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BindingTableInitializerContext extends ParserRuleContext {
		public TerminalNode EQUALS_OPERATOR() { return getToken(GQLParser.EQUALS_OPERATOR, 0); }
		public BindingTableExpressionContext bindingTableExpression() {
			return getRuleContext(BindingTableExpressionContext.class,0);
		}
		public BindingTableInitializerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bindingTableInitializer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterBindingTableInitializer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitBindingTableInitializer(this);
		}
	}

	public final BindingTableInitializerContext bindingTableInitializer() throws RecognitionException {
		BindingTableInitializerContext _localctx = new BindingTableInitializerContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_bindingTableInitializer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1478);
			match(EQUALS_OPERATOR);
			setState(1479);
			bindingTableExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ValueVariableDefinitionContext extends ParserRuleContext {
		public TerminalNode VALUE() { return getToken(GQLParser.VALUE, 0); }
		public ValueVariableContext valueVariable() {
			return getRuleContext(ValueVariableContext.class,0);
		}
		public OptTypedValueInitializerContext optTypedValueInitializer() {
			return getRuleContext(OptTypedValueInitializerContext.class,0);
		}
		public ValueVariableDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valueVariableDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterValueVariableDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitValueVariableDefinition(this);
		}
	}

	public final ValueVariableDefinitionContext valueVariableDefinition() throws RecognitionException {
		ValueVariableDefinitionContext _localctx = new ValueVariableDefinitionContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_valueVariableDefinition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1481);
			match(VALUE);
			setState(1482);
			valueVariable();
			setState(1483);
			optTypedValueInitializer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptTypedValueInitializerContext extends ParserRuleContext {
		public TerminalNode EQUALS_OPERATOR() { return getToken(GQLParser.EQUALS_OPERATOR, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ValueTypeContext valueType() {
			return getRuleContext(ValueTypeContext.class,0);
		}
		public TypedContext typed() {
			return getRuleContext(TypedContext.class,0);
		}
		public OptTypedValueInitializerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optTypedValueInitializer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterOptTypedValueInitializer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitOptTypedValueInitializer(this);
		}
	}

	public final OptTypedValueInitializerContext optTypedValueInitializer() throws RecognitionException {
		OptTypedValueInitializerContext _localctx = new OptTypedValueInitializerContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_optTypedValueInitializer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1489);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18990816374559744L) != 0) || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & -9006340798109683L) != 0) || ((((_la - 145)) & ~0x3f) == 0 && ((1L << (_la - 145)) & 4647714815446515719L) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & 7584044232519778307L) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & 66177L) != 0)) {
				{
				setState(1486);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TYPED || _la==DOUBLE_COLON) {
					{
					setState(1485);
					typed();
					}
				}

				setState(1488);
				valueType(0);
				}
			}

			setState(1491);
			match(EQUALS_OPERATOR);
			setState(1492);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GraphExpressionContext extends ParserRuleContext {
		public NestedGraphQuerySpecificationContext nestedGraphQuerySpecification() {
			return getRuleContext(NestedGraphQuerySpecificationContext.class,0);
		}
		public ObjectExpressionPrimaryContext objectExpressionPrimary() {
			return getRuleContext(ObjectExpressionPrimaryContext.class,0);
		}
		public GraphReferenceContext graphReference() {
			return getRuleContext(GraphReferenceContext.class,0);
		}
		public ObjectNameOrBindingVariableContext objectNameOrBindingVariable() {
			return getRuleContext(ObjectNameOrBindingVariableContext.class,0);
		}
		public CurrentGraphContext currentGraph() {
			return getRuleContext(CurrentGraphContext.class,0);
		}
		public GraphExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_graphExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGraphExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGraphExpression(this);
		}
	}

	public final GraphExpressionContext graphExpression() throws RecognitionException {
		GraphExpressionContext _localctx = new GraphExpressionContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_graphExpression);
		try {
			setState(1499);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,62,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1494);
				nestedGraphQuerySpecification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1495);
				objectExpressionPrimary();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1496);
				graphReference();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1497);
				objectNameOrBindingVariable();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1498);
				currentGraph();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CurrentGraphContext extends ParserRuleContext {
		public TerminalNode CURRENT_PROPERTY_GRAPH() { return getToken(GQLParser.CURRENT_PROPERTY_GRAPH, 0); }
		public TerminalNode CURRENT_GRAPH() { return getToken(GQLParser.CURRENT_GRAPH, 0); }
		public CurrentGraphContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_currentGraph; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterCurrentGraph(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitCurrentGraph(this);
		}
	}

	public final CurrentGraphContext currentGraph() throws RecognitionException {
		CurrentGraphContext _localctx = new CurrentGraphContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_currentGraph);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1501);
			_la = _input.LA(1);
			if ( !(_la==CURRENT_GRAPH || _la==CURRENT_PROPERTY_GRAPH) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NestedGraphQuerySpecificationContext extends ParserRuleContext {
		public NestedQuerySpecificationContext nestedQuerySpecification() {
			return getRuleContext(NestedQuerySpecificationContext.class,0);
		}
		public NestedGraphQuerySpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nestedGraphQuerySpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterNestedGraphQuerySpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitNestedGraphQuerySpecification(this);
		}
	}

	public final NestedGraphQuerySpecificationContext nestedGraphQuerySpecification() throws RecognitionException {
		NestedGraphQuerySpecificationContext _localctx = new NestedGraphQuerySpecificationContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_nestedGraphQuerySpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1503);
			nestedQuerySpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BindingTableExpressionContext extends ParserRuleContext {
		public NestedBindingTableQuerySpecificationContext nestedBindingTableQuerySpecification() {
			return getRuleContext(NestedBindingTableQuerySpecificationContext.class,0);
		}
		public ObjectExpressionPrimaryContext objectExpressionPrimary() {
			return getRuleContext(ObjectExpressionPrimaryContext.class,0);
		}
		public BindingTableReferenceContext bindingTableReference() {
			return getRuleContext(BindingTableReferenceContext.class,0);
		}
		public ObjectNameOrBindingVariableContext objectNameOrBindingVariable() {
			return getRuleContext(ObjectNameOrBindingVariableContext.class,0);
		}
		public BindingTableExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bindingTableExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterBindingTableExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitBindingTableExpression(this);
		}
	}

	public final BindingTableExpressionContext bindingTableExpression() throws RecognitionException {
		BindingTableExpressionContext _localctx = new BindingTableExpressionContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_bindingTableExpression);
		try {
			setState(1509);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,63,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1505);
				nestedBindingTableQuerySpecification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1506);
				objectExpressionPrimary();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1507);
				bindingTableReference();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1508);
				objectNameOrBindingVariable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NestedBindingTableQuerySpecificationContext extends ParserRuleContext {
		public NestedQuerySpecificationContext nestedQuerySpecification() {
			return getRuleContext(NestedQuerySpecificationContext.class,0);
		}
		public NestedBindingTableQuerySpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nestedBindingTableQuerySpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterNestedBindingTableQuerySpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitNestedBindingTableQuerySpecification(this);
		}
	}

	public final NestedBindingTableQuerySpecificationContext nestedBindingTableQuerySpecification() throws RecognitionException {
		NestedBindingTableQuerySpecificationContext _localctx = new NestedBindingTableQuerySpecificationContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_nestedBindingTableQuerySpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1511);
			nestedQuerySpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ObjectExpressionPrimaryContext extends ParserRuleContext {
		public TerminalNode VARIABLE() { return getToken(GQLParser.VARIABLE, 0); }
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public ObjectExpressionPrimaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_objectExpressionPrimary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterObjectExpressionPrimary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitObjectExpressionPrimary(this);
		}
	}

	public final ObjectExpressionPrimaryContext objectExpressionPrimary() throws RecognitionException {
		ObjectExpressionPrimaryContext _localctx = new ObjectExpressionPrimaryContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_objectExpressionPrimary);
		try {
			setState(1520);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,64,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1513);
				match(VARIABLE);
				setState(1514);
				expressionAtom(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1515);
				match(LEFT_PAREN);
				setState(1516);
				expression(0);
				setState(1517);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1519);
				expressionAtom(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LinearCatalogModifyingStatementContext extends ParserRuleContext {
		public List<SimpleCatalogModifyingStatementContext> simpleCatalogModifyingStatement() {
			return getRuleContexts(SimpleCatalogModifyingStatementContext.class);
		}
		public SimpleCatalogModifyingStatementContext simpleCatalogModifyingStatement(int i) {
			return getRuleContext(SimpleCatalogModifyingStatementContext.class,i);
		}
		public LinearCatalogModifyingStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_linearCatalogModifyingStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterLinearCatalogModifyingStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitLinearCatalogModifyingStatement(this);
		}
	}

	public final LinearCatalogModifyingStatementContext linearCatalogModifyingStatement() throws RecognitionException {
		LinearCatalogModifyingStatementContext _localctx = new LinearCatalogModifyingStatementContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_linearCatalogModifyingStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1523); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1522);
				simpleCatalogModifyingStatement();
				}
				}
				setState(1525); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & 1099511889921L) != 0) || _la==OPTIONAL );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimpleCatalogModifyingStatementContext extends ParserRuleContext {
		public PrimitiveCatalogModifyingStatementContext primitiveCatalogModifyingStatement() {
			return getRuleContext(PrimitiveCatalogModifyingStatementContext.class,0);
		}
		public CallCatalogModifyingProcedureStatementContext callCatalogModifyingProcedureStatement() {
			return getRuleContext(CallCatalogModifyingProcedureStatementContext.class,0);
		}
		public SimpleCatalogModifyingStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleCatalogModifyingStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSimpleCatalogModifyingStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSimpleCatalogModifyingStatement(this);
		}
	}

	public final SimpleCatalogModifyingStatementContext simpleCatalogModifyingStatement() throws RecognitionException {
		SimpleCatalogModifyingStatementContext _localctx = new SimpleCatalogModifyingStatementContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_simpleCatalogModifyingStatement);
		try {
			setState(1529);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CREATE:
			case DROP:
				enterOuterAlt(_localctx, 1);
				{
				setState(1527);
				primitiveCatalogModifyingStatement();
				}
				break;
			case CALL:
			case OPTIONAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1528);
				callCatalogModifyingProcedureStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrimitiveCatalogModifyingStatementContext extends ParserRuleContext {
		public CreateSchemaStatementContext createSchemaStatement() {
			return getRuleContext(CreateSchemaStatementContext.class,0);
		}
		public CreateGraphStatementContext createGraphStatement() {
			return getRuleContext(CreateGraphStatementContext.class,0);
		}
		public CreateGraphTypeStatementContext createGraphTypeStatement() {
			return getRuleContext(CreateGraphTypeStatementContext.class,0);
		}
		public DropSchemaStatementContext dropSchemaStatement() {
			return getRuleContext(DropSchemaStatementContext.class,0);
		}
		public DropGraphStatementContext dropGraphStatement() {
			return getRuleContext(DropGraphStatementContext.class,0);
		}
		public DropGraphTypeStatementContext dropGraphTypeStatement() {
			return getRuleContext(DropGraphTypeStatementContext.class,0);
		}
		public PrimitiveCatalogModifyingStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primitiveCatalogModifyingStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterPrimitiveCatalogModifyingStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitPrimitiveCatalogModifyingStatement(this);
		}
	}

	public final PrimitiveCatalogModifyingStatementContext primitiveCatalogModifyingStatement() throws RecognitionException {
		PrimitiveCatalogModifyingStatementContext _localctx = new PrimitiveCatalogModifyingStatementContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_primitiveCatalogModifyingStatement);
		try {
			setState(1537);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,67,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1531);
				createSchemaStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1532);
				createGraphStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1533);
				createGraphTypeStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1534);
				dropSchemaStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1535);
				dropGraphStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1536);
				dropGraphTypeStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateSchemaStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(GQLParser.CREATE, 0); }
		public TerminalNode SCHEMA() { return getToken(GQLParser.SCHEMA, 0); }
		public CatalogSchemaParentAndNameContext catalogSchemaParentAndName() {
			return getRuleContext(CatalogSchemaParentAndNameContext.class,0);
		}
		public TerminalNode IF() { return getToken(GQLParser.IF, 0); }
		public TerminalNode NOT() { return getToken(GQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(GQLParser.EXISTS, 0); }
		public CreateSchemaStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createSchemaStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterCreateSchemaStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitCreateSchemaStatement(this);
		}
	}

	public final CreateSchemaStatementContext createSchemaStatement() throws RecognitionException {
		CreateSchemaStatementContext _localctx = new CreateSchemaStatementContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_createSchemaStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1539);
			match(CREATE);
			setState(1540);
			match(SCHEMA);
			setState(1544);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1541);
				match(IF);
				setState(1542);
				match(NOT);
				setState(1543);
				match(EXISTS);
				}
			}

			setState(1546);
			catalogSchemaParentAndName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropSchemaStatementContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(GQLParser.DROP, 0); }
		public TerminalNode SCHEMA() { return getToken(GQLParser.SCHEMA, 0); }
		public CatalogSchemaParentAndNameContext catalogSchemaParentAndName() {
			return getRuleContext(CatalogSchemaParentAndNameContext.class,0);
		}
		public TerminalNode IF() { return getToken(GQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(GQLParser.EXISTS, 0); }
		public DropSchemaStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropSchemaStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterDropSchemaStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitDropSchemaStatement(this);
		}
	}

	public final DropSchemaStatementContext dropSchemaStatement() throws RecognitionException {
		DropSchemaStatementContext _localctx = new DropSchemaStatementContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_dropSchemaStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1548);
			match(DROP);
			setState(1549);
			match(SCHEMA);
			setState(1552);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1550);
				match(IF);
				setState(1551);
				match(EXISTS);
				}
			}

			setState(1554);
			catalogSchemaParentAndName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateGraphStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(GQLParser.CREATE, 0); }
		public CatalogGraphParentAndNameContext catalogGraphParentAndName() {
			return getRuleContext(CatalogGraphParentAndNameContext.class,0);
		}
		public TerminalNode GRAPH() { return getToken(GQLParser.GRAPH, 0); }
		public TerminalNode OR() { return getToken(GQLParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(GQLParser.REPLACE, 0); }
		public OpenGraphTypeContext openGraphType() {
			return getRuleContext(OpenGraphTypeContext.class,0);
		}
		public OfGraphTypeContext ofGraphType() {
			return getRuleContext(OfGraphTypeContext.class,0);
		}
		public GraphSourceContext graphSource() {
			return getRuleContext(GraphSourceContext.class,0);
		}
		public TerminalNode PROPERTY() { return getToken(GQLParser.PROPERTY, 0); }
		public TerminalNode IF() { return getToken(GQLParser.IF, 0); }
		public TerminalNode NOT() { return getToken(GQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(GQLParser.EXISTS, 0); }
		public CreateGraphStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createGraphStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterCreateGraphStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitCreateGraphStatement(this);
		}
	}

	public final CreateGraphStatementContext createGraphStatement() throws RecognitionException {
		CreateGraphStatementContext _localctx = new CreateGraphStatementContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_createGraphStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1556);
			match(CREATE);
			setState(1572);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GRAPH:
			case PROPERTY:
				{
				setState(1558);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROPERTY) {
					{
					setState(1557);
					match(PROPERTY);
					}
				}

				setState(1560);
				match(GRAPH);
				setState(1564);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1561);
					match(IF);
					setState(1562);
					match(NOT);
					setState(1563);
					match(EXISTS);
					}
				}

				}
				break;
			case OR:
				{
				setState(1566);
				match(OR);
				setState(1567);
				match(REPLACE);
				setState(1569);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROPERTY) {
					{
					setState(1568);
					match(PROPERTY);
					}
				}

				setState(1571);
				match(GRAPH);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1574);
			catalogGraphParentAndName();
			setState(1577);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,74,_ctx) ) {
			case 1:
				{
				setState(1575);
				openGraphType();
				}
				break;
			case 2:
				{
				setState(1576);
				ofGraphType();
				}
				break;
			}
			setState(1580);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(1579);
				graphSource();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OpenGraphTypeContext extends ParserRuleContext {
		public TerminalNode ANY() { return getToken(GQLParser.ANY, 0); }
		public TypedContext typed() {
			return getRuleContext(TypedContext.class,0);
		}
		public TerminalNode GRAPH() { return getToken(GQLParser.GRAPH, 0); }
		public TerminalNode PROPERTY() { return getToken(GQLParser.PROPERTY, 0); }
		public OpenGraphTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_openGraphType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterOpenGraphType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitOpenGraphType(this);
		}
	}

	public final OpenGraphTypeContext openGraphType() throws RecognitionException {
		OpenGraphTypeContext _localctx = new OpenGraphTypeContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_openGraphType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1583);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TYPED || _la==DOUBLE_COLON) {
				{
				setState(1582);
				typed();
				}
			}

			setState(1585);
			match(ANY);
			setState(1590);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GRAPH || _la==PROPERTY) {
				{
				setState(1587);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROPERTY) {
					{
					setState(1586);
					match(PROPERTY);
					}
				}

				setState(1589);
				match(GRAPH);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OfGraphTypeContext extends ParserRuleContext {
		public GraphTypeLikeGraphContext graphTypeLikeGraph() {
			return getRuleContext(GraphTypeLikeGraphContext.class,0);
		}
		public GraphTypeReferenceContext graphTypeReference() {
			return getRuleContext(GraphTypeReferenceContext.class,0);
		}
		public TypedContext typed() {
			return getRuleContext(TypedContext.class,0);
		}
		public NestedGraphTypeSpecificationContext nestedGraphTypeSpecification() {
			return getRuleContext(NestedGraphTypeSpecificationContext.class,0);
		}
		public TerminalNode GRAPH() { return getToken(GQLParser.GRAPH, 0); }
		public TerminalNode PROPERTY() { return getToken(GQLParser.PROPERTY, 0); }
		public OfGraphTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ofGraphType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterOfGraphType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitOfGraphType(this);
		}
	}

	public final OfGraphTypeContext ofGraphType() throws RecognitionException {
		OfGraphTypeContext _localctx = new OfGraphTypeContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_ofGraphType);
		int _la;
		try {
			setState(1607);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,83,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1592);
				graphTypeLikeGraph();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1594);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TYPED || _la==DOUBLE_COLON) {
					{
					setState(1593);
					typed();
					}
				}

				setState(1596);
				graphTypeReference();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1598);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TYPED || _la==DOUBLE_COLON) {
					{
					setState(1597);
					typed();
					}
				}

				setState(1604);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GRAPH || _la==PROPERTY) {
					{
					setState(1601);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PROPERTY) {
						{
						setState(1600);
						match(PROPERTY);
						}
					}

					setState(1603);
					match(GRAPH);
					}
				}

				setState(1606);
				nestedGraphTypeSpecification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GraphTypeLikeGraphContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(GQLParser.LIKE, 0); }
		public GraphExpressionContext graphExpression() {
			return getRuleContext(GraphExpressionContext.class,0);
		}
		public GraphTypeLikeGraphContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_graphTypeLikeGraph; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGraphTypeLikeGraph(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGraphTypeLikeGraph(this);
		}
	}

	public final GraphTypeLikeGraphContext graphTypeLikeGraph() throws RecognitionException {
		GraphTypeLikeGraphContext _localctx = new GraphTypeLikeGraphContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_graphTypeLikeGraph);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1609);
			match(LIKE);
			setState(1610);
			graphExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GraphSourceContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(GQLParser.AS, 0); }
		public TerminalNode COPY() { return getToken(GQLParser.COPY, 0); }
		public TerminalNode OF() { return getToken(GQLParser.OF, 0); }
		public GraphExpressionContext graphExpression() {
			return getRuleContext(GraphExpressionContext.class,0);
		}
		public GraphSourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_graphSource; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGraphSource(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGraphSource(this);
		}
	}

	public final GraphSourceContext graphSource() throws RecognitionException {
		GraphSourceContext _localctx = new GraphSourceContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_graphSource);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1612);
			match(AS);
			setState(1613);
			match(COPY);
			setState(1614);
			match(OF);
			setState(1615);
			graphExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropGraphStatementContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(GQLParser.DROP, 0); }
		public TerminalNode GRAPH() { return getToken(GQLParser.GRAPH, 0); }
		public CatalogGraphParentAndNameContext catalogGraphParentAndName() {
			return getRuleContext(CatalogGraphParentAndNameContext.class,0);
		}
		public TerminalNode PROPERTY() { return getToken(GQLParser.PROPERTY, 0); }
		public TerminalNode IF() { return getToken(GQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(GQLParser.EXISTS, 0); }
		public DropGraphStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropGraphStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterDropGraphStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitDropGraphStatement(this);
		}
	}

	public final DropGraphStatementContext dropGraphStatement() throws RecognitionException {
		DropGraphStatementContext _localctx = new DropGraphStatementContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_dropGraphStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1617);
			match(DROP);
			setState(1619);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PROPERTY) {
				{
				setState(1618);
				match(PROPERTY);
				}
			}

			setState(1621);
			match(GRAPH);
			setState(1624);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1622);
				match(IF);
				setState(1623);
				match(EXISTS);
				}
			}

			setState(1626);
			catalogGraphParentAndName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CreateGraphTypeStatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(GQLParser.CREATE, 0); }
		public CatalogGraphTypeParentAndNameContext catalogGraphTypeParentAndName() {
			return getRuleContext(CatalogGraphTypeParentAndNameContext.class,0);
		}
		public GraphTypeSourceContext graphTypeSource() {
			return getRuleContext(GraphTypeSourceContext.class,0);
		}
		public TerminalNode GRAPH() { return getToken(GQLParser.GRAPH, 0); }
		public TerminalNode TYPE() { return getToken(GQLParser.TYPE, 0); }
		public TerminalNode OR() { return getToken(GQLParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(GQLParser.REPLACE, 0); }
		public TerminalNode PROPERTY() { return getToken(GQLParser.PROPERTY, 0); }
		public TerminalNode IF() { return getToken(GQLParser.IF, 0); }
		public TerminalNode NOT() { return getToken(GQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(GQLParser.EXISTS, 0); }
		public CreateGraphTypeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createGraphTypeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterCreateGraphTypeStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitCreateGraphTypeStatement(this);
		}
	}

	public final CreateGraphTypeStatementContext createGraphTypeStatement() throws RecognitionException {
		CreateGraphTypeStatementContext _localctx = new CreateGraphTypeStatementContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_createGraphTypeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1628);
			match(CREATE);
			setState(1646);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GRAPH:
			case PROPERTY:
				{
				setState(1630);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROPERTY) {
					{
					setState(1629);
					match(PROPERTY);
					}
				}

				setState(1632);
				match(GRAPH);
				setState(1633);
				match(TYPE);
				setState(1637);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1634);
					match(IF);
					setState(1635);
					match(NOT);
					setState(1636);
					match(EXISTS);
					}
				}

				}
				break;
			case OR:
				{
				setState(1639);
				match(OR);
				setState(1640);
				match(REPLACE);
				setState(1642);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROPERTY) {
					{
					setState(1641);
					match(PROPERTY);
					}
				}

				setState(1644);
				match(GRAPH);
				setState(1645);
				match(TYPE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1648);
			catalogGraphTypeParentAndName();
			setState(1649);
			graphTypeSource();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GraphTypeSourceContext extends ParserRuleContext {
		public CopyOfGraphTypeContext copyOfGraphType() {
			return getRuleContext(CopyOfGraphTypeContext.class,0);
		}
		public TerminalNode AS() { return getToken(GQLParser.AS, 0); }
		public GraphTypeLikeGraphContext graphTypeLikeGraph() {
			return getRuleContext(GraphTypeLikeGraphContext.class,0);
		}
		public NestedGraphTypeSpecificationContext nestedGraphTypeSpecification() {
			return getRuleContext(NestedGraphTypeSpecificationContext.class,0);
		}
		public GraphTypeSourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_graphTypeSource; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGraphTypeSource(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGraphTypeSource(this);
		}
	}

	public final GraphTypeSourceContext graphTypeSource() throws RecognitionException {
		GraphTypeSourceContext _localctx = new GraphTypeSourceContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_graphTypeSource);
		int _la;
		try {
			setState(1660);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,92,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1652);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(1651);
					match(AS);
					}
				}

				setState(1654);
				copyOfGraphType();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1655);
				graphTypeLikeGraph();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1657);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(1656);
					match(AS);
					}
				}

				setState(1659);
				nestedGraphTypeSpecification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CopyOfGraphTypeContext extends ParserRuleContext {
		public TerminalNode COPY() { return getToken(GQLParser.COPY, 0); }
		public TerminalNode OF() { return getToken(GQLParser.OF, 0); }
		public GraphTypeReferenceContext graphTypeReference() {
			return getRuleContext(GraphTypeReferenceContext.class,0);
		}
		public ExternalObjectReferenceContext externalObjectReference() {
			return getRuleContext(ExternalObjectReferenceContext.class,0);
		}
		public CopyOfGraphTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyOfGraphType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterCopyOfGraphType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitCopyOfGraphType(this);
		}
	}

	public final CopyOfGraphTypeContext copyOfGraphType() throws RecognitionException {
		CopyOfGraphTypeContext _localctx = new CopyOfGraphTypeContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_copyOfGraphType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1662);
			match(COPY);
			setState(1663);
			match(OF);
			setState(1666);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOLLAR_SIGN:
			case PERIOD:
			case SOLIDUS:
			case CURRENT_SCHEMA:
			case HOME_SCHEMA:
			case DOUBLE_PERIOD:
			case DOUBLE_QUOTED_STRING_LITERAL:
			case ACCENT_QUOTED_STRING_LITERAL:
			case REGULAR_IDENTIFIER:
				{
				setState(1664);
				graphTypeReference();
				}
				break;
			case I_DONT_KNOW_3:
				{
				setState(1665);
				externalObjectReference();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DropGraphTypeStatementContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(GQLParser.DROP, 0); }
		public TerminalNode GRAPH() { return getToken(GQLParser.GRAPH, 0); }
		public TerminalNode TYPE() { return getToken(GQLParser.TYPE, 0); }
		public CatalogGraphTypeParentAndNameContext catalogGraphTypeParentAndName() {
			return getRuleContext(CatalogGraphTypeParentAndNameContext.class,0);
		}
		public TerminalNode PROPERTY() { return getToken(GQLParser.PROPERTY, 0); }
		public TerminalNode IF() { return getToken(GQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(GQLParser.EXISTS, 0); }
		public DropGraphTypeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropGraphTypeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterDropGraphTypeStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitDropGraphTypeStatement(this);
		}
	}

	public final DropGraphTypeStatementContext dropGraphTypeStatement() throws RecognitionException {
		DropGraphTypeStatementContext _localctx = new DropGraphTypeStatementContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_dropGraphTypeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1668);
			match(DROP);
			setState(1670);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PROPERTY) {
				{
				setState(1669);
				match(PROPERTY);
				}
			}

			setState(1672);
			match(GRAPH);
			setState(1673);
			match(TYPE);
			setState(1676);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1674);
				match(IF);
				setState(1675);
				match(EXISTS);
				}
			}

			setState(1678);
			catalogGraphTypeParentAndName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CallCatalogModifyingProcedureStatementContext extends ParserRuleContext {
		public CallProcedureStatementContext callProcedureStatement() {
			return getRuleContext(CallProcedureStatementContext.class,0);
		}
		public CallCatalogModifyingProcedureStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_callCatalogModifyingProcedureStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterCallCatalogModifyingProcedureStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitCallCatalogModifyingProcedureStatement(this);
		}
	}

	public final CallCatalogModifyingProcedureStatementContext callCatalogModifyingProcedureStatement() throws RecognitionException {
		CallCatalogModifyingProcedureStatementContext _localctx = new CallCatalogModifyingProcedureStatementContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_callCatalogModifyingProcedureStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1680);
			callProcedureStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LinearDataModifyingStatementContext extends ParserRuleContext {
		public FocusedLinearDataModifyingStatementContext focusedLinearDataModifyingStatement() {
			return getRuleContext(FocusedLinearDataModifyingStatementContext.class,0);
		}
		public AmbientLinearDataModifyingStatementContext ambientLinearDataModifyingStatement() {
			return getRuleContext(AmbientLinearDataModifyingStatementContext.class,0);
		}
		public LinearDataModifyingStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_linearDataModifyingStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterLinearDataModifyingStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitLinearDataModifyingStatement(this);
		}
	}

	public final LinearDataModifyingStatementContext linearDataModifyingStatement() throws RecognitionException {
		LinearDataModifyingStatementContext _localctx = new LinearDataModifyingStatementContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_linearDataModifyingStatement);
		try {
			setState(1684);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case USE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1682);
				focusedLinearDataModifyingStatement();
				}
				break;
			case LEFT_BRACE:
			case CALL:
			case DELETE:
			case DETACH:
			case FILTER:
			case FOR:
			case INSERT:
			case LET:
			case LIMIT:
			case MATCH:
			case NODETACH:
			case OFFSET:
			case SKIP_:
			case OPTIONAL:
			case ORDER:
			case REMOVE:
			case SET:
				enterOuterAlt(_localctx, 2);
				{
				setState(1683);
				ambientLinearDataModifyingStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FocusedLinearDataModifyingStatementContext extends ParserRuleContext {
		public FocusedLinearDataModifyingStatementBodyContext focusedLinearDataModifyingStatementBody() {
			return getRuleContext(FocusedLinearDataModifyingStatementBodyContext.class,0);
		}
		public FocusedNestedDataModifyingProcedureSpecificationContext focusedNestedDataModifyingProcedureSpecification() {
			return getRuleContext(FocusedNestedDataModifyingProcedureSpecificationContext.class,0);
		}
		public FocusedLinearDataModifyingStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_focusedLinearDataModifyingStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterFocusedLinearDataModifyingStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitFocusedLinearDataModifyingStatement(this);
		}
	}

	public final FocusedLinearDataModifyingStatementContext focusedLinearDataModifyingStatement() throws RecognitionException {
		FocusedLinearDataModifyingStatementContext _localctx = new FocusedLinearDataModifyingStatementContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_focusedLinearDataModifyingStatement);
		try {
			setState(1688);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,97,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1686);
				focusedLinearDataModifyingStatementBody();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1687);
				focusedNestedDataModifyingProcedureSpecification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FocusedLinearDataModifyingStatementBodyContext extends ParserRuleContext {
		public UseGraphClauseContext useGraphClause() {
			return getRuleContext(UseGraphClauseContext.class,0);
		}
		public SimpleLinearDataAccessingStatementContext simpleLinearDataAccessingStatement() {
			return getRuleContext(SimpleLinearDataAccessingStatementContext.class,0);
		}
		public PrimitiveResultStatementContext primitiveResultStatement() {
			return getRuleContext(PrimitiveResultStatementContext.class,0);
		}
		public FocusedLinearDataModifyingStatementBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_focusedLinearDataModifyingStatementBody; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterFocusedLinearDataModifyingStatementBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitFocusedLinearDataModifyingStatementBody(this);
		}
	}

	public final FocusedLinearDataModifyingStatementBodyContext focusedLinearDataModifyingStatementBody() throws RecognitionException {
		FocusedLinearDataModifyingStatementBodyContext _localctx = new FocusedLinearDataModifyingStatementBodyContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_focusedLinearDataModifyingStatementBody);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1690);
			useGraphClause();
			setState(1691);
			simpleLinearDataAccessingStatement();
			setState(1693);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FINISH || _la==RETURN) {
				{
				setState(1692);
				primitiveResultStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FocusedNestedDataModifyingProcedureSpecificationContext extends ParserRuleContext {
		public UseGraphClauseContext useGraphClause() {
			return getRuleContext(UseGraphClauseContext.class,0);
		}
		public NestedDataModifyingProcedureSpecificationContext nestedDataModifyingProcedureSpecification() {
			return getRuleContext(NestedDataModifyingProcedureSpecificationContext.class,0);
		}
		public FocusedNestedDataModifyingProcedureSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_focusedNestedDataModifyingProcedureSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterFocusedNestedDataModifyingProcedureSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitFocusedNestedDataModifyingProcedureSpecification(this);
		}
	}

	public final FocusedNestedDataModifyingProcedureSpecificationContext focusedNestedDataModifyingProcedureSpecification() throws RecognitionException {
		FocusedNestedDataModifyingProcedureSpecificationContext _localctx = new FocusedNestedDataModifyingProcedureSpecificationContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_focusedNestedDataModifyingProcedureSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1695);
			useGraphClause();
			setState(1696);
			nestedDataModifyingProcedureSpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AmbientLinearDataModifyingStatementContext extends ParserRuleContext {
		public AmbientLinearDataModifyingStatementBodyContext ambientLinearDataModifyingStatementBody() {
			return getRuleContext(AmbientLinearDataModifyingStatementBodyContext.class,0);
		}
		public NestedDataModifyingProcedureSpecificationContext nestedDataModifyingProcedureSpecification() {
			return getRuleContext(NestedDataModifyingProcedureSpecificationContext.class,0);
		}
		public AmbientLinearDataModifyingStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ambientLinearDataModifyingStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterAmbientLinearDataModifyingStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitAmbientLinearDataModifyingStatement(this);
		}
	}

	public final AmbientLinearDataModifyingStatementContext ambientLinearDataModifyingStatement() throws RecognitionException {
		AmbientLinearDataModifyingStatementContext _localctx = new AmbientLinearDataModifyingStatementContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_ambientLinearDataModifyingStatement);
		try {
			setState(1700);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALL:
			case DELETE:
			case DETACH:
			case FILTER:
			case FOR:
			case INSERT:
			case LET:
			case LIMIT:
			case MATCH:
			case NODETACH:
			case OFFSET:
			case SKIP_:
			case OPTIONAL:
			case ORDER:
			case REMOVE:
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(1698);
				ambientLinearDataModifyingStatementBody();
				}
				break;
			case LEFT_BRACE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1699);
				nestedDataModifyingProcedureSpecification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AmbientLinearDataModifyingStatementBodyContext extends ParserRuleContext {
		public SimpleLinearDataAccessingStatementContext simpleLinearDataAccessingStatement() {
			return getRuleContext(SimpleLinearDataAccessingStatementContext.class,0);
		}
		public PrimitiveResultStatementContext primitiveResultStatement() {
			return getRuleContext(PrimitiveResultStatementContext.class,0);
		}
		public AmbientLinearDataModifyingStatementBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ambientLinearDataModifyingStatementBody; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterAmbientLinearDataModifyingStatementBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitAmbientLinearDataModifyingStatementBody(this);
		}
	}

	public final AmbientLinearDataModifyingStatementBodyContext ambientLinearDataModifyingStatementBody() throws RecognitionException {
		AmbientLinearDataModifyingStatementBodyContext _localctx = new AmbientLinearDataModifyingStatementBodyContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_ambientLinearDataModifyingStatementBody);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1702);
			simpleLinearDataAccessingStatement();
			setState(1704);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FINISH || _la==RETURN) {
				{
				setState(1703);
				primitiveResultStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimpleLinearDataAccessingStatementContext extends ParserRuleContext {
		public List<SimpleDataAccessingStatementContext> simpleDataAccessingStatement() {
			return getRuleContexts(SimpleDataAccessingStatementContext.class);
		}
		public SimpleDataAccessingStatementContext simpleDataAccessingStatement(int i) {
			return getRuleContext(SimpleDataAccessingStatementContext.class,i);
		}
		public SimpleLinearDataAccessingStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleLinearDataAccessingStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSimpleLinearDataAccessingStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSimpleLinearDataAccessingStatement(this);
		}
	}

	public final SimpleLinearDataAccessingStatementContext simpleLinearDataAccessingStatement() throws RecognitionException {
		SimpleLinearDataAccessingStatementContext _localctx = new SimpleLinearDataAccessingStatementContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_simpleLinearDataAccessingStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1707); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1706);
				simpleDataAccessingStatement();
				}
				}
				setState(1709); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & 4616189654561980417L) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & 5980921180159213569L) != 0) || _la==REMOVE || _la==SET );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimpleDataAccessingStatementContext extends ParserRuleContext {
		public SimpleQueryStatementContext simpleQueryStatement() {
			return getRuleContext(SimpleQueryStatementContext.class,0);
		}
		public SimpleDataModifyingStatementContext simpleDataModifyingStatement() {
			return getRuleContext(SimpleDataModifyingStatementContext.class,0);
		}
		public SimpleDataAccessingStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleDataAccessingStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSimpleDataAccessingStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSimpleDataAccessingStatement(this);
		}
	}

	public final SimpleDataAccessingStatementContext simpleDataAccessingStatement() throws RecognitionException {
		SimpleDataAccessingStatementContext _localctx = new SimpleDataAccessingStatementContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_simpleDataAccessingStatement);
		try {
			setState(1713);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,102,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1711);
				simpleQueryStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1712);
				simpleDataModifyingStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimpleDataModifyingStatementContext extends ParserRuleContext {
		public PrimitiveDataModifyingStatementContext primitiveDataModifyingStatement() {
			return getRuleContext(PrimitiveDataModifyingStatementContext.class,0);
		}
		public CallDataModifyingProcedureStatementContext callDataModifyingProcedureStatement() {
			return getRuleContext(CallDataModifyingProcedureStatementContext.class,0);
		}
		public SimpleDataModifyingStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleDataModifyingStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSimpleDataModifyingStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSimpleDataModifyingStatement(this);
		}
	}

	public final SimpleDataModifyingStatementContext simpleDataModifyingStatement() throws RecognitionException {
		SimpleDataModifyingStatementContext _localctx = new SimpleDataModifyingStatementContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_simpleDataModifyingStatement);
		try {
			setState(1717);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DELETE:
			case DETACH:
			case INSERT:
			case NODETACH:
			case REMOVE:
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(1715);
				primitiveDataModifyingStatement();
				}
				break;
			case CALL:
			case OPTIONAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1716);
				callDataModifyingProcedureStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrimitiveDataModifyingStatementContext extends ParserRuleContext {
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public SetStatementContext setStatement() {
			return getRuleContext(SetStatementContext.class,0);
		}
		public RemoveStatementContext removeStatement() {
			return getRuleContext(RemoveStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public PrimitiveDataModifyingStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primitiveDataModifyingStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterPrimitiveDataModifyingStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitPrimitiveDataModifyingStatement(this);
		}
	}

	public final PrimitiveDataModifyingStatementContext primitiveDataModifyingStatement() throws RecognitionException {
		PrimitiveDataModifyingStatementContext _localctx = new PrimitiveDataModifyingStatementContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_primitiveDataModifyingStatement);
		try {
			setState(1723);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INSERT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1719);
				insertStatement();
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 2);
				{
				setState(1720);
				setStatement();
				}
				break;
			case REMOVE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1721);
				removeStatement();
				}
				break;
			case DELETE:
			case DETACH:
			case NODETACH:
				enterOuterAlt(_localctx, 4);
				{
				setState(1722);
				deleteStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InsertStatementContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(GQLParser.INSERT, 0); }
		public InsertGraphPatternContext insertGraphPattern() {
			return getRuleContext(InsertGraphPatternContext.class,0);
		}
		public InsertStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterInsertStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitInsertStatement(this);
		}
	}

	public final InsertStatementContext insertStatement() throws RecognitionException {
		InsertStatementContext _localctx = new InsertStatementContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_insertStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1725);
			match(INSERT);
			setState(1726);
			insertGraphPattern();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetStatementContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(GQLParser.SET, 0); }
		public SetItemListContext setItemList() {
			return getRuleContext(SetItemListContext.class,0);
		}
		public SetStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSetStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSetStatement(this);
		}
	}

	public final SetStatementContext setStatement() throws RecognitionException {
		SetStatementContext _localctx = new SetStatementContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_setStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1728);
			match(SET);
			setState(1729);
			setItemList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetItemListContext extends ParserRuleContext {
		public List<SetItemContext> setItem() {
			return getRuleContexts(SetItemContext.class);
		}
		public SetItemContext setItem(int i) {
			return getRuleContext(SetItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQLParser.COMMA, i);
		}
		public SetItemListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setItemList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSetItemList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSetItemList(this);
		}
	}

	public final SetItemListContext setItemList() throws RecognitionException {
		SetItemListContext _localctx = new SetItemListContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_setItemList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1731);
			setItem();
			setState(1736);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1732);
				match(COMMA);
				setState(1733);
				setItem();
				}
				}
				setState(1738);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetItemContext extends ParserRuleContext {
		public SetPropertyItemContext setPropertyItem() {
			return getRuleContext(SetPropertyItemContext.class,0);
		}
		public SetAllPropertiesItemContext setAllPropertiesItem() {
			return getRuleContext(SetAllPropertiesItemContext.class,0);
		}
		public SetLabelItemContext setLabelItem() {
			return getRuleContext(SetLabelItemContext.class,0);
		}
		public SetItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSetItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSetItem(this);
		}
	}

	public final SetItemContext setItem() throws RecognitionException {
		SetItemContext _localctx = new SetItemContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_setItem);
		try {
			setState(1742);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,106,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1739);
				setPropertyItem();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1740);
				setAllPropertiesItem();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1741);
				setLabelItem();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetPropertyItemContext extends ParserRuleContext {
		public BindingVariableReferenceContext bindingVariableReference() {
			return getRuleContext(BindingVariableReferenceContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(GQLParser.PERIOD, 0); }
		public PropertyNameContext propertyName() {
			return getRuleContext(PropertyNameContext.class,0);
		}
		public TerminalNode EQUALS_OPERATOR() { return getToken(GQLParser.EQUALS_OPERATOR, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public SetPropertyItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setPropertyItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSetPropertyItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSetPropertyItem(this);
		}
	}

	public final SetPropertyItemContext setPropertyItem() throws RecognitionException {
		SetPropertyItemContext _localctx = new SetPropertyItemContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_setPropertyItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1744);
			bindingVariableReference();
			setState(1745);
			match(PERIOD);
			setState(1746);
			propertyName();
			setState(1747);
			match(EQUALS_OPERATOR);
			setState(1748);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetAllPropertiesItemContext extends ParserRuleContext {
		public BindingVariableReferenceContext bindingVariableReference() {
			return getRuleContext(BindingVariableReferenceContext.class,0);
		}
		public TerminalNode EQUALS_OPERATOR() { return getToken(GQLParser.EQUALS_OPERATOR, 0); }
		public TerminalNode LEFT_BRACE() { return getToken(GQLParser.LEFT_BRACE, 0); }
		public TerminalNode RIGHT_BRACE() { return getToken(GQLParser.RIGHT_BRACE, 0); }
		public PropertyKeyValuePairListContext propertyKeyValuePairList() {
			return getRuleContext(PropertyKeyValuePairListContext.class,0);
		}
		public SetAllPropertiesItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setAllPropertiesItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSetAllPropertiesItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSetAllPropertiesItem(this);
		}
	}

	public final SetAllPropertiesItemContext setAllPropertiesItem() throws RecognitionException {
		SetAllPropertiesItemContext _localctx = new SetAllPropertiesItemContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_setAllPropertiesItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1750);
			bindingVariableReference();
			setState(1751);
			match(EQUALS_OPERATOR);
			setState(1752);
			match(LEFT_BRACE);
			setState(1754);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & -1L) != 0) || ((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & -1L) != 0) || ((((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & -1L) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -1L) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & 603482350067652607L) != 0)) {
				{
				setState(1753);
				propertyKeyValuePairList();
				}
			}

			setState(1756);
			match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetLabelItemContext extends ParserRuleContext {
		public BindingVariableReferenceContext bindingVariableReference() {
			return getRuleContext(BindingVariableReferenceContext.class,0);
		}
		public IsOrColonContext isOrColon() {
			return getRuleContext(IsOrColonContext.class,0);
		}
		public LabelNameContext labelName() {
			return getRuleContext(LabelNameContext.class,0);
		}
		public SetLabelItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setLabelItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSetLabelItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSetLabelItem(this);
		}
	}

	public final SetLabelItemContext setLabelItem() throws RecognitionException {
		SetLabelItemContext _localctx = new SetLabelItemContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_setLabelItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1758);
			bindingVariableReference();
			setState(1759);
			isOrColon();
			setState(1760);
			labelName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LabelSetSpecificationContext extends ParserRuleContext {
		public List<LabelNameContext> labelName() {
			return getRuleContexts(LabelNameContext.class);
		}
		public LabelNameContext labelName(int i) {
			return getRuleContext(LabelNameContext.class,i);
		}
		public List<TerminalNode> AMPERSAND() { return getTokens(GQLParser.AMPERSAND); }
		public TerminalNode AMPERSAND(int i) {
			return getToken(GQLParser.AMPERSAND, i);
		}
		public LabelSetSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labelSetSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterLabelSetSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitLabelSetSpecification(this);
		}
	}

	public final LabelSetSpecificationContext labelSetSpecification() throws RecognitionException {
		LabelSetSpecificationContext _localctx = new LabelSetSpecificationContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_labelSetSpecification);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1762);
			labelName();
			setState(1767);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,108,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1763);
					match(AMPERSAND);
					setState(1764);
					labelName();
					}
					} 
				}
				setState(1769);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,108,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RemoveStatementContext extends ParserRuleContext {
		public TerminalNode REMOVE() { return getToken(GQLParser.REMOVE, 0); }
		public RemoveItemListContext removeItemList() {
			return getRuleContext(RemoveItemListContext.class,0);
		}
		public RemoveStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterRemoveStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitRemoveStatement(this);
		}
	}

	public final RemoveStatementContext removeStatement() throws RecognitionException {
		RemoveStatementContext _localctx = new RemoveStatementContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_removeStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1770);
			match(REMOVE);
			setState(1771);
			removeItemList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RemoveItemListContext extends ParserRuleContext {
		public List<RemoveItemContext> removeItem() {
			return getRuleContexts(RemoveItemContext.class);
		}
		public RemoveItemContext removeItem(int i) {
			return getRuleContext(RemoveItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQLParser.COMMA, i);
		}
		public RemoveItemListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removeItemList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterRemoveItemList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitRemoveItemList(this);
		}
	}

	public final RemoveItemListContext removeItemList() throws RecognitionException {
		RemoveItemListContext _localctx = new RemoveItemListContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_removeItemList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1773);
			removeItem();
			setState(1778);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1774);
				match(COMMA);
				setState(1775);
				removeItem();
				}
				}
				setState(1780);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RemoveItemContext extends ParserRuleContext {
		public RemovePropertyItemContext removePropertyItem() {
			return getRuleContext(RemovePropertyItemContext.class,0);
		}
		public RemoveLabelItemContext removeLabelItem() {
			return getRuleContext(RemoveLabelItemContext.class,0);
		}
		public RemoveItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removeItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterRemoveItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitRemoveItem(this);
		}
	}

	public final RemoveItemContext removeItem() throws RecognitionException {
		RemoveItemContext _localctx = new RemoveItemContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_removeItem);
		try {
			setState(1783);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,110,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1781);
				removePropertyItem();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1782);
				removeLabelItem();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RemovePropertyItemContext extends ParserRuleContext {
		public BindingVariableReferenceContext bindingVariableReference() {
			return getRuleContext(BindingVariableReferenceContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(GQLParser.PERIOD, 0); }
		public PropertyNameContext propertyName() {
			return getRuleContext(PropertyNameContext.class,0);
		}
		public RemovePropertyItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removePropertyItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterRemovePropertyItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitRemovePropertyItem(this);
		}
	}

	public final RemovePropertyItemContext removePropertyItem() throws RecognitionException {
		RemovePropertyItemContext _localctx = new RemovePropertyItemContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_removePropertyItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1785);
			bindingVariableReference();
			setState(1786);
			match(PERIOD);
			setState(1787);
			propertyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RemoveLabelItemContext extends ParserRuleContext {
		public BindingVariableReferenceContext bindingVariableReference() {
			return getRuleContext(BindingVariableReferenceContext.class,0);
		}
		public IsOrColonContext isOrColon() {
			return getRuleContext(IsOrColonContext.class,0);
		}
		public LabelNameContext labelName() {
			return getRuleContext(LabelNameContext.class,0);
		}
		public RemoveLabelItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_removeLabelItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterRemoveLabelItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitRemoveLabelItem(this);
		}
	}

	public final RemoveLabelItemContext removeLabelItem() throws RecognitionException {
		RemoveLabelItemContext _localctx = new RemoveLabelItemContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_removeLabelItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1789);
			bindingVariableReference();
			setState(1790);
			isOrColon();
			setState(1791);
			labelName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DeleteStatementContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(GQLParser.DELETE, 0); }
		public DeleteItemListContext deleteItemList() {
			return getRuleContext(DeleteItemListContext.class,0);
		}
		public TerminalNode DETACH() { return getToken(GQLParser.DETACH, 0); }
		public TerminalNode NODETACH() { return getToken(GQLParser.NODETACH, 0); }
		public DeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterDeleteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitDeleteStatement(this);
		}
	}

	public final DeleteStatementContext deleteStatement() throws RecognitionException {
		DeleteStatementContext _localctx = new DeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_deleteStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1794);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DETACH || _la==NODETACH) {
				{
				setState(1793);
				_la = _input.LA(1);
				if ( !(_la==DETACH || _la==NODETACH) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1796);
			match(DELETE);
			setState(1797);
			deleteItemList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DeleteItemListContext extends ParserRuleContext {
		public List<DeleteItemContext> deleteItem() {
			return getRuleContexts(DeleteItemContext.class);
		}
		public DeleteItemContext deleteItem(int i) {
			return getRuleContext(DeleteItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQLParser.COMMA, i);
		}
		public DeleteItemListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteItemList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterDeleteItemList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitDeleteItemList(this);
		}
	}

	public final DeleteItemListContext deleteItemList() throws RecognitionException {
		DeleteItemListContext _localctx = new DeleteItemListContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_deleteItemList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1799);
			deleteItem();
			setState(1804);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1800);
				match(COMMA);
				setState(1801);
				deleteItem();
				}
				}
				setState(1806);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DeleteItemContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public DeleteItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterDeleteItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitDeleteItem(this);
		}
	}

	public final DeleteItemContext deleteItem() throws RecognitionException {
		DeleteItemContext _localctx = new DeleteItemContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_deleteItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1807);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CallDataModifyingProcedureStatementContext extends ParserRuleContext {
		public CallProcedureStatementContext callProcedureStatement() {
			return getRuleContext(CallProcedureStatementContext.class,0);
		}
		public CallDataModifyingProcedureStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_callDataModifyingProcedureStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterCallDataModifyingProcedureStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitCallDataModifyingProcedureStatement(this);
		}
	}

	public final CallDataModifyingProcedureStatementContext callDataModifyingProcedureStatement() throws RecognitionException {
		CallDataModifyingProcedureStatementContext _localctx = new CallDataModifyingProcedureStatementContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_callDataModifyingProcedureStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1809);
			callProcedureStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CompositeQueryStatementContext extends ParserRuleContext {
		public CompositeQueryExpressionContext compositeQueryExpression() {
			return getRuleContext(CompositeQueryExpressionContext.class,0);
		}
		public CompositeQueryStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compositeQueryStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterCompositeQueryStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitCompositeQueryStatement(this);
		}
	}

	public final CompositeQueryStatementContext compositeQueryStatement() throws RecognitionException {
		CompositeQueryStatementContext _localctx = new CompositeQueryStatementContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_compositeQueryStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1811);
			compositeQueryExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CompositeQueryExpressionContext extends ParserRuleContext {
		public CompositeQueryPrimaryContext compositeQueryPrimary() {
			return getRuleContext(CompositeQueryPrimaryContext.class,0);
		}
		public CompositeQueryExpressionContext compositeQueryExpression() {
			return getRuleContext(CompositeQueryExpressionContext.class,0);
		}
		public QueryConjunctionContext queryConjunction() {
			return getRuleContext(QueryConjunctionContext.class,0);
		}
		public CompositeQueryExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compositeQueryExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterCompositeQueryExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitCompositeQueryExpression(this);
		}
	}

	public final CompositeQueryExpressionContext compositeQueryExpression() throws RecognitionException {
		return compositeQueryExpression(0);
	}

	private CompositeQueryExpressionContext compositeQueryExpression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		CompositeQueryExpressionContext _localctx = new CompositeQueryExpressionContext(_ctx, _parentState);
		CompositeQueryExpressionContext _prevctx = _localctx;
		int _startState = 298;
		enterRecursionRule(_localctx, 298, RULE_compositeQueryExpression, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(1814);
			compositeQueryPrimary();
			}
			_ctx.stop = _input.LT(-1);
			setState(1822);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,113,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CompositeQueryExpressionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_compositeQueryExpression);
					setState(1816);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(1817);
					queryConjunction();
					setState(1818);
					compositeQueryPrimary();
					}
					} 
				}
				setState(1824);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,113,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QueryConjunctionContext extends ParserRuleContext {
		public SetOperatorContext setOperator() {
			return getRuleContext(SetOperatorContext.class,0);
		}
		public TerminalNode OTHERWISE() { return getToken(GQLParser.OTHERWISE, 0); }
		public QueryConjunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryConjunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterQueryConjunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitQueryConjunction(this);
		}
	}

	public final QueryConjunctionContext queryConjunction() throws RecognitionException {
		QueryConjunctionContext _localctx = new QueryConjunctionContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_queryConjunction);
		try {
			setState(1827);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EXCEPT:
			case INTERSECT:
			case UNION:
				enterOuterAlt(_localctx, 1);
				{
				setState(1825);
				setOperator();
				}
				break;
			case OTHERWISE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1826);
				match(OTHERWISE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetOperatorContext extends ParserRuleContext {
		public TerminalNode UNION() { return getToken(GQLParser.UNION, 0); }
		public SetQuantifierContext setQuantifier() {
			return getRuleContext(SetQuantifierContext.class,0);
		}
		public TerminalNode EXCEPT() { return getToken(GQLParser.EXCEPT, 0); }
		public TerminalNode INTERSECT() { return getToken(GQLParser.INTERSECT, 0); }
		public SetOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSetOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSetOperator(this);
		}
	}

	public final SetOperatorContext setOperator() throws RecognitionException {
		SetOperatorContext _localctx = new SetOperatorContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_setOperator);
		int _la;
		try {
			setState(1841);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNION:
				enterOuterAlt(_localctx, 1);
				{
				setState(1829);
				match(UNION);
				setState(1831);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					setState(1830);
					setQuantifier();
					}
				}

				}
				break;
			case EXCEPT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1833);
				match(EXCEPT);
				setState(1835);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					setState(1834);
					setQuantifier();
					}
				}

				}
				break;
			case INTERSECT:
				enterOuterAlt(_localctx, 3);
				{
				setState(1837);
				match(INTERSECT);
				setState(1839);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					setState(1838);
					setQuantifier();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CompositeQueryPrimaryContext extends ParserRuleContext {
		public LinearQueryStatementContext linearQueryStatement() {
			return getRuleContext(LinearQueryStatementContext.class,0);
		}
		public CompositeQueryPrimaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compositeQueryPrimary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterCompositeQueryPrimary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitCompositeQueryPrimary(this);
		}
	}

	public final CompositeQueryPrimaryContext compositeQueryPrimary() throws RecognitionException {
		CompositeQueryPrimaryContext _localctx = new CompositeQueryPrimaryContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_compositeQueryPrimary);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1843);
			linearQueryStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LinearQueryStatementContext extends ParserRuleContext {
		public FocusedLinearQueryStatementContext focusedLinearQueryStatement() {
			return getRuleContext(FocusedLinearQueryStatementContext.class,0);
		}
		public AmbientLinearQueryStatementContext ambientLinearQueryStatement() {
			return getRuleContext(AmbientLinearQueryStatementContext.class,0);
		}
		public LinearQueryStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_linearQueryStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterLinearQueryStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitLinearQueryStatement(this);
		}
	}

	public final LinearQueryStatementContext linearQueryStatement() throws RecognitionException {
		LinearQueryStatementContext _localctx = new LinearQueryStatementContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_linearQueryStatement);
		try {
			setState(1847);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case USE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1845);
				focusedLinearQueryStatement();
				}
				break;
			case LEFT_BRACE:
			case CALL:
			case FILTER:
			case FINISH:
			case FOR:
			case LET:
			case LIMIT:
			case MATCH:
			case OFFSET:
			case SKIP_:
			case OPTIONAL:
			case ORDER:
			case RETURN:
				enterOuterAlt(_localctx, 2);
				{
				setState(1846);
				ambientLinearQueryStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FocusedLinearQueryStatementContext extends ParserRuleContext {
		public FocusedLinearQueryAndPrimitiveResultStatementPartContext focusedLinearQueryAndPrimitiveResultStatementPart() {
			return getRuleContext(FocusedLinearQueryAndPrimitiveResultStatementPartContext.class,0);
		}
		public List<FocusedLinearQueryStatementPartContext> focusedLinearQueryStatementPart() {
			return getRuleContexts(FocusedLinearQueryStatementPartContext.class);
		}
		public FocusedLinearQueryStatementPartContext focusedLinearQueryStatementPart(int i) {
			return getRuleContext(FocusedLinearQueryStatementPartContext.class,i);
		}
		public FocusedPrimitiveResultStatementContext focusedPrimitiveResultStatement() {
			return getRuleContext(FocusedPrimitiveResultStatementContext.class,0);
		}
		public FocusedNestedQuerySpecificationContext focusedNestedQuerySpecification() {
			return getRuleContext(FocusedNestedQuerySpecificationContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public FocusedLinearQueryStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_focusedLinearQueryStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterFocusedLinearQueryStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitFocusedLinearQueryStatement(this);
		}
	}

	public final FocusedLinearQueryStatementContext focusedLinearQueryStatement() throws RecognitionException {
		FocusedLinearQueryStatementContext _localctx = new FocusedLinearQueryStatementContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_focusedLinearQueryStatement);
		try {
			int _alt;
			setState(1859);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,121,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1852);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,120,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1849);
						focusedLinearQueryStatementPart();
						}
						} 
					}
					setState(1854);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,120,_ctx);
				}
				setState(1855);
				focusedLinearQueryAndPrimitiveResultStatementPart();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1856);
				focusedPrimitiveResultStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1857);
				focusedNestedQuerySpecification();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1858);
				selectStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FocusedLinearQueryStatementPartContext extends ParserRuleContext {
		public UseGraphClauseContext useGraphClause() {
			return getRuleContext(UseGraphClauseContext.class,0);
		}
		public SimpleLinearQueryStatementContext simpleLinearQueryStatement() {
			return getRuleContext(SimpleLinearQueryStatementContext.class,0);
		}
		public FocusedLinearQueryStatementPartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_focusedLinearQueryStatementPart; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterFocusedLinearQueryStatementPart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitFocusedLinearQueryStatementPart(this);
		}
	}

	public final FocusedLinearQueryStatementPartContext focusedLinearQueryStatementPart() throws RecognitionException {
		FocusedLinearQueryStatementPartContext _localctx = new FocusedLinearQueryStatementPartContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_focusedLinearQueryStatementPart);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1861);
			useGraphClause();
			setState(1862);
			simpleLinearQueryStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FocusedLinearQueryAndPrimitiveResultStatementPartContext extends ParserRuleContext {
		public UseGraphClauseContext useGraphClause() {
			return getRuleContext(UseGraphClauseContext.class,0);
		}
		public SimpleLinearQueryStatementContext simpleLinearQueryStatement() {
			return getRuleContext(SimpleLinearQueryStatementContext.class,0);
		}
		public PrimitiveResultStatementContext primitiveResultStatement() {
			return getRuleContext(PrimitiveResultStatementContext.class,0);
		}
		public FocusedLinearQueryAndPrimitiveResultStatementPartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_focusedLinearQueryAndPrimitiveResultStatementPart; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterFocusedLinearQueryAndPrimitiveResultStatementPart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitFocusedLinearQueryAndPrimitiveResultStatementPart(this);
		}
	}

	public final FocusedLinearQueryAndPrimitiveResultStatementPartContext focusedLinearQueryAndPrimitiveResultStatementPart() throws RecognitionException {
		FocusedLinearQueryAndPrimitiveResultStatementPartContext _localctx = new FocusedLinearQueryAndPrimitiveResultStatementPartContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_focusedLinearQueryAndPrimitiveResultStatementPart);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1864);
			useGraphClause();
			setState(1865);
			simpleLinearQueryStatement();
			setState(1866);
			primitiveResultStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FocusedPrimitiveResultStatementContext extends ParserRuleContext {
		public UseGraphClauseContext useGraphClause() {
			return getRuleContext(UseGraphClauseContext.class,0);
		}
		public PrimitiveResultStatementContext primitiveResultStatement() {
			return getRuleContext(PrimitiveResultStatementContext.class,0);
		}
		public FocusedPrimitiveResultStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_focusedPrimitiveResultStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterFocusedPrimitiveResultStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitFocusedPrimitiveResultStatement(this);
		}
	}

	public final FocusedPrimitiveResultStatementContext focusedPrimitiveResultStatement() throws RecognitionException {
		FocusedPrimitiveResultStatementContext _localctx = new FocusedPrimitiveResultStatementContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_focusedPrimitiveResultStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1868);
			useGraphClause();
			setState(1869);
			primitiveResultStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FocusedNestedQuerySpecificationContext extends ParserRuleContext {
		public UseGraphClauseContext useGraphClause() {
			return getRuleContext(UseGraphClauseContext.class,0);
		}
		public NestedQuerySpecificationContext nestedQuerySpecification() {
			return getRuleContext(NestedQuerySpecificationContext.class,0);
		}
		public FocusedNestedQuerySpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_focusedNestedQuerySpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterFocusedNestedQuerySpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitFocusedNestedQuerySpecification(this);
		}
	}

	public final FocusedNestedQuerySpecificationContext focusedNestedQuerySpecification() throws RecognitionException {
		FocusedNestedQuerySpecificationContext _localctx = new FocusedNestedQuerySpecificationContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_focusedNestedQuerySpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1871);
			useGraphClause();
			setState(1872);
			nestedQuerySpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AmbientLinearQueryStatementContext extends ParserRuleContext {
		public PrimitiveResultStatementContext primitiveResultStatement() {
			return getRuleContext(PrimitiveResultStatementContext.class,0);
		}
		public SimpleLinearQueryStatementContext simpleLinearQueryStatement() {
			return getRuleContext(SimpleLinearQueryStatementContext.class,0);
		}
		public NestedQuerySpecificationContext nestedQuerySpecification() {
			return getRuleContext(NestedQuerySpecificationContext.class,0);
		}
		public AmbientLinearQueryStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ambientLinearQueryStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterAmbientLinearQueryStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitAmbientLinearQueryStatement(this);
		}
	}

	public final AmbientLinearQueryStatementContext ambientLinearQueryStatement() throws RecognitionException {
		AmbientLinearQueryStatementContext _localctx = new AmbientLinearQueryStatementContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_ambientLinearQueryStatement);
		int _la;
		try {
			setState(1879);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALL:
			case FILTER:
			case FINISH:
			case FOR:
			case LET:
			case LIMIT:
			case MATCH:
			case OFFSET:
			case SKIP_:
			case OPTIONAL:
			case ORDER:
			case RETURN:
				enterOuterAlt(_localctx, 1);
				{
				setState(1875);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & 4616189618054758401L) != 0) || ((((_la - 157)) & ~0x3f) == 0 && ((1L << (_la - 157)) & 356482293765L) != 0)) {
					{
					setState(1874);
					simpleLinearQueryStatement();
					}
				}

				setState(1877);
				primitiveResultStatement();
				}
				break;
			case LEFT_BRACE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1878);
				nestedQuerySpecification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimpleLinearQueryStatementContext extends ParserRuleContext {
		public List<SimpleQueryStatementContext> simpleQueryStatement() {
			return getRuleContexts(SimpleQueryStatementContext.class);
		}
		public SimpleQueryStatementContext simpleQueryStatement(int i) {
			return getRuleContext(SimpleQueryStatementContext.class,i);
		}
		public SimpleLinearQueryStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleLinearQueryStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSimpleLinearQueryStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSimpleLinearQueryStatement(this);
		}
	}

	public final SimpleLinearQueryStatementContext simpleLinearQueryStatement() throws RecognitionException {
		SimpleLinearQueryStatementContext _localctx = new SimpleLinearQueryStatementContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_simpleLinearQueryStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1882); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1881);
				simpleQueryStatement();
				}
				}
				setState(1884); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( ((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & 4616189618054758401L) != 0) || ((((_la - 157)) & ~0x3f) == 0 && ((1L << (_la - 157)) & 356482293765L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimpleQueryStatementContext extends ParserRuleContext {
		public PrimitiveQueryStatementContext primitiveQueryStatement() {
			return getRuleContext(PrimitiveQueryStatementContext.class,0);
		}
		public CallQueryStatementContext callQueryStatement() {
			return getRuleContext(CallQueryStatementContext.class,0);
		}
		public SimpleQueryStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleQueryStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSimpleQueryStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSimpleQueryStatement(this);
		}
	}

	public final SimpleQueryStatementContext simpleQueryStatement() throws RecognitionException {
		SimpleQueryStatementContext _localctx = new SimpleQueryStatementContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_simpleQueryStatement);
		try {
			setState(1888);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,125,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1886);
				primitiveQueryStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1887);
				callQueryStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrimitiveQueryStatementContext extends ParserRuleContext {
		public MatchStatementContext matchStatement() {
			return getRuleContext(MatchStatementContext.class,0);
		}
		public LetStatementContext letStatement() {
			return getRuleContext(LetStatementContext.class,0);
		}
		public ForStatementContext forStatement() {
			return getRuleContext(ForStatementContext.class,0);
		}
		public FilterStatementContext filterStatement() {
			return getRuleContext(FilterStatementContext.class,0);
		}
		public OrderByAndPageStatementContext orderByAndPageStatement() {
			return getRuleContext(OrderByAndPageStatementContext.class,0);
		}
		public PrimitiveQueryStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primitiveQueryStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterPrimitiveQueryStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitPrimitiveQueryStatement(this);
		}
	}

	public final PrimitiveQueryStatementContext primitiveQueryStatement() throws RecognitionException {
		PrimitiveQueryStatementContext _localctx = new PrimitiveQueryStatementContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_primitiveQueryStatement);
		try {
			setState(1895);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MATCH:
			case OPTIONAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1890);
				matchStatement();
				}
				break;
			case LET:
				enterOuterAlt(_localctx, 2);
				{
				setState(1891);
				letStatement();
				}
				break;
			case FOR:
				enterOuterAlt(_localctx, 3);
				{
				setState(1892);
				forStatement();
				}
				break;
			case FILTER:
				enterOuterAlt(_localctx, 4);
				{
				setState(1893);
				filterStatement();
				}
				break;
			case LIMIT:
			case OFFSET:
			case SKIP_:
			case ORDER:
				enterOuterAlt(_localctx, 5);
				{
				setState(1894);
				orderByAndPageStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MatchStatementContext extends ParserRuleContext {
		public SimpleMatchStatementContext simpleMatchStatement() {
			return getRuleContext(SimpleMatchStatementContext.class,0);
		}
		public OptionalMatchStatementContext optionalMatchStatement() {
			return getRuleContext(OptionalMatchStatementContext.class,0);
		}
		public MatchStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_matchStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterMatchStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitMatchStatement(this);
		}
	}

	public final MatchStatementContext matchStatement() throws RecognitionException {
		MatchStatementContext _localctx = new MatchStatementContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_matchStatement);
		try {
			setState(1899);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MATCH:
				enterOuterAlt(_localctx, 1);
				{
				setState(1897);
				simpleMatchStatement();
				}
				break;
			case OPTIONAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(1898);
				optionalMatchStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimpleMatchStatementContext extends ParserRuleContext {
		public TerminalNode MATCH() { return getToken(GQLParser.MATCH, 0); }
		public GraphPatternBindingTableContext graphPatternBindingTable() {
			return getRuleContext(GraphPatternBindingTableContext.class,0);
		}
		public SimpleMatchStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleMatchStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSimpleMatchStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSimpleMatchStatement(this);
		}
	}

	public final SimpleMatchStatementContext simpleMatchStatement() throws RecognitionException {
		SimpleMatchStatementContext _localctx = new SimpleMatchStatementContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_simpleMatchStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1901);
			match(MATCH);
			setState(1902);
			graphPatternBindingTable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptionalMatchStatementContext extends ParserRuleContext {
		public TerminalNode OPTIONAL() { return getToken(GQLParser.OPTIONAL, 0); }
		public OptionalOperandContext optionalOperand() {
			return getRuleContext(OptionalOperandContext.class,0);
		}
		public OptionalMatchStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optionalMatchStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterOptionalMatchStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitOptionalMatchStatement(this);
		}
	}

	public final OptionalMatchStatementContext optionalMatchStatement() throws RecognitionException {
		OptionalMatchStatementContext _localctx = new OptionalMatchStatementContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_optionalMatchStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1904);
			match(OPTIONAL);
			setState(1905);
			optionalOperand();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OptionalOperandContext extends ParserRuleContext {
		public SimpleMatchStatementContext simpleMatchStatement() {
			return getRuleContext(SimpleMatchStatementContext.class,0);
		}
		public TerminalNode LEFT_BRACE() { return getToken(GQLParser.LEFT_BRACE, 0); }
		public MatchStatementBlockContext matchStatementBlock() {
			return getRuleContext(MatchStatementBlockContext.class,0);
		}
		public TerminalNode RIGHT_BRACE() { return getToken(GQLParser.RIGHT_BRACE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public OptionalOperandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optionalOperand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterOptionalOperand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitOptionalOperand(this);
		}
	}

	public final OptionalOperandContext optionalOperand() throws RecognitionException {
		OptionalOperandContext _localctx = new OptionalOperandContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_optionalOperand);
		try {
			setState(1916);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MATCH:
				enterOuterAlt(_localctx, 1);
				{
				setState(1907);
				simpleMatchStatement();
				}
				break;
			case LEFT_BRACE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1908);
				match(LEFT_BRACE);
				setState(1909);
				matchStatementBlock();
				setState(1910);
				match(RIGHT_BRACE);
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 3);
				{
				setState(1912);
				match(LEFT_PAREN);
				setState(1913);
				matchStatementBlock();
				setState(1914);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MatchStatementBlockContext extends ParserRuleContext {
		public List<MatchStatementContext> matchStatement() {
			return getRuleContexts(MatchStatementContext.class);
		}
		public MatchStatementContext matchStatement(int i) {
			return getRuleContext(MatchStatementContext.class,i);
		}
		public MatchStatementBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_matchStatementBlock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterMatchStatementBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitMatchStatementBlock(this);
		}
	}

	public final MatchStatementBlockContext matchStatementBlock() throws RecognitionException {
		MatchStatementBlockContext _localctx = new MatchStatementBlockContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_matchStatementBlock);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1919); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1918);
				matchStatement();
				}
				}
				setState(1921); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==MATCH || _la==OPTIONAL );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CallQueryStatementContext extends ParserRuleContext {
		public CallProcedureStatementContext callProcedureStatement() {
			return getRuleContext(CallProcedureStatementContext.class,0);
		}
		public CallQueryStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_callQueryStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterCallQueryStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitCallQueryStatement(this);
		}
	}

	public final CallQueryStatementContext callQueryStatement() throws RecognitionException {
		CallQueryStatementContext _localctx = new CallQueryStatementContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_callQueryStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1923);
			callProcedureStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FilterStatementContext extends ParserRuleContext {
		public TerminalNode FILTER() { return getToken(GQLParser.FILTER, 0); }
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public FilterStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterFilterStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitFilterStatement(this);
		}
	}

	public final FilterStatementContext filterStatement() throws RecognitionException {
		FilterStatementContext _localctx = new FilterStatementContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_filterStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1925);
			match(FILTER);
			setState(1928);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,130,_ctx) ) {
			case 1:
				{
				setState(1926);
				whereClause();
				}
				break;
			case 2:
				{
				setState(1927);
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LetStatementContext extends ParserRuleContext {
		public TerminalNode LET() { return getToken(GQLParser.LET, 0); }
		public LetVariableDefinitionListContext letVariableDefinitionList() {
			return getRuleContext(LetVariableDefinitionListContext.class,0);
		}
		public LetStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_letStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterLetStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitLetStatement(this);
		}
	}

	public final LetStatementContext letStatement() throws RecognitionException {
		LetStatementContext _localctx = new LetStatementContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_letStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1930);
			match(LET);
			setState(1931);
			letVariableDefinitionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LetVariableDefinitionListContext extends ParserRuleContext {
		public List<LetVariableDefinitionContext> letVariableDefinition() {
			return getRuleContexts(LetVariableDefinitionContext.class);
		}
		public LetVariableDefinitionContext letVariableDefinition(int i) {
			return getRuleContext(LetVariableDefinitionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQLParser.COMMA, i);
		}
		public LetVariableDefinitionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_letVariableDefinitionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterLetVariableDefinitionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitLetVariableDefinitionList(this);
		}
	}

	public final LetVariableDefinitionListContext letVariableDefinitionList() throws RecognitionException {
		LetVariableDefinitionListContext _localctx = new LetVariableDefinitionListContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_letVariableDefinitionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1933);
			letVariableDefinition();
			setState(1938);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1934);
				match(COMMA);
				setState(1935);
				letVariableDefinition();
				}
				}
				setState(1940);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LetVariableDefinitionContext extends ParserRuleContext {
		public ValueVariableDefinitionContext valueVariableDefinition() {
			return getRuleContext(ValueVariableDefinitionContext.class,0);
		}
		public ValueVariableContext valueVariable() {
			return getRuleContext(ValueVariableContext.class,0);
		}
		public TerminalNode EQUALS_OPERATOR() { return getToken(GQLParser.EQUALS_OPERATOR, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public LetVariableDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_letVariableDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterLetVariableDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitLetVariableDefinition(this);
		}
	}

	public final LetVariableDefinitionContext letVariableDefinition() throws RecognitionException {
		LetVariableDefinitionContext _localctx = new LetVariableDefinitionContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_letVariableDefinition);
		try {
			setState(1946);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,132,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1941);
				valueVariableDefinition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1942);
				valueVariable();
				setState(1943);
				match(EQUALS_OPERATOR);
				setState(1944);
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ForStatementContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(GQLParser.FOR, 0); }
		public ForItemContext forItem() {
			return getRuleContext(ForItemContext.class,0);
		}
		public ForOrdinalityOrOffsetContext forOrdinalityOrOffset() {
			return getRuleContext(ForOrdinalityOrOffsetContext.class,0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterForStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitForStatement(this);
		}
	}

	public final ForStatementContext forStatement() throws RecognitionException {
		ForStatementContext _localctx = new ForStatementContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_forStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1948);
			match(FOR);
			setState(1949);
			forItem();
			setState(1951);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1950);
				forOrdinalityOrOffset();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ForItemContext extends ParserRuleContext {
		public ForItemAliasContext forItemAlias() {
			return getRuleContext(ForItemAliasContext.class,0);
		}
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public ForItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterForItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitForItem(this);
		}
	}

	public final ForItemContext forItem() throws RecognitionException {
		ForItemContext _localctx = new ForItemContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_forItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1953);
			forItemAlias();
			setState(1954);
			expressionAtom(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ForItemAliasContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode IN() { return getToken(GQLParser.IN, 0); }
		public ForItemAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forItemAlias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterForItemAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitForItemAlias(this);
		}
	}

	public final ForItemAliasContext forItemAlias() throws RecognitionException {
		ForItemAliasContext _localctx = new ForItemAliasContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_forItemAlias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1956);
			identifier();
			setState(1957);
			match(IN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ForOrdinalityOrOffsetContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(GQLParser.WITH, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ORDINALITY() { return getToken(GQLParser.ORDINALITY, 0); }
		public TerminalNode OFFSET() { return getToken(GQLParser.OFFSET, 0); }
		public ForOrdinalityOrOffsetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forOrdinalityOrOffset; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterForOrdinalityOrOffset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitForOrdinalityOrOffset(this);
		}
	}

	public final ForOrdinalityOrOffsetContext forOrdinalityOrOffset() throws RecognitionException {
		ForOrdinalityOrOffsetContext _localctx = new ForOrdinalityOrOffsetContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_forOrdinalityOrOffset);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1959);
			match(WITH);
			setState(1960);
			_la = _input.LA(1);
			if ( !(_la==OFFSET || _la==ORDINALITY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1961);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OrderByAndPageStatementContext extends ParserRuleContext {
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public OffsetClauseContext offsetClause() {
			return getRuleContext(OffsetClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public OrderByAndPageStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByAndPageStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterOrderByAndPageStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitOrderByAndPageStatement(this);
		}
	}

	public final OrderByAndPageStatementContext orderByAndPageStatement() throws RecognitionException {
		OrderByAndPageStatementContext _localctx = new OrderByAndPageStatementContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_orderByAndPageStatement);
		try {
			setState(1975);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ORDER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1963);
				orderByClause();
				setState(1965);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,134,_ctx) ) {
				case 1:
					{
					setState(1964);
					offsetClause();
					}
					break;
				}
				setState(1968);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,135,_ctx) ) {
				case 1:
					{
					setState(1967);
					limitClause();
					}
					break;
				}
				}
				break;
			case OFFSET:
			case SKIP_:
				enterOuterAlt(_localctx, 2);
				{
				setState(1970);
				offsetClause();
				setState(1972);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,136,_ctx) ) {
				case 1:
					{
					setState(1971);
					limitClause();
					}
					break;
				}
				}
				break;
			case LIMIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(1974);
				limitClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrimitiveResultStatementContext extends ParserRuleContext {
		public ReturnStatementContext returnStatement() {
			return getRuleContext(ReturnStatementContext.class,0);
		}
		public OrderByAndPageStatementContext orderByAndPageStatement() {
			return getRuleContext(OrderByAndPageStatementContext.class,0);
		}
		public TerminalNode FINISH() { return getToken(GQLParser.FINISH, 0); }
		public PrimitiveResultStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primitiveResultStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterPrimitiveResultStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitPrimitiveResultStatement(this);
		}
	}

	public final PrimitiveResultStatementContext primitiveResultStatement() throws RecognitionException {
		PrimitiveResultStatementContext _localctx = new PrimitiveResultStatementContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_primitiveResultStatement);
		try {
			setState(1982);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RETURN:
				enterOuterAlt(_localctx, 1);
				{
				setState(1977);
				returnStatement();
				setState(1979);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,138,_ctx) ) {
				case 1:
					{
					setState(1978);
					orderByAndPageStatement();
					}
					break;
				}
				}
				break;
			case FINISH:
				enterOuterAlt(_localctx, 2);
				{
				setState(1981);
				match(FINISH);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReturnStatementContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(GQLParser.RETURN, 0); }
		public ReturnStatementBodyContext returnStatementBody() {
			return getRuleContext(ReturnStatementBodyContext.class,0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returnStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterReturnStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitReturnStatement(this);
		}
	}

	public final ReturnStatementContext returnStatement() throws RecognitionException {
		ReturnStatementContext _localctx = new ReturnStatementContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_returnStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1984);
			match(RETURN);
			setState(1985);
			returnStatementBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReturnStatementBodyContext extends ParserRuleContext {
		public TerminalNode ASTERISK() { return getToken(GQLParser.ASTERISK, 0); }
		public ReturnItemListContext returnItemList() {
			return getRuleContext(ReturnItemListContext.class,0);
		}
		public SetQuantifierContext setQuantifier() {
			return getRuleContext(SetQuantifierContext.class,0);
		}
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public TerminalNode NO() { return getToken(GQLParser.NO, 0); }
		public TerminalNode BINDINGS() { return getToken(GQLParser.BINDINGS, 0); }
		public ReturnStatementBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returnStatementBody; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterReturnStatementBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitReturnStatementBody(this);
		}
	}

	public final ReturnStatementBodyContext returnStatementBody() throws RecognitionException {
		ReturnStatementBodyContext _localctx = new ReturnStatementBodyContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_returnStatementBody);
		try {
			setState(1999);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,143,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1988);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,140,_ctx) ) {
				case 1:
					{
					setState(1987);
					setQuantifier();
					}
					break;
				}
				setState(1992);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ASTERISK:
					{
					setState(1990);
					match(ASTERISK);
					}
					break;
				case DOLLAR_SIGN:
				case EXCLAMATION_MARK:
				case LEFT_BRACE:
				case LEFT_BRACKET:
				case LEFT_PAREN:
				case MINUS_SIGN:
				case PLUS_SIGN:
				case ABS:
				case ACOS:
				case ACYCLIC:
				case ALL:
				case ALL_DIFFERENT:
				case AND:
				case ANY:
				case ARRAY:
				case AS:
				case ASC:
				case ASCENDING:
				case ASIN:
				case AT:
				case ATAN:
				case AVG:
				case BIG:
				case BIGINT:
				case BINARY:
				case BINDING:
				case BINDINGS:
				case BOOL:
				case BOOLEAN:
				case BOTH:
				case BTRIM:
				case BY:
				case BYTE_LENGTH:
				case BYTES:
				case CALL:
				case CASE:
				case CAST:
				case CEIL:
				case CEILING:
				case CHAR_LENGTH:
				case CHARACTER_LENGTH:
				case CHARACTERISTICS:
				case CLOSE:
				case COALESCE:
				case COLLECT:
				case COMMIT:
				case CONNECTING:
				case COPY:
				case COS:
				case COSH:
				case COT:
				case COUNT:
				case CREATE:
				case CURRENT_DATE:
				case CURRENT_GRAPH:
				case CURRENT_PROPERTY_GRAPH:
				case CURRENT_SCHEMA:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DATE:
				case DATETIME:
				case DEC:
				case DECIMAL:
				case DEGREES:
				case DELETE:
				case DESC:
				case DESCENDING:
				case DESTINATION:
				case DETACH:
				case DIFFERENT:
				case DIRECTED:
				case DISTINCT:
				case DOUBLE:
				case DROP:
				case DURATION:
				case DURATION_BETWEEN:
				case ELEMENT:
				case ELEMENT_ID:
				case ELEMENTS:
				case ELSE:
				case END:
				case EXCEPT:
				case EXISTS:
				case EXP:
				case K_FALSE:
				case FILTER:
				case FINISH:
				case FIRST:
				case FLOAT:
				case FLOAT128:
				case FLOAT16:
				case FLOAT256:
				case FLOAT32:
				case FLOAT64:
				case FLOOR:
				case FOR:
				case FROM:
				case GRAPH:
				case GROUP:
				case GROUPS:
				case HAVING:
				case HOME_GRAPH:
				case HOME_PROPERTY_GRAPH:
				case HOME_SCHEMA:
				case I_DONT_KNOW_1:
				case I_DONT_KNOW_2:
				case I_DONT_KNOW_3:
				case I_DONT_KNOW_4:
				case I_DONT_KNOW_5:
				case IF:
				case IN:
				case INSERT:
				case INT:
				case INT8:
				case INT16:
				case INT32:
				case INT64:
				case INT128:
				case INT256:
				case INTEGER:
				case INTEGER8:
				case INTEGER16:
				case INTEGER32:
				case INTEGER64:
				case INTEGER128:
				case INTEGER256:
				case INTERSECT:
				case IS:
				case KEEP:
				case LABEL:
				case LABELED:
				case LABELS:
				case LAST:
				case LEADING:
				case LEFT:
				case LET:
				case LIKE:
				case LIMIT:
				case LIST:
				case LN:
				case LOCAL:
				case LOCAL_DATETIME:
				case LOCAL_TIME:
				case LOCAL_TIMESTAMP:
				case LOG:
				case LOG10:
				case LOWER:
				case LTRIM:
				case MATCH:
				case MAX:
				case MIN:
				case MOD:
				case NEXT:
				case NFC:
				case NFD:
				case NFKC:
				case NFKD:
				case NO:
				case NODETACH:
				case NORMALIZE:
				case NORMALIZED:
				case NOT:
				case NULL:
				case NULLIF:
				case NULLS:
				case OCTET_LENGTH:
				case OF:
				case OFFSET:
				case SKIP_:
				case ONLY:
				case OPEN:
				case OPTIONAL:
				case OR:
				case ORDER:
				case ORDINALITY:
				case OTHERWISE:
				case PARAMETER:
				case PARAMETERS:
				case PATH:
				case PATH_LENGTH:
				case PATHS:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case POWER:
				case PRECISION:
				case PROPERTY:
				case PROPERTY_EXISTS:
				case RADIANS:
				case READ:
				case REAL:
				case RECORD:
				case REMOVE:
				case REPEATABLE:
				case REPLACE:
				case RESET:
				case RETURN:
				case ROLLBACK:
				case RTRIM:
				case RIGHT:
				case SAME:
				case SCHEMA:
				case SELECT:
				case SESSION:
				case SET:
				case SHORTEST:
				case SIGNED:
				case SIMPLE:
				case SIN:
				case SINH:
				case SMALL:
				case SMALLINT:
				case SOURCE:
				case SQRT:
				case START:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case STRING:
				case SUM:
				case TABLE:
				case TAN:
				case TANH:
				case TEMP:
				case THEN:
				case TIME:
				case TIMESTAMP:
				case TIMEZONE:
				case TO:
				case TRAIL:
				case TRAILING:
				case TRANSACTION:
				case TRIM:
				case K_TRUE:
				case TYPE:
				case TYPED:
				case UBIGINT:
				case UINT:
				case UINT128:
				case UINT16:
				case UINT256:
				case UINT32:
				case UINT64:
				case UINT8:
				case UNDIRECTED:
				case UNION:
				case UNKNOWN:
				case UNSIGNED:
				case UPPER:
				case USE:
				case USMALLINT:
				case VALUE:
				case VARBINARY:
				case VARCHAR:
				case VARIABLE:
				case WALK:
				case WHEN:
				case WHERE:
				case WITH:
				case WITHOUT:
				case WRITE:
				case XOR:
				case YIELD:
				case ZONE:
				case ZONED:
				case ZONED_DATETIME:
				case ZONED_TIME:
				case INTERVAL_DAY:
				case INTERVAL_WEEK:
				case INTERVAL_MONTH:
				case INTERVAL_YEAR:
				case EDGE_SYNONYM:
				case EDGES_SYNONYM:
				case NODE_SYNONYM:
				case KEY_WORD:
				case PRE_RESERVED_WORD:
				case UNSIGNED_DECIMAL_INTEGER:
				case UNSIGNED_HEXADECIMAL_INTEGER:
				case UNSIGNED_OCTAL_INTEGER:
				case UNSIGNED_BINARY_INTEGER:
				case UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION:
				case UNSIGNED_DECIMAL_IN_COMMON_NOTATION:
				case SINGLE_QUOTED_STRING_LITERAL:
				case DOUBLE_QUOTED_STRING_LITERAL:
				case ACCENT_QUOTED_STRING_LITERAL:
				case BYTE_STRING_LITERAL:
				case REGULAR_IDENTIFIER:
					{
					setState(1991);
					returnItemList();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1995);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,142,_ctx) ) {
				case 1:
					{
					setState(1994);
					groupByClause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1997);
				match(NO);
				setState(1998);
				match(BINDINGS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReturnItemListContext extends ParserRuleContext {
		public List<ReturnItemContext> returnItem() {
			return getRuleContexts(ReturnItemContext.class);
		}
		public ReturnItemContext returnItem(int i) {
			return getRuleContext(ReturnItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQLParser.COMMA, i);
		}
		public ReturnItemListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returnItemList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterReturnItemList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitReturnItemList(this);
		}
	}

	public final ReturnItemListContext returnItemList() throws RecognitionException {
		ReturnItemListContext _localctx = new ReturnItemListContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_returnItemList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2001);
			returnItem();
			setState(2006);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,144,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2002);
					match(COMMA);
					setState(2003);
					returnItem();
					}
					} 
				}
				setState(2008);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,144,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReturnItemContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ReturnItemAliasContext returnItemAlias() {
			return getRuleContext(ReturnItemAliasContext.class,0);
		}
		public ReturnItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returnItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterReturnItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitReturnItem(this);
		}
	}

	public final ReturnItemContext returnItem() throws RecognitionException {
		ReturnItemContext _localctx = new ReturnItemContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_returnItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2009);
			expression(0);
			setState(2011);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,145,_ctx) ) {
			case 1:
				{
				setState(2010);
				returnItemAlias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReturnItemAliasContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(GQLParser.AS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ReturnItemAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returnItemAlias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterReturnItemAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitReturnItemAlias(this);
		}
	}

	public final ReturnItemAliasContext returnItemAlias() throws RecognitionException {
		ReturnItemAliasContext _localctx = new ReturnItemAliasContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_returnItemAlias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2013);
			match(AS);
			setState(2014);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectStatementContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(GQLParser.SELECT, 0); }
		public TerminalNode ASTERISK() { return getToken(GQLParser.ASTERISK, 0); }
		public SelectItemListContext selectItemList() {
			return getRuleContext(SelectItemListContext.class,0);
		}
		public SetQuantifierContext setQuantifier() {
			return getRuleContext(SetQuantifierContext.class,0);
		}
		public SelectStatementBodyContext selectStatementBody() {
			return getRuleContext(SelectStatementBodyContext.class,0);
		}
		public WhereClauseContext whereClause() {
			return getRuleContext(WhereClauseContext.class,0);
		}
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public OffsetClauseContext offsetClause() {
			return getRuleContext(OffsetClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public SelectStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSelectStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSelectStatement(this);
		}
	}

	public final SelectStatementContext selectStatement() throws RecognitionException {
		SelectStatementContext _localctx = new SelectStatementContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_selectStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2016);
			match(SELECT);
			setState(2018);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,146,_ctx) ) {
			case 1:
				{
				setState(2017);
				setQuantifier();
				}
				break;
			}
			setState(2022);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASTERISK:
				{
				setState(2020);
				match(ASTERISK);
				}
				break;
			case DOLLAR_SIGN:
			case EXCLAMATION_MARK:
			case LEFT_BRACE:
			case LEFT_BRACKET:
			case LEFT_PAREN:
			case MINUS_SIGN:
			case PLUS_SIGN:
			case ABS:
			case ACOS:
			case ACYCLIC:
			case ALL:
			case ALL_DIFFERENT:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASCENDING:
			case ASIN:
			case AT:
			case ATAN:
			case AVG:
			case BIG:
			case BIGINT:
			case BINARY:
			case BINDING:
			case BINDINGS:
			case BOOL:
			case BOOLEAN:
			case BOTH:
			case BTRIM:
			case BY:
			case BYTE_LENGTH:
			case BYTES:
			case CALL:
			case CASE:
			case CAST:
			case CEIL:
			case CEILING:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case CHARACTERISTICS:
			case CLOSE:
			case COALESCE:
			case COLLECT:
			case COMMIT:
			case CONNECTING:
			case COPY:
			case COS:
			case COSH:
			case COT:
			case COUNT:
			case CREATE:
			case CURRENT_DATE:
			case CURRENT_GRAPH:
			case CURRENT_PROPERTY_GRAPH:
			case CURRENT_SCHEMA:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DATE:
			case DATETIME:
			case DEC:
			case DECIMAL:
			case DEGREES:
			case DELETE:
			case DESC:
			case DESCENDING:
			case DESTINATION:
			case DETACH:
			case DIFFERENT:
			case DIRECTED:
			case DISTINCT:
			case DOUBLE:
			case DROP:
			case DURATION:
			case DURATION_BETWEEN:
			case ELEMENT:
			case ELEMENT_ID:
			case ELEMENTS:
			case ELSE:
			case END:
			case EXCEPT:
			case EXISTS:
			case EXP:
			case K_FALSE:
			case FILTER:
			case FINISH:
			case FIRST:
			case FLOAT:
			case FLOAT128:
			case FLOAT16:
			case FLOAT256:
			case FLOAT32:
			case FLOAT64:
			case FLOOR:
			case FOR:
			case FROM:
			case GRAPH:
			case GROUP:
			case GROUPS:
			case HAVING:
			case HOME_GRAPH:
			case HOME_PROPERTY_GRAPH:
			case HOME_SCHEMA:
			case I_DONT_KNOW_1:
			case I_DONT_KNOW_2:
			case I_DONT_KNOW_3:
			case I_DONT_KNOW_4:
			case I_DONT_KNOW_5:
			case IF:
			case IN:
			case INSERT:
			case INT:
			case INT8:
			case INT16:
			case INT32:
			case INT64:
			case INT128:
			case INT256:
			case INTEGER:
			case INTEGER8:
			case INTEGER16:
			case INTEGER32:
			case INTEGER64:
			case INTEGER128:
			case INTEGER256:
			case INTERSECT:
			case IS:
			case KEEP:
			case LABEL:
			case LABELED:
			case LABELS:
			case LAST:
			case LEADING:
			case LEFT:
			case LET:
			case LIKE:
			case LIMIT:
			case LIST:
			case LN:
			case LOCAL:
			case LOCAL_DATETIME:
			case LOCAL_TIME:
			case LOCAL_TIMESTAMP:
			case LOG:
			case LOG10:
			case LOWER:
			case LTRIM:
			case MATCH:
			case MAX:
			case MIN:
			case MOD:
			case NEXT:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case NO:
			case NODETACH:
			case NORMALIZE:
			case NORMALIZED:
			case NOT:
			case NULL:
			case NULLIF:
			case NULLS:
			case OCTET_LENGTH:
			case OF:
			case OFFSET:
			case SKIP_:
			case ONLY:
			case OPEN:
			case OPTIONAL:
			case OR:
			case ORDER:
			case ORDINALITY:
			case OTHERWISE:
			case PARAMETER:
			case PARAMETERS:
			case PATH:
			case PATH_LENGTH:
			case PATHS:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POWER:
			case PRECISION:
			case PROPERTY:
			case PROPERTY_EXISTS:
			case RADIANS:
			case READ:
			case REAL:
			case RECORD:
			case REMOVE:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RETURN:
			case ROLLBACK:
			case RTRIM:
			case RIGHT:
			case SAME:
			case SCHEMA:
			case SELECT:
			case SESSION:
			case SET:
			case SHORTEST:
			case SIGNED:
			case SIMPLE:
			case SIN:
			case SINH:
			case SMALL:
			case SMALLINT:
			case SOURCE:
			case SQRT:
			case START:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STRING:
			case SUM:
			case TABLE:
			case TAN:
			case TANH:
			case TEMP:
			case THEN:
			case TIME:
			case TIMESTAMP:
			case TIMEZONE:
			case TO:
			case TRAIL:
			case TRAILING:
			case TRANSACTION:
			case TRIM:
			case K_TRUE:
			case TYPE:
			case TYPED:
			case UBIGINT:
			case UINT:
			case UINT128:
			case UINT16:
			case UINT256:
			case UINT32:
			case UINT64:
			case UINT8:
			case UNDIRECTED:
			case UNION:
			case UNKNOWN:
			case UNSIGNED:
			case UPPER:
			case USE:
			case USMALLINT:
			case VALUE:
			case VARBINARY:
			case VARCHAR:
			case VARIABLE:
			case WALK:
			case WHEN:
			case WHERE:
			case WITH:
			case WITHOUT:
			case WRITE:
			case XOR:
			case YIELD:
			case ZONE:
			case ZONED:
			case ZONED_DATETIME:
			case ZONED_TIME:
			case INTERVAL_DAY:
			case INTERVAL_WEEK:
			case INTERVAL_MONTH:
			case INTERVAL_YEAR:
			case EDGE_SYNONYM:
			case EDGES_SYNONYM:
			case NODE_SYNONYM:
			case KEY_WORD:
			case PRE_RESERVED_WORD:
			case UNSIGNED_DECIMAL_INTEGER:
			case UNSIGNED_HEXADECIMAL_INTEGER:
			case UNSIGNED_OCTAL_INTEGER:
			case UNSIGNED_BINARY_INTEGER:
			case UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION:
			case UNSIGNED_DECIMAL_IN_COMMON_NOTATION:
			case SINGLE_QUOTED_STRING_LITERAL:
			case DOUBLE_QUOTED_STRING_LITERAL:
			case ACCENT_QUOTED_STRING_LITERAL:
			case BYTE_STRING_LITERAL:
			case REGULAR_IDENTIFIER:
				{
				setState(2021);
				selectItemList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2043);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,154,_ctx) ) {
			case 1:
				{
				setState(2024);
				selectStatementBody();
				setState(2026);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,148,_ctx) ) {
				case 1:
					{
					setState(2025);
					whereClause();
					}
					break;
				}
				setState(2029);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,149,_ctx) ) {
				case 1:
					{
					setState(2028);
					groupByClause();
					}
					break;
				}
				setState(2032);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,150,_ctx) ) {
				case 1:
					{
					setState(2031);
					havingClause();
					}
					break;
				}
				setState(2035);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,151,_ctx) ) {
				case 1:
					{
					setState(2034);
					orderByClause();
					}
					break;
				}
				setState(2038);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,152,_ctx) ) {
				case 1:
					{
					setState(2037);
					offsetClause();
					}
					break;
				}
				setState(2041);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,153,_ctx) ) {
				case 1:
					{
					setState(2040);
					limitClause();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectItemListContext extends ParserRuleContext {
		public List<SelectItemContext> selectItem() {
			return getRuleContexts(SelectItemContext.class);
		}
		public SelectItemContext selectItem(int i) {
			return getRuleContext(SelectItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQLParser.COMMA, i);
		}
		public SelectItemListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectItemList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSelectItemList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSelectItemList(this);
		}
	}

	public final SelectItemListContext selectItemList() throws RecognitionException {
		SelectItemListContext _localctx = new SelectItemListContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_selectItemList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2045);
			selectItem();
			setState(2050);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,155,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2046);
					match(COMMA);
					setState(2047);
					selectItem();
					}
					} 
				}
				setState(2052);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,155,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectItemContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public SelectItemAliasContext selectItemAlias() {
			return getRuleContext(SelectItemAliasContext.class,0);
		}
		public SelectItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSelectItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSelectItem(this);
		}
	}

	public final SelectItemContext selectItem() throws RecognitionException {
		SelectItemContext _localctx = new SelectItemContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_selectItem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2053);
			expression(0);
			setState(2055);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,156,_ctx) ) {
			case 1:
				{
				setState(2054);
				selectItemAlias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectItemAliasContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(GQLParser.AS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SelectItemAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectItemAlias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSelectItemAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSelectItemAlias(this);
		}
	}

	public final SelectItemAliasContext selectItemAlias() throws RecognitionException {
		SelectItemAliasContext _localctx = new SelectItemAliasContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_selectItemAlias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2057);
			match(AS);
			setState(2058);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HavingClauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(GQLParser.HAVING, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_havingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterHavingClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitHavingClause(this);
		}
	}

	public final HavingClauseContext havingClause() throws RecognitionException {
		HavingClauseContext _localctx = new HavingClauseContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_havingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2060);
			match(HAVING);
			setState(2061);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectStatementBodyContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(GQLParser.FROM, 0); }
		public SelectGraphMatchListContext selectGraphMatchList() {
			return getRuleContext(SelectGraphMatchListContext.class,0);
		}
		public SelectQuerySpecificationContext selectQuerySpecification() {
			return getRuleContext(SelectQuerySpecificationContext.class,0);
		}
		public SelectStatementBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectStatementBody; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSelectStatementBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSelectStatementBody(this);
		}
	}

	public final SelectStatementBodyContext selectStatementBody() throws RecognitionException {
		SelectStatementBodyContext _localctx = new SelectStatementBodyContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_selectStatementBody);
		try {
			setState(2067);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,157,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2063);
				match(FROM);
				setState(2064);
				selectGraphMatchList();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2065);
				match(FROM);
				setState(2066);
				selectQuerySpecification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectGraphMatchListContext extends ParserRuleContext {
		public List<SelectGraphMatchContext> selectGraphMatch() {
			return getRuleContexts(SelectGraphMatchContext.class);
		}
		public SelectGraphMatchContext selectGraphMatch(int i) {
			return getRuleContext(SelectGraphMatchContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQLParser.COMMA, i);
		}
		public SelectGraphMatchListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectGraphMatchList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSelectGraphMatchList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSelectGraphMatchList(this);
		}
	}

	public final SelectGraphMatchListContext selectGraphMatchList() throws RecognitionException {
		SelectGraphMatchListContext _localctx = new SelectGraphMatchListContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_selectGraphMatchList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2069);
			selectGraphMatch();
			setState(2074);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,158,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2070);
					match(COMMA);
					setState(2071);
					selectGraphMatch();
					}
					} 
				}
				setState(2076);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,158,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectGraphMatchContext extends ParserRuleContext {
		public GraphExpressionContext graphExpression() {
			return getRuleContext(GraphExpressionContext.class,0);
		}
		public MatchStatementContext matchStatement() {
			return getRuleContext(MatchStatementContext.class,0);
		}
		public SelectGraphMatchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectGraphMatch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSelectGraphMatch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSelectGraphMatch(this);
		}
	}

	public final SelectGraphMatchContext selectGraphMatch() throws RecognitionException {
		SelectGraphMatchContext _localctx = new SelectGraphMatchContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_selectGraphMatch);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2077);
			graphExpression();
			setState(2078);
			matchStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SelectQuerySpecificationContext extends ParserRuleContext {
		public NestedQuerySpecificationContext nestedQuerySpecification() {
			return getRuleContext(NestedQuerySpecificationContext.class,0);
		}
		public GraphExpressionContext graphExpression() {
			return getRuleContext(GraphExpressionContext.class,0);
		}
		public SelectQuerySpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectQuerySpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSelectQuerySpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSelectQuerySpecification(this);
		}
	}

	public final SelectQuerySpecificationContext selectQuerySpecification() throws RecognitionException {
		SelectQuerySpecificationContext _localctx = new SelectQuerySpecificationContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_selectQuerySpecification);
		try {
			setState(2084);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,159,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2080);
				nestedQuerySpecification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2081);
				graphExpression();
				setState(2082);
				nestedQuerySpecification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CallProcedureStatementContext extends ParserRuleContext {
		public TerminalNode CALL() { return getToken(GQLParser.CALL, 0); }
		public ProcedureCallContext procedureCall() {
			return getRuleContext(ProcedureCallContext.class,0);
		}
		public TerminalNode OPTIONAL() { return getToken(GQLParser.OPTIONAL, 0); }
		public CallProcedureStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_callProcedureStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterCallProcedureStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitCallProcedureStatement(this);
		}
	}

	public final CallProcedureStatementContext callProcedureStatement() throws RecognitionException {
		CallProcedureStatementContext _localctx = new CallProcedureStatementContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_callProcedureStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2087);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTIONAL) {
				{
				setState(2086);
				match(OPTIONAL);
				}
			}

			setState(2089);
			match(CALL);
			setState(2090);
			procedureCall();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ProcedureCallContext extends ParserRuleContext {
		public InlineProcedureCallContext inlineProcedureCall() {
			return getRuleContext(InlineProcedureCallContext.class,0);
		}
		public NamedProcedureCallContext namedProcedureCall() {
			return getRuleContext(NamedProcedureCallContext.class,0);
		}
		public ProcedureCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureCall; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterProcedureCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitProcedureCall(this);
		}
	}

	public final ProcedureCallContext procedureCall() throws RecognitionException {
		ProcedureCallContext _localctx = new ProcedureCallContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_procedureCall);
		try {
			setState(2094);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_BRACE:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 1);
				{
				setState(2092);
				inlineProcedureCall();
				}
				break;
			case DOLLAR_SIGN:
			case PERIOD:
			case SOLIDUS:
			case CURRENT_SCHEMA:
			case HOME_SCHEMA:
			case DOUBLE_PERIOD:
			case DOUBLE_QUOTED_STRING_LITERAL:
			case ACCENT_QUOTED_STRING_LITERAL:
			case REGULAR_IDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				setState(2093);
				namedProcedureCall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InlineProcedureCallContext extends ParserRuleContext {
		public NestedProcedureSpecificationContext nestedProcedureSpecification() {
			return getRuleContext(NestedProcedureSpecificationContext.class,0);
		}
		public VariableScopeClauseContext variableScopeClause() {
			return getRuleContext(VariableScopeClauseContext.class,0);
		}
		public InlineProcedureCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_inlineProcedureCall; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterInlineProcedureCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitInlineProcedureCall(this);
		}
	}

	public final InlineProcedureCallContext inlineProcedureCall() throws RecognitionException {
		InlineProcedureCallContext _localctx = new InlineProcedureCallContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_inlineProcedureCall);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2097);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2096);
				variableScopeClause();
				}
			}

			setState(2099);
			nestedProcedureSpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VariableScopeClauseContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public BindingVariableReferenceListContext bindingVariableReferenceList() {
			return getRuleContext(BindingVariableReferenceListContext.class,0);
		}
		public VariableScopeClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableScopeClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterVariableScopeClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitVariableScopeClause(this);
		}
	}

	public final VariableScopeClauseContext variableScopeClause() throws RecognitionException {
		VariableScopeClauseContext _localctx = new VariableScopeClauseContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_variableScopeClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2101);
			match(LEFT_PAREN);
			setState(2103);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & -1L) != 0) || ((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & -1L) != 0) || ((((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & -1L) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -1L) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & 603482350067652607L) != 0)) {
				{
				setState(2102);
				bindingVariableReferenceList();
				}
			}

			setState(2105);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BindingVariableReferenceListContext extends ParserRuleContext {
		public List<BindingVariableReferenceContext> bindingVariableReference() {
			return getRuleContexts(BindingVariableReferenceContext.class);
		}
		public BindingVariableReferenceContext bindingVariableReference(int i) {
			return getRuleContext(BindingVariableReferenceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQLParser.COMMA, i);
		}
		public BindingVariableReferenceListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bindingVariableReferenceList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterBindingVariableReferenceList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitBindingVariableReferenceList(this);
		}
	}

	public final BindingVariableReferenceListContext bindingVariableReferenceList() throws RecognitionException {
		BindingVariableReferenceListContext _localctx = new BindingVariableReferenceListContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_bindingVariableReferenceList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2107);
			bindingVariableReference();
			setState(2112);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2108);
				match(COMMA);
				setState(2109);
				bindingVariableReference();
				}
				}
				setState(2114);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NamedProcedureCallContext extends ParserRuleContext {
		public ProcedureReferenceContext procedureReference() {
			return getRuleContext(ProcedureReferenceContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public ProcedureArgumentListContext procedureArgumentList() {
			return getRuleContext(ProcedureArgumentListContext.class,0);
		}
		public YieldClauseContext yieldClause() {
			return getRuleContext(YieldClauseContext.class,0);
		}
		public NamedProcedureCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_namedProcedureCall; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterNamedProcedureCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitNamedProcedureCall(this);
		}
	}

	public final NamedProcedureCallContext namedProcedureCall() throws RecognitionException {
		NamedProcedureCallContext _localctx = new NamedProcedureCallContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_namedProcedureCall);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2115);
			procedureReference();
			setState(2116);
			match(LEFT_PAREN);
			setState(2118);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -268280512L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -1L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -1L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & 1649267441663L) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & 36671L) != 0)) {
				{
				setState(2117);
				procedureArgumentList();
				}
			}

			setState(2120);
			match(RIGHT_PAREN);
			setState(2122);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==YIELD) {
				{
				setState(2121);
				yieldClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ProcedureArgumentListContext extends ParserRuleContext {
		public List<ProcedureArgumentContext> procedureArgument() {
			return getRuleContexts(ProcedureArgumentContext.class);
		}
		public ProcedureArgumentContext procedureArgument(int i) {
			return getRuleContext(ProcedureArgumentContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQLParser.COMMA, i);
		}
		public ProcedureArgumentListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureArgumentList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterProcedureArgumentList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitProcedureArgumentList(this);
		}
	}

	public final ProcedureArgumentListContext procedureArgumentList() throws RecognitionException {
		ProcedureArgumentListContext _localctx = new ProcedureArgumentListContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_procedureArgumentList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2124);
			procedureArgument();
			setState(2129);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2125);
				match(COMMA);
				setState(2126);
				procedureArgument();
				}
				}
				setState(2131);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ProcedureArgumentContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ProcedureArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureArgument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterProcedureArgument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitProcedureArgument(this);
		}
	}

	public final ProcedureArgumentContext procedureArgument() throws RecognitionException {
		ProcedureArgumentContext _localctx = new ProcedureArgumentContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_procedureArgument);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2132);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UseGraphClauseContext extends ParserRuleContext {
		public TerminalNode USE() { return getToken(GQLParser.USE, 0); }
		public GraphExpressionContext graphExpression() {
			return getRuleContext(GraphExpressionContext.class,0);
		}
		public UseGraphClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_useGraphClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterUseGraphClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitUseGraphClause(this);
		}
	}

	public final UseGraphClauseContext useGraphClause() throws RecognitionException {
		UseGraphClauseContext _localctx = new UseGraphClauseContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_useGraphClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2134);
			match(USE);
			setState(2135);
			graphExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AtSchemaClauseContext extends ParserRuleContext {
		public TerminalNode AT() { return getToken(GQLParser.AT, 0); }
		public SchemaReferenceContext schemaReference() {
			return getRuleContext(SchemaReferenceContext.class,0);
		}
		public AtSchemaClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_atSchemaClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterAtSchemaClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitAtSchemaClause(this);
		}
	}

	public final AtSchemaClauseContext atSchemaClause() throws RecognitionException {
		AtSchemaClauseContext _localctx = new AtSchemaClauseContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_atSchemaClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2137);
			match(AT);
			setState(2138);
			schemaReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BindingVariableReferenceContext extends ParserRuleContext {
		public BindingVariableContext bindingVariable() {
			return getRuleContext(BindingVariableContext.class,0);
		}
		public BindingVariableReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bindingVariableReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterBindingVariableReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitBindingVariableReference(this);
		}
	}

	public final BindingVariableReferenceContext bindingVariableReference() throws RecognitionException {
		BindingVariableReferenceContext _localctx = new BindingVariableReferenceContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_bindingVariableReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2140);
			bindingVariable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ElementVariableReferenceContext extends ParserRuleContext {
		public BindingVariableReferenceContext bindingVariableReference() {
			return getRuleContext(BindingVariableReferenceContext.class,0);
		}
		public ElementVariableReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elementVariableReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterElementVariableReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitElementVariableReference(this);
		}
	}

	public final ElementVariableReferenceContext elementVariableReference() throws RecognitionException {
		ElementVariableReferenceContext _localctx = new ElementVariableReferenceContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_elementVariableReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2142);
			bindingVariableReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PathVariableReferenceContext extends ParserRuleContext {
		public BindingVariableReferenceContext bindingVariableReference() {
			return getRuleContext(BindingVariableReferenceContext.class,0);
		}
		public PathVariableReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pathVariableReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterPathVariableReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitPathVariableReference(this);
		}
	}

	public final PathVariableReferenceContext pathVariableReference() throws RecognitionException {
		PathVariableReferenceContext _localctx = new PathVariableReferenceContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_pathVariableReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2144);
			bindingVariableReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ParameterContext extends ParserRuleContext {
		public ParameterNameContext parameterName() {
			return getRuleContext(ParameterNameContext.class,0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitParameter(this);
		}
	}

	public final ParameterContext parameter() throws RecognitionException {
		ParameterContext _localctx = new ParameterContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_parameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2146);
			parameterName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GraphPatternBindingTableContext extends ParserRuleContext {
		public GraphPatternContext graphPattern() {
			return getRuleContext(GraphPatternContext.class,0);
		}
		public GraphPatternYieldClauseContext graphPatternYieldClause() {
			return getRuleContext(GraphPatternYieldClauseContext.class,0);
		}
		public GraphPatternBindingTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_graphPatternBindingTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGraphPatternBindingTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGraphPatternBindingTable(this);
		}
	}

	public final GraphPatternBindingTableContext graphPatternBindingTable() throws RecognitionException {
		GraphPatternBindingTableContext _localctx = new GraphPatternBindingTableContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_graphPatternBindingTable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2148);
			graphPattern();
			setState(2150);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,168,_ctx) ) {
			case 1:
				{
				setState(2149);
				graphPatternYieldClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GraphPatternYieldClauseContext extends ParserRuleContext {
		public TerminalNode YIELD() { return getToken(GQLParser.YIELD, 0); }
		public GraphPatternYieldItemListContext graphPatternYieldItemList() {
			return getRuleContext(GraphPatternYieldItemListContext.class,0);
		}
		public GraphPatternYieldClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_graphPatternYieldClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGraphPatternYieldClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGraphPatternYieldClause(this);
		}
	}

	public final GraphPatternYieldClauseContext graphPatternYieldClause() throws RecognitionException {
		GraphPatternYieldClauseContext _localctx = new GraphPatternYieldClauseContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_graphPatternYieldClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2152);
			match(YIELD);
			setState(2153);
			graphPatternYieldItemList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GraphPatternYieldItemListContext extends ParserRuleContext {
		public List<GraphPatternYieldItemContext> graphPatternYieldItem() {
			return getRuleContexts(GraphPatternYieldItemContext.class);
		}
		public GraphPatternYieldItemContext graphPatternYieldItem(int i) {
			return getRuleContext(GraphPatternYieldItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQLParser.COMMA, i);
		}
		public TerminalNode NO() { return getToken(GQLParser.NO, 0); }
		public TerminalNode BINDINGS() { return getToken(GQLParser.BINDINGS, 0); }
		public GraphPatternYieldItemListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_graphPatternYieldItemList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGraphPatternYieldItemList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGraphPatternYieldItemList(this);
		}
	}

	public final GraphPatternYieldItemListContext graphPatternYieldItemList() throws RecognitionException {
		GraphPatternYieldItemListContext _localctx = new GraphPatternYieldItemListContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_graphPatternYieldItemList);
		try {
			int _alt;
			setState(2165);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,170,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2155);
				graphPatternYieldItem();
				setState(2160);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,169,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2156);
						match(COMMA);
						setState(2157);
						graphPatternYieldItem();
						}
						} 
					}
					setState(2162);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,169,_ctx);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2163);
				match(NO);
				setState(2164);
				match(BINDINGS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GraphPatternYieldItemContext extends ParserRuleContext {
		public ElementVariableReferenceContext elementVariableReference() {
			return getRuleContext(ElementVariableReferenceContext.class,0);
		}
		public PathVariableReferenceContext pathVariableReference() {
			return getRuleContext(PathVariableReferenceContext.class,0);
		}
		public GraphPatternYieldItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_graphPatternYieldItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGraphPatternYieldItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGraphPatternYieldItem(this);
		}
	}

	public final GraphPatternYieldItemContext graphPatternYieldItem() throws RecognitionException {
		GraphPatternYieldItemContext _localctx = new GraphPatternYieldItemContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_graphPatternYieldItem);
		try {
			setState(2169);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,171,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2167);
				elementVariableReference();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2168);
				pathVariableReference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GraphPatternContext extends ParserRuleContext {
		public PathPatternListContext pathPatternList() {
			return getRuleContext(PathPatternListContext.class,0);
		}
		public MatchModeContext matchMode() {
			return getRuleContext(MatchModeContext.class,0);
		}
		public KeepClauseContext keepClause() {
			return getRuleContext(KeepClauseContext.class,0);
		}
		public GraphPatternWhereClauseContext graphPatternWhereClause() {
			return getRuleContext(GraphPatternWhereClauseContext.class,0);
		}
		public GraphPatternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_graphPattern; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGraphPattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGraphPattern(this);
		}
	}

	public final GraphPatternContext graphPattern() throws RecognitionException {
		GraphPatternContext _localctx = new GraphPatternContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_graphPattern);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2172);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,172,_ctx) ) {
			case 1:
				{
				setState(2171);
				matchMode();
				}
				break;
			}
			setState(2174);
			pathPatternList();
			setState(2176);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,173,_ctx) ) {
			case 1:
				{
				setState(2175);
				keepClause();
				}
				break;
			}
			setState(2179);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,174,_ctx) ) {
			case 1:
				{
				setState(2178);
				graphPatternWhereClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MatchModeContext extends ParserRuleContext {
		public RepeatableElementsMatchModeContext repeatableElementsMatchMode() {
			return getRuleContext(RepeatableElementsMatchModeContext.class,0);
		}
		public DifferentEdgesMatchModeContext differentEdgesMatchMode() {
			return getRuleContext(DifferentEdgesMatchModeContext.class,0);
		}
		public MatchModeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_matchMode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterMatchMode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitMatchMode(this);
		}
	}

	public final MatchModeContext matchMode() throws RecognitionException {
		MatchModeContext _localctx = new MatchModeContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_matchMode);
		try {
			setState(2183);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REPEATABLE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2181);
				repeatableElementsMatchMode();
				}
				break;
			case DIFFERENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2182);
				differentEdgesMatchMode();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RepeatableElementsMatchModeContext extends ParserRuleContext {
		public TerminalNode REPEATABLE() { return getToken(GQLParser.REPEATABLE, 0); }
		public ElementBindingsOrElementsContext elementBindingsOrElements() {
			return getRuleContext(ElementBindingsOrElementsContext.class,0);
		}
		public RepeatableElementsMatchModeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_repeatableElementsMatchMode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterRepeatableElementsMatchMode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitRepeatableElementsMatchMode(this);
		}
	}

	public final RepeatableElementsMatchModeContext repeatableElementsMatchMode() throws RecognitionException {
		RepeatableElementsMatchModeContext _localctx = new RepeatableElementsMatchModeContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_repeatableElementsMatchMode);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2185);
			match(REPEATABLE);
			setState(2186);
			elementBindingsOrElements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DifferentEdgesMatchModeContext extends ParserRuleContext {
		public TerminalNode DIFFERENT() { return getToken(GQLParser.DIFFERENT, 0); }
		public EdgeBindingsOrEdgesContext edgeBindingsOrEdges() {
			return getRuleContext(EdgeBindingsOrEdgesContext.class,0);
		}
		public DifferentEdgesMatchModeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_differentEdgesMatchMode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterDifferentEdgesMatchMode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitDifferentEdgesMatchMode(this);
		}
	}

	public final DifferentEdgesMatchModeContext differentEdgesMatchMode() throws RecognitionException {
		DifferentEdgesMatchModeContext _localctx = new DifferentEdgesMatchModeContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_differentEdgesMatchMode);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2188);
			match(DIFFERENT);
			setState(2189);
			edgeBindingsOrEdges();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ElementBindingsOrElementsContext extends ParserRuleContext {
		public TerminalNode ELEMENT() { return getToken(GQLParser.ELEMENT, 0); }
		public TerminalNode BINDINGS() { return getToken(GQLParser.BINDINGS, 0); }
		public TerminalNode ELEMENTS() { return getToken(GQLParser.ELEMENTS, 0); }
		public ElementBindingsOrElementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elementBindingsOrElements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterElementBindingsOrElements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitElementBindingsOrElements(this);
		}
	}

	public final ElementBindingsOrElementsContext elementBindingsOrElements() throws RecognitionException {
		ElementBindingsOrElementsContext _localctx = new ElementBindingsOrElementsContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_elementBindingsOrElements);
		try {
			setState(2196);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ELEMENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2191);
				match(ELEMENT);
				setState(2193);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,176,_ctx) ) {
				case 1:
					{
					setState(2192);
					match(BINDINGS);
					}
					break;
				}
				}
				break;
			case ELEMENTS:
				enterOuterAlt(_localctx, 2);
				{
				setState(2195);
				match(ELEMENTS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EdgeBindingsOrEdgesContext extends ParserRuleContext {
		public TerminalNode EDGE_SYNONYM() { return getToken(GQLParser.EDGE_SYNONYM, 0); }
		public TerminalNode BINDINGS() { return getToken(GQLParser.BINDINGS, 0); }
		public TerminalNode EDGES_SYNONYM() { return getToken(GQLParser.EDGES_SYNONYM, 0); }
		public EdgeBindingsOrEdgesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_edgeBindingsOrEdges; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterEdgeBindingsOrEdges(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitEdgeBindingsOrEdges(this);
		}
	}

	public final EdgeBindingsOrEdgesContext edgeBindingsOrEdges() throws RecognitionException {
		EdgeBindingsOrEdgesContext _localctx = new EdgeBindingsOrEdgesContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_edgeBindingsOrEdges);
		try {
			setState(2203);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EDGE_SYNONYM:
				enterOuterAlt(_localctx, 1);
				{
				setState(2198);
				match(EDGE_SYNONYM);
				setState(2200);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,178,_ctx) ) {
				case 1:
					{
					setState(2199);
					match(BINDINGS);
					}
					break;
				}
				}
				break;
			case EDGES_SYNONYM:
				enterOuterAlt(_localctx, 2);
				{
				setState(2202);
				match(EDGES_SYNONYM);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PathPatternListContext extends ParserRuleContext {
		public List<PathPatternContext> pathPattern() {
			return getRuleContexts(PathPatternContext.class);
		}
		public PathPatternContext pathPattern(int i) {
			return getRuleContext(PathPatternContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQLParser.COMMA, i);
		}
		public PathPatternListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pathPatternList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterPathPatternList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitPathPatternList(this);
		}
	}

	public final PathPatternListContext pathPatternList() throws RecognitionException {
		PathPatternListContext _localctx = new PathPatternListContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_pathPatternList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2205);
			pathPattern();
			setState(2210);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,180,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2206);
					match(COMMA);
					setState(2207);
					pathPattern();
					}
					} 
				}
				setState(2212);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,180,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PathPatternContext extends ParserRuleContext {
		public PathPatternExpressionContext pathPatternExpression() {
			return getRuleContext(PathPatternExpressionContext.class,0);
		}
		public PathVariableDeclarationContext pathVariableDeclaration() {
			return getRuleContext(PathVariableDeclarationContext.class,0);
		}
		public PathPatternPrefixContext pathPatternPrefix() {
			return getRuleContext(PathPatternPrefixContext.class,0);
		}
		public PathPatternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pathPattern; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterPathPattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitPathPattern(this);
		}
	}

	public final PathPatternContext pathPattern() throws RecognitionException {
		PathPatternContext _localctx = new PathPatternContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_pathPattern);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2214);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,181,_ctx) ) {
			case 1:
				{
				setState(2213);
				pathVariableDeclaration();
				}
				break;
			}
			setState(2217);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 20401094656L) != 0) || ((((_la - 226)) & ~0x3f) == 0 && ((1L << (_la - 226)) & 562949961809925L) != 0)) {
				{
				setState(2216);
				pathPatternPrefix();
				}
			}

			setState(2219);
			pathPatternExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PathVariableDeclarationContext extends ParserRuleContext {
		public PathVariableContext pathVariable() {
			return getRuleContext(PathVariableContext.class,0);
		}
		public TerminalNode EQUALS_OPERATOR() { return getToken(GQLParser.EQUALS_OPERATOR, 0); }
		public PathVariableDeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pathVariableDeclaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterPathVariableDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitPathVariableDeclaration(this);
		}
	}

	public final PathVariableDeclarationContext pathVariableDeclaration() throws RecognitionException {
		PathVariableDeclarationContext _localctx = new PathVariableDeclarationContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_pathVariableDeclaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2221);
			pathVariable();
			setState(2222);
			match(EQUALS_OPERATOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class KeepClauseContext extends ParserRuleContext {
		public TerminalNode KEEP() { return getToken(GQLParser.KEEP, 0); }
		public PathPatternPrefixContext pathPatternPrefix() {
			return getRuleContext(PathPatternPrefixContext.class,0);
		}
		public KeepClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keepClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterKeepClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitKeepClause(this);
		}
	}

	public final KeepClauseContext keepClause() throws RecognitionException {
		KeepClauseContext _localctx = new KeepClauseContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_keepClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2224);
			match(KEEP);
			setState(2225);
			pathPatternPrefix();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GraphPatternWhereClauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(GQLParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public GraphPatternWhereClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_graphPatternWhereClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGraphPatternWhereClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGraphPatternWhereClause(this);
		}
	}

	public final GraphPatternWhereClauseContext graphPatternWhereClause() throws RecognitionException {
		GraphPatternWhereClauseContext _localctx = new GraphPatternWhereClauseContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_graphPatternWhereClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2227);
			match(WHERE);
			setState(2228);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PathPatternPrefixContext extends ParserRuleContext {
		public PathModePrefixContext pathModePrefix() {
			return getRuleContext(PathModePrefixContext.class,0);
		}
		public PathSearchPrefixContext pathSearchPrefix() {
			return getRuleContext(PathSearchPrefixContext.class,0);
		}
		public PathPatternPrefixContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pathPatternPrefix; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterPathPatternPrefix(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitPathPatternPrefix(this);
		}
	}

	public final PathPatternPrefixContext pathPatternPrefix() throws RecognitionException {
		PathPatternPrefixContext _localctx = new PathPatternPrefixContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_pathPatternPrefix);
		try {
			setState(2232);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ACYCLIC:
			case SIMPLE:
			case TRAIL:
			case WALK:
				enterOuterAlt(_localctx, 1);
				{
				setState(2230);
				pathModePrefix();
				}
				break;
			case ALL:
			case ANY:
			case SHORTEST:
				enterOuterAlt(_localctx, 2);
				{
				setState(2231);
				pathSearchPrefix();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PathModePrefixContext extends ParserRuleContext {
		public PathModeContext pathMode() {
			return getRuleContext(PathModeContext.class,0);
		}
		public PathOrPathsContext pathOrPaths() {
			return getRuleContext(PathOrPathsContext.class,0);
		}
		public PathModePrefixContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pathModePrefix; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterPathModePrefix(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitPathModePrefix(this);
		}
	}

	public final PathModePrefixContext pathModePrefix() throws RecognitionException {
		PathModePrefixContext _localctx = new PathModePrefixContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_pathModePrefix);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2234);
			pathMode();
			setState(2236);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,184,_ctx) ) {
			case 1:
				{
				setState(2235);
				pathOrPaths();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PathModeContext extends ParserRuleContext {
		public TerminalNode WALK() { return getToken(GQLParser.WALK, 0); }
		public TerminalNode TRAIL() { return getToken(GQLParser.TRAIL, 0); }
		public TerminalNode SIMPLE() { return getToken(GQLParser.SIMPLE, 0); }
		public TerminalNode ACYCLIC() { return getToken(GQLParser.ACYCLIC, 0); }
		public PathModeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pathMode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterPathMode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitPathMode(this);
		}
	}

	public final PathModeContext pathMode() throws RecognitionException {
		PathModeContext _localctx = new PathModeContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_pathMode);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2238);
			_la = _input.LA(1);
			if ( !(_la==ACYCLIC || ((((_la - 228)) & ~0x3f) == 0 && ((1L << (_la - 228)) & 140737490452481L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PathSearchPrefixContext extends ParserRuleContext {
		public AllPathSearchContext allPathSearch() {
			return getRuleContext(AllPathSearchContext.class,0);
		}
		public AnyPathSearchContext anyPathSearch() {
			return getRuleContext(AnyPathSearchContext.class,0);
		}
		public ShortestPathSearchContext shortestPathSearch() {
			return getRuleContext(ShortestPathSearchContext.class,0);
		}
		public PathSearchPrefixContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pathSearchPrefix; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterPathSearchPrefix(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitPathSearchPrefix(this);
		}
	}

	public final PathSearchPrefixContext pathSearchPrefix() throws RecognitionException {
		PathSearchPrefixContext _localctx = new PathSearchPrefixContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_pathSearchPrefix);
		try {
			setState(2243);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,185,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2240);
				allPathSearch();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2241);
				anyPathSearch();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2242);
				shortestPathSearch();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AllPathSearchContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(GQLParser.ALL, 0); }
		public PathModeContext pathMode() {
			return getRuleContext(PathModeContext.class,0);
		}
		public PathOrPathsContext pathOrPaths() {
			return getRuleContext(PathOrPathsContext.class,0);
		}
		public AllPathSearchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allPathSearch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterAllPathSearch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitAllPathSearch(this);
		}
	}

	public final AllPathSearchContext allPathSearch() throws RecognitionException {
		AllPathSearchContext _localctx = new AllPathSearchContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_allPathSearch);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2245);
			match(ALL);
			setState(2247);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,186,_ctx) ) {
			case 1:
				{
				setState(2246);
				pathMode();
				}
				break;
			}
			setState(2250);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,187,_ctx) ) {
			case 1:
				{
				setState(2249);
				pathOrPaths();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PathOrPathsContext extends ParserRuleContext {
		public TerminalNode PATH() { return getToken(GQLParser.PATH, 0); }
		public TerminalNode PATHS() { return getToken(GQLParser.PATHS, 0); }
		public PathOrPathsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pathOrPaths; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterPathOrPaths(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitPathOrPaths(this);
		}
	}

	public final PathOrPathsContext pathOrPaths() throws RecognitionException {
		PathOrPathsContext _localctx = new PathOrPathsContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_pathOrPaths);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2252);
			_la = _input.LA(1);
			if ( !(_la==PATH || _la==PATHS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AnyPathSearchContext extends ParserRuleContext {
		public TerminalNode ANY() { return getToken(GQLParser.ANY, 0); }
		public NumberOfPathsContext numberOfPaths() {
			return getRuleContext(NumberOfPathsContext.class,0);
		}
		public PathModeContext pathMode() {
			return getRuleContext(PathModeContext.class,0);
		}
		public PathOrPathsContext pathOrPaths() {
			return getRuleContext(PathOrPathsContext.class,0);
		}
		public AnyPathSearchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_anyPathSearch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterAnyPathSearch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitAnyPathSearch(this);
		}
	}

	public final AnyPathSearchContext anyPathSearch() throws RecognitionException {
		AnyPathSearchContext _localctx = new AnyPathSearchContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_anyPathSearch);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2254);
			match(ANY);
			setState(2256);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,188,_ctx) ) {
			case 1:
				{
				setState(2255);
				numberOfPaths();
				}
				break;
			}
			setState(2259);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,189,_ctx) ) {
			case 1:
				{
				setState(2258);
				pathMode();
				}
				break;
			}
			setState(2262);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,190,_ctx) ) {
			case 1:
				{
				setState(2261);
				pathOrPaths();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NumberOfPathsContext extends ParserRuleContext {
		public UnsignedIntegerSpecificationContext unsignedIntegerSpecification() {
			return getRuleContext(UnsignedIntegerSpecificationContext.class,0);
		}
		public NumberOfPathsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numberOfPaths; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterNumberOfPaths(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitNumberOfPaths(this);
		}
	}

	public final NumberOfPathsContext numberOfPaths() throws RecognitionException {
		NumberOfPathsContext _localctx = new NumberOfPathsContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_numberOfPaths);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2264);
			unsignedIntegerSpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ShortestPathSearchContext extends ParserRuleContext {
		public AllShortestPathSearchContext allShortestPathSearch() {
			return getRuleContext(AllShortestPathSearchContext.class,0);
		}
		public AnyShortestPathSearchContext anyShortestPathSearch() {
			return getRuleContext(AnyShortestPathSearchContext.class,0);
		}
		public CountedShortestPathSearchContext countedShortestPathSearch() {
			return getRuleContext(CountedShortestPathSearchContext.class,0);
		}
		public CountedShortestGroupSearchContext countedShortestGroupSearch() {
			return getRuleContext(CountedShortestGroupSearchContext.class,0);
		}
		public ShortestPathSearchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_shortestPathSearch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterShortestPathSearch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitShortestPathSearch(this);
		}
	}

	public final ShortestPathSearchContext shortestPathSearch() throws RecognitionException {
		ShortestPathSearchContext _localctx = new ShortestPathSearchContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_shortestPathSearch);
		try {
			setState(2270);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,191,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2266);
				allShortestPathSearch();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2267);
				anyShortestPathSearch();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2268);
				countedShortestPathSearch();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2269);
				countedShortestGroupSearch();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AllShortestPathSearchContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(GQLParser.ALL, 0); }
		public TerminalNode SHORTEST() { return getToken(GQLParser.SHORTEST, 0); }
		public PathModeContext pathMode() {
			return getRuleContext(PathModeContext.class,0);
		}
		public PathOrPathsContext pathOrPaths() {
			return getRuleContext(PathOrPathsContext.class,0);
		}
		public AllShortestPathSearchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allShortestPathSearch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterAllShortestPathSearch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitAllShortestPathSearch(this);
		}
	}

	public final AllShortestPathSearchContext allShortestPathSearch() throws RecognitionException {
		AllShortestPathSearchContext _localctx = new AllShortestPathSearchContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_allShortestPathSearch);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2272);
			match(ALL);
			setState(2273);
			match(SHORTEST);
			setState(2275);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,192,_ctx) ) {
			case 1:
				{
				setState(2274);
				pathMode();
				}
				break;
			}
			setState(2278);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,193,_ctx) ) {
			case 1:
				{
				setState(2277);
				pathOrPaths();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AnyShortestPathSearchContext extends ParserRuleContext {
		public TerminalNode ANY() { return getToken(GQLParser.ANY, 0); }
		public TerminalNode SHORTEST() { return getToken(GQLParser.SHORTEST, 0); }
		public PathModeContext pathMode() {
			return getRuleContext(PathModeContext.class,0);
		}
		public PathOrPathsContext pathOrPaths() {
			return getRuleContext(PathOrPathsContext.class,0);
		}
		public AnyShortestPathSearchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_anyShortestPathSearch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterAnyShortestPathSearch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitAnyShortestPathSearch(this);
		}
	}

	public final AnyShortestPathSearchContext anyShortestPathSearch() throws RecognitionException {
		AnyShortestPathSearchContext _localctx = new AnyShortestPathSearchContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_anyShortestPathSearch);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2280);
			match(ANY);
			setState(2281);
			match(SHORTEST);
			setState(2283);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,194,_ctx) ) {
			case 1:
				{
				setState(2282);
				pathMode();
				}
				break;
			}
			setState(2286);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,195,_ctx) ) {
			case 1:
				{
				setState(2285);
				pathOrPaths();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CountedShortestPathSearchContext extends ParserRuleContext {
		public TerminalNode SHORTEST() { return getToken(GQLParser.SHORTEST, 0); }
		public NumberOfPathsContext numberOfPaths() {
			return getRuleContext(NumberOfPathsContext.class,0);
		}
		public PathModeContext pathMode() {
			return getRuleContext(PathModeContext.class,0);
		}
		public PathOrPathsContext pathOrPaths() {
			return getRuleContext(PathOrPathsContext.class,0);
		}
		public CountedShortestPathSearchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_countedShortestPathSearch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterCountedShortestPathSearch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitCountedShortestPathSearch(this);
		}
	}

	public final CountedShortestPathSearchContext countedShortestPathSearch() throws RecognitionException {
		CountedShortestPathSearchContext _localctx = new CountedShortestPathSearchContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_countedShortestPathSearch);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2288);
			match(SHORTEST);
			setState(2289);
			numberOfPaths();
			setState(2291);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,196,_ctx) ) {
			case 1:
				{
				setState(2290);
				pathMode();
				}
				break;
			}
			setState(2294);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,197,_ctx) ) {
			case 1:
				{
				setState(2293);
				pathOrPaths();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CountedShortestGroupSearchContext extends ParserRuleContext {
		public TerminalNode SHORTEST() { return getToken(GQLParser.SHORTEST, 0); }
		public NumberOfGroupsContext numberOfGroups() {
			return getRuleContext(NumberOfGroupsContext.class,0);
		}
		public TerminalNode GROUP() { return getToken(GQLParser.GROUP, 0); }
		public TerminalNode GROUPS() { return getToken(GQLParser.GROUPS, 0); }
		public PathModeContext pathMode() {
			return getRuleContext(PathModeContext.class,0);
		}
		public PathOrPathsContext pathOrPaths() {
			return getRuleContext(PathOrPathsContext.class,0);
		}
		public CountedShortestGroupSearchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_countedShortestGroupSearch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterCountedShortestGroupSearch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitCountedShortestGroupSearch(this);
		}
	}

	public final CountedShortestGroupSearchContext countedShortestGroupSearch() throws RecognitionException {
		CountedShortestGroupSearchContext _localctx = new CountedShortestGroupSearchContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_countedShortestGroupSearch);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2296);
			match(SHORTEST);
			setState(2297);
			numberOfGroups();
			setState(2299);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ACYCLIC || ((((_la - 228)) & ~0x3f) == 0 && ((1L << (_la - 228)) & 140737490452481L) != 0)) {
				{
				setState(2298);
				pathMode();
				}
			}

			setState(2302);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PATH || _la==PATHS) {
				{
				setState(2301);
				pathOrPaths();
				}
			}

			setState(2304);
			_la = _input.LA(1);
			if ( !(_la==GROUP || _la==GROUPS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NumberOfGroupsContext extends ParserRuleContext {
		public UnsignedIntegerSpecificationContext unsignedIntegerSpecification() {
			return getRuleContext(UnsignedIntegerSpecificationContext.class,0);
		}
		public NumberOfGroupsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numberOfGroups; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterNumberOfGroups(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitNumberOfGroups(this);
		}
	}

	public final NumberOfGroupsContext numberOfGroups() throws RecognitionException {
		NumberOfGroupsContext _localctx = new NumberOfGroupsContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_numberOfGroups);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2306);
			unsignedIntegerSpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PathPatternExpressionContext extends ParserRuleContext {
		public PathTermContext pathTerm() {
			return getRuleContext(PathTermContext.class,0);
		}
		public PathMultisetAlternationContext pathMultisetAlternation() {
			return getRuleContext(PathMultisetAlternationContext.class,0);
		}
		public PathPatternUnionContext pathPatternUnion() {
			return getRuleContext(PathPatternUnionContext.class,0);
		}
		public PathPatternExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pathPatternExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterPathPatternExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitPathPatternExpression(this);
		}
	}

	public final PathPatternExpressionContext pathPatternExpression() throws RecognitionException {
		PathPatternExpressionContext _localctx = new PathPatternExpressionContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_pathPatternExpression);
		try {
			setState(2311);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,200,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2308);
				pathTerm();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2309);
				pathMultisetAlternation();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2310);
				pathPatternUnion();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PathMultisetAlternationContext extends ParserRuleContext {
		public List<PathTermContext> pathTerm() {
			return getRuleContexts(PathTermContext.class);
		}
		public PathTermContext pathTerm(int i) {
			return getRuleContext(PathTermContext.class,i);
		}
		public List<TerminalNode> MULTISET_ALTERNATION_OPERATOR() { return getTokens(GQLParser.MULTISET_ALTERNATION_OPERATOR); }
		public TerminalNode MULTISET_ALTERNATION_OPERATOR(int i) {
			return getToken(GQLParser.MULTISET_ALTERNATION_OPERATOR, i);
		}
		public PathMultisetAlternationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pathMultisetAlternation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterPathMultisetAlternation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitPathMultisetAlternation(this);
		}
	}

	public final PathMultisetAlternationContext pathMultisetAlternation() throws RecognitionException {
		PathMultisetAlternationContext _localctx = new PathMultisetAlternationContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_pathMultisetAlternation);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2313);
			pathTerm();
			setState(2314);
			match(MULTISET_ALTERNATION_OPERATOR);
			setState(2315);
			pathTerm();
			setState(2320);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,201,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2316);
					match(MULTISET_ALTERNATION_OPERATOR);
					setState(2317);
					pathTerm();
					}
					} 
				}
				setState(2322);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,201,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PathPatternUnionContext extends ParserRuleContext {
		public List<PathTermContext> pathTerm() {
			return getRuleContexts(PathTermContext.class);
		}
		public PathTermContext pathTerm(int i) {
			return getRuleContext(PathTermContext.class,i);
		}
		public List<TerminalNode> VERTICAL_BAR() { return getTokens(GQLParser.VERTICAL_BAR); }
		public TerminalNode VERTICAL_BAR(int i) {
			return getToken(GQLParser.VERTICAL_BAR, i);
		}
		public PathPatternUnionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pathPatternUnion; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterPathPatternUnion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitPathPatternUnion(this);
		}
	}

	public final PathPatternUnionContext pathPatternUnion() throws RecognitionException {
		PathPatternUnionContext _localctx = new PathPatternUnionContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_pathPatternUnion);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2323);
			pathTerm();
			setState(2324);
			match(VERTICAL_BAR);
			setState(2325);
			pathTerm();
			setState(2330);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,202,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2326);
					match(VERTICAL_BAR);
					setState(2327);
					pathTerm();
					}
					} 
				}
				setState(2332);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,202,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PathTermContext extends ParserRuleContext {
		public List<PathFactorContext> pathFactor() {
			return getRuleContexts(PathFactorContext.class);
		}
		public PathFactorContext pathFactor(int i) {
			return getRuleContext(PathFactorContext.class,i);
		}
		public PathTermContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pathTerm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterPathTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitPathTerm(this);
		}
	}

	public final PathTermContext pathTerm() throws RecognitionException {
		PathTermContext _localctx = new PathTermContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_pathTerm);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2334); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2333);
					pathFactor();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2336); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,203,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PathFactorContext extends ParserRuleContext {
		public PathPrimaryContext pathPrimary() {
			return getRuleContext(PathPrimaryContext.class,0);
		}
		public QuantifiedPathPrimaryContext quantifiedPathPrimary() {
			return getRuleContext(QuantifiedPathPrimaryContext.class,0);
		}
		public QuestionedPathPrimaryContext questionedPathPrimary() {
			return getRuleContext(QuestionedPathPrimaryContext.class,0);
		}
		public PathFactorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pathFactor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterPathFactor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitPathFactor(this);
		}
	}

	public final PathFactorContext pathFactor() throws RecognitionException {
		PathFactorContext _localctx = new PathFactorContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_pathFactor);
		try {
			setState(2341);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,204,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2338);
				pathPrimary();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2339);
				quantifiedPathPrimary();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2340);
				questionedPathPrimary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QuantifiedPathPrimaryContext extends ParserRuleContext {
		public PathPrimaryContext pathPrimary() {
			return getRuleContext(PathPrimaryContext.class,0);
		}
		public GraphPatternQuantifierContext graphPatternQuantifier() {
			return getRuleContext(GraphPatternQuantifierContext.class,0);
		}
		public QuantifiedPathPrimaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quantifiedPathPrimary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterQuantifiedPathPrimary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitQuantifiedPathPrimary(this);
		}
	}

	public final QuantifiedPathPrimaryContext quantifiedPathPrimary() throws RecognitionException {
		QuantifiedPathPrimaryContext _localctx = new QuantifiedPathPrimaryContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_quantifiedPathPrimary);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2343);
			pathPrimary();
			setState(2344);
			graphPatternQuantifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class QuestionedPathPrimaryContext extends ParserRuleContext {
		public PathPrimaryContext pathPrimary() {
			return getRuleContext(PathPrimaryContext.class,0);
		}
		public TerminalNode QUESTION_MARK() { return getToken(GQLParser.QUESTION_MARK, 0); }
		public QuestionedPathPrimaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_questionedPathPrimary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterQuestionedPathPrimary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitQuestionedPathPrimary(this);
		}
	}

	public final QuestionedPathPrimaryContext questionedPathPrimary() throws RecognitionException {
		QuestionedPathPrimaryContext _localctx = new QuestionedPathPrimaryContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_questionedPathPrimary);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2346);
			pathPrimary();
			setState(2347);
			match(QUESTION_MARK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PathPrimaryContext extends ParserRuleContext {
		public ElementPatternContext elementPattern() {
			return getRuleContext(ElementPatternContext.class,0);
		}
		public ParenthesizedPathPatternExpressionContext parenthesizedPathPatternExpression() {
			return getRuleContext(ParenthesizedPathPatternExpressionContext.class,0);
		}
		public SimplifiedPathPatternExpressionContext simplifiedPathPatternExpression() {
			return getRuleContext(SimplifiedPathPatternExpressionContext.class,0);
		}
		public PathPrimaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pathPrimary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterPathPrimary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitPathPrimary(this);
		}
	}

	public final PathPrimaryContext pathPrimary() throws RecognitionException {
		PathPrimaryContext _localctx = new PathPrimaryContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_pathPrimary);
		try {
			setState(2352);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,205,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2349);
				elementPattern();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2350);
				parenthesizedPathPatternExpression();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2351);
				simplifiedPathPatternExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ElementPatternContext extends ParserRuleContext {
		public NodePatternContext nodePattern() {
			return getRuleContext(NodePatternContext.class,0);
		}
		public EdgePatternContext edgePattern() {
			return getRuleContext(EdgePatternContext.class,0);
		}
		public ElementPatternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elementPattern; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterElementPattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitElementPattern(this);
		}
	}

	public final ElementPatternContext elementPattern() throws RecognitionException {
		ElementPatternContext _localctx = new ElementPatternContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_elementPattern);
		try {
			setState(2356);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 1);
				{
				setState(2354);
				nodePattern();
				}
				break;
			case LEFT_ANGLE_BRACKET:
			case MINUS_SIGN:
			case TILDE:
			case LEFT_MINUS_RIGHT:
			case RIGHT_ARROW:
			case TILDE_RIGHT_ARROW:
				enterOuterAlt(_localctx, 2);
				{
				setState(2355);
				edgePattern();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NodePatternContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public ElementPatternFillerContext elementPatternFiller() {
			return getRuleContext(ElementPatternFillerContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public NodePatternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nodePattern; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterNodePattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitNodePattern(this);
		}
	}

	public final NodePatternContext nodePattern() throws RecognitionException {
		NodePatternContext _localctx = new NodePatternContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_nodePattern);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2358);
			match(LEFT_PAREN);
			setState(2359);
			elementPatternFiller();
			setState(2360);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ElementPatternFillerContext extends ParserRuleContext {
		public ElementVariableDeclarationContext elementVariableDeclaration() {
			return getRuleContext(ElementVariableDeclarationContext.class,0);
		}
		public IsLabelExpressionContext isLabelExpression() {
			return getRuleContext(IsLabelExpressionContext.class,0);
		}
		public ElementPatternPredicateContext elementPatternPredicate() {
			return getRuleContext(ElementPatternPredicateContext.class,0);
		}
		public ElementPatternFillerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elementPatternFiller; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterElementPatternFiller(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitElementPatternFiller(this);
		}
	}

	public final ElementPatternFillerContext elementPatternFiller() throws RecognitionException {
		ElementPatternFillerContext _localctx = new ElementPatternFillerContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_elementPatternFiller);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2363);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,207,_ctx) ) {
			case 1:
				{
				setState(2362);
				elementVariableDeclaration();
				}
				break;
			}
			setState(2366);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLON || _la==IS) {
				{
				setState(2365);
				isLabelExpression();
				}
			}

			setState(2369);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_BRACE || _la==WHERE) {
				{
				setState(2368);
				elementPatternPredicate();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ElementVariableDeclarationContext extends ParserRuleContext {
		public ElementVariableContext elementVariable() {
			return getRuleContext(ElementVariableContext.class,0);
		}
		public TerminalNode TEMP() { return getToken(GQLParser.TEMP, 0); }
		public ElementVariableDeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elementVariableDeclaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterElementVariableDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitElementVariableDeclaration(this);
		}
	}

	public final ElementVariableDeclarationContext elementVariableDeclaration() throws RecognitionException {
		ElementVariableDeclarationContext _localctx = new ElementVariableDeclarationContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_elementVariableDeclaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2372);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,210,_ctx) ) {
			case 1:
				{
				setState(2371);
				match(TEMP);
				}
				break;
			}
			setState(2374);
			elementVariable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IsLabelExpressionContext extends ParserRuleContext {
		public IsOrColonContext isOrColon() {
			return getRuleContext(IsOrColonContext.class,0);
		}
		public LabelExpressionContext labelExpression() {
			return getRuleContext(LabelExpressionContext.class,0);
		}
		public IsLabelExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_isLabelExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterIsLabelExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitIsLabelExpression(this);
		}
	}

	public final IsLabelExpressionContext isLabelExpression() throws RecognitionException {
		IsLabelExpressionContext _localctx = new IsLabelExpressionContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_isLabelExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2376);
			isOrColon();
			setState(2377);
			labelExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class IsOrColonContext extends ParserRuleContext {
		public TerminalNode IS() { return getToken(GQLParser.IS, 0); }
		public TerminalNode COLON() { return getToken(GQLParser.COLON, 0); }
		public IsOrColonContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_isOrColon; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterIsOrColon(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitIsOrColon(this);
		}
	}

	public final IsOrColonContext isOrColon() throws RecognitionException {
		IsOrColonContext _localctx = new IsOrColonContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_isOrColon);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2379);
			_la = _input.LA(1);
			if ( !(_la==COLON || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ElementPatternPredicateContext extends ParserRuleContext {
		public ElementPatternWhereClauseContext elementPatternWhereClause() {
			return getRuleContext(ElementPatternWhereClauseContext.class,0);
		}
		public ElementPropertySpecificationContext elementPropertySpecification() {
			return getRuleContext(ElementPropertySpecificationContext.class,0);
		}
		public ElementPatternPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elementPatternPredicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterElementPatternPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitElementPatternPredicate(this);
		}
	}

	public final ElementPatternPredicateContext elementPatternPredicate() throws RecognitionException {
		ElementPatternPredicateContext _localctx = new ElementPatternPredicateContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_elementPatternPredicate);
		try {
			setState(2383);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHERE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2381);
				elementPatternWhereClause();
				}
				break;
			case LEFT_BRACE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2382);
				elementPropertySpecification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ElementPatternWhereClauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(GQLParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ElementPatternWhereClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elementPatternWhereClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterElementPatternWhereClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitElementPatternWhereClause(this);
		}
	}

	public final ElementPatternWhereClauseContext elementPatternWhereClause() throws RecognitionException {
		ElementPatternWhereClauseContext _localctx = new ElementPatternWhereClauseContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_elementPatternWhereClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2385);
			match(WHERE);
			setState(2386);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ElementPropertySpecificationContext extends ParserRuleContext {
		public TerminalNode LEFT_BRACE() { return getToken(GQLParser.LEFT_BRACE, 0); }
		public PropertyKeyValuePairListContext propertyKeyValuePairList() {
			return getRuleContext(PropertyKeyValuePairListContext.class,0);
		}
		public TerminalNode RIGHT_BRACE() { return getToken(GQLParser.RIGHT_BRACE, 0); }
		public ElementPropertySpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elementPropertySpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterElementPropertySpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitElementPropertySpecification(this);
		}
	}

	public final ElementPropertySpecificationContext elementPropertySpecification() throws RecognitionException {
		ElementPropertySpecificationContext _localctx = new ElementPropertySpecificationContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_elementPropertySpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2388);
			match(LEFT_BRACE);
			setState(2389);
			propertyKeyValuePairList();
			setState(2390);
			match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PropertyKeyValuePairListContext extends ParserRuleContext {
		public List<PropertyKeyValuePairContext> propertyKeyValuePair() {
			return getRuleContexts(PropertyKeyValuePairContext.class);
		}
		public PropertyKeyValuePairContext propertyKeyValuePair(int i) {
			return getRuleContext(PropertyKeyValuePairContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQLParser.COMMA, i);
		}
		public PropertyKeyValuePairListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_propertyKeyValuePairList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterPropertyKeyValuePairList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitPropertyKeyValuePairList(this);
		}
	}

	public final PropertyKeyValuePairListContext propertyKeyValuePairList() throws RecognitionException {
		PropertyKeyValuePairListContext _localctx = new PropertyKeyValuePairListContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_propertyKeyValuePairList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2392);
			propertyKeyValuePair();
			setState(2397);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2393);
				match(COMMA);
				setState(2394);
				propertyKeyValuePair();
				}
				}
				setState(2399);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PropertyKeyValuePairContext extends ParserRuleContext {
		public PropertyNameContext propertyName() {
			return getRuleContext(PropertyNameContext.class,0);
		}
		public TerminalNode COLON() { return getToken(GQLParser.COLON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public PropertyKeyValuePairContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_propertyKeyValuePair; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterPropertyKeyValuePair(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitPropertyKeyValuePair(this);
		}
	}

	public final PropertyKeyValuePairContext propertyKeyValuePair() throws RecognitionException {
		PropertyKeyValuePairContext _localctx = new PropertyKeyValuePairContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_propertyKeyValuePair);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2400);
			propertyName();
			setState(2401);
			match(COLON);
			setState(2402);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EdgePatternContext extends ParserRuleContext {
		public FullEdgePatternContext fullEdgePattern() {
			return getRuleContext(FullEdgePatternContext.class,0);
		}
		public AbbreviatedEdgePatternContext abbreviatedEdgePattern() {
			return getRuleContext(AbbreviatedEdgePatternContext.class,0);
		}
		public EdgePatternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_edgePattern; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterEdgePattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitEdgePattern(this);
		}
	}

	public final EdgePatternContext edgePattern() throws RecognitionException {
		EdgePatternContext _localctx = new EdgePatternContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_edgePattern);
		try {
			setState(2406);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,213,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2404);
				fullEdgePattern();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2405);
				abbreviatedEdgePattern();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FullEdgePatternContext extends ParserRuleContext {
		public FullEdgePointingLeftContext fullEdgePointingLeft() {
			return getRuleContext(FullEdgePointingLeftContext.class,0);
		}
		public FullEdgeUndirectedContext fullEdgeUndirected() {
			return getRuleContext(FullEdgeUndirectedContext.class,0);
		}
		public FullEdgePointingRightContext fullEdgePointingRight() {
			return getRuleContext(FullEdgePointingRightContext.class,0);
		}
		public FullEdgeLeftOrUndirectedContext fullEdgeLeftOrUndirected() {
			return getRuleContext(FullEdgeLeftOrUndirectedContext.class,0);
		}
		public FullEdgeUndirectedOrRightContext fullEdgeUndirectedOrRight() {
			return getRuleContext(FullEdgeUndirectedOrRightContext.class,0);
		}
		public FullEdgeLeftOrRightContext fullEdgeLeftOrRight() {
			return getRuleContext(FullEdgeLeftOrRightContext.class,0);
		}
		public FullEdgeAnyDirectionContext fullEdgeAnyDirection() {
			return getRuleContext(FullEdgeAnyDirectionContext.class,0);
		}
		public FullEdgePatternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullEdgePattern; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterFullEdgePattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitFullEdgePattern(this);
		}
	}

	public final FullEdgePatternContext fullEdgePattern() throws RecognitionException {
		FullEdgePatternContext _localctx = new FullEdgePatternContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_fullEdgePattern);
		try {
			setState(2415);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,214,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2408);
				fullEdgePointingLeft();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2409);
				fullEdgeUndirected();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2410);
				fullEdgePointingRight();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2411);
				fullEdgeLeftOrUndirected();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2412);
				fullEdgeUndirectedOrRight();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2413);
				fullEdgeLeftOrRight();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2414);
				fullEdgeAnyDirection();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FullEdgePointingLeftContext extends ParserRuleContext {
		public TerminalNode LEFT_ANGLE_BRACKET() { return getToken(GQLParser.LEFT_ANGLE_BRACKET, 0); }
		public List<TerminalNode> MINUS_SIGN() { return getTokens(GQLParser.MINUS_SIGN); }
		public TerminalNode MINUS_SIGN(int i) {
			return getToken(GQLParser.MINUS_SIGN, i);
		}
		public TerminalNode LEFT_BRACKET() { return getToken(GQLParser.LEFT_BRACKET, 0); }
		public ElementPatternFillerContext elementPatternFiller() {
			return getRuleContext(ElementPatternFillerContext.class,0);
		}
		public TerminalNode RIGHT_BRACKET() { return getToken(GQLParser.RIGHT_BRACKET, 0); }
		public FullEdgePointingLeftContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullEdgePointingLeft; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterFullEdgePointingLeft(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitFullEdgePointingLeft(this);
		}
	}

	public final FullEdgePointingLeftContext fullEdgePointingLeft() throws RecognitionException {
		FullEdgePointingLeftContext _localctx = new FullEdgePointingLeftContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_fullEdgePointingLeft);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2417);
			match(LEFT_ANGLE_BRACKET);
			setState(2418);
			match(MINUS_SIGN);
			setState(2419);
			match(LEFT_BRACKET);
			setState(2420);
			elementPatternFiller();
			setState(2421);
			match(RIGHT_BRACKET);
			setState(2422);
			match(MINUS_SIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FullEdgeUndirectedContext extends ParserRuleContext {
		public List<TerminalNode> TILDE() { return getTokens(GQLParser.TILDE); }
		public TerminalNode TILDE(int i) {
			return getToken(GQLParser.TILDE, i);
		}
		public TerminalNode LEFT_BRACKET() { return getToken(GQLParser.LEFT_BRACKET, 0); }
		public ElementPatternFillerContext elementPatternFiller() {
			return getRuleContext(ElementPatternFillerContext.class,0);
		}
		public TerminalNode RIGHT_BRACKET() { return getToken(GQLParser.RIGHT_BRACKET, 0); }
		public FullEdgeUndirectedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullEdgeUndirected; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterFullEdgeUndirected(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitFullEdgeUndirected(this);
		}
	}

	public final FullEdgeUndirectedContext fullEdgeUndirected() throws RecognitionException {
		FullEdgeUndirectedContext _localctx = new FullEdgeUndirectedContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_fullEdgeUndirected);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2424);
			match(TILDE);
			setState(2425);
			match(LEFT_BRACKET);
			setState(2426);
			elementPatternFiller();
			setState(2427);
			match(RIGHT_BRACKET);
			setState(2428);
			match(TILDE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FullEdgePointingRightContext extends ParserRuleContext {
		public TerminalNode MINUS_SIGN() { return getToken(GQLParser.MINUS_SIGN, 0); }
		public TerminalNode LEFT_BRACKET() { return getToken(GQLParser.LEFT_BRACKET, 0); }
		public ElementPatternFillerContext elementPatternFiller() {
			return getRuleContext(ElementPatternFillerContext.class,0);
		}
		public TerminalNode RIGHT_BRACKET() { return getToken(GQLParser.RIGHT_BRACKET, 0); }
		public TerminalNode RIGHT_ARROW() { return getToken(GQLParser.RIGHT_ARROW, 0); }
		public FullEdgePointingRightContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullEdgePointingRight; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterFullEdgePointingRight(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitFullEdgePointingRight(this);
		}
	}

	public final FullEdgePointingRightContext fullEdgePointingRight() throws RecognitionException {
		FullEdgePointingRightContext _localctx = new FullEdgePointingRightContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_fullEdgePointingRight);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2430);
			match(MINUS_SIGN);
			setState(2431);
			match(LEFT_BRACKET);
			setState(2432);
			elementPatternFiller();
			setState(2433);
			match(RIGHT_BRACKET);
			setState(2434);
			match(RIGHT_ARROW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FullEdgeLeftOrUndirectedContext extends ParserRuleContext {
		public TerminalNode LEFT_ANGLE_BRACKET() { return getToken(GQLParser.LEFT_ANGLE_BRACKET, 0); }
		public List<TerminalNode> TILDE() { return getTokens(GQLParser.TILDE); }
		public TerminalNode TILDE(int i) {
			return getToken(GQLParser.TILDE, i);
		}
		public TerminalNode LEFT_BRACKET() { return getToken(GQLParser.LEFT_BRACKET, 0); }
		public ElementPatternFillerContext elementPatternFiller() {
			return getRuleContext(ElementPatternFillerContext.class,0);
		}
		public TerminalNode RIGHT_BRACKET() { return getToken(GQLParser.RIGHT_BRACKET, 0); }
		public FullEdgeLeftOrUndirectedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullEdgeLeftOrUndirected; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterFullEdgeLeftOrUndirected(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitFullEdgeLeftOrUndirected(this);
		}
	}

	public final FullEdgeLeftOrUndirectedContext fullEdgeLeftOrUndirected() throws RecognitionException {
		FullEdgeLeftOrUndirectedContext _localctx = new FullEdgeLeftOrUndirectedContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_fullEdgeLeftOrUndirected);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2436);
			match(LEFT_ANGLE_BRACKET);
			setState(2437);
			match(TILDE);
			setState(2438);
			match(LEFT_BRACKET);
			setState(2439);
			elementPatternFiller();
			setState(2440);
			match(RIGHT_BRACKET);
			setState(2441);
			match(TILDE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FullEdgeUndirectedOrRightContext extends ParserRuleContext {
		public TerminalNode TILDE() { return getToken(GQLParser.TILDE, 0); }
		public TerminalNode LEFT_BRACKET() { return getToken(GQLParser.LEFT_BRACKET, 0); }
		public ElementPatternFillerContext elementPatternFiller() {
			return getRuleContext(ElementPatternFillerContext.class,0);
		}
		public TerminalNode RIGHT_BRACKET() { return getToken(GQLParser.RIGHT_BRACKET, 0); }
		public TerminalNode TILDE_RIGHT_ARROW() { return getToken(GQLParser.TILDE_RIGHT_ARROW, 0); }
		public FullEdgeUndirectedOrRightContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullEdgeUndirectedOrRight; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterFullEdgeUndirectedOrRight(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitFullEdgeUndirectedOrRight(this);
		}
	}

	public final FullEdgeUndirectedOrRightContext fullEdgeUndirectedOrRight() throws RecognitionException {
		FullEdgeUndirectedOrRightContext _localctx = new FullEdgeUndirectedOrRightContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_fullEdgeUndirectedOrRight);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2443);
			match(TILDE);
			setState(2444);
			match(LEFT_BRACKET);
			setState(2445);
			elementPatternFiller();
			setState(2446);
			match(RIGHT_BRACKET);
			setState(2447);
			match(TILDE_RIGHT_ARROW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FullEdgeLeftOrRightContext extends ParserRuleContext {
		public TerminalNode LEFT_ANGLE_BRACKET() { return getToken(GQLParser.LEFT_ANGLE_BRACKET, 0); }
		public TerminalNode MINUS_SIGN() { return getToken(GQLParser.MINUS_SIGN, 0); }
		public TerminalNode LEFT_BRACKET() { return getToken(GQLParser.LEFT_BRACKET, 0); }
		public ElementPatternFillerContext elementPatternFiller() {
			return getRuleContext(ElementPatternFillerContext.class,0);
		}
		public TerminalNode RIGHT_BRACKET() { return getToken(GQLParser.RIGHT_BRACKET, 0); }
		public TerminalNode RIGHT_ARROW() { return getToken(GQLParser.RIGHT_ARROW, 0); }
		public FullEdgeLeftOrRightContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullEdgeLeftOrRight; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterFullEdgeLeftOrRight(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitFullEdgeLeftOrRight(this);
		}
	}

	public final FullEdgeLeftOrRightContext fullEdgeLeftOrRight() throws RecognitionException {
		FullEdgeLeftOrRightContext _localctx = new FullEdgeLeftOrRightContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_fullEdgeLeftOrRight);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2449);
			match(LEFT_ANGLE_BRACKET);
			setState(2450);
			match(MINUS_SIGN);
			setState(2451);
			match(LEFT_BRACKET);
			setState(2452);
			elementPatternFiller();
			setState(2453);
			match(RIGHT_BRACKET);
			setState(2454);
			match(RIGHT_ARROW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FullEdgeAnyDirectionContext extends ParserRuleContext {
		public List<TerminalNode> MINUS_SIGN() { return getTokens(GQLParser.MINUS_SIGN); }
		public TerminalNode MINUS_SIGN(int i) {
			return getToken(GQLParser.MINUS_SIGN, i);
		}
		public TerminalNode LEFT_BRACKET() { return getToken(GQLParser.LEFT_BRACKET, 0); }
		public ElementPatternFillerContext elementPatternFiller() {
			return getRuleContext(ElementPatternFillerContext.class,0);
		}
		public TerminalNode RIGHT_BRACKET() { return getToken(GQLParser.RIGHT_BRACKET, 0); }
		public FullEdgeAnyDirectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullEdgeAnyDirection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterFullEdgeAnyDirection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitFullEdgeAnyDirection(this);
		}
	}

	public final FullEdgeAnyDirectionContext fullEdgeAnyDirection() throws RecognitionException {
		FullEdgeAnyDirectionContext _localctx = new FullEdgeAnyDirectionContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_fullEdgeAnyDirection);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2456);
			match(MINUS_SIGN);
			setState(2457);
			match(LEFT_BRACKET);
			setState(2458);
			elementPatternFiller();
			setState(2459);
			match(RIGHT_BRACKET);
			setState(2460);
			match(MINUS_SIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AbbreviatedEdgePatternContext extends ParserRuleContext {
		public AbbreviatedEdgePatternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_abbreviatedEdgePattern; }
	 
		public AbbreviatedEdgePatternContext() { }
		public void copyFrom(AbbreviatedEdgePatternContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AbbreviatedEdgeLeftOrUndirectedContext extends AbbreviatedEdgePatternContext {
		public TerminalNode LEFT_ANGLE_BRACKET() { return getToken(GQLParser.LEFT_ANGLE_BRACKET, 0); }
		public TerminalNode TILDE() { return getToken(GQLParser.TILDE, 0); }
		public AbbreviatedEdgeLeftOrUndirectedContext(AbbreviatedEdgePatternContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterAbbreviatedEdgeLeftOrUndirected(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitAbbreviatedEdgeLeftOrUndirected(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AbbreviatedEdgePointingLeftContext extends AbbreviatedEdgePatternContext {
		public TerminalNode LEFT_ANGLE_BRACKET() { return getToken(GQLParser.LEFT_ANGLE_BRACKET, 0); }
		public TerminalNode MINUS_SIGN() { return getToken(GQLParser.MINUS_SIGN, 0); }
		public AbbreviatedEdgePointingLeftContext(AbbreviatedEdgePatternContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterAbbreviatedEdgePointingLeft(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitAbbreviatedEdgePointingLeft(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AbbreviatedEdgePointingRightContext extends AbbreviatedEdgePatternContext {
		public TerminalNode RIGHT_ARROW() { return getToken(GQLParser.RIGHT_ARROW, 0); }
		public AbbreviatedEdgePointingRightContext(AbbreviatedEdgePatternContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterAbbreviatedEdgePointingRight(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitAbbreviatedEdgePointingRight(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AbbreviatedEdgeUndirectedOrRightContext extends AbbreviatedEdgePatternContext {
		public TerminalNode TILDE_RIGHT_ARROW() { return getToken(GQLParser.TILDE_RIGHT_ARROW, 0); }
		public AbbreviatedEdgeUndirectedOrRightContext(AbbreviatedEdgePatternContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterAbbreviatedEdgeUndirectedOrRight(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitAbbreviatedEdgeUndirectedOrRight(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AbbreviatedEdgeUndirectedContext extends AbbreviatedEdgePatternContext {
		public TerminalNode TILDE() { return getToken(GQLParser.TILDE, 0); }
		public AbbreviatedEdgeUndirectedContext(AbbreviatedEdgePatternContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterAbbreviatedEdgeUndirected(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitAbbreviatedEdgeUndirected(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AbbreviatedEdgeLeftOrRightContext extends AbbreviatedEdgePatternContext {
		public TerminalNode LEFT_MINUS_RIGHT() { return getToken(GQLParser.LEFT_MINUS_RIGHT, 0); }
		public AbbreviatedEdgeLeftOrRightContext(AbbreviatedEdgePatternContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterAbbreviatedEdgeLeftOrRight(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitAbbreviatedEdgeLeftOrRight(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class AbbreviatedEdgeAnyDirectionContext extends AbbreviatedEdgePatternContext {
		public TerminalNode MINUS_SIGN() { return getToken(GQLParser.MINUS_SIGN, 0); }
		public AbbreviatedEdgeAnyDirectionContext(AbbreviatedEdgePatternContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterAbbreviatedEdgeAnyDirection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitAbbreviatedEdgeAnyDirection(this);
		}
	}

	public final AbbreviatedEdgePatternContext abbreviatedEdgePattern() throws RecognitionException {
		AbbreviatedEdgePatternContext _localctx = new AbbreviatedEdgePatternContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_abbreviatedEdgePattern);
		try {
			setState(2471);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,215,_ctx) ) {
			case 1:
				_localctx = new AbbreviatedEdgePointingLeftContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2462);
				match(LEFT_ANGLE_BRACKET);
				setState(2463);
				match(MINUS_SIGN);
				}
				break;
			case 2:
				_localctx = new AbbreviatedEdgeUndirectedContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2464);
				match(TILDE);
				}
				break;
			case 3:
				_localctx = new AbbreviatedEdgePointingRightContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2465);
				match(RIGHT_ARROW);
				}
				break;
			case 4:
				_localctx = new AbbreviatedEdgeLeftOrUndirectedContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2466);
				match(LEFT_ANGLE_BRACKET);
				setState(2467);
				match(TILDE);
				}
				break;
			case 5:
				_localctx = new AbbreviatedEdgeUndirectedOrRightContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2468);
				match(TILDE_RIGHT_ARROW);
				}
				break;
			case 6:
				_localctx = new AbbreviatedEdgeLeftOrRightContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(2469);
				match(LEFT_MINUS_RIGHT);
				}
				break;
			case 7:
				_localctx = new AbbreviatedEdgeAnyDirectionContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(2470);
				match(MINUS_SIGN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ParenthesizedPathPatternExpressionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public PathPatternExpressionContext pathPatternExpression() {
			return getRuleContext(PathPatternExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public SubpathVariableDeclarationContext subpathVariableDeclaration() {
			return getRuleContext(SubpathVariableDeclarationContext.class,0);
		}
		public PathModePrefixContext pathModePrefix() {
			return getRuleContext(PathModePrefixContext.class,0);
		}
		public ParenthesizedPathPatternWhereClauseContext parenthesizedPathPatternWhereClause() {
			return getRuleContext(ParenthesizedPathPatternWhereClauseContext.class,0);
		}
		public ParenthesizedPathPatternExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parenthesizedPathPatternExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterParenthesizedPathPatternExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitParenthesizedPathPatternExpression(this);
		}
	}

	public final ParenthesizedPathPatternExpressionContext parenthesizedPathPatternExpression() throws RecognitionException {
		ParenthesizedPathPatternExpressionContext _localctx = new ParenthesizedPathPatternExpressionContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_parenthesizedPathPatternExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2473);
			match(LEFT_PAREN);
			setState(2475);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 337)) & ~0x3f) == 0 && ((1L << (_la - 337)) & 67L) != 0)) {
				{
				setState(2474);
				subpathVariableDeclaration();
				}
			}

			setState(2478);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ACYCLIC || ((((_la - 228)) & ~0x3f) == 0 && ((1L << (_la - 228)) & 140737490452481L) != 0)) {
				{
				setState(2477);
				pathModePrefix();
				}
			}

			setState(2480);
			pathPatternExpression();
			setState(2482);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(2481);
				parenthesizedPathPatternWhereClause();
				}
			}

			setState(2484);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SubpathVariableDeclarationContext extends ParserRuleContext {
		public SubpathVariableContext subpathVariable() {
			return getRuleContext(SubpathVariableContext.class,0);
		}
		public TerminalNode EQUALS_OPERATOR() { return getToken(GQLParser.EQUALS_OPERATOR, 0); }
		public SubpathVariableDeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subpathVariableDeclaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSubpathVariableDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSubpathVariableDeclaration(this);
		}
	}

	public final SubpathVariableDeclarationContext subpathVariableDeclaration() throws RecognitionException {
		SubpathVariableDeclarationContext _localctx = new SubpathVariableDeclarationContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_subpathVariableDeclaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2486);
			subpathVariable();
			setState(2487);
			match(EQUALS_OPERATOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ParenthesizedPathPatternWhereClauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(GQLParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ParenthesizedPathPatternWhereClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parenthesizedPathPatternWhereClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterParenthesizedPathPatternWhereClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitParenthesizedPathPatternWhereClause(this);
		}
	}

	public final ParenthesizedPathPatternWhereClauseContext parenthesizedPathPatternWhereClause() throws RecognitionException {
		ParenthesizedPathPatternWhereClauseContext _localctx = new ParenthesizedPathPatternWhereClauseContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_parenthesizedPathPatternWhereClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2489);
			match(WHERE);
			setState(2490);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InsertGraphPatternContext extends ParserRuleContext {
		public InsertPathPatternListContext insertPathPatternList() {
			return getRuleContext(InsertPathPatternListContext.class,0);
		}
		public InsertGraphPatternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertGraphPattern; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterInsertGraphPattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitInsertGraphPattern(this);
		}
	}

	public final InsertGraphPatternContext insertGraphPattern() throws RecognitionException {
		InsertGraphPatternContext _localctx = new InsertGraphPatternContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_insertGraphPattern);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2492);
			insertPathPatternList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InsertPathPatternListContext extends ParserRuleContext {
		public List<InsertPathPatternContext> insertPathPattern() {
			return getRuleContexts(InsertPathPatternContext.class);
		}
		public InsertPathPatternContext insertPathPattern(int i) {
			return getRuleContext(InsertPathPatternContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQLParser.COMMA, i);
		}
		public InsertPathPatternListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertPathPatternList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterInsertPathPatternList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitInsertPathPatternList(this);
		}
	}

	public final InsertPathPatternListContext insertPathPatternList() throws RecognitionException {
		InsertPathPatternListContext _localctx = new InsertPathPatternListContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_insertPathPatternList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2494);
			insertPathPattern();
			setState(2499);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2495);
				match(COMMA);
				setState(2496);
				insertPathPattern();
				}
				}
				setState(2501);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InsertPathPatternContext extends ParserRuleContext {
		public List<InsertNodePatternContext> insertNodePattern() {
			return getRuleContexts(InsertNodePatternContext.class);
		}
		public InsertNodePatternContext insertNodePattern(int i) {
			return getRuleContext(InsertNodePatternContext.class,i);
		}
		public List<InsertEdgePatternContext> insertEdgePattern() {
			return getRuleContexts(InsertEdgePatternContext.class);
		}
		public InsertEdgePatternContext insertEdgePattern(int i) {
			return getRuleContext(InsertEdgePatternContext.class,i);
		}
		public InsertPathPatternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertPathPattern; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterInsertPathPattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitInsertPathPattern(this);
		}
	}

	public final InsertPathPatternContext insertPathPattern() throws RecognitionException {
		InsertPathPatternContext _localctx = new InsertPathPatternContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_insertPathPattern);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2502);
			insertNodePattern();
			setState(2508);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 33579008L) != 0)) {
				{
				{
				setState(2503);
				insertEdgePattern();
				setState(2504);
				insertNodePattern();
				}
				}
				setState(2510);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InsertNodePatternContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public InsertElementPatternFillerContext insertElementPatternFiller() {
			return getRuleContext(InsertElementPatternFillerContext.class,0);
		}
		public InsertNodePatternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertNodePattern; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterInsertNodePattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitInsertNodePattern(this);
		}
	}

	public final InsertNodePatternContext insertNodePattern() throws RecognitionException {
		InsertNodePatternContext _localctx = new InsertNodePatternContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_insertNodePattern);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2511);
			match(LEFT_PAREN);
			setState(2513);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -268434416L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -1L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -1L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & 1649267441663L) != 0) || ((((_la - 337)) & ~0x3f) == 0 && ((1L << (_la - 337)) & 67L) != 0)) {
				{
				setState(2512);
				insertElementPatternFiller();
				}
			}

			setState(2515);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InsertEdgePatternContext extends ParserRuleContext {
		public InsertEdgePointingLeftContext insertEdgePointingLeft() {
			return getRuleContext(InsertEdgePointingLeftContext.class,0);
		}
		public InsertEdgePointingRightContext insertEdgePointingRight() {
			return getRuleContext(InsertEdgePointingRightContext.class,0);
		}
		public InsertEdgeUndirectedContext insertEdgeUndirected() {
			return getRuleContext(InsertEdgeUndirectedContext.class,0);
		}
		public InsertEdgePatternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertEdgePattern; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterInsertEdgePattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitInsertEdgePattern(this);
		}
	}

	public final InsertEdgePatternContext insertEdgePattern() throws RecognitionException {
		InsertEdgePatternContext _localctx = new InsertEdgePatternContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_insertEdgePattern);
		try {
			setState(2520);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_ANGLE_BRACKET:
				enterOuterAlt(_localctx, 1);
				{
				setState(2517);
				insertEdgePointingLeft();
				}
				break;
			case MINUS_SIGN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2518);
				insertEdgePointingRight();
				}
				break;
			case TILDE:
				enterOuterAlt(_localctx, 3);
				{
				setState(2519);
				insertEdgeUndirected();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InsertEdgePointingLeftContext extends ParserRuleContext {
		public TerminalNode LEFT_ANGLE_BRACKET() { return getToken(GQLParser.LEFT_ANGLE_BRACKET, 0); }
		public List<TerminalNode> MINUS_SIGN() { return getTokens(GQLParser.MINUS_SIGN); }
		public TerminalNode MINUS_SIGN(int i) {
			return getToken(GQLParser.MINUS_SIGN, i);
		}
		public TerminalNode LEFT_BRACKET() { return getToken(GQLParser.LEFT_BRACKET, 0); }
		public TerminalNode RIGHT_BRACKET() { return getToken(GQLParser.RIGHT_BRACKET, 0); }
		public InsertElementPatternFillerContext insertElementPatternFiller() {
			return getRuleContext(InsertElementPatternFillerContext.class,0);
		}
		public InsertEdgePointingLeftContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertEdgePointingLeft; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterInsertEdgePointingLeft(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitInsertEdgePointingLeft(this);
		}
	}

	public final InsertEdgePointingLeftContext insertEdgePointingLeft() throws RecognitionException {
		InsertEdgePointingLeftContext _localctx = new InsertEdgePointingLeftContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_insertEdgePointingLeft);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2522);
			match(LEFT_ANGLE_BRACKET);
			setState(2523);
			match(MINUS_SIGN);
			setState(2524);
			match(LEFT_BRACKET);
			setState(2526);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -268434416L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -1L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -1L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & 1649267441663L) != 0) || ((((_la - 337)) & ~0x3f) == 0 && ((1L << (_la - 337)) & 67L) != 0)) {
				{
				setState(2525);
				insertElementPatternFiller();
				}
			}

			setState(2528);
			match(RIGHT_BRACKET);
			setState(2529);
			match(MINUS_SIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InsertEdgePointingRightContext extends ParserRuleContext {
		public TerminalNode MINUS_SIGN() { return getToken(GQLParser.MINUS_SIGN, 0); }
		public TerminalNode LEFT_BRACKET() { return getToken(GQLParser.LEFT_BRACKET, 0); }
		public TerminalNode RIGHT_BRACKET() { return getToken(GQLParser.RIGHT_BRACKET, 0); }
		public TerminalNode RIGHT_ARROW() { return getToken(GQLParser.RIGHT_ARROW, 0); }
		public InsertElementPatternFillerContext insertElementPatternFiller() {
			return getRuleContext(InsertElementPatternFillerContext.class,0);
		}
		public InsertEdgePointingRightContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertEdgePointingRight; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterInsertEdgePointingRight(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitInsertEdgePointingRight(this);
		}
	}

	public final InsertEdgePointingRightContext insertEdgePointingRight() throws RecognitionException {
		InsertEdgePointingRightContext _localctx = new InsertEdgePointingRightContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_insertEdgePointingRight);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2531);
			match(MINUS_SIGN);
			setState(2532);
			match(LEFT_BRACKET);
			setState(2534);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -268434416L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -1L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -1L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & 1649267441663L) != 0) || ((((_la - 337)) & ~0x3f) == 0 && ((1L << (_la - 337)) & 67L) != 0)) {
				{
				setState(2533);
				insertElementPatternFiller();
				}
			}

			setState(2536);
			match(RIGHT_BRACKET);
			setState(2537);
			match(RIGHT_ARROW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InsertEdgeUndirectedContext extends ParserRuleContext {
		public List<TerminalNode> TILDE() { return getTokens(GQLParser.TILDE); }
		public TerminalNode TILDE(int i) {
			return getToken(GQLParser.TILDE, i);
		}
		public TerminalNode LEFT_BRACKET() { return getToken(GQLParser.LEFT_BRACKET, 0); }
		public TerminalNode RIGHT_BRACKET() { return getToken(GQLParser.RIGHT_BRACKET, 0); }
		public InsertElementPatternFillerContext insertElementPatternFiller() {
			return getRuleContext(InsertElementPatternFillerContext.class,0);
		}
		public InsertEdgeUndirectedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertEdgeUndirected; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterInsertEdgeUndirected(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitInsertEdgeUndirected(this);
		}
	}

	public final InsertEdgeUndirectedContext insertEdgeUndirected() throws RecognitionException {
		InsertEdgeUndirectedContext _localctx = new InsertEdgeUndirectedContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_insertEdgeUndirected);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2539);
			match(TILDE);
			setState(2540);
			match(LEFT_BRACKET);
			setState(2542);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -268434416L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -1L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -1L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & 1649267441663L) != 0) || ((((_la - 337)) & ~0x3f) == 0 && ((1L << (_la - 337)) & 67L) != 0)) {
				{
				setState(2541);
				insertElementPatternFiller();
				}
			}

			setState(2544);
			match(RIGHT_BRACKET);
			setState(2545);
			match(TILDE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class InsertElementPatternFillerContext extends ParserRuleContext {
		public ElementVariableDeclarationContext elementVariableDeclaration() {
			return getRuleContext(ElementVariableDeclarationContext.class,0);
		}
		public LabelAndPropertySetSpecificationContext labelAndPropertySetSpecification() {
			return getRuleContext(LabelAndPropertySetSpecificationContext.class,0);
		}
		public InsertElementPatternFillerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertElementPatternFiller; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterInsertElementPatternFiller(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitInsertElementPatternFiller(this);
		}
	}

	public final InsertElementPatternFillerContext insertElementPatternFiller() throws RecognitionException {
		InsertElementPatternFillerContext _localctx = new InsertElementPatternFillerContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_insertElementPatternFiller);
		try {
			setState(2552);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,226,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2547);
				elementVariableDeclaration();
				setState(2548);
				labelAndPropertySetSpecification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2550);
				elementVariableDeclaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2551);
				labelAndPropertySetSpecification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LabelAndPropertySetSpecificationContext extends ParserRuleContext {
		public IsOrColonContext isOrColon() {
			return getRuleContext(IsOrColonContext.class,0);
		}
		public LabelSetSpecificationContext labelSetSpecification() {
			return getRuleContext(LabelSetSpecificationContext.class,0);
		}
		public ElementPropertySpecificationContext elementPropertySpecification() {
			return getRuleContext(ElementPropertySpecificationContext.class,0);
		}
		public LabelAndPropertySetSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labelAndPropertySetSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterLabelAndPropertySetSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitLabelAndPropertySetSpecification(this);
		}
	}

	public final LabelAndPropertySetSpecificationContext labelAndPropertySetSpecification() throws RecognitionException {
		LabelAndPropertySetSpecificationContext _localctx = new LabelAndPropertySetSpecificationContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_labelAndPropertySetSpecification);
		try {
			setState(2562);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,227,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2554);
				isOrColon();
				setState(2555);
				labelSetSpecification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2557);
				isOrColon();
				setState(2558);
				labelSetSpecification();
				setState(2559);
				elementPropertySpecification();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2561);
				elementPropertySpecification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LabelExpressionContext extends ParserRuleContext {
		public List<LabelTermContext> labelTerm() {
			return getRuleContexts(LabelTermContext.class);
		}
		public LabelTermContext labelTerm(int i) {
			return getRuleContext(LabelTermContext.class,i);
		}
		public List<TerminalNode> VERTICAL_BAR() { return getTokens(GQLParser.VERTICAL_BAR); }
		public TerminalNode VERTICAL_BAR(int i) {
			return getToken(GQLParser.VERTICAL_BAR, i);
		}
		public LabelExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labelExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterLabelExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitLabelExpression(this);
		}
	}

	public final LabelExpressionContext labelExpression() throws RecognitionException {
		LabelExpressionContext _localctx = new LabelExpressionContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_labelExpression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2564);
			labelTerm();
			setState(2569);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,228,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2565);
					match(VERTICAL_BAR);
					setState(2566);
					labelTerm();
					}
					} 
				}
				setState(2571);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,228,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LabelTermContext extends ParserRuleContext {
		public List<LabelFactorContext> labelFactor() {
			return getRuleContexts(LabelFactorContext.class);
		}
		public LabelFactorContext labelFactor(int i) {
			return getRuleContext(LabelFactorContext.class,i);
		}
		public List<TerminalNode> AMPERSAND() { return getTokens(GQLParser.AMPERSAND); }
		public TerminalNode AMPERSAND(int i) {
			return getToken(GQLParser.AMPERSAND, i);
		}
		public LabelTermContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labelTerm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterLabelTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitLabelTerm(this);
		}
	}

	public final LabelTermContext labelTerm() throws RecognitionException {
		LabelTermContext _localctx = new LabelTermContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_labelTerm);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2572);
			labelFactor();
			setState(2577);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,229,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2573);
					match(AMPERSAND);
					setState(2574);
					labelFactor();
					}
					} 
				}
				setState(2579);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,229,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LabelFactorContext extends ParserRuleContext {
		public LabelPrimaryContext labelPrimary() {
			return getRuleContext(LabelPrimaryContext.class,0);
		}
		public TerminalNode EXCLAMATION_MARK() { return getToken(GQLParser.EXCLAMATION_MARK, 0); }
		public LabelFactorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labelFactor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterLabelFactor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitLabelFactor(this);
		}
	}

	public final LabelFactorContext labelFactor() throws RecognitionException {
		LabelFactorContext _localctx = new LabelFactorContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_labelFactor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2581);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCLAMATION_MARK) {
				{
				setState(2580);
				match(EXCLAMATION_MARK);
				}
			}

			setState(2583);
			labelPrimary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LabelPrimaryContext extends ParserRuleContext {
		public LabelNameContext labelName() {
			return getRuleContext(LabelNameContext.class,0);
		}
		public WildcardLabelContext wildcardLabel() {
			return getRuleContext(WildcardLabelContext.class,0);
		}
		public ParenthesizedLabelExpressionContext parenthesizedLabelExpression() {
			return getRuleContext(ParenthesizedLabelExpressionContext.class,0);
		}
		public LabelPrimaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labelPrimary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterLabelPrimary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitLabelPrimary(this);
		}
	}

	public final LabelPrimaryContext labelPrimary() throws RecognitionException {
		LabelPrimaryContext _localctx = new LabelPrimaryContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_labelPrimary);
		try {
			setState(2588);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABS:
			case ACOS:
			case ACYCLIC:
			case ALL:
			case ALL_DIFFERENT:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASCENDING:
			case ASIN:
			case AT:
			case ATAN:
			case AVG:
			case BIG:
			case BIGINT:
			case BINARY:
			case BINDING:
			case BINDINGS:
			case BOOL:
			case BOOLEAN:
			case BOTH:
			case BTRIM:
			case BY:
			case BYTE_LENGTH:
			case BYTES:
			case CALL:
			case CASE:
			case CAST:
			case CEIL:
			case CEILING:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case CHARACTERISTICS:
			case CLOSE:
			case COALESCE:
			case COLLECT:
			case COMMIT:
			case CONNECTING:
			case COPY:
			case COS:
			case COSH:
			case COT:
			case COUNT:
			case CREATE:
			case CURRENT_DATE:
			case CURRENT_GRAPH:
			case CURRENT_PROPERTY_GRAPH:
			case CURRENT_SCHEMA:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DATE:
			case DATETIME:
			case DEC:
			case DECIMAL:
			case DEGREES:
			case DELETE:
			case DESC:
			case DESCENDING:
			case DESTINATION:
			case DETACH:
			case DIFFERENT:
			case DIRECTED:
			case DISTINCT:
			case DOUBLE:
			case DROP:
			case DURATION:
			case DURATION_BETWEEN:
			case ELEMENT:
			case ELEMENT_ID:
			case ELEMENTS:
			case ELSE:
			case END:
			case EXCEPT:
			case EXISTS:
			case EXP:
			case K_FALSE:
			case FILTER:
			case FINISH:
			case FIRST:
			case FLOAT:
			case FLOAT128:
			case FLOAT16:
			case FLOAT256:
			case FLOAT32:
			case FLOAT64:
			case FLOOR:
			case FOR:
			case FROM:
			case GRAPH:
			case GROUP:
			case GROUPS:
			case HAVING:
			case HOME_GRAPH:
			case HOME_PROPERTY_GRAPH:
			case HOME_SCHEMA:
			case I_DONT_KNOW_1:
			case I_DONT_KNOW_2:
			case I_DONT_KNOW_3:
			case I_DONT_KNOW_4:
			case I_DONT_KNOW_5:
			case IF:
			case IN:
			case INSERT:
			case INT:
			case INT8:
			case INT16:
			case INT32:
			case INT64:
			case INT128:
			case INT256:
			case INTEGER:
			case INTEGER8:
			case INTEGER16:
			case INTEGER32:
			case INTEGER64:
			case INTEGER128:
			case INTEGER256:
			case INTERSECT:
			case IS:
			case KEEP:
			case LABEL:
			case LABELED:
			case LABELS:
			case LAST:
			case LEADING:
			case LEFT:
			case LET:
			case LIKE:
			case LIMIT:
			case LIST:
			case LN:
			case LOCAL:
			case LOCAL_DATETIME:
			case LOCAL_TIME:
			case LOCAL_TIMESTAMP:
			case LOG:
			case LOG10:
			case LOWER:
			case LTRIM:
			case MATCH:
			case MAX:
			case MIN:
			case MOD:
			case NEXT:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case NO:
			case NODETACH:
			case NORMALIZE:
			case NORMALIZED:
			case NOT:
			case NULL:
			case NULLIF:
			case NULLS:
			case OCTET_LENGTH:
			case OF:
			case OFFSET:
			case SKIP_:
			case ONLY:
			case OPEN:
			case OPTIONAL:
			case OR:
			case ORDER:
			case ORDINALITY:
			case OTHERWISE:
			case PARAMETER:
			case PARAMETERS:
			case PATH:
			case PATH_LENGTH:
			case PATHS:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POWER:
			case PRECISION:
			case PROPERTY:
			case PROPERTY_EXISTS:
			case RADIANS:
			case READ:
			case REAL:
			case RECORD:
			case REMOVE:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RETURN:
			case ROLLBACK:
			case RTRIM:
			case RIGHT:
			case SAME:
			case SCHEMA:
			case SELECT:
			case SESSION:
			case SET:
			case SHORTEST:
			case SIGNED:
			case SIMPLE:
			case SIN:
			case SINH:
			case SMALL:
			case SMALLINT:
			case SOURCE:
			case SQRT:
			case START:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STRING:
			case SUM:
			case TABLE:
			case TAN:
			case TANH:
			case TEMP:
			case THEN:
			case TIME:
			case TIMESTAMP:
			case TIMEZONE:
			case TO:
			case TRAIL:
			case TRAILING:
			case TRANSACTION:
			case TRIM:
			case K_TRUE:
			case TYPE:
			case TYPED:
			case UBIGINT:
			case UINT:
			case UINT128:
			case UINT16:
			case UINT256:
			case UINT32:
			case UINT64:
			case UINT8:
			case UNDIRECTED:
			case UNION:
			case UNKNOWN:
			case UNSIGNED:
			case UPPER:
			case USE:
			case USMALLINT:
			case VALUE:
			case VARBINARY:
			case VARCHAR:
			case VARIABLE:
			case WALK:
			case WHEN:
			case WHERE:
			case WITH:
			case WITHOUT:
			case WRITE:
			case XOR:
			case YIELD:
			case ZONE:
			case ZONED:
			case ZONED_DATETIME:
			case ZONED_TIME:
			case INTERVAL_DAY:
			case INTERVAL_WEEK:
			case INTERVAL_MONTH:
			case INTERVAL_YEAR:
			case EDGE_SYNONYM:
			case EDGES_SYNONYM:
			case NODE_SYNONYM:
			case KEY_WORD:
			case PRE_RESERVED_WORD:
			case DOUBLE_QUOTED_STRING_LITERAL:
			case ACCENT_QUOTED_STRING_LITERAL:
			case REGULAR_IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(2585);
				labelName();
				}
				break;
			case PERCENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2586);
				wildcardLabel();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 3);
				{
				setState(2587);
				parenthesizedLabelExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WildcardLabelContext extends ParserRuleContext {
		public TerminalNode PERCENT() { return getToken(GQLParser.PERCENT, 0); }
		public WildcardLabelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_wildcardLabel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterWildcardLabel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitWildcardLabel(this);
		}
	}

	public final WildcardLabelContext wildcardLabel() throws RecognitionException {
		WildcardLabelContext _localctx = new WildcardLabelContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_wildcardLabel);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2590);
			match(PERCENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ParenthesizedLabelExpressionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public LabelExpressionContext labelExpression() {
			return getRuleContext(LabelExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public ParenthesizedLabelExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parenthesizedLabelExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterParenthesizedLabelExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitParenthesizedLabelExpression(this);
		}
	}

	public final ParenthesizedLabelExpressionContext parenthesizedLabelExpression() throws RecognitionException {
		ParenthesizedLabelExpressionContext _localctx = new ParenthesizedLabelExpressionContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_parenthesizedLabelExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2592);
			match(LEFT_PAREN);
			setState(2593);
			labelExpression();
			setState(2594);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GraphPatternQuantifierContext extends ParserRuleContext {
		public TerminalNode ASTERISK() { return getToken(GQLParser.ASTERISK, 0); }
		public TerminalNode PLUS_SIGN() { return getToken(GQLParser.PLUS_SIGN, 0); }
		public FixedQuantifierContext fixedQuantifier() {
			return getRuleContext(FixedQuantifierContext.class,0);
		}
		public GeneralQuantifierContext generalQuantifier() {
			return getRuleContext(GeneralQuantifierContext.class,0);
		}
		public GraphPatternQuantifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_graphPatternQuantifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGraphPatternQuantifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGraphPatternQuantifier(this);
		}
	}

	public final GraphPatternQuantifierContext graphPatternQuantifier() throws RecognitionException {
		GraphPatternQuantifierContext _localctx = new GraphPatternQuantifierContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_graphPatternQuantifier);
		try {
			setState(2600);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,232,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2596);
				match(ASTERISK);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2597);
				match(PLUS_SIGN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2598);
				fixedQuantifier();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2599);
				generalQuantifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FixedQuantifierContext extends ParserRuleContext {
		public TerminalNode LEFT_BRACE() { return getToken(GQLParser.LEFT_BRACE, 0); }
		public TerminalNode UNSIGNED_DECIMAL_INTEGER() { return getToken(GQLParser.UNSIGNED_DECIMAL_INTEGER, 0); }
		public TerminalNode RIGHT_BRACE() { return getToken(GQLParser.RIGHT_BRACE, 0); }
		public FixedQuantifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fixedQuantifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterFixedQuantifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitFixedQuantifier(this);
		}
	}

	public final FixedQuantifierContext fixedQuantifier() throws RecognitionException {
		FixedQuantifierContext _localctx = new FixedQuantifierContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_fixedQuantifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2602);
			match(LEFT_BRACE);
			setState(2603);
			match(UNSIGNED_DECIMAL_INTEGER);
			setState(2604);
			match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GeneralQuantifierContext extends ParserRuleContext {
		public TerminalNode LEFT_BRACE() { return getToken(GQLParser.LEFT_BRACE, 0); }
		public TerminalNode COMMA() { return getToken(GQLParser.COMMA, 0); }
		public TerminalNode RIGHT_BRACE() { return getToken(GQLParser.RIGHT_BRACE, 0); }
		public LowerBoundContext lowerBound() {
			return getRuleContext(LowerBoundContext.class,0);
		}
		public UpperBoundContext upperBound() {
			return getRuleContext(UpperBoundContext.class,0);
		}
		public GeneralQuantifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generalQuantifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGeneralQuantifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGeneralQuantifier(this);
		}
	}

	public final GeneralQuantifierContext generalQuantifier() throws RecognitionException {
		GeneralQuantifierContext _localctx = new GeneralQuantifierContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_generalQuantifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2606);
			match(LEFT_BRACE);
			setState(2608);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNSIGNED_DECIMAL_INTEGER) {
				{
				setState(2607);
				lowerBound();
				}
			}

			setState(2610);
			match(COMMA);
			setState(2612);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNSIGNED_DECIMAL_INTEGER) {
				{
				setState(2611);
				upperBound();
				}
			}

			setState(2614);
			match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LowerBoundContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_DECIMAL_INTEGER() { return getToken(GQLParser.UNSIGNED_DECIMAL_INTEGER, 0); }
		public LowerBoundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lowerBound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterLowerBound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitLowerBound(this);
		}
	}

	public final LowerBoundContext lowerBound() throws RecognitionException {
		LowerBoundContext _localctx = new LowerBoundContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_lowerBound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2616);
			match(UNSIGNED_DECIMAL_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UpperBoundContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_DECIMAL_INTEGER() { return getToken(GQLParser.UNSIGNED_DECIMAL_INTEGER, 0); }
		public UpperBoundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_upperBound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterUpperBound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitUpperBound(this);
		}
	}

	public final UpperBoundContext upperBound() throws RecognitionException {
		UpperBoundContext _localctx = new UpperBoundContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_upperBound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2618);
			match(UNSIGNED_DECIMAL_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedPathPatternExpressionContext extends ParserRuleContext {
		public SimplifiedDefaultingLeftContext simplifiedDefaultingLeft() {
			return getRuleContext(SimplifiedDefaultingLeftContext.class,0);
		}
		public SimplifiedDefaultingUndirectedContext simplifiedDefaultingUndirected() {
			return getRuleContext(SimplifiedDefaultingUndirectedContext.class,0);
		}
		public SimplifiedDefaultingRightContext simplifiedDefaultingRight() {
			return getRuleContext(SimplifiedDefaultingRightContext.class,0);
		}
		public SimplifiedDefaultingLeftOrUndirectedContext simplifiedDefaultingLeftOrUndirected() {
			return getRuleContext(SimplifiedDefaultingLeftOrUndirectedContext.class,0);
		}
		public SimplifiedDefaultingUndirectedOrRightContext simplifiedDefaultingUndirectedOrRight() {
			return getRuleContext(SimplifiedDefaultingUndirectedOrRightContext.class,0);
		}
		public SimplifiedDefaultingLeftOrRightContext simplifiedDefaultingLeftOrRight() {
			return getRuleContext(SimplifiedDefaultingLeftOrRightContext.class,0);
		}
		public SimplifiedDefaultingAnyDirectionContext simplifiedDefaultingAnyDirection() {
			return getRuleContext(SimplifiedDefaultingAnyDirectionContext.class,0);
		}
		public SimplifiedPathPatternExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedPathPatternExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSimplifiedPathPatternExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSimplifiedPathPatternExpression(this);
		}
	}

	public final SimplifiedPathPatternExpressionContext simplifiedPathPatternExpression() throws RecognitionException {
		SimplifiedPathPatternExpressionContext _localctx = new SimplifiedPathPatternExpressionContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_simplifiedPathPatternExpression);
		try {
			setState(2627);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,235,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2620);
				simplifiedDefaultingLeft();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2621);
				simplifiedDefaultingUndirected();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2622);
				simplifiedDefaultingRight();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2623);
				simplifiedDefaultingLeftOrUndirected();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2624);
				simplifiedDefaultingUndirectedOrRight();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2625);
				simplifiedDefaultingLeftOrRight();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2626);
				simplifiedDefaultingAnyDirection();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedDefaultingLeftContext extends ParserRuleContext {
		public TerminalNode LEFT_MINUS_SLASH() { return getToken(GQLParser.LEFT_MINUS_SLASH, 0); }
		public SimplifiedContentsContext simplifiedContents() {
			return getRuleContext(SimplifiedContentsContext.class,0);
		}
		public TerminalNode SOLIDUS() { return getToken(GQLParser.SOLIDUS, 0); }
		public TerminalNode MINUS_SIGN() { return getToken(GQLParser.MINUS_SIGN, 0); }
		public SimplifiedDefaultingLeftContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedDefaultingLeft; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSimplifiedDefaultingLeft(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSimplifiedDefaultingLeft(this);
		}
	}

	public final SimplifiedDefaultingLeftContext simplifiedDefaultingLeft() throws RecognitionException {
		SimplifiedDefaultingLeftContext _localctx = new SimplifiedDefaultingLeftContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_simplifiedDefaultingLeft);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2629);
			match(LEFT_MINUS_SLASH);
			setState(2630);
			simplifiedContents();
			setState(2631);
			match(SOLIDUS);
			setState(2632);
			match(MINUS_SIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedDefaultingUndirectedContext extends ParserRuleContext {
		public TerminalNode TILDE_SLASH() { return getToken(GQLParser.TILDE_SLASH, 0); }
		public SimplifiedContentsContext simplifiedContents() {
			return getRuleContext(SimplifiedContentsContext.class,0);
		}
		public TerminalNode SOLIDUS() { return getToken(GQLParser.SOLIDUS, 0); }
		public TerminalNode TILDE() { return getToken(GQLParser.TILDE, 0); }
		public SimplifiedDefaultingUndirectedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedDefaultingUndirected; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSimplifiedDefaultingUndirected(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSimplifiedDefaultingUndirected(this);
		}
	}

	public final SimplifiedDefaultingUndirectedContext simplifiedDefaultingUndirected() throws RecognitionException {
		SimplifiedDefaultingUndirectedContext _localctx = new SimplifiedDefaultingUndirectedContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_simplifiedDefaultingUndirected);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2634);
			match(TILDE_SLASH);
			setState(2635);
			simplifiedContents();
			setState(2636);
			match(SOLIDUS);
			setState(2637);
			match(TILDE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedDefaultingRightContext extends ParserRuleContext {
		public TerminalNode MINUS_SLASH() { return getToken(GQLParser.MINUS_SLASH, 0); }
		public SimplifiedContentsContext simplifiedContents() {
			return getRuleContext(SimplifiedContentsContext.class,0);
		}
		public TerminalNode SLASH_MINUS_RIGHT() { return getToken(GQLParser.SLASH_MINUS_RIGHT, 0); }
		public SimplifiedDefaultingRightContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedDefaultingRight; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSimplifiedDefaultingRight(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSimplifiedDefaultingRight(this);
		}
	}

	public final SimplifiedDefaultingRightContext simplifiedDefaultingRight() throws RecognitionException {
		SimplifiedDefaultingRightContext _localctx = new SimplifiedDefaultingRightContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_simplifiedDefaultingRight);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2639);
			match(MINUS_SLASH);
			setState(2640);
			simplifiedContents();
			setState(2641);
			match(SLASH_MINUS_RIGHT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedDefaultingLeftOrUndirectedContext extends ParserRuleContext {
		public TerminalNode LEFT_TILDE_SLASH() { return getToken(GQLParser.LEFT_TILDE_SLASH, 0); }
		public SimplifiedContentsContext simplifiedContents() {
			return getRuleContext(SimplifiedContentsContext.class,0);
		}
		public TerminalNode SOLIDUS() { return getToken(GQLParser.SOLIDUS, 0); }
		public TerminalNode TILDE() { return getToken(GQLParser.TILDE, 0); }
		public SimplifiedDefaultingLeftOrUndirectedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedDefaultingLeftOrUndirected; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSimplifiedDefaultingLeftOrUndirected(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSimplifiedDefaultingLeftOrUndirected(this);
		}
	}

	public final SimplifiedDefaultingLeftOrUndirectedContext simplifiedDefaultingLeftOrUndirected() throws RecognitionException {
		SimplifiedDefaultingLeftOrUndirectedContext _localctx = new SimplifiedDefaultingLeftOrUndirectedContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_simplifiedDefaultingLeftOrUndirected);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2643);
			match(LEFT_TILDE_SLASH);
			setState(2644);
			simplifiedContents();
			setState(2645);
			match(SOLIDUS);
			setState(2646);
			match(TILDE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedDefaultingUndirectedOrRightContext extends ParserRuleContext {
		public TerminalNode TILDE_SLASH() { return getToken(GQLParser.TILDE_SLASH, 0); }
		public SimplifiedContentsContext simplifiedContents() {
			return getRuleContext(SimplifiedContentsContext.class,0);
		}
		public TerminalNode SLASH_TILDE_RIGHT() { return getToken(GQLParser.SLASH_TILDE_RIGHT, 0); }
		public SimplifiedDefaultingUndirectedOrRightContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedDefaultingUndirectedOrRight; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSimplifiedDefaultingUndirectedOrRight(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSimplifiedDefaultingUndirectedOrRight(this);
		}
	}

	public final SimplifiedDefaultingUndirectedOrRightContext simplifiedDefaultingUndirectedOrRight() throws RecognitionException {
		SimplifiedDefaultingUndirectedOrRightContext _localctx = new SimplifiedDefaultingUndirectedOrRightContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_simplifiedDefaultingUndirectedOrRight);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2648);
			match(TILDE_SLASH);
			setState(2649);
			simplifiedContents();
			setState(2650);
			match(SLASH_TILDE_RIGHT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedDefaultingLeftOrRightContext extends ParserRuleContext {
		public TerminalNode LEFT_MINUS_SLASH() { return getToken(GQLParser.LEFT_MINUS_SLASH, 0); }
		public SimplifiedContentsContext simplifiedContents() {
			return getRuleContext(SimplifiedContentsContext.class,0);
		}
		public TerminalNode SLASH_MINUS_RIGHT() { return getToken(GQLParser.SLASH_MINUS_RIGHT, 0); }
		public SimplifiedDefaultingLeftOrRightContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedDefaultingLeftOrRight; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSimplifiedDefaultingLeftOrRight(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSimplifiedDefaultingLeftOrRight(this);
		}
	}

	public final SimplifiedDefaultingLeftOrRightContext simplifiedDefaultingLeftOrRight() throws RecognitionException {
		SimplifiedDefaultingLeftOrRightContext _localctx = new SimplifiedDefaultingLeftOrRightContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_simplifiedDefaultingLeftOrRight);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2652);
			match(LEFT_MINUS_SLASH);
			setState(2653);
			simplifiedContents();
			setState(2654);
			match(SLASH_MINUS_RIGHT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedDefaultingAnyDirectionContext extends ParserRuleContext {
		public TerminalNode MINUS_SLASH() { return getToken(GQLParser.MINUS_SLASH, 0); }
		public SimplifiedContentsContext simplifiedContents() {
			return getRuleContext(SimplifiedContentsContext.class,0);
		}
		public TerminalNode SOLIDUS() { return getToken(GQLParser.SOLIDUS, 0); }
		public TerminalNode MINUS_SIGN() { return getToken(GQLParser.MINUS_SIGN, 0); }
		public SimplifiedDefaultingAnyDirectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedDefaultingAnyDirection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSimplifiedDefaultingAnyDirection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSimplifiedDefaultingAnyDirection(this);
		}
	}

	public final SimplifiedDefaultingAnyDirectionContext simplifiedDefaultingAnyDirection() throws RecognitionException {
		SimplifiedDefaultingAnyDirectionContext _localctx = new SimplifiedDefaultingAnyDirectionContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_simplifiedDefaultingAnyDirection);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2656);
			match(MINUS_SLASH);
			setState(2657);
			simplifiedContents();
			setState(2658);
			match(SOLIDUS);
			setState(2659);
			match(MINUS_SIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedContentsContext extends ParserRuleContext {
		public SimplifiedTermContext simplifiedTerm() {
			return getRuleContext(SimplifiedTermContext.class,0);
		}
		public SimplifiedPathUnionContext simplifiedPathUnion() {
			return getRuleContext(SimplifiedPathUnionContext.class,0);
		}
		public SimplifiedMultisetAlternationContext simplifiedMultisetAlternation() {
			return getRuleContext(SimplifiedMultisetAlternationContext.class,0);
		}
		public SimplifiedContentsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedContents; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSimplifiedContents(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSimplifiedContents(this);
		}
	}

	public final SimplifiedContentsContext simplifiedContents() throws RecognitionException {
		SimplifiedContentsContext _localctx = new SimplifiedContentsContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_simplifiedContents);
		try {
			setState(2664);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,236,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2661);
				simplifiedTerm();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2662);
				simplifiedPathUnion();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2663);
				simplifiedMultisetAlternation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedPathUnionContext extends ParserRuleContext {
		public List<SimplifiedTermContext> simplifiedTerm() {
			return getRuleContexts(SimplifiedTermContext.class);
		}
		public SimplifiedTermContext simplifiedTerm(int i) {
			return getRuleContext(SimplifiedTermContext.class,i);
		}
		public List<TerminalNode> VERTICAL_BAR() { return getTokens(GQLParser.VERTICAL_BAR); }
		public TerminalNode VERTICAL_BAR(int i) {
			return getToken(GQLParser.VERTICAL_BAR, i);
		}
		public SimplifiedPathUnionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedPathUnion; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSimplifiedPathUnion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSimplifiedPathUnion(this);
		}
	}

	public final SimplifiedPathUnionContext simplifiedPathUnion() throws RecognitionException {
		SimplifiedPathUnionContext _localctx = new SimplifiedPathUnionContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_simplifiedPathUnion);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2666);
			simplifiedTerm();
			setState(2667);
			match(VERTICAL_BAR);
			setState(2668);
			simplifiedTerm();
			setState(2673);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==VERTICAL_BAR) {
				{
				{
				setState(2669);
				match(VERTICAL_BAR);
				setState(2670);
				simplifiedTerm();
				}
				}
				setState(2675);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedMultisetAlternationContext extends ParserRuleContext {
		public List<SimplifiedTermContext> simplifiedTerm() {
			return getRuleContexts(SimplifiedTermContext.class);
		}
		public SimplifiedTermContext simplifiedTerm(int i) {
			return getRuleContext(SimplifiedTermContext.class,i);
		}
		public List<TerminalNode> MULTISET_ALTERNATION_OPERATOR() { return getTokens(GQLParser.MULTISET_ALTERNATION_OPERATOR); }
		public TerminalNode MULTISET_ALTERNATION_OPERATOR(int i) {
			return getToken(GQLParser.MULTISET_ALTERNATION_OPERATOR, i);
		}
		public SimplifiedMultisetAlternationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedMultisetAlternation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSimplifiedMultisetAlternation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSimplifiedMultisetAlternation(this);
		}
	}

	public final SimplifiedMultisetAlternationContext simplifiedMultisetAlternation() throws RecognitionException {
		SimplifiedMultisetAlternationContext _localctx = new SimplifiedMultisetAlternationContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_simplifiedMultisetAlternation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2676);
			simplifiedTerm();
			setState(2677);
			match(MULTISET_ALTERNATION_OPERATOR);
			setState(2678);
			simplifiedTerm();
			setState(2683);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==MULTISET_ALTERNATION_OPERATOR) {
				{
				{
				setState(2679);
				match(MULTISET_ALTERNATION_OPERATOR);
				setState(2680);
				simplifiedTerm();
				}
				}
				setState(2685);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedTermContext extends ParserRuleContext {
		public List<SimplifiedFactorLowContext> simplifiedFactorLow() {
			return getRuleContexts(SimplifiedFactorLowContext.class);
		}
		public SimplifiedFactorLowContext simplifiedFactorLow(int i) {
			return getRuleContext(SimplifiedFactorLowContext.class,i);
		}
		public SimplifiedTermContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedTerm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSimplifiedTerm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSimplifiedTerm(this);
		}
	}

	public final SimplifiedTermContext simplifiedTerm() throws RecognitionException {
		SimplifiedTermContext _localctx = new SimplifiedTermContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_simplifiedTerm);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2687); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2686);
				simplifiedFactorLow();
				}
				}
				setState(2689); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & -234852096L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -1L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -1L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & 1649267441663L) != 0) || ((((_la - 337)) & ~0x3f) == 0 && ((1L << (_la - 337)) & 67L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedFactorLowContext extends ParserRuleContext {
		public List<SimplifiedFactorHighContext> simplifiedFactorHigh() {
			return getRuleContexts(SimplifiedFactorHighContext.class);
		}
		public SimplifiedFactorHighContext simplifiedFactorHigh(int i) {
			return getRuleContext(SimplifiedFactorHighContext.class,i);
		}
		public List<TerminalNode> AMPERSAND() { return getTokens(GQLParser.AMPERSAND); }
		public TerminalNode AMPERSAND(int i) {
			return getToken(GQLParser.AMPERSAND, i);
		}
		public SimplifiedFactorLowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedFactorLow; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSimplifiedFactorLow(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSimplifiedFactorLow(this);
		}
	}

	public final SimplifiedFactorLowContext simplifiedFactorLow() throws RecognitionException {
		SimplifiedFactorLowContext _localctx = new SimplifiedFactorLowContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_simplifiedFactorLow);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2691);
			simplifiedFactorHigh();
			setState(2696);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AMPERSAND) {
				{
				{
				setState(2692);
				match(AMPERSAND);
				setState(2693);
				simplifiedFactorHigh();
				}
				}
				setState(2698);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedFactorHighContext extends ParserRuleContext {
		public SimplifiedTertiaryContext simplifiedTertiary() {
			return getRuleContext(SimplifiedTertiaryContext.class,0);
		}
		public SimplifiedQuantifiedContext simplifiedQuantified() {
			return getRuleContext(SimplifiedQuantifiedContext.class,0);
		}
		public SimplifiedQuestionedContext simplifiedQuestioned() {
			return getRuleContext(SimplifiedQuestionedContext.class,0);
		}
		public SimplifiedFactorHighContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedFactorHigh; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSimplifiedFactorHigh(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSimplifiedFactorHigh(this);
		}
	}

	public final SimplifiedFactorHighContext simplifiedFactorHigh() throws RecognitionException {
		SimplifiedFactorHighContext _localctx = new SimplifiedFactorHighContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_simplifiedFactorHigh);
		try {
			setState(2702);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,241,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2699);
				simplifiedTertiary();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2700);
				simplifiedQuantified();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2701);
				simplifiedQuestioned();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedQuantifiedContext extends ParserRuleContext {
		public SimplifiedTertiaryContext simplifiedTertiary() {
			return getRuleContext(SimplifiedTertiaryContext.class,0);
		}
		public GraphPatternQuantifierContext graphPatternQuantifier() {
			return getRuleContext(GraphPatternQuantifierContext.class,0);
		}
		public SimplifiedQuantifiedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedQuantified; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSimplifiedQuantified(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSimplifiedQuantified(this);
		}
	}

	public final SimplifiedQuantifiedContext simplifiedQuantified() throws RecognitionException {
		SimplifiedQuantifiedContext _localctx = new SimplifiedQuantifiedContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_simplifiedQuantified);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2704);
			simplifiedTertiary();
			setState(2705);
			graphPatternQuantifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedQuestionedContext extends ParserRuleContext {
		public SimplifiedTertiaryContext simplifiedTertiary() {
			return getRuleContext(SimplifiedTertiaryContext.class,0);
		}
		public TerminalNode QUESTION_MARK() { return getToken(GQLParser.QUESTION_MARK, 0); }
		public SimplifiedQuestionedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedQuestioned; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSimplifiedQuestioned(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSimplifiedQuestioned(this);
		}
	}

	public final SimplifiedQuestionedContext simplifiedQuestioned() throws RecognitionException {
		SimplifiedQuestionedContext _localctx = new SimplifiedQuestionedContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_simplifiedQuestioned);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2707);
			simplifiedTertiary();
			setState(2708);
			match(QUESTION_MARK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedTertiaryContext extends ParserRuleContext {
		public SimplifiedDirectionOverrideContext simplifiedDirectionOverride() {
			return getRuleContext(SimplifiedDirectionOverrideContext.class,0);
		}
		public SimplifiedSecondaryContext simplifiedSecondary() {
			return getRuleContext(SimplifiedSecondaryContext.class,0);
		}
		public SimplifiedTertiaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedTertiary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSimplifiedTertiary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSimplifiedTertiary(this);
		}
	}

	public final SimplifiedTertiaryContext simplifiedTertiary() throws RecognitionException {
		SimplifiedTertiaryContext _localctx = new SimplifiedTertiaryContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_simplifiedTertiary);
		try {
			setState(2712);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,242,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2710);
				simplifiedDirectionOverride();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2711);
				simplifiedSecondary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedDirectionOverrideContext extends ParserRuleContext {
		public SimplifiedOverrideLeftContext simplifiedOverrideLeft() {
			return getRuleContext(SimplifiedOverrideLeftContext.class,0);
		}
		public SimplifiedOverrideUndirectedContext simplifiedOverrideUndirected() {
			return getRuleContext(SimplifiedOverrideUndirectedContext.class,0);
		}
		public SimplifiedOverrideRightContext simplifiedOverrideRight() {
			return getRuleContext(SimplifiedOverrideRightContext.class,0);
		}
		public SimplifiedOverrideLeftOrUndirectedContext simplifiedOverrideLeftOrUndirected() {
			return getRuleContext(SimplifiedOverrideLeftOrUndirectedContext.class,0);
		}
		public SimplifiedOverrideUndirectedOrRightContext simplifiedOverrideUndirectedOrRight() {
			return getRuleContext(SimplifiedOverrideUndirectedOrRightContext.class,0);
		}
		public SimplifiedOverrideLeftOrRightContext simplifiedOverrideLeftOrRight() {
			return getRuleContext(SimplifiedOverrideLeftOrRightContext.class,0);
		}
		public SimplifiedOverrideAnyDirectionContext simplifiedOverrideAnyDirection() {
			return getRuleContext(SimplifiedOverrideAnyDirectionContext.class,0);
		}
		public SimplifiedDirectionOverrideContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedDirectionOverride; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSimplifiedDirectionOverride(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSimplifiedDirectionOverride(this);
		}
	}

	public final SimplifiedDirectionOverrideContext simplifiedDirectionOverride() throws RecognitionException {
		SimplifiedDirectionOverrideContext _localctx = new SimplifiedDirectionOverrideContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_simplifiedDirectionOverride);
		try {
			setState(2721);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,243,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2714);
				simplifiedOverrideLeft();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2715);
				simplifiedOverrideUndirected();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2716);
				simplifiedOverrideRight();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2717);
				simplifiedOverrideLeftOrUndirected();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2718);
				simplifiedOverrideUndirectedOrRight();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2719);
				simplifiedOverrideLeftOrRight();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2720);
				simplifiedOverrideAnyDirection();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedOverrideLeftContext extends ParserRuleContext {
		public TerminalNode LEFT_ANGLE_BRACKET() { return getToken(GQLParser.LEFT_ANGLE_BRACKET, 0); }
		public SimplifiedSecondaryContext simplifiedSecondary() {
			return getRuleContext(SimplifiedSecondaryContext.class,0);
		}
		public SimplifiedOverrideLeftContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedOverrideLeft; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSimplifiedOverrideLeft(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSimplifiedOverrideLeft(this);
		}
	}

	public final SimplifiedOverrideLeftContext simplifiedOverrideLeft() throws RecognitionException {
		SimplifiedOverrideLeftContext _localctx = new SimplifiedOverrideLeftContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_simplifiedOverrideLeft);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2723);
			match(LEFT_ANGLE_BRACKET);
			setState(2724);
			simplifiedSecondary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedOverrideUndirectedContext extends ParserRuleContext {
		public TerminalNode TILDE() { return getToken(GQLParser.TILDE, 0); }
		public SimplifiedSecondaryContext simplifiedSecondary() {
			return getRuleContext(SimplifiedSecondaryContext.class,0);
		}
		public SimplifiedOverrideUndirectedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedOverrideUndirected; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSimplifiedOverrideUndirected(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSimplifiedOverrideUndirected(this);
		}
	}

	public final SimplifiedOverrideUndirectedContext simplifiedOverrideUndirected() throws RecognitionException {
		SimplifiedOverrideUndirectedContext _localctx = new SimplifiedOverrideUndirectedContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_simplifiedOverrideUndirected);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2726);
			match(TILDE);
			setState(2727);
			simplifiedSecondary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedOverrideRightContext extends ParserRuleContext {
		public SimplifiedSecondaryContext simplifiedSecondary() {
			return getRuleContext(SimplifiedSecondaryContext.class,0);
		}
		public TerminalNode RIGHT_ANGLE_BRACKET() { return getToken(GQLParser.RIGHT_ANGLE_BRACKET, 0); }
		public SimplifiedOverrideRightContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedOverrideRight; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSimplifiedOverrideRight(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSimplifiedOverrideRight(this);
		}
	}

	public final SimplifiedOverrideRightContext simplifiedOverrideRight() throws RecognitionException {
		SimplifiedOverrideRightContext _localctx = new SimplifiedOverrideRightContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_simplifiedOverrideRight);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2729);
			simplifiedSecondary();
			setState(2730);
			match(RIGHT_ANGLE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedOverrideLeftOrUndirectedContext extends ParserRuleContext {
		public TerminalNode LEFT_ANGLE_BRACKET() { return getToken(GQLParser.LEFT_ANGLE_BRACKET, 0); }
		public TerminalNode TILDE() { return getToken(GQLParser.TILDE, 0); }
		public SimplifiedSecondaryContext simplifiedSecondary() {
			return getRuleContext(SimplifiedSecondaryContext.class,0);
		}
		public SimplifiedOverrideLeftOrUndirectedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedOverrideLeftOrUndirected; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSimplifiedOverrideLeftOrUndirected(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSimplifiedOverrideLeftOrUndirected(this);
		}
	}

	public final SimplifiedOverrideLeftOrUndirectedContext simplifiedOverrideLeftOrUndirected() throws RecognitionException {
		SimplifiedOverrideLeftOrUndirectedContext _localctx = new SimplifiedOverrideLeftOrUndirectedContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_simplifiedOverrideLeftOrUndirected);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2732);
			match(LEFT_ANGLE_BRACKET);
			setState(2733);
			match(TILDE);
			setState(2734);
			simplifiedSecondary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedOverrideUndirectedOrRightContext extends ParserRuleContext {
		public TerminalNode TILDE() { return getToken(GQLParser.TILDE, 0); }
		public SimplifiedSecondaryContext simplifiedSecondary() {
			return getRuleContext(SimplifiedSecondaryContext.class,0);
		}
		public TerminalNode RIGHT_ANGLE_BRACKET() { return getToken(GQLParser.RIGHT_ANGLE_BRACKET, 0); }
		public SimplifiedOverrideUndirectedOrRightContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedOverrideUndirectedOrRight; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSimplifiedOverrideUndirectedOrRight(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSimplifiedOverrideUndirectedOrRight(this);
		}
	}

	public final SimplifiedOverrideUndirectedOrRightContext simplifiedOverrideUndirectedOrRight() throws RecognitionException {
		SimplifiedOverrideUndirectedOrRightContext _localctx = new SimplifiedOverrideUndirectedOrRightContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_simplifiedOverrideUndirectedOrRight);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2736);
			match(TILDE);
			setState(2737);
			simplifiedSecondary();
			setState(2738);
			match(RIGHT_ANGLE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedOverrideLeftOrRightContext extends ParserRuleContext {
		public TerminalNode LEFT_ANGLE_BRACKET() { return getToken(GQLParser.LEFT_ANGLE_BRACKET, 0); }
		public SimplifiedSecondaryContext simplifiedSecondary() {
			return getRuleContext(SimplifiedSecondaryContext.class,0);
		}
		public TerminalNode RIGHT_ANGLE_BRACKET() { return getToken(GQLParser.RIGHT_ANGLE_BRACKET, 0); }
		public SimplifiedOverrideLeftOrRightContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedOverrideLeftOrRight; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSimplifiedOverrideLeftOrRight(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSimplifiedOverrideLeftOrRight(this);
		}
	}

	public final SimplifiedOverrideLeftOrRightContext simplifiedOverrideLeftOrRight() throws RecognitionException {
		SimplifiedOverrideLeftOrRightContext _localctx = new SimplifiedOverrideLeftOrRightContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_simplifiedOverrideLeftOrRight);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2740);
			match(LEFT_ANGLE_BRACKET);
			setState(2741);
			simplifiedSecondary();
			setState(2742);
			match(RIGHT_ANGLE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedOverrideAnyDirectionContext extends ParserRuleContext {
		public TerminalNode MINUS_SIGN() { return getToken(GQLParser.MINUS_SIGN, 0); }
		public SimplifiedSecondaryContext simplifiedSecondary() {
			return getRuleContext(SimplifiedSecondaryContext.class,0);
		}
		public SimplifiedOverrideAnyDirectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedOverrideAnyDirection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSimplifiedOverrideAnyDirection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSimplifiedOverrideAnyDirection(this);
		}
	}

	public final SimplifiedOverrideAnyDirectionContext simplifiedOverrideAnyDirection() throws RecognitionException {
		SimplifiedOverrideAnyDirectionContext _localctx = new SimplifiedOverrideAnyDirectionContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_simplifiedOverrideAnyDirection);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2744);
			match(MINUS_SIGN);
			setState(2745);
			simplifiedSecondary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedSecondaryContext extends ParserRuleContext {
		public SimplifiedPrimaryContext simplifiedPrimary() {
			return getRuleContext(SimplifiedPrimaryContext.class,0);
		}
		public SimplifiedNegationContext simplifiedNegation() {
			return getRuleContext(SimplifiedNegationContext.class,0);
		}
		public SimplifiedSecondaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedSecondary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSimplifiedSecondary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSimplifiedSecondary(this);
		}
	}

	public final SimplifiedSecondaryContext simplifiedSecondary() throws RecognitionException {
		SimplifiedSecondaryContext _localctx = new SimplifiedSecondaryContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_simplifiedSecondary);
		try {
			setState(2749);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_PAREN:
			case ABS:
			case ACOS:
			case ACYCLIC:
			case ALL:
			case ALL_DIFFERENT:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASCENDING:
			case ASIN:
			case AT:
			case ATAN:
			case AVG:
			case BIG:
			case BIGINT:
			case BINARY:
			case BINDING:
			case BINDINGS:
			case BOOL:
			case BOOLEAN:
			case BOTH:
			case BTRIM:
			case BY:
			case BYTE_LENGTH:
			case BYTES:
			case CALL:
			case CASE:
			case CAST:
			case CEIL:
			case CEILING:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case CHARACTERISTICS:
			case CLOSE:
			case COALESCE:
			case COLLECT:
			case COMMIT:
			case CONNECTING:
			case COPY:
			case COS:
			case COSH:
			case COT:
			case COUNT:
			case CREATE:
			case CURRENT_DATE:
			case CURRENT_GRAPH:
			case CURRENT_PROPERTY_GRAPH:
			case CURRENT_SCHEMA:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DATE:
			case DATETIME:
			case DEC:
			case DECIMAL:
			case DEGREES:
			case DELETE:
			case DESC:
			case DESCENDING:
			case DESTINATION:
			case DETACH:
			case DIFFERENT:
			case DIRECTED:
			case DISTINCT:
			case DOUBLE:
			case DROP:
			case DURATION:
			case DURATION_BETWEEN:
			case ELEMENT:
			case ELEMENT_ID:
			case ELEMENTS:
			case ELSE:
			case END:
			case EXCEPT:
			case EXISTS:
			case EXP:
			case K_FALSE:
			case FILTER:
			case FINISH:
			case FIRST:
			case FLOAT:
			case FLOAT128:
			case FLOAT16:
			case FLOAT256:
			case FLOAT32:
			case FLOAT64:
			case FLOOR:
			case FOR:
			case FROM:
			case GRAPH:
			case GROUP:
			case GROUPS:
			case HAVING:
			case HOME_GRAPH:
			case HOME_PROPERTY_GRAPH:
			case HOME_SCHEMA:
			case I_DONT_KNOW_1:
			case I_DONT_KNOW_2:
			case I_DONT_KNOW_3:
			case I_DONT_KNOW_4:
			case I_DONT_KNOW_5:
			case IF:
			case IN:
			case INSERT:
			case INT:
			case INT8:
			case INT16:
			case INT32:
			case INT64:
			case INT128:
			case INT256:
			case INTEGER:
			case INTEGER8:
			case INTEGER16:
			case INTEGER32:
			case INTEGER64:
			case INTEGER128:
			case INTEGER256:
			case INTERSECT:
			case IS:
			case KEEP:
			case LABEL:
			case LABELED:
			case LABELS:
			case LAST:
			case LEADING:
			case LEFT:
			case LET:
			case LIKE:
			case LIMIT:
			case LIST:
			case LN:
			case LOCAL:
			case LOCAL_DATETIME:
			case LOCAL_TIME:
			case LOCAL_TIMESTAMP:
			case LOG:
			case LOG10:
			case LOWER:
			case LTRIM:
			case MATCH:
			case MAX:
			case MIN:
			case MOD:
			case NEXT:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case NO:
			case NODETACH:
			case NORMALIZE:
			case NORMALIZED:
			case NOT:
			case NULL:
			case NULLIF:
			case NULLS:
			case OCTET_LENGTH:
			case OF:
			case OFFSET:
			case SKIP_:
			case ONLY:
			case OPEN:
			case OPTIONAL:
			case OR:
			case ORDER:
			case ORDINALITY:
			case OTHERWISE:
			case PARAMETER:
			case PARAMETERS:
			case PATH:
			case PATH_LENGTH:
			case PATHS:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POWER:
			case PRECISION:
			case PROPERTY:
			case PROPERTY_EXISTS:
			case RADIANS:
			case READ:
			case REAL:
			case RECORD:
			case REMOVE:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RETURN:
			case ROLLBACK:
			case RTRIM:
			case RIGHT:
			case SAME:
			case SCHEMA:
			case SELECT:
			case SESSION:
			case SET:
			case SHORTEST:
			case SIGNED:
			case SIMPLE:
			case SIN:
			case SINH:
			case SMALL:
			case SMALLINT:
			case SOURCE:
			case SQRT:
			case START:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STRING:
			case SUM:
			case TABLE:
			case TAN:
			case TANH:
			case TEMP:
			case THEN:
			case TIME:
			case TIMESTAMP:
			case TIMEZONE:
			case TO:
			case TRAIL:
			case TRAILING:
			case TRANSACTION:
			case TRIM:
			case K_TRUE:
			case TYPE:
			case TYPED:
			case UBIGINT:
			case UINT:
			case UINT128:
			case UINT16:
			case UINT256:
			case UINT32:
			case UINT64:
			case UINT8:
			case UNDIRECTED:
			case UNION:
			case UNKNOWN:
			case UNSIGNED:
			case UPPER:
			case USE:
			case USMALLINT:
			case VALUE:
			case VARBINARY:
			case VARCHAR:
			case VARIABLE:
			case WALK:
			case WHEN:
			case WHERE:
			case WITH:
			case WITHOUT:
			case WRITE:
			case XOR:
			case YIELD:
			case ZONE:
			case ZONED:
			case ZONED_DATETIME:
			case ZONED_TIME:
			case INTERVAL_DAY:
			case INTERVAL_WEEK:
			case INTERVAL_MONTH:
			case INTERVAL_YEAR:
			case EDGE_SYNONYM:
			case EDGES_SYNONYM:
			case NODE_SYNONYM:
			case KEY_WORD:
			case PRE_RESERVED_WORD:
			case DOUBLE_QUOTED_STRING_LITERAL:
			case ACCENT_QUOTED_STRING_LITERAL:
			case REGULAR_IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(2747);
				simplifiedPrimary();
				}
				break;
			case EXCLAMATION_MARK:
				enterOuterAlt(_localctx, 2);
				{
				setState(2748);
				simplifiedNegation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedNegationContext extends ParserRuleContext {
		public TerminalNode EXCLAMATION_MARK() { return getToken(GQLParser.EXCLAMATION_MARK, 0); }
		public SimplifiedPrimaryContext simplifiedPrimary() {
			return getRuleContext(SimplifiedPrimaryContext.class,0);
		}
		public SimplifiedNegationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedNegation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSimplifiedNegation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSimplifiedNegation(this);
		}
	}

	public final SimplifiedNegationContext simplifiedNegation() throws RecognitionException {
		SimplifiedNegationContext _localctx = new SimplifiedNegationContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_simplifiedNegation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2751);
			match(EXCLAMATION_MARK);
			setState(2752);
			simplifiedPrimary();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimplifiedPrimaryContext extends ParserRuleContext {
		public LabelNameContext labelName() {
			return getRuleContext(LabelNameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public SimplifiedContentsContext simplifiedContents() {
			return getRuleContext(SimplifiedContentsContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public SimplifiedPrimaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simplifiedPrimary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSimplifiedPrimary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSimplifiedPrimary(this);
		}
	}

	public final SimplifiedPrimaryContext simplifiedPrimary() throws RecognitionException {
		SimplifiedPrimaryContext _localctx = new SimplifiedPrimaryContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_simplifiedPrimary);
		try {
			setState(2759);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABS:
			case ACOS:
			case ACYCLIC:
			case ALL:
			case ALL_DIFFERENT:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASCENDING:
			case ASIN:
			case AT:
			case ATAN:
			case AVG:
			case BIG:
			case BIGINT:
			case BINARY:
			case BINDING:
			case BINDINGS:
			case BOOL:
			case BOOLEAN:
			case BOTH:
			case BTRIM:
			case BY:
			case BYTE_LENGTH:
			case BYTES:
			case CALL:
			case CASE:
			case CAST:
			case CEIL:
			case CEILING:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case CHARACTERISTICS:
			case CLOSE:
			case COALESCE:
			case COLLECT:
			case COMMIT:
			case CONNECTING:
			case COPY:
			case COS:
			case COSH:
			case COT:
			case COUNT:
			case CREATE:
			case CURRENT_DATE:
			case CURRENT_GRAPH:
			case CURRENT_PROPERTY_GRAPH:
			case CURRENT_SCHEMA:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DATE:
			case DATETIME:
			case DEC:
			case DECIMAL:
			case DEGREES:
			case DELETE:
			case DESC:
			case DESCENDING:
			case DESTINATION:
			case DETACH:
			case DIFFERENT:
			case DIRECTED:
			case DISTINCT:
			case DOUBLE:
			case DROP:
			case DURATION:
			case DURATION_BETWEEN:
			case ELEMENT:
			case ELEMENT_ID:
			case ELEMENTS:
			case ELSE:
			case END:
			case EXCEPT:
			case EXISTS:
			case EXP:
			case K_FALSE:
			case FILTER:
			case FINISH:
			case FIRST:
			case FLOAT:
			case FLOAT128:
			case FLOAT16:
			case FLOAT256:
			case FLOAT32:
			case FLOAT64:
			case FLOOR:
			case FOR:
			case FROM:
			case GRAPH:
			case GROUP:
			case GROUPS:
			case HAVING:
			case HOME_GRAPH:
			case HOME_PROPERTY_GRAPH:
			case HOME_SCHEMA:
			case I_DONT_KNOW_1:
			case I_DONT_KNOW_2:
			case I_DONT_KNOW_3:
			case I_DONT_KNOW_4:
			case I_DONT_KNOW_5:
			case IF:
			case IN:
			case INSERT:
			case INT:
			case INT8:
			case INT16:
			case INT32:
			case INT64:
			case INT128:
			case INT256:
			case INTEGER:
			case INTEGER8:
			case INTEGER16:
			case INTEGER32:
			case INTEGER64:
			case INTEGER128:
			case INTEGER256:
			case INTERSECT:
			case IS:
			case KEEP:
			case LABEL:
			case LABELED:
			case LABELS:
			case LAST:
			case LEADING:
			case LEFT:
			case LET:
			case LIKE:
			case LIMIT:
			case LIST:
			case LN:
			case LOCAL:
			case LOCAL_DATETIME:
			case LOCAL_TIME:
			case LOCAL_TIMESTAMP:
			case LOG:
			case LOG10:
			case LOWER:
			case LTRIM:
			case MATCH:
			case MAX:
			case MIN:
			case MOD:
			case NEXT:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case NO:
			case NODETACH:
			case NORMALIZE:
			case NORMALIZED:
			case NOT:
			case NULL:
			case NULLIF:
			case NULLS:
			case OCTET_LENGTH:
			case OF:
			case OFFSET:
			case SKIP_:
			case ONLY:
			case OPEN:
			case OPTIONAL:
			case OR:
			case ORDER:
			case ORDINALITY:
			case OTHERWISE:
			case PARAMETER:
			case PARAMETERS:
			case PATH:
			case PATH_LENGTH:
			case PATHS:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POWER:
			case PRECISION:
			case PROPERTY:
			case PROPERTY_EXISTS:
			case RADIANS:
			case READ:
			case REAL:
			case RECORD:
			case REMOVE:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RETURN:
			case ROLLBACK:
			case RTRIM:
			case RIGHT:
			case SAME:
			case SCHEMA:
			case SELECT:
			case SESSION:
			case SET:
			case SHORTEST:
			case SIGNED:
			case SIMPLE:
			case SIN:
			case SINH:
			case SMALL:
			case SMALLINT:
			case SOURCE:
			case SQRT:
			case START:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STRING:
			case SUM:
			case TABLE:
			case TAN:
			case TANH:
			case TEMP:
			case THEN:
			case TIME:
			case TIMESTAMP:
			case TIMEZONE:
			case TO:
			case TRAIL:
			case TRAILING:
			case TRANSACTION:
			case TRIM:
			case K_TRUE:
			case TYPE:
			case TYPED:
			case UBIGINT:
			case UINT:
			case UINT128:
			case UINT16:
			case UINT256:
			case UINT32:
			case UINT64:
			case UINT8:
			case UNDIRECTED:
			case UNION:
			case UNKNOWN:
			case UNSIGNED:
			case UPPER:
			case USE:
			case USMALLINT:
			case VALUE:
			case VARBINARY:
			case VARCHAR:
			case VARIABLE:
			case WALK:
			case WHEN:
			case WHERE:
			case WITH:
			case WITHOUT:
			case WRITE:
			case XOR:
			case YIELD:
			case ZONE:
			case ZONED:
			case ZONED_DATETIME:
			case ZONED_TIME:
			case INTERVAL_DAY:
			case INTERVAL_WEEK:
			case INTERVAL_MONTH:
			case INTERVAL_YEAR:
			case EDGE_SYNONYM:
			case EDGES_SYNONYM:
			case NODE_SYNONYM:
			case KEY_WORD:
			case PRE_RESERVED_WORD:
			case DOUBLE_QUOTED_STRING_LITERAL:
			case ACCENT_QUOTED_STRING_LITERAL:
			case REGULAR_IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(2754);
				labelName();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2755);
				match(LEFT_PAREN);
				setState(2756);
				simplifiedContents();
				setState(2757);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WhereClauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(GQLParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whereClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterWhereClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitWhereClause(this);
		}
	}

	public final WhereClauseContext whereClause() throws RecognitionException {
		WhereClauseContext _localctx = new WhereClauseContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_whereClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2761);
			match(WHERE);
			setState(2762);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class YieldClauseContext extends ParserRuleContext {
		public TerminalNode YIELD() { return getToken(GQLParser.YIELD, 0); }
		public YieldItemListContext yieldItemList() {
			return getRuleContext(YieldItemListContext.class,0);
		}
		public YieldClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_yieldClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterYieldClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitYieldClause(this);
		}
	}

	public final YieldClauseContext yieldClause() throws RecognitionException {
		YieldClauseContext _localctx = new YieldClauseContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_yieldClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2764);
			match(YIELD);
			setState(2765);
			yieldItemList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class YieldItemListContext extends ParserRuleContext {
		public List<YieldItemContext> yieldItem() {
			return getRuleContexts(YieldItemContext.class);
		}
		public YieldItemContext yieldItem(int i) {
			return getRuleContext(YieldItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQLParser.COMMA, i);
		}
		public YieldItemListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_yieldItemList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterYieldItemList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitYieldItemList(this);
		}
	}

	public final YieldItemListContext yieldItemList() throws RecognitionException {
		YieldItemListContext _localctx = new YieldItemListContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_yieldItemList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2767);
			yieldItem();
			setState(2772);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2768);
				match(COMMA);
				setState(2769);
				yieldItem();
				}
				}
				setState(2774);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class YieldItemContext extends ParserRuleContext {
		public YieldItemNameContext yieldItemName() {
			return getRuleContext(YieldItemNameContext.class,0);
		}
		public YieldItemAliasContext yieldItemAlias() {
			return getRuleContext(YieldItemAliasContext.class,0);
		}
		public YieldItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_yieldItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterYieldItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitYieldItem(this);
		}
	}

	public final YieldItemContext yieldItem() throws RecognitionException {
		YieldItemContext _localctx = new YieldItemContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_yieldItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2775);
			yieldItemName();
			setState(2777);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(2776);
				yieldItemAlias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class YieldItemNameContext extends ParserRuleContext {
		public FieldNameContext fieldName() {
			return getRuleContext(FieldNameContext.class,0);
		}
		public YieldItemNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_yieldItemName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterYieldItemName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitYieldItemName(this);
		}
	}

	public final YieldItemNameContext yieldItemName() throws RecognitionException {
		YieldItemNameContext _localctx = new YieldItemNameContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_yieldItemName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2779);
			fieldName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class YieldItemAliasContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(GQLParser.AS, 0); }
		public BindingVariableContext bindingVariable() {
			return getRuleContext(BindingVariableContext.class,0);
		}
		public YieldItemAliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_yieldItemAlias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterYieldItemAlias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitYieldItemAlias(this);
		}
	}

	public final YieldItemAliasContext yieldItemAlias() throws RecognitionException {
		YieldItemAliasContext _localctx = new YieldItemAliasContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_yieldItemAlias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2781);
			match(AS);
			setState(2782);
			bindingVariable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GroupByClauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(GQLParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(GQLParser.BY, 0); }
		public GroupingElementListContext groupingElementList() {
			return getRuleContext(GroupingElementListContext.class,0);
		}
		public GroupByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGroupByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGroupByClause(this);
		}
	}

	public final GroupByClauseContext groupByClause() throws RecognitionException {
		GroupByClauseContext _localctx = new GroupByClauseContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_groupByClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2784);
			match(GROUP);
			setState(2785);
			match(BY);
			setState(2786);
			groupingElementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GroupingElementListContext extends ParserRuleContext {
		public List<GroupingElementContext> groupingElement() {
			return getRuleContexts(GroupingElementContext.class);
		}
		public GroupingElementContext groupingElement(int i) {
			return getRuleContext(GroupingElementContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(GQLParser.COMMA, 0); }
		public EmptyGroupingSetContext emptyGroupingSet() {
			return getRuleContext(EmptyGroupingSetContext.class,0);
		}
		public GroupingElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingElementList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGroupingElementList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGroupingElementList(this);
		}
	}

	public final GroupingElementListContext groupingElementList() throws RecognitionException {
		GroupingElementListContext _localctx = new GroupingElementListContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_groupingElementList);
		try {
			setState(2794);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABS:
			case ACOS:
			case ACYCLIC:
			case ALL:
			case ALL_DIFFERENT:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASCENDING:
			case ASIN:
			case AT:
			case ATAN:
			case AVG:
			case BIG:
			case BIGINT:
			case BINARY:
			case BINDING:
			case BINDINGS:
			case BOOL:
			case BOOLEAN:
			case BOTH:
			case BTRIM:
			case BY:
			case BYTE_LENGTH:
			case BYTES:
			case CALL:
			case CASE:
			case CAST:
			case CEIL:
			case CEILING:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case CHARACTERISTICS:
			case CLOSE:
			case COALESCE:
			case COLLECT:
			case COMMIT:
			case CONNECTING:
			case COPY:
			case COS:
			case COSH:
			case COT:
			case COUNT:
			case CREATE:
			case CURRENT_DATE:
			case CURRENT_GRAPH:
			case CURRENT_PROPERTY_GRAPH:
			case CURRENT_SCHEMA:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DATE:
			case DATETIME:
			case DEC:
			case DECIMAL:
			case DEGREES:
			case DELETE:
			case DESC:
			case DESCENDING:
			case DESTINATION:
			case DETACH:
			case DIFFERENT:
			case DIRECTED:
			case DISTINCT:
			case DOUBLE:
			case DROP:
			case DURATION:
			case DURATION_BETWEEN:
			case ELEMENT:
			case ELEMENT_ID:
			case ELEMENTS:
			case ELSE:
			case END:
			case EXCEPT:
			case EXISTS:
			case EXP:
			case K_FALSE:
			case FILTER:
			case FINISH:
			case FIRST:
			case FLOAT:
			case FLOAT128:
			case FLOAT16:
			case FLOAT256:
			case FLOAT32:
			case FLOAT64:
			case FLOOR:
			case FOR:
			case FROM:
			case GRAPH:
			case GROUP:
			case GROUPS:
			case HAVING:
			case HOME_GRAPH:
			case HOME_PROPERTY_GRAPH:
			case HOME_SCHEMA:
			case I_DONT_KNOW_1:
			case I_DONT_KNOW_2:
			case I_DONT_KNOW_3:
			case I_DONT_KNOW_4:
			case I_DONT_KNOW_5:
			case IF:
			case IN:
			case INSERT:
			case INT:
			case INT8:
			case INT16:
			case INT32:
			case INT64:
			case INT128:
			case INT256:
			case INTEGER:
			case INTEGER8:
			case INTEGER16:
			case INTEGER32:
			case INTEGER64:
			case INTEGER128:
			case INTEGER256:
			case INTERSECT:
			case IS:
			case KEEP:
			case LABEL:
			case LABELED:
			case LABELS:
			case LAST:
			case LEADING:
			case LEFT:
			case LET:
			case LIKE:
			case LIMIT:
			case LIST:
			case LN:
			case LOCAL:
			case LOCAL_DATETIME:
			case LOCAL_TIME:
			case LOCAL_TIMESTAMP:
			case LOG:
			case LOG10:
			case LOWER:
			case LTRIM:
			case MATCH:
			case MAX:
			case MIN:
			case MOD:
			case NEXT:
			case NFC:
			case NFD:
			case NFKC:
			case NFKD:
			case NO:
			case NODETACH:
			case NORMALIZE:
			case NORMALIZED:
			case NOT:
			case NULL:
			case NULLIF:
			case NULLS:
			case OCTET_LENGTH:
			case OF:
			case OFFSET:
			case SKIP_:
			case ONLY:
			case OPEN:
			case OPTIONAL:
			case OR:
			case ORDER:
			case ORDINALITY:
			case OTHERWISE:
			case PARAMETER:
			case PARAMETERS:
			case PATH:
			case PATH_LENGTH:
			case PATHS:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case POWER:
			case PRECISION:
			case PROPERTY:
			case PROPERTY_EXISTS:
			case RADIANS:
			case READ:
			case REAL:
			case RECORD:
			case REMOVE:
			case REPEATABLE:
			case REPLACE:
			case RESET:
			case RETURN:
			case ROLLBACK:
			case RTRIM:
			case RIGHT:
			case SAME:
			case SCHEMA:
			case SELECT:
			case SESSION:
			case SET:
			case SHORTEST:
			case SIGNED:
			case SIMPLE:
			case SIN:
			case SINH:
			case SMALL:
			case SMALLINT:
			case SOURCE:
			case SQRT:
			case START:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case STRING:
			case SUM:
			case TABLE:
			case TAN:
			case TANH:
			case TEMP:
			case THEN:
			case TIME:
			case TIMESTAMP:
			case TIMEZONE:
			case TO:
			case TRAIL:
			case TRAILING:
			case TRANSACTION:
			case TRIM:
			case K_TRUE:
			case TYPE:
			case TYPED:
			case UBIGINT:
			case UINT:
			case UINT128:
			case UINT16:
			case UINT256:
			case UINT32:
			case UINT64:
			case UINT8:
			case UNDIRECTED:
			case UNION:
			case UNKNOWN:
			case UNSIGNED:
			case UPPER:
			case USE:
			case USMALLINT:
			case VALUE:
			case VARBINARY:
			case VARCHAR:
			case VARIABLE:
			case WALK:
			case WHEN:
			case WHERE:
			case WITH:
			case WITHOUT:
			case WRITE:
			case XOR:
			case YIELD:
			case ZONE:
			case ZONED:
			case ZONED_DATETIME:
			case ZONED_TIME:
			case INTERVAL_DAY:
			case INTERVAL_WEEK:
			case INTERVAL_MONTH:
			case INTERVAL_YEAR:
			case EDGE_SYNONYM:
			case EDGES_SYNONYM:
			case NODE_SYNONYM:
			case KEY_WORD:
			case PRE_RESERVED_WORD:
			case DOUBLE_QUOTED_STRING_LITERAL:
			case ACCENT_QUOTED_STRING_LITERAL:
			case REGULAR_IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(2788);
				groupingElement();
				setState(2791);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,248,_ctx) ) {
				case 1:
					{
					setState(2789);
					match(COMMA);
					setState(2790);
					groupingElement();
					}
					break;
				}
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2793);
				emptyGroupingSet();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GroupingElementContext extends ParserRuleContext {
		public BindingVariableReferenceContext bindingVariableReference() {
			return getRuleContext(BindingVariableReferenceContext.class,0);
		}
		public GroupingElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGroupingElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGroupingElement(this);
		}
	}

	public final GroupingElementContext groupingElement() throws RecognitionException {
		GroupingElementContext _localctx = new GroupingElementContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_groupingElement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2796);
			bindingVariableReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EmptyGroupingSetContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public EmptyGroupingSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_emptyGroupingSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterEmptyGroupingSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitEmptyGroupingSet(this);
		}
	}

	public final EmptyGroupingSetContext emptyGroupingSet() throws RecognitionException {
		EmptyGroupingSetContext _localctx = new EmptyGroupingSetContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_emptyGroupingSet);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2798);
			match(LEFT_PAREN);
			setState(2799);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OrderByClauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(GQLParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(GQLParser.BY, 0); }
		public SortSpecificationListContext sortSpecificationList() {
			return getRuleContext(SortSpecificationListContext.class,0);
		}
		public OrderByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterOrderByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitOrderByClause(this);
		}
	}

	public final OrderByClauseContext orderByClause() throws RecognitionException {
		OrderByClauseContext _localctx = new OrderByClauseContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_orderByClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2801);
			match(ORDER);
			setState(2802);
			match(BY);
			setState(2803);
			sortSpecificationList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AggregateFunctionContext extends ParserRuleContext {
		public AggregateFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateFunction; }
	 
		public AggregateFunctionContext() { }
		public void copyFrom(AggregateFunctionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlCountAllFunctionContext extends AggregateFunctionContext {
		public TerminalNode COUNT() { return getToken(GQLParser.COUNT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public TerminalNode ASTERISK() { return getToken(GQLParser.ASTERISK, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public GqlCountAllFunctionContext(AggregateFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlCountAllFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlCountAllFunction(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlGeneralSetFunctionContext extends AggregateFunctionContext {
		public GeneralSetFunctionTypeContext generalSetFunctionType() {
			return getRuleContext(GeneralSetFunctionTypeContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public SetQuantifierContext setQuantifier() {
			return getRuleContext(SetQuantifierContext.class,0);
		}
		public GqlGeneralSetFunctionContext(AggregateFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlGeneralSetFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlGeneralSetFunction(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlBinarySetFunctionContext extends AggregateFunctionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		public BinarySetFunctionTypeContext binarySetFunctionType() {
			return getRuleContext(BinarySetFunctionTypeContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public TerminalNode COMMA() { return getToken(GQLParser.COMMA, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public SetQuantifierContext setQuantifier() {
			return getRuleContext(SetQuantifierContext.class,0);
		}
		public GqlBinarySetFunctionContext(AggregateFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlBinarySetFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlBinarySetFunction(this);
		}
	}

	public final AggregateFunctionContext aggregateFunction() throws RecognitionException {
		AggregateFunctionContext _localctx = new AggregateFunctionContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_aggregateFunction);
		try {
			setState(2827);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,252,_ctx) ) {
			case 1:
				_localctx = new GqlCountAllFunctionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2805);
				match(COUNT);
				setState(2806);
				match(LEFT_PAREN);
				setState(2807);
				match(ASTERISK);
				setState(2808);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				_localctx = new GqlGeneralSetFunctionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2809);
				generalSetFunctionType();
				setState(2810);
				match(LEFT_PAREN);
				setState(2812);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,250,_ctx) ) {
				case 1:
					{
					setState(2811);
					setQuantifier();
					}
					break;
				}
				setState(2814);
				expression(0);
				setState(2815);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				_localctx = new GqlBinarySetFunctionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2817);
				binarySetFunctionType();
				setState(2818);
				match(LEFT_PAREN);
				setState(2820);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,251,_ctx) ) {
				case 1:
					{
					setState(2819);
					setQuantifier();
					}
					break;
				}
				setState(2822);
				((GqlBinarySetFunctionContext)_localctx).lhs = expression(0);
				setState(2823);
				match(COMMA);
				setState(2824);
				((GqlBinarySetFunctionContext)_localctx).rhs = expression(0);
				setState(2825);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GeneralSetFunctionTypeContext extends ParserRuleContext {
		public TerminalNode AVG() { return getToken(GQLParser.AVG, 0); }
		public TerminalNode COUNT() { return getToken(GQLParser.COUNT, 0); }
		public TerminalNode MAX() { return getToken(GQLParser.MAX, 0); }
		public TerminalNode MIN() { return getToken(GQLParser.MIN, 0); }
		public TerminalNode SUM() { return getToken(GQLParser.SUM, 0); }
		public TerminalNode COLLECT() { return getToken(GQLParser.COLLECT, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(GQLParser.STDDEV_SAMP, 0); }
		public TerminalNode STDDEV_POP() { return getToken(GQLParser.STDDEV_POP, 0); }
		public GeneralSetFunctionTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generalSetFunctionType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGeneralSetFunctionType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGeneralSetFunctionType(this);
		}
	}

	public final GeneralSetFunctionTypeContext generalSetFunctionType() throws RecognitionException {
		GeneralSetFunctionTypeContext _localctx = new GeneralSetFunctionTypeContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_generalSetFunctionType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2829);
			_la = _input.LA(1);
			if ( !(((((_la - 42)) & ~0x3f) == 0 && ((1L << (_la - 42)) & 1082130433L) != 0) || _la==MAX || _la==MIN || ((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & 11L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SetQuantifierContext extends ParserRuleContext {
		public TerminalNode DISTINCT() { return getToken(GQLParser.DISTINCT, 0); }
		public TerminalNode ALL() { return getToken(GQLParser.ALL, 0); }
		public SetQuantifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setQuantifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSetQuantifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSetQuantifier(this);
		}
	}

	public final SetQuantifierContext setQuantifier() throws RecognitionException {
		SetQuantifierContext _localctx = new SetQuantifierContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_setQuantifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2831);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==DISTINCT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BinarySetFunctionTypeContext extends ParserRuleContext {
		public TerminalNode PERCENTILE_CONT() { return getToken(GQLParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(GQLParser.PERCENTILE_DISC, 0); }
		public BinarySetFunctionTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binarySetFunctionType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterBinarySetFunctionType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitBinarySetFunctionType(this);
		}
	}

	public final BinarySetFunctionTypeContext binarySetFunctionType() throws RecognitionException {
		BinarySetFunctionTypeContext _localctx = new BinarySetFunctionTypeContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_binarySetFunctionType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2833);
			_la = _input.LA(1);
			if ( !(_la==PERCENTILE_CONT || _la==PERCENTILE_DISC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SortSpecificationListContext extends ParserRuleContext {
		public List<SortSpecificationContext> sortSpecification() {
			return getRuleContexts(SortSpecificationContext.class);
		}
		public SortSpecificationContext sortSpecification(int i) {
			return getRuleContext(SortSpecificationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQLParser.COMMA, i);
		}
		public SortSpecificationListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortSpecificationList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSortSpecificationList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSortSpecificationList(this);
		}
	}

	public final SortSpecificationListContext sortSpecificationList() throws RecognitionException {
		SortSpecificationListContext _localctx = new SortSpecificationListContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_sortSpecificationList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2835);
			sortSpecification();
			setState(2840);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,253,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2836);
					match(COMMA);
					setState(2837);
					sortSpecification();
					}
					} 
				}
				setState(2842);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,253,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SortSpecificationContext extends ParserRuleContext {
		public SortKeyContext sortKey() {
			return getRuleContext(SortKeyContext.class,0);
		}
		public OrderingSpecificationContext orderingSpecification() {
			return getRuleContext(OrderingSpecificationContext.class,0);
		}
		public NullOrderingContext nullOrdering() {
			return getRuleContext(NullOrderingContext.class,0);
		}
		public SortSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSortSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSortSpecification(this);
		}
	}

	public final SortSpecificationContext sortSpecification() throws RecognitionException {
		SortSpecificationContext _localctx = new SortSpecificationContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_sortSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2843);
			sortKey();
			setState(2845);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,254,_ctx) ) {
			case 1:
				{
				setState(2844);
				orderingSpecification();
				}
				break;
			}
			setState(2848);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,255,_ctx) ) {
			case 1:
				{
				setState(2847);
				nullOrdering();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SortKeyContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public SortKeyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortKey; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSortKey(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSortKey(this);
		}
	}

	public final SortKeyContext sortKey() throws RecognitionException {
		SortKeyContext _localctx = new SortKeyContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_sortKey);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2850);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OrderingSpecificationContext extends ParserRuleContext {
		public TerminalNode ASC() { return getToken(GQLParser.ASC, 0); }
		public TerminalNode ASCENDING() { return getToken(GQLParser.ASCENDING, 0); }
		public TerminalNode DESC() { return getToken(GQLParser.DESC, 0); }
		public TerminalNode DESCENDING() { return getToken(GQLParser.DESCENDING, 0); }
		public OrderingSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderingSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterOrderingSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitOrderingSpecification(this);
		}
	}

	public final OrderingSpecificationContext orderingSpecification() throws RecognitionException {
		OrderingSpecificationContext _localctx = new OrderingSpecificationContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_orderingSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2852);
			_la = _input.LA(1);
			if ( !(((((_la - 37)) & ~0x3f) == 0 && ((1L << (_la - 37)) & 3377699720527875L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NullOrderingContext extends ParserRuleContext {
		public TerminalNode NULLS() { return getToken(GQLParser.NULLS, 0); }
		public TerminalNode FIRST() { return getToken(GQLParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(GQLParser.LAST, 0); }
		public NullOrderingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullOrdering; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterNullOrdering(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitNullOrdering(this);
		}
	}

	public final NullOrderingContext nullOrdering() throws RecognitionException {
		NullOrderingContext _localctx = new NullOrderingContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_nullOrdering);
		try {
			setState(2858);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,256,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2854);
				match(NULLS);
				setState(2855);
				match(FIRST);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2856);
				match(NULLS);
				setState(2857);
				match(LAST);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LimitClauseContext extends ParserRuleContext {
		public TerminalNode LIMIT() { return getToken(GQLParser.LIMIT, 0); }
		public UnsignedIntegerSpecificationContext unsignedIntegerSpecification() {
			return getRuleContext(UnsignedIntegerSpecificationContext.class,0);
		}
		public LimitClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterLimitClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitLimitClause(this);
		}
	}

	public final LimitClauseContext limitClause() throws RecognitionException {
		LimitClauseContext _localctx = new LimitClauseContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_limitClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2860);
			match(LIMIT);
			setState(2861);
			unsignedIntegerSpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OffsetClauseContext extends ParserRuleContext {
		public OffsetSynonymContext offsetSynonym() {
			return getRuleContext(OffsetSynonymContext.class,0);
		}
		public UnsignedIntegerSpecificationContext unsignedIntegerSpecification() {
			return getRuleContext(UnsignedIntegerSpecificationContext.class,0);
		}
		public OffsetClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_offsetClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterOffsetClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitOffsetClause(this);
		}
	}

	public final OffsetClauseContext offsetClause() throws RecognitionException {
		OffsetClauseContext _localctx = new OffsetClauseContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_offsetClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2863);
			offsetSynonym();
			setState(2864);
			unsignedIntegerSpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OffsetSynonymContext extends ParserRuleContext {
		public TerminalNode OFFSET() { return getToken(GQLParser.OFFSET, 0); }
		public TerminalNode SKIP_() { return getToken(GQLParser.SKIP_, 0); }
		public OffsetSynonymContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_offsetSynonym; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterOffsetSynonym(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitOffsetSynonym(this);
		}
	}

	public final OffsetSynonymContext offsetSynonym() throws RecognitionException {
		OffsetSynonymContext _localctx = new OffsetSynonymContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_offsetSynonym);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2866);
			_la = _input.LA(1);
			if ( !(_la==OFFSET || _la==SKIP_) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NestedGraphTypeSpecificationContext extends ParserRuleContext {
		public TerminalNode LEFT_BRACE() { return getToken(GQLParser.LEFT_BRACE, 0); }
		public GraphTypeSpecificationBodyContext graphTypeSpecificationBody() {
			return getRuleContext(GraphTypeSpecificationBodyContext.class,0);
		}
		public TerminalNode RIGHT_BRACE() { return getToken(GQLParser.RIGHT_BRACE, 0); }
		public NestedGraphTypeSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nestedGraphTypeSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterNestedGraphTypeSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitNestedGraphTypeSpecification(this);
		}
	}

	public final NestedGraphTypeSpecificationContext nestedGraphTypeSpecification() throws RecognitionException {
		NestedGraphTypeSpecificationContext _localctx = new NestedGraphTypeSpecificationContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_nestedGraphTypeSpecification);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2868);
			match(LEFT_BRACE);
			setState(2869);
			graphTypeSpecificationBody();
			setState(2870);
			match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GraphTypeSpecificationBodyContext extends ParserRuleContext {
		public ElementTypeDefinitionListContext elementTypeDefinitionList() {
			return getRuleContext(ElementTypeDefinitionListContext.class,0);
		}
		public GraphTypeSpecificationBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_graphTypeSpecificationBody; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGraphTypeSpecificationBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGraphTypeSpecificationBody(this);
		}
	}

	public final GraphTypeSpecificationBodyContext graphTypeSpecificationBody() throws RecognitionException {
		GraphTypeSpecificationBodyContext _localctx = new GraphTypeSpecificationBodyContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_graphTypeSpecificationBody);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2872);
			elementTypeDefinitionList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ElementTypeDefinitionListContext extends ParserRuleContext {
		public List<ElementTypeDefinitionContext> elementTypeDefinition() {
			return getRuleContexts(ElementTypeDefinitionContext.class);
		}
		public ElementTypeDefinitionContext elementTypeDefinition(int i) {
			return getRuleContext(ElementTypeDefinitionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQLParser.COMMA, i);
		}
		public ElementTypeDefinitionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elementTypeDefinitionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterElementTypeDefinitionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitElementTypeDefinitionList(this);
		}
	}

	public final ElementTypeDefinitionListContext elementTypeDefinitionList() throws RecognitionException {
		ElementTypeDefinitionListContext _localctx = new ElementTypeDefinitionListContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_elementTypeDefinitionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2874);
			elementTypeDefinition();
			setState(2879);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2875);
				match(COMMA);
				setState(2876);
				elementTypeDefinition();
				}
				}
				setState(2881);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ElementTypeDefinitionContext extends ParserRuleContext {
		public NodeTypeDefinitionContext nodeTypeDefinition() {
			return getRuleContext(NodeTypeDefinitionContext.class,0);
		}
		public EdgeTypeDefinitionContext edgeTypeDefinition() {
			return getRuleContext(EdgeTypeDefinitionContext.class,0);
		}
		public ElementTypeDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elementTypeDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterElementTypeDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitElementTypeDefinition(this);
		}
	}

	public final ElementTypeDefinitionContext elementTypeDefinition() throws RecognitionException {
		ElementTypeDefinitionContext _localctx = new ElementTypeDefinitionContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_elementTypeDefinition);
		try {
			setState(2884);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,258,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2882);
				nodeTypeDefinition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2883);
				edgeTypeDefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NodeTypeDefinitionContext extends ParserRuleContext {
		public NodeTypePatternContext nodeTypePattern() {
			return getRuleContext(NodeTypePatternContext.class,0);
		}
		public TerminalNode NODE_SYNONYM() { return getToken(GQLParser.NODE_SYNONYM, 0); }
		public NodeTypePhraseContext nodeTypePhrase() {
			return getRuleContext(NodeTypePhraseContext.class,0);
		}
		public NodeTypeDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nodeTypeDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterNodeTypeDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitNodeTypeDefinition(this);
		}
	}

	public final NodeTypeDefinitionContext nodeTypeDefinition() throws RecognitionException {
		NodeTypeDefinitionContext _localctx = new NodeTypeDefinitionContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_nodeTypeDefinition);
		try {
			setState(2889);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 1);
				{
				setState(2886);
				nodeTypePattern();
				}
				break;
			case NODE_SYNONYM:
				enterOuterAlt(_localctx, 2);
				{
				setState(2887);
				match(NODE_SYNONYM);
				setState(2888);
				nodeTypePhrase();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NodeTypePatternContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public NodeTypeNameContext nodeTypeName() {
			return getRuleContext(NodeTypeNameContext.class,0);
		}
		public NodeTypeFillerContext nodeTypeFiller() {
			return getRuleContext(NodeTypeFillerContext.class,0);
		}
		public NodeTypePatternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nodeTypePattern; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterNodeTypePattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitNodeTypePattern(this);
		}
	}

	public final NodeTypePatternContext nodeTypePattern() throws RecognitionException {
		NodeTypePatternContext _localctx = new NodeTypePatternContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_nodeTypePattern);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2891);
			match(LEFT_PAREN);
			setState(2893);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 337)) & ~0x3f) == 0 && ((1L << (_la - 337)) & 67L) != 0)) {
				{
				setState(2892);
				nodeTypeName();
				}
			}

			setState(2896);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLON || _la==LEFT_BRACE || ((((_la - 149)) & ~0x3f) == 0 && ((1L << (_la - 149)) & 21L) != 0)) {
				{
				setState(2895);
				nodeTypeFiller();
				}
			}

			setState(2898);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NodeTypePhraseContext extends ParserRuleContext {
		public NodeTypeNameContext nodeTypeName() {
			return getRuleContext(NodeTypeNameContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(GQLParser.TYPE, 0); }
		public NodeTypeFillerContext nodeTypeFiller() {
			return getRuleContext(NodeTypeFillerContext.class,0);
		}
		public NodeTypePhraseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nodeTypePhrase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterNodeTypePhrase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitNodeTypePhrase(this);
		}
	}

	public final NodeTypePhraseContext nodeTypePhrase() throws RecognitionException {
		NodeTypePhraseContext _localctx = new NodeTypePhraseContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_nodeTypePhrase);
		int _la;
		try {
			setState(2908);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TYPE:
			case DOUBLE_QUOTED_STRING_LITERAL:
			case ACCENT_QUOTED_STRING_LITERAL:
			case REGULAR_IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(2901);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TYPE) {
					{
					setState(2900);
					match(TYPE);
					}
				}

				setState(2903);
				nodeTypeName();
				setState(2905);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,263,_ctx) ) {
				case 1:
					{
					setState(2904);
					nodeTypeFiller();
					}
					break;
				}
				}
				break;
			case COLON:
			case LEFT_BRACE:
			case IS:
			case LABEL:
			case LABELS:
				enterOuterAlt(_localctx, 2);
				{
				setState(2907);
				nodeTypeFiller();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NodeTypeNameContext extends ParserRuleContext {
		public ElementTypeNameContext elementTypeName() {
			return getRuleContext(ElementTypeNameContext.class,0);
		}
		public NodeTypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nodeTypeName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterNodeTypeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitNodeTypeName(this);
		}
	}

	public final NodeTypeNameContext nodeTypeName() throws RecognitionException {
		NodeTypeNameContext _localctx = new NodeTypeNameContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_nodeTypeName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2910);
			elementTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NodeTypeFillerContext extends ParserRuleContext {
		public NodeTypeLabelSetDefinitionContext nodeTypeLabelSetDefinition() {
			return getRuleContext(NodeTypeLabelSetDefinitionContext.class,0);
		}
		public NodeTypePropertyTypeSetDefinitionContext nodeTypePropertyTypeSetDefinition() {
			return getRuleContext(NodeTypePropertyTypeSetDefinitionContext.class,0);
		}
		public NodeTypeFillerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nodeTypeFiller; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterNodeTypeFiller(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitNodeTypeFiller(this);
		}
	}

	public final NodeTypeFillerContext nodeTypeFiller() throws RecognitionException {
		NodeTypeFillerContext _localctx = new NodeTypeFillerContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_nodeTypeFiller);
		try {
			setState(2917);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,265,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2912);
				nodeTypeLabelSetDefinition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2913);
				nodeTypePropertyTypeSetDefinition();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2914);
				nodeTypeLabelSetDefinition();
				setState(2915);
				nodeTypePropertyTypeSetDefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NodeTypeLabelSetDefinitionContext extends ParserRuleContext {
		public LabelSetDefinitionContext labelSetDefinition() {
			return getRuleContext(LabelSetDefinitionContext.class,0);
		}
		public NodeTypeLabelSetDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nodeTypeLabelSetDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterNodeTypeLabelSetDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitNodeTypeLabelSetDefinition(this);
		}
	}

	public final NodeTypeLabelSetDefinitionContext nodeTypeLabelSetDefinition() throws RecognitionException {
		NodeTypeLabelSetDefinitionContext _localctx = new NodeTypeLabelSetDefinitionContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_nodeTypeLabelSetDefinition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2919);
			labelSetDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NodeTypePropertyTypeSetDefinitionContext extends ParserRuleContext {
		public PropertyTypeSetDefinitionContext propertyTypeSetDefinition() {
			return getRuleContext(PropertyTypeSetDefinitionContext.class,0);
		}
		public NodeTypePropertyTypeSetDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nodeTypePropertyTypeSetDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterNodeTypePropertyTypeSetDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitNodeTypePropertyTypeSetDefinition(this);
		}
	}

	public final NodeTypePropertyTypeSetDefinitionContext nodeTypePropertyTypeSetDefinition() throws RecognitionException {
		NodeTypePropertyTypeSetDefinitionContext _localctx = new NodeTypePropertyTypeSetDefinitionContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_nodeTypePropertyTypeSetDefinition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2921);
			propertyTypeSetDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EdgeTypeDefinitionContext extends ParserRuleContext {
		public EdgeTypePatternContext edgeTypePattern() {
			return getRuleContext(EdgeTypePatternContext.class,0);
		}
		public TerminalNode EDGE_SYNONYM() { return getToken(GQLParser.EDGE_SYNONYM, 0); }
		public EdgeTypePhraseContext edgeTypePhrase() {
			return getRuleContext(EdgeTypePhraseContext.class,0);
		}
		public EdgeKindContext edgeKind() {
			return getRuleContext(EdgeKindContext.class,0);
		}
		public EdgeTypeDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_edgeTypeDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterEdgeTypeDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitEdgeTypeDefinition(this);
		}
	}

	public final EdgeTypeDefinitionContext edgeTypeDefinition() throws RecognitionException {
		EdgeTypeDefinitionContext _localctx = new EdgeTypeDefinitionContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_edgeTypeDefinition);
		int _la;
		try {
			setState(2929);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 1);
				{
				setState(2923);
				edgeTypePattern();
				}
				break;
			case DIRECTED:
			case UNDIRECTED:
			case EDGE_SYNONYM:
				enterOuterAlt(_localctx, 2);
				{
				setState(2925);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DIRECTED || _la==UNDIRECTED) {
					{
					setState(2924);
					edgeKind();
					}
				}

				setState(2927);
				match(EDGE_SYNONYM);
				setState(2928);
				edgeTypePhrase();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EdgeTypePatternContext extends ParserRuleContext {
		public FullEdgeTypePatternContext fullEdgeTypePattern() {
			return getRuleContext(FullEdgeTypePatternContext.class,0);
		}
		public AbbreviatedEdgeTypePatternContext abbreviatedEdgeTypePattern() {
			return getRuleContext(AbbreviatedEdgeTypePatternContext.class,0);
		}
		public EdgeTypePatternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_edgeTypePattern; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterEdgeTypePattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitEdgeTypePattern(this);
		}
	}

	public final EdgeTypePatternContext edgeTypePattern() throws RecognitionException {
		EdgeTypePatternContext _localctx = new EdgeTypePatternContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_edgeTypePattern);
		try {
			setState(2933);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,268,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2931);
				fullEdgeTypePattern();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2932);
				abbreviatedEdgeTypePattern();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EdgeTypePhraseContext extends ParserRuleContext {
		public EdgeTypeNameContext edgeTypeName() {
			return getRuleContext(EdgeTypeNameContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(GQLParser.TYPE, 0); }
		public EdgeTypeFillerContext edgeTypeFiller() {
			return getRuleContext(EdgeTypeFillerContext.class,0);
		}
		public EndpointDefinitionContext endpointDefinition() {
			return getRuleContext(EndpointDefinitionContext.class,0);
		}
		public EdgeTypePhraseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_edgeTypePhrase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterEdgeTypePhrase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitEdgeTypePhrase(this);
		}
	}

	public final EdgeTypePhraseContext edgeTypePhrase() throws RecognitionException {
		EdgeTypePhraseContext _localctx = new EdgeTypePhraseContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_edgeTypePhrase);
		int _la;
		try {
			setState(2947);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TYPE:
			case DOUBLE_QUOTED_STRING_LITERAL:
			case ACCENT_QUOTED_STRING_LITERAL:
			case REGULAR_IDENTIFIER:
				enterOuterAlt(_localctx, 1);
				{
				setState(2936);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TYPE) {
					{
					setState(2935);
					match(TYPE);
					}
				}

				setState(2938);
				edgeTypeName();
				setState(2942);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,270,_ctx) ) {
				case 1:
					{
					setState(2939);
					edgeTypeFiller();
					setState(2940);
					endpointDefinition();
					}
					break;
				}
				}
				break;
			case COLON:
			case LEFT_BRACE:
			case IS:
			case LABEL:
			case LABELS:
				enterOuterAlt(_localctx, 2);
				{
				setState(2944);
				edgeTypeFiller();
				setState(2945);
				endpointDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EdgeTypeNameContext extends ParserRuleContext {
		public ElementTypeNameContext elementTypeName() {
			return getRuleContext(ElementTypeNameContext.class,0);
		}
		public EdgeTypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_edgeTypeName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterEdgeTypeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitEdgeTypeName(this);
		}
	}

	public final EdgeTypeNameContext edgeTypeName() throws RecognitionException {
		EdgeTypeNameContext _localctx = new EdgeTypeNameContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_edgeTypeName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2949);
			elementTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EdgeTypeFillerContext extends ParserRuleContext {
		public EdgeTypeLabelSetDefinitionContext edgeTypeLabelSetDefinition() {
			return getRuleContext(EdgeTypeLabelSetDefinitionContext.class,0);
		}
		public EdgeTypePropertyTypeSetDefinitionContext edgeTypePropertyTypeSetDefinition() {
			return getRuleContext(EdgeTypePropertyTypeSetDefinitionContext.class,0);
		}
		public EdgeTypeFillerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_edgeTypeFiller; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterEdgeTypeFiller(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitEdgeTypeFiller(this);
		}
	}

	public final EdgeTypeFillerContext edgeTypeFiller() throws RecognitionException {
		EdgeTypeFillerContext _localctx = new EdgeTypeFillerContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_edgeTypeFiller);
		try {
			setState(2956);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,272,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2951);
				edgeTypeLabelSetDefinition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2952);
				edgeTypePropertyTypeSetDefinition();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2953);
				edgeTypeLabelSetDefinition();
				setState(2954);
				edgeTypePropertyTypeSetDefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EdgeTypeLabelSetDefinitionContext extends ParserRuleContext {
		public LabelSetDefinitionContext labelSetDefinition() {
			return getRuleContext(LabelSetDefinitionContext.class,0);
		}
		public EdgeTypeLabelSetDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_edgeTypeLabelSetDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterEdgeTypeLabelSetDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitEdgeTypeLabelSetDefinition(this);
		}
	}

	public final EdgeTypeLabelSetDefinitionContext edgeTypeLabelSetDefinition() throws RecognitionException {
		EdgeTypeLabelSetDefinitionContext _localctx = new EdgeTypeLabelSetDefinitionContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_edgeTypeLabelSetDefinition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2958);
			labelSetDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EdgeTypePropertyTypeSetDefinitionContext extends ParserRuleContext {
		public PropertyTypeSetDefinitionContext propertyTypeSetDefinition() {
			return getRuleContext(PropertyTypeSetDefinitionContext.class,0);
		}
		public EdgeTypePropertyTypeSetDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_edgeTypePropertyTypeSetDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterEdgeTypePropertyTypeSetDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitEdgeTypePropertyTypeSetDefinition(this);
		}
	}

	public final EdgeTypePropertyTypeSetDefinitionContext edgeTypePropertyTypeSetDefinition() throws RecognitionException {
		EdgeTypePropertyTypeSetDefinitionContext _localctx = new EdgeTypePropertyTypeSetDefinitionContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_edgeTypePropertyTypeSetDefinition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2960);
			propertyTypeSetDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FullEdgeTypePatternContext extends ParserRuleContext {
		public FullEdgeTypePatternPointingRightContext fullEdgeTypePatternPointingRight() {
			return getRuleContext(FullEdgeTypePatternPointingRightContext.class,0);
		}
		public FullEdgeTypePatternPointingLeftContext fullEdgeTypePatternPointingLeft() {
			return getRuleContext(FullEdgeTypePatternPointingLeftContext.class,0);
		}
		public FullEdgeTypePatternUndirectedContext fullEdgeTypePatternUndirected() {
			return getRuleContext(FullEdgeTypePatternUndirectedContext.class,0);
		}
		public FullEdgeTypePatternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullEdgeTypePattern; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterFullEdgeTypePattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitFullEdgeTypePattern(this);
		}
	}

	public final FullEdgeTypePatternContext fullEdgeTypePattern() throws RecognitionException {
		FullEdgeTypePatternContext _localctx = new FullEdgeTypePatternContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_fullEdgeTypePattern);
		try {
			setState(2965);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,273,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2962);
				fullEdgeTypePatternPointingRight();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2963);
				fullEdgeTypePatternPointingLeft();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2964);
				fullEdgeTypePatternUndirected();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FullEdgeTypePatternPointingRightContext extends ParserRuleContext {
		public SourceNodeTypeReferenceContext sourceNodeTypeReference() {
			return getRuleContext(SourceNodeTypeReferenceContext.class,0);
		}
		public ArcTypePointingRightContext arcTypePointingRight() {
			return getRuleContext(ArcTypePointingRightContext.class,0);
		}
		public DestinationNodeTypeReferenceContext destinationNodeTypeReference() {
			return getRuleContext(DestinationNodeTypeReferenceContext.class,0);
		}
		public FullEdgeTypePatternPointingRightContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullEdgeTypePatternPointingRight; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterFullEdgeTypePatternPointingRight(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitFullEdgeTypePatternPointingRight(this);
		}
	}

	public final FullEdgeTypePatternPointingRightContext fullEdgeTypePatternPointingRight() throws RecognitionException {
		FullEdgeTypePatternPointingRightContext _localctx = new FullEdgeTypePatternPointingRightContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_fullEdgeTypePatternPointingRight);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2967);
			sourceNodeTypeReference();
			setState(2968);
			arcTypePointingRight();
			setState(2969);
			destinationNodeTypeReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FullEdgeTypePatternPointingLeftContext extends ParserRuleContext {
		public DestinationNodeTypeReferenceContext destinationNodeTypeReference() {
			return getRuleContext(DestinationNodeTypeReferenceContext.class,0);
		}
		public ArcTypePointingLeftContext arcTypePointingLeft() {
			return getRuleContext(ArcTypePointingLeftContext.class,0);
		}
		public SourceNodeTypeReferenceContext sourceNodeTypeReference() {
			return getRuleContext(SourceNodeTypeReferenceContext.class,0);
		}
		public FullEdgeTypePatternPointingLeftContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullEdgeTypePatternPointingLeft; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterFullEdgeTypePatternPointingLeft(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitFullEdgeTypePatternPointingLeft(this);
		}
	}

	public final FullEdgeTypePatternPointingLeftContext fullEdgeTypePatternPointingLeft() throws RecognitionException {
		FullEdgeTypePatternPointingLeftContext _localctx = new FullEdgeTypePatternPointingLeftContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_fullEdgeTypePatternPointingLeft);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2971);
			destinationNodeTypeReference();
			setState(2972);
			arcTypePointingLeft();
			setState(2973);
			sourceNodeTypeReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FullEdgeTypePatternUndirectedContext extends ParserRuleContext {
		public SourceNodeTypeReferenceContext sourceNodeTypeReference() {
			return getRuleContext(SourceNodeTypeReferenceContext.class,0);
		}
		public ArcTypeUndirectedContext arcTypeUndirected() {
			return getRuleContext(ArcTypeUndirectedContext.class,0);
		}
		public DestinationNodeTypeReferenceContext destinationNodeTypeReference() {
			return getRuleContext(DestinationNodeTypeReferenceContext.class,0);
		}
		public FullEdgeTypePatternUndirectedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullEdgeTypePatternUndirected; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterFullEdgeTypePatternUndirected(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitFullEdgeTypePatternUndirected(this);
		}
	}

	public final FullEdgeTypePatternUndirectedContext fullEdgeTypePatternUndirected() throws RecognitionException {
		FullEdgeTypePatternUndirectedContext _localctx = new FullEdgeTypePatternUndirectedContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_fullEdgeTypePatternUndirected);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2975);
			sourceNodeTypeReference();
			setState(2976);
			arcTypeUndirected();
			setState(2977);
			destinationNodeTypeReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ArcTypePointingRightContext extends ParserRuleContext {
		public TerminalNode MINUS_SIGN() { return getToken(GQLParser.MINUS_SIGN, 0); }
		public TerminalNode LEFT_BRACKET() { return getToken(GQLParser.LEFT_BRACKET, 0); }
		public ArcTypeFillerContext arcTypeFiller() {
			return getRuleContext(ArcTypeFillerContext.class,0);
		}
		public TerminalNode RIGHT_BRACKET() { return getToken(GQLParser.RIGHT_BRACKET, 0); }
		public TerminalNode RIGHT_ARROW() { return getToken(GQLParser.RIGHT_ARROW, 0); }
		public ArcTypePointingRightContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arcTypePointingRight; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterArcTypePointingRight(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitArcTypePointingRight(this);
		}
	}

	public final ArcTypePointingRightContext arcTypePointingRight() throws RecognitionException {
		ArcTypePointingRightContext _localctx = new ArcTypePointingRightContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_arcTypePointingRight);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2979);
			match(MINUS_SIGN);
			setState(2980);
			match(LEFT_BRACKET);
			setState(2981);
			arcTypeFiller();
			setState(2982);
			match(RIGHT_BRACKET);
			setState(2983);
			match(RIGHT_ARROW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ArcTypePointingLeftContext extends ParserRuleContext {
		public TerminalNode LEFT_ANGLE_BRACKET() { return getToken(GQLParser.LEFT_ANGLE_BRACKET, 0); }
		public List<TerminalNode> MINUS_SIGN() { return getTokens(GQLParser.MINUS_SIGN); }
		public TerminalNode MINUS_SIGN(int i) {
			return getToken(GQLParser.MINUS_SIGN, i);
		}
		public TerminalNode LEFT_BRACKET() { return getToken(GQLParser.LEFT_BRACKET, 0); }
		public ArcTypeFillerContext arcTypeFiller() {
			return getRuleContext(ArcTypeFillerContext.class,0);
		}
		public TerminalNode RIGHT_BRACKET() { return getToken(GQLParser.RIGHT_BRACKET, 0); }
		public ArcTypePointingLeftContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arcTypePointingLeft; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterArcTypePointingLeft(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitArcTypePointingLeft(this);
		}
	}

	public final ArcTypePointingLeftContext arcTypePointingLeft() throws RecognitionException {
		ArcTypePointingLeftContext _localctx = new ArcTypePointingLeftContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_arcTypePointingLeft);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2985);
			match(LEFT_ANGLE_BRACKET);
			setState(2986);
			match(MINUS_SIGN);
			setState(2987);
			match(LEFT_BRACKET);
			setState(2988);
			arcTypeFiller();
			setState(2989);
			match(RIGHT_BRACKET);
			setState(2990);
			match(MINUS_SIGN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ArcTypeUndirectedContext extends ParserRuleContext {
		public List<TerminalNode> TILDE() { return getTokens(GQLParser.TILDE); }
		public TerminalNode TILDE(int i) {
			return getToken(GQLParser.TILDE, i);
		}
		public TerminalNode LEFT_BRACKET() { return getToken(GQLParser.LEFT_BRACKET, 0); }
		public ArcTypeFillerContext arcTypeFiller() {
			return getRuleContext(ArcTypeFillerContext.class,0);
		}
		public TerminalNode RIGHT_BRACKET() { return getToken(GQLParser.RIGHT_BRACKET, 0); }
		public ArcTypeUndirectedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arcTypeUndirected; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterArcTypeUndirected(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitArcTypeUndirected(this);
		}
	}

	public final ArcTypeUndirectedContext arcTypeUndirected() throws RecognitionException {
		ArcTypeUndirectedContext _localctx = new ArcTypeUndirectedContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_arcTypeUndirected);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2992);
			match(TILDE);
			setState(2993);
			match(LEFT_BRACKET);
			setState(2994);
			arcTypeFiller();
			setState(2995);
			match(RIGHT_BRACKET);
			setState(2996);
			match(TILDE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ArcTypeFillerContext extends ParserRuleContext {
		public EdgeTypeNameContext edgeTypeName() {
			return getRuleContext(EdgeTypeNameContext.class,0);
		}
		public EdgeTypeFillerContext edgeTypeFiller() {
			return getRuleContext(EdgeTypeFillerContext.class,0);
		}
		public ArcTypeFillerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arcTypeFiller; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterArcTypeFiller(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitArcTypeFiller(this);
		}
	}

	public final ArcTypeFillerContext arcTypeFiller() throws RecognitionException {
		ArcTypeFillerContext _localctx = new ArcTypeFillerContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_arcTypeFiller);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2999);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 337)) & ~0x3f) == 0 && ((1L << (_la - 337)) & 67L) != 0)) {
				{
				setState(2998);
				edgeTypeName();
				}
			}

			setState(3002);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLON || _la==LEFT_BRACE || ((((_la - 149)) & ~0x3f) == 0 && ((1L << (_la - 149)) & 21L) != 0)) {
				{
				setState(3001);
				edgeTypeFiller();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AbbreviatedEdgeTypePatternContext extends ParserRuleContext {
		public AbbreviatedEdgeTypePatternPointingRightContext abbreviatedEdgeTypePatternPointingRight() {
			return getRuleContext(AbbreviatedEdgeTypePatternPointingRightContext.class,0);
		}
		public AbbreviatedEdgeTypePatternPointingLeftContext abbreviatedEdgeTypePatternPointingLeft() {
			return getRuleContext(AbbreviatedEdgeTypePatternPointingLeftContext.class,0);
		}
		public AbbreviatedEdgeTypePatternUndirectedContext abbreviatedEdgeTypePatternUndirected() {
			return getRuleContext(AbbreviatedEdgeTypePatternUndirectedContext.class,0);
		}
		public AbbreviatedEdgeTypePatternContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_abbreviatedEdgeTypePattern; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterAbbreviatedEdgeTypePattern(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitAbbreviatedEdgeTypePattern(this);
		}
	}

	public final AbbreviatedEdgeTypePatternContext abbreviatedEdgeTypePattern() throws RecognitionException {
		AbbreviatedEdgeTypePatternContext _localctx = new AbbreviatedEdgeTypePatternContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_abbreviatedEdgeTypePattern);
		try {
			setState(3007);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,276,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3004);
				abbreviatedEdgeTypePatternPointingRight();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3005);
				abbreviatedEdgeTypePatternPointingLeft();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3006);
				abbreviatedEdgeTypePatternUndirected();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AbbreviatedEdgeTypePatternPointingRightContext extends ParserRuleContext {
		public SourceNodeTypeReferenceContext sourceNodeTypeReference() {
			return getRuleContext(SourceNodeTypeReferenceContext.class,0);
		}
		public TerminalNode RIGHT_ARROW() { return getToken(GQLParser.RIGHT_ARROW, 0); }
		public DestinationNodeTypeReferenceContext destinationNodeTypeReference() {
			return getRuleContext(DestinationNodeTypeReferenceContext.class,0);
		}
		public AbbreviatedEdgeTypePatternPointingRightContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_abbreviatedEdgeTypePatternPointingRight; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterAbbreviatedEdgeTypePatternPointingRight(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitAbbreviatedEdgeTypePatternPointingRight(this);
		}
	}

	public final AbbreviatedEdgeTypePatternPointingRightContext abbreviatedEdgeTypePatternPointingRight() throws RecognitionException {
		AbbreviatedEdgeTypePatternPointingRightContext _localctx = new AbbreviatedEdgeTypePatternPointingRightContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_abbreviatedEdgeTypePatternPointingRight);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3009);
			sourceNodeTypeReference();
			setState(3010);
			match(RIGHT_ARROW);
			setState(3011);
			destinationNodeTypeReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AbbreviatedEdgeTypePatternPointingLeftContext extends ParserRuleContext {
		public DestinationNodeTypeReferenceContext destinationNodeTypeReference() {
			return getRuleContext(DestinationNodeTypeReferenceContext.class,0);
		}
		public TerminalNode LEFT_ANGLE_BRACKET() { return getToken(GQLParser.LEFT_ANGLE_BRACKET, 0); }
		public TerminalNode MINUS_SIGN() { return getToken(GQLParser.MINUS_SIGN, 0); }
		public SourceNodeTypeReferenceContext sourceNodeTypeReference() {
			return getRuleContext(SourceNodeTypeReferenceContext.class,0);
		}
		public AbbreviatedEdgeTypePatternPointingLeftContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_abbreviatedEdgeTypePatternPointingLeft; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterAbbreviatedEdgeTypePatternPointingLeft(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitAbbreviatedEdgeTypePatternPointingLeft(this);
		}
	}

	public final AbbreviatedEdgeTypePatternPointingLeftContext abbreviatedEdgeTypePatternPointingLeft() throws RecognitionException {
		AbbreviatedEdgeTypePatternPointingLeftContext _localctx = new AbbreviatedEdgeTypePatternPointingLeftContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_abbreviatedEdgeTypePatternPointingLeft);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3013);
			destinationNodeTypeReference();
			setState(3014);
			match(LEFT_ANGLE_BRACKET);
			setState(3015);
			match(MINUS_SIGN);
			setState(3016);
			sourceNodeTypeReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AbbreviatedEdgeTypePatternUndirectedContext extends ParserRuleContext {
		public SourceNodeTypeReferenceContext sourceNodeTypeReference() {
			return getRuleContext(SourceNodeTypeReferenceContext.class,0);
		}
		public TerminalNode TILDE() { return getToken(GQLParser.TILDE, 0); }
		public DestinationNodeTypeReferenceContext destinationNodeTypeReference() {
			return getRuleContext(DestinationNodeTypeReferenceContext.class,0);
		}
		public AbbreviatedEdgeTypePatternUndirectedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_abbreviatedEdgeTypePatternUndirected; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterAbbreviatedEdgeTypePatternUndirected(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitAbbreviatedEdgeTypePatternUndirected(this);
		}
	}

	public final AbbreviatedEdgeTypePatternUndirectedContext abbreviatedEdgeTypePatternUndirected() throws RecognitionException {
		AbbreviatedEdgeTypePatternUndirectedContext _localctx = new AbbreviatedEdgeTypePatternUndirectedContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_abbreviatedEdgeTypePatternUndirected);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3018);
			sourceNodeTypeReference();
			setState(3019);
			match(TILDE);
			setState(3020);
			destinationNodeTypeReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NodeTypeReferenceContext extends ParserRuleContext {
		public SourceNodeTypeReferenceContext sourceNodeTypeReference() {
			return getRuleContext(SourceNodeTypeReferenceContext.class,0);
		}
		public DestinationNodeTypeReferenceContext destinationNodeTypeReference() {
			return getRuleContext(DestinationNodeTypeReferenceContext.class,0);
		}
		public NodeTypeReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nodeTypeReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterNodeTypeReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitNodeTypeReference(this);
		}
	}

	public final NodeTypeReferenceContext nodeTypeReference() throws RecognitionException {
		NodeTypeReferenceContext _localctx = new NodeTypeReferenceContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_nodeTypeReference);
		try {
			setState(3024);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,277,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3022);
				sourceNodeTypeReference();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3023);
				destinationNodeTypeReference();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SourceNodeTypeReferenceContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public SourceNodeTypeNameContext sourceNodeTypeName() {
			return getRuleContext(SourceNodeTypeNameContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public NodeTypeFillerContext nodeTypeFiller() {
			return getRuleContext(NodeTypeFillerContext.class,0);
		}
		public SourceNodeTypeReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sourceNodeTypeReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSourceNodeTypeReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSourceNodeTypeReference(this);
		}
	}

	public final SourceNodeTypeReferenceContext sourceNodeTypeReference() throws RecognitionException {
		SourceNodeTypeReferenceContext _localctx = new SourceNodeTypeReferenceContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_sourceNodeTypeReference);
		int _la;
		try {
			setState(3035);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,279,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3026);
				match(LEFT_PAREN);
				setState(3027);
				sourceNodeTypeName();
				setState(3028);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3030);
				match(LEFT_PAREN);
				setState(3032);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLON || _la==LEFT_BRACE || ((((_la - 149)) & ~0x3f) == 0 && ((1L << (_la - 149)) & 21L) != 0)) {
					{
					setState(3031);
					nodeTypeFiller();
					}
				}

				setState(3034);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DestinationNodeTypeReferenceContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public DestinationNodeTypeNameContext destinationNodeTypeName() {
			return getRuleContext(DestinationNodeTypeNameContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public NodeTypeFillerContext nodeTypeFiller() {
			return getRuleContext(NodeTypeFillerContext.class,0);
		}
		public DestinationNodeTypeReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_destinationNodeTypeReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterDestinationNodeTypeReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitDestinationNodeTypeReference(this);
		}
	}

	public final DestinationNodeTypeReferenceContext destinationNodeTypeReference() throws RecognitionException {
		DestinationNodeTypeReferenceContext _localctx = new DestinationNodeTypeReferenceContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_destinationNodeTypeReference);
		int _la;
		try {
			setState(3046);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,281,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3037);
				match(LEFT_PAREN);
				setState(3038);
				destinationNodeTypeName();
				setState(3039);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3041);
				match(LEFT_PAREN);
				setState(3043);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLON || _la==LEFT_BRACE || ((((_la - 149)) & ~0x3f) == 0 && ((1L << (_la - 149)) & 21L) != 0)) {
					{
					setState(3042);
					nodeTypeFiller();
					}
				}

				setState(3045);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EdgeKindContext extends ParserRuleContext {
		public TerminalNode DIRECTED() { return getToken(GQLParser.DIRECTED, 0); }
		public TerminalNode UNDIRECTED() { return getToken(GQLParser.UNDIRECTED, 0); }
		public EdgeKindContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_edgeKind; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterEdgeKind(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitEdgeKind(this);
		}
	}

	public final EdgeKindContext edgeKind() throws RecognitionException {
		EdgeKindContext _localctx = new EdgeKindContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_edgeKind);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3048);
			_la = _input.LA(1);
			if ( !(_la==DIRECTED || _la==UNDIRECTED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EndpointDefinitionContext extends ParserRuleContext {
		public TerminalNode CONNECTING() { return getToken(GQLParser.CONNECTING, 0); }
		public EndpointPairDefinitionContext endpointPairDefinition() {
			return getRuleContext(EndpointPairDefinitionContext.class,0);
		}
		public EndpointDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_endpointDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterEndpointDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitEndpointDefinition(this);
		}
	}

	public final EndpointDefinitionContext endpointDefinition() throws RecognitionException {
		EndpointDefinitionContext _localctx = new EndpointDefinitionContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_endpointDefinition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3050);
			match(CONNECTING);
			setState(3051);
			endpointPairDefinition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EndpointPairDefinitionContext extends ParserRuleContext {
		public EndpointPairDefinitionPointingRightContext endpointPairDefinitionPointingRight() {
			return getRuleContext(EndpointPairDefinitionPointingRightContext.class,0);
		}
		public EndpointPairDefinitionPointingLeftContext endpointPairDefinitionPointingLeft() {
			return getRuleContext(EndpointPairDefinitionPointingLeftContext.class,0);
		}
		public EndpointPairDefinitionUndirectedContext endpointPairDefinitionUndirected() {
			return getRuleContext(EndpointPairDefinitionUndirectedContext.class,0);
		}
		public AbbreviatedEdgeTypePatternContext abbreviatedEdgeTypePattern() {
			return getRuleContext(AbbreviatedEdgeTypePatternContext.class,0);
		}
		public EndpointPairDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_endpointPairDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterEndpointPairDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitEndpointPairDefinition(this);
		}
	}

	public final EndpointPairDefinitionContext endpointPairDefinition() throws RecognitionException {
		EndpointPairDefinitionContext _localctx = new EndpointPairDefinitionContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_endpointPairDefinition);
		try {
			setState(3057);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,282,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3053);
				endpointPairDefinitionPointingRight();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3054);
				endpointPairDefinitionPointingLeft();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3055);
				endpointPairDefinitionUndirected();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3056);
				abbreviatedEdgeTypePattern();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EndpointPairDefinitionPointingRightContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public SourceNodeTypeNameContext sourceNodeTypeName() {
			return getRuleContext(SourceNodeTypeNameContext.class,0);
		}
		public ConnectorPointingRightContext connectorPointingRight() {
			return getRuleContext(ConnectorPointingRightContext.class,0);
		}
		public DestinationNodeTypeNameContext destinationNodeTypeName() {
			return getRuleContext(DestinationNodeTypeNameContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public EndpointPairDefinitionPointingRightContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_endpointPairDefinitionPointingRight; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterEndpointPairDefinitionPointingRight(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitEndpointPairDefinitionPointingRight(this);
		}
	}

	public final EndpointPairDefinitionPointingRightContext endpointPairDefinitionPointingRight() throws RecognitionException {
		EndpointPairDefinitionPointingRightContext _localctx = new EndpointPairDefinitionPointingRightContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_endpointPairDefinitionPointingRight);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3059);
			match(LEFT_PAREN);
			setState(3060);
			sourceNodeTypeName();
			setState(3061);
			connectorPointingRight();
			setState(3062);
			destinationNodeTypeName();
			setState(3063);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EndpointPairDefinitionPointingLeftContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public DestinationNodeTypeNameContext destinationNodeTypeName() {
			return getRuleContext(DestinationNodeTypeNameContext.class,0);
		}
		public TerminalNode LEFT_ANGLE_BRACKET() { return getToken(GQLParser.LEFT_ANGLE_BRACKET, 0); }
		public TerminalNode MINUS_SIGN() { return getToken(GQLParser.MINUS_SIGN, 0); }
		public SourceNodeTypeNameContext sourceNodeTypeName() {
			return getRuleContext(SourceNodeTypeNameContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public EndpointPairDefinitionPointingLeftContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_endpointPairDefinitionPointingLeft; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterEndpointPairDefinitionPointingLeft(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitEndpointPairDefinitionPointingLeft(this);
		}
	}

	public final EndpointPairDefinitionPointingLeftContext endpointPairDefinitionPointingLeft() throws RecognitionException {
		EndpointPairDefinitionPointingLeftContext _localctx = new EndpointPairDefinitionPointingLeftContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_endpointPairDefinitionPointingLeft);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3065);
			match(LEFT_PAREN);
			setState(3066);
			destinationNodeTypeName();
			setState(3067);
			match(LEFT_ANGLE_BRACKET);
			setState(3068);
			match(MINUS_SIGN);
			setState(3069);
			sourceNodeTypeName();
			setState(3070);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EndpointPairDefinitionUndirectedContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public SourceNodeTypeNameContext sourceNodeTypeName() {
			return getRuleContext(SourceNodeTypeNameContext.class,0);
		}
		public ConnectorUndirectedContext connectorUndirected() {
			return getRuleContext(ConnectorUndirectedContext.class,0);
		}
		public DestinationNodeTypeNameContext destinationNodeTypeName() {
			return getRuleContext(DestinationNodeTypeNameContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public EndpointPairDefinitionUndirectedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_endpointPairDefinitionUndirected; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterEndpointPairDefinitionUndirected(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitEndpointPairDefinitionUndirected(this);
		}
	}

	public final EndpointPairDefinitionUndirectedContext endpointPairDefinitionUndirected() throws RecognitionException {
		EndpointPairDefinitionUndirectedContext _localctx = new EndpointPairDefinitionUndirectedContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_endpointPairDefinitionUndirected);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3072);
			match(LEFT_PAREN);
			setState(3073);
			sourceNodeTypeName();
			setState(3074);
			connectorUndirected();
			setState(3075);
			destinationNodeTypeName();
			setState(3076);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConnectorPointingRightContext extends ParserRuleContext {
		public TerminalNode TO() { return getToken(GQLParser.TO, 0); }
		public TerminalNode RIGHT_ARROW() { return getToken(GQLParser.RIGHT_ARROW, 0); }
		public ConnectorPointingRightContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_connectorPointingRight; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterConnectorPointingRight(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitConnectorPointingRight(this);
		}
	}

	public final ConnectorPointingRightContext connectorPointingRight() throws RecognitionException {
		ConnectorPointingRightContext _localctx = new ConnectorPointingRightContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_connectorPointingRight);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3078);
			_la = _input.LA(1);
			if ( !(_la==TO || _la==RIGHT_ARROW) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ConnectorUndirectedContext extends ParserRuleContext {
		public TerminalNode TO() { return getToken(GQLParser.TO, 0); }
		public TerminalNode TILDE() { return getToken(GQLParser.TILDE, 0); }
		public ConnectorUndirectedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_connectorUndirected; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterConnectorUndirected(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitConnectorUndirected(this);
		}
	}

	public final ConnectorUndirectedContext connectorUndirected() throws RecognitionException {
		ConnectorUndirectedContext _localctx = new ConnectorUndirectedContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_connectorUndirected);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3080);
			_la = _input.LA(1);
			if ( !(_la==TILDE || _la==TO) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SourceNodeTypeNameContext extends ParserRuleContext {
		public ElementTypeNameContext elementTypeName() {
			return getRuleContext(ElementTypeNameContext.class,0);
		}
		public SourceNodeTypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sourceNodeTypeName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSourceNodeTypeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSourceNodeTypeName(this);
		}
	}

	public final SourceNodeTypeNameContext sourceNodeTypeName() throws RecognitionException {
		SourceNodeTypeNameContext _localctx = new SourceNodeTypeNameContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_sourceNodeTypeName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3082);
			elementTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DestinationNodeTypeNameContext extends ParserRuleContext {
		public ElementTypeNameContext elementTypeName() {
			return getRuleContext(ElementTypeNameContext.class,0);
		}
		public DestinationNodeTypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_destinationNodeTypeName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterDestinationNodeTypeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitDestinationNodeTypeName(this);
		}
	}

	public final DestinationNodeTypeNameContext destinationNodeTypeName() throws RecognitionException {
		DestinationNodeTypeNameContext _localctx = new DestinationNodeTypeNameContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_destinationNodeTypeName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3084);
			elementTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LabelSetDefinitionContext extends ParserRuleContext {
		public TerminalNode LABEL() { return getToken(GQLParser.LABEL, 0); }
		public LabelNameContext labelName() {
			return getRuleContext(LabelNameContext.class,0);
		}
		public TerminalNode LABELS() { return getToken(GQLParser.LABELS, 0); }
		public LabelSetSpecificationContext labelSetSpecification() {
			return getRuleContext(LabelSetSpecificationContext.class,0);
		}
		public IsOrColonContext isOrColon() {
			return getRuleContext(IsOrColonContext.class,0);
		}
		public LabelSetDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labelSetDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterLabelSetDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitLabelSetDefinition(this);
		}
	}

	public final LabelSetDefinitionContext labelSetDefinition() throws RecognitionException {
		LabelSetDefinitionContext _localctx = new LabelSetDefinitionContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_labelSetDefinition);
		try {
			setState(3093);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LABEL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3086);
				match(LABEL);
				setState(3087);
				labelName();
				}
				break;
			case LABELS:
				enterOuterAlt(_localctx, 2);
				{
				setState(3088);
				match(LABELS);
				setState(3089);
				labelSetSpecification();
				}
				break;
			case COLON:
			case IS:
				enterOuterAlt(_localctx, 3);
				{
				setState(3090);
				isOrColon();
				setState(3091);
				labelSetSpecification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PropertyTypeSetDefinitionContext extends ParserRuleContext {
		public TerminalNode LEFT_BRACE() { return getToken(GQLParser.LEFT_BRACE, 0); }
		public TerminalNode RIGHT_BRACE() { return getToken(GQLParser.RIGHT_BRACE, 0); }
		public PropertyTypeDefinitionListContext propertyTypeDefinitionList() {
			return getRuleContext(PropertyTypeDefinitionListContext.class,0);
		}
		public PropertyTypeSetDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_propertyTypeSetDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterPropertyTypeSetDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitPropertyTypeSetDefinition(this);
		}
	}

	public final PropertyTypeSetDefinitionContext propertyTypeSetDefinition() throws RecognitionException {
		PropertyTypeSetDefinitionContext _localctx = new PropertyTypeSetDefinitionContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_propertyTypeSetDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3095);
			match(LEFT_BRACE);
			setState(3097);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & -1L) != 0) || ((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & -1L) != 0) || ((((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & -1L) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -1L) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & 603482350067652607L) != 0)) {
				{
				setState(3096);
				propertyTypeDefinitionList();
				}
			}

			setState(3099);
			match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PropertyTypeDefinitionListContext extends ParserRuleContext {
		public List<PropertyTypeDefinitionContext> propertyTypeDefinition() {
			return getRuleContexts(PropertyTypeDefinitionContext.class);
		}
		public PropertyTypeDefinitionContext propertyTypeDefinition(int i) {
			return getRuleContext(PropertyTypeDefinitionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQLParser.COMMA, i);
		}
		public PropertyTypeDefinitionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_propertyTypeDefinitionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterPropertyTypeDefinitionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitPropertyTypeDefinitionList(this);
		}
	}

	public final PropertyTypeDefinitionListContext propertyTypeDefinitionList() throws RecognitionException {
		PropertyTypeDefinitionListContext _localctx = new PropertyTypeDefinitionListContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_propertyTypeDefinitionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3101);
			propertyTypeDefinition();
			setState(3106);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3102);
				match(COMMA);
				setState(3103);
				propertyTypeDefinition();
				}
				}
				setState(3108);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PropertyTypeDefinitionContext extends ParserRuleContext {
		public PropertyNameContext propertyName() {
			return getRuleContext(PropertyNameContext.class,0);
		}
		public PropertyValueTypeContext propertyValueType() {
			return getRuleContext(PropertyValueTypeContext.class,0);
		}
		public TypedContext typed() {
			return getRuleContext(TypedContext.class,0);
		}
		public PropertyTypeDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_propertyTypeDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterPropertyTypeDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitPropertyTypeDefinition(this);
		}
	}

	public final PropertyTypeDefinitionContext propertyTypeDefinition() throws RecognitionException {
		PropertyTypeDefinitionContext _localctx = new PropertyTypeDefinitionContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_propertyTypeDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3109);
			propertyName();
			setState(3111);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TYPED || _la==DOUBLE_COLON) {
				{
				setState(3110);
				typed();
				}
			}

			setState(3113);
			propertyValueType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PropertyValueTypeContext extends ParserRuleContext {
		public ValueTypeContext valueType() {
			return getRuleContext(ValueTypeContext.class,0);
		}
		public PropertyValueTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_propertyValueType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterPropertyValueType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitPropertyValueType(this);
		}
	}

	public final PropertyValueTypeContext propertyValueType() throws RecognitionException {
		PropertyValueTypeContext _localctx = new PropertyValueTypeContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_propertyValueType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3115);
			valueType(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BindingTableTypeContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(GQLParser.TABLE, 0); }
		public FieldTypesSpecificationContext fieldTypesSpecification() {
			return getRuleContext(FieldTypesSpecificationContext.class,0);
		}
		public TerminalNode BINDING() { return getToken(GQLParser.BINDING, 0); }
		public BindingTableTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bindingTableType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterBindingTableType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitBindingTableType(this);
		}
	}

	public final BindingTableTypeContext bindingTableType() throws RecognitionException {
		BindingTableTypeContext _localctx = new BindingTableTypeContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_bindingTableType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3118);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BINDING) {
				{
				setState(3117);
				match(BINDING);
				}
			}

			setState(3120);
			match(TABLE);
			setState(3121);
			fieldTypesSpecification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ValueTypeContext extends ParserRuleContext {
		public ValueTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valueType; }
	 
		public ValueTypeContext() { }
		public void copyFrom(ValueTypeContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class DynamicPropertyValueTypeContext extends ValueTypeContext {
		public TerminalNode PROPERTY() { return getToken(GQLParser.PROPERTY, 0); }
		public TerminalNode VALUE() { return getToken(GQLParser.VALUE, 0); }
		public TerminalNode ANY() { return getToken(GQLParser.ANY, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public DynamicPropertyValueTypeContext(ValueTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterDynamicPropertyValueType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitDynamicPropertyValueType(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PredefTypeContext extends ValueTypeContext {
		public PredefinedTypeContext predefinedType() {
			return getRuleContext(PredefinedTypeContext.class,0);
		}
		public PredefTypeContext(ValueTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterPredefType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitPredefType(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ListType1Context extends ValueTypeContext {
		public ListValueTypeNameContext listValueTypeName() {
			return getRuleContext(ListValueTypeNameContext.class,0);
		}
		public TerminalNode LEFT_ANGLE_BRACKET() { return getToken(GQLParser.LEFT_ANGLE_BRACKET, 0); }
		public ValueTypeContext valueType() {
			return getRuleContext(ValueTypeContext.class,0);
		}
		public TerminalNode RIGHT_ANGLE_BRACKET() { return getToken(GQLParser.RIGHT_ANGLE_BRACKET, 0); }
		public TerminalNode LEFT_BRACKET() { return getToken(GQLParser.LEFT_BRACKET, 0); }
		public MaxLengthContext maxLength() {
			return getRuleContext(MaxLengthContext.class,0);
		}
		public TerminalNode RIGHT_BRACKET() { return getToken(GQLParser.RIGHT_BRACKET, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public ListType1Context(ValueTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterListType1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitListType1(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class RecordType1Context extends ValueTypeContext {
		public TerminalNode RECORD() { return getToken(GQLParser.RECORD, 0); }
		public TerminalNode ANY() { return getToken(GQLParser.ANY, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public RecordType1Context(ValueTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterRecordType1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitRecordType1(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ClosedDynamicUnionType2Context extends ValueTypeContext {
		public List<ValueTypeContext> valueType() {
			return getRuleContexts(ValueTypeContext.class);
		}
		public ValueTypeContext valueType(int i) {
			return getRuleContext(ValueTypeContext.class,i);
		}
		public List<TerminalNode> VERTICAL_BAR() { return getTokens(GQLParser.VERTICAL_BAR); }
		public TerminalNode VERTICAL_BAR(int i) {
			return getToken(GQLParser.VERTICAL_BAR, i);
		}
		public ClosedDynamicUnionType2Context(ValueTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterClosedDynamicUnionType2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitClosedDynamicUnionType2(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class RecordType2Context extends ValueTypeContext {
		public FieldTypesSpecificationContext fieldTypesSpecification() {
			return getRuleContext(FieldTypesSpecificationContext.class,0);
		}
		public TerminalNode RECORD() { return getToken(GQLParser.RECORD, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public RecordType2Context(ValueTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterRecordType2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitRecordType2(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ListType2Context extends ValueTypeContext {
		public ValueTypeContext valueType() {
			return getRuleContext(ValueTypeContext.class,0);
		}
		public ListValueTypeNameContext listValueTypeName() {
			return getRuleContext(ListValueTypeNameContext.class,0);
		}
		public TerminalNode LEFT_BRACKET() { return getToken(GQLParser.LEFT_BRACKET, 0); }
		public MaxLengthContext maxLength() {
			return getRuleContext(MaxLengthContext.class,0);
		}
		public TerminalNode RIGHT_BRACKET() { return getToken(GQLParser.RIGHT_BRACKET, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public ListType2Context(ValueTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterListType2(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitListType2(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class PathTypeContext extends ValueTypeContext {
		public PathValueTypeContext pathValueType() {
			return getRuleContext(PathValueTypeContext.class,0);
		}
		public PathTypeContext(ValueTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterPathType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitPathType(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class OpenDynamicUnionTypeContext extends ValueTypeContext {
		public TerminalNode ANY() { return getToken(GQLParser.ANY, 0); }
		public TerminalNode VALUE() { return getToken(GQLParser.VALUE, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public OpenDynamicUnionTypeContext(ValueTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterOpenDynamicUnionType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitOpenDynamicUnionType(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class ClosedDynamicUnionType1Context extends ValueTypeContext {
		public TerminalNode ANY() { return getToken(GQLParser.ANY, 0); }
		public TerminalNode LEFT_ANGLE_BRACKET() { return getToken(GQLParser.LEFT_ANGLE_BRACKET, 0); }
		public List<ValueTypeContext> valueType() {
			return getRuleContexts(ValueTypeContext.class);
		}
		public ValueTypeContext valueType(int i) {
			return getRuleContext(ValueTypeContext.class,i);
		}
		public TerminalNode RIGHT_ANGLE_BRACKET() { return getToken(GQLParser.RIGHT_ANGLE_BRACKET, 0); }
		public TerminalNode VALUE() { return getToken(GQLParser.VALUE, 0); }
		public List<TerminalNode> VERTICAL_BAR() { return getTokens(GQLParser.VERTICAL_BAR); }
		public TerminalNode VERTICAL_BAR(int i) {
			return getToken(GQLParser.VERTICAL_BAR, i);
		}
		public ClosedDynamicUnionType1Context(ValueTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterClosedDynamicUnionType1(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitClosedDynamicUnionType1(this);
		}
	}

	public final ValueTypeContext valueType() throws RecognitionException {
		return valueType(0);
	}

	private ValueTypeContext valueType(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ValueTypeContext _localctx = new ValueTypeContext(_ctx, _parentState);
		ValueTypeContext _prevctx = _localctx;
		int _startState = 778;
		enterRecursionRule(_localctx, 778, RULE_valueType, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3183);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,300,_ctx) ) {
			case 1:
				{
				_localctx = new PredefTypeContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(3124);
				predefinedType();
				}
				break;
			case 2:
				{
				_localctx = new PathTypeContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3125);
				pathValueType();
				}
				break;
			case 3:
				{
				_localctx = new ListType1Context(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3126);
				listValueTypeName();
				setState(3127);
				match(LEFT_ANGLE_BRACKET);
				setState(3128);
				valueType(0);
				setState(3129);
				match(RIGHT_ANGLE_BRACKET);
				setState(3134);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,288,_ctx) ) {
				case 1:
					{
					setState(3130);
					match(LEFT_BRACKET);
					setState(3131);
					maxLength();
					setState(3132);
					match(RIGHT_BRACKET);
					}
					break;
				}
				setState(3137);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,289,_ctx) ) {
				case 1:
					{
					setState(3136);
					notNull();
					}
					break;
				}
				}
				break;
			case 4:
				{
				_localctx = new RecordType1Context(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3140);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(3139);
					match(ANY);
					}
				}

				setState(3142);
				match(RECORD);
				setState(3144);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,291,_ctx) ) {
				case 1:
					{
					setState(3143);
					notNull();
					}
					break;
				}
				}
				break;
			case 5:
				{
				_localctx = new RecordType2Context(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3147);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RECORD) {
					{
					setState(3146);
					match(RECORD);
					}
				}

				setState(3149);
				fieldTypesSpecification();
				setState(3151);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,293,_ctx) ) {
				case 1:
					{
					setState(3150);
					notNull();
					}
					break;
				}
				}
				break;
			case 6:
				{
				_localctx = new OpenDynamicUnionTypeContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3153);
				match(ANY);
				setState(3155);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,294,_ctx) ) {
				case 1:
					{
					setState(3154);
					match(VALUE);
					}
					break;
				}
				setState(3158);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,295,_ctx) ) {
				case 1:
					{
					setState(3157);
					notNull();
					}
					break;
				}
				}
				break;
			case 7:
				{
				_localctx = new DynamicPropertyValueTypeContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3161);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY) {
					{
					setState(3160);
					match(ANY);
					}
				}

				setState(3163);
				match(PROPERTY);
				setState(3164);
				match(VALUE);
				setState(3166);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,297,_ctx) ) {
				case 1:
					{
					setState(3165);
					notNull();
					}
					break;
				}
				}
				break;
			case 8:
				{
				_localctx = new ClosedDynamicUnionType1Context(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3168);
				match(ANY);
				setState(3170);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(3169);
					match(VALUE);
					}
				}

				setState(3172);
				match(LEFT_ANGLE_BRACKET);
				setState(3173);
				valueType(0);
				setState(3178);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==VERTICAL_BAR) {
					{
					{
					setState(3174);
					match(VERTICAL_BAR);
					setState(3175);
					valueType(0);
					}
					}
					setState(3180);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3181);
				match(RIGHT_ANGLE_BRACKET);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(3205);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,305,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(3203);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,304,_ctx) ) {
					case 1:
						{
						_localctx = new ListType2Context(new ValueTypeContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_valueType);
						setState(3185);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(3186);
						listValueTypeName();
						setState(3191);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,301,_ctx) ) {
						case 1:
							{
							setState(3187);
							match(LEFT_BRACKET);
							setState(3188);
							maxLength();
							setState(3189);
							match(RIGHT_BRACKET);
							}
							break;
						}
						setState(3194);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,302,_ctx) ) {
						case 1:
							{
							setState(3193);
							notNull();
							}
							break;
						}
						}
						break;
					case 2:
						{
						_localctx = new ClosedDynamicUnionType2Context(new ValueTypeContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_valueType);
						setState(3196);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(3199); 
						_errHandler.sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								setState(3197);
								match(VERTICAL_BAR);
								setState(3198);
								valueType(0);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(3201); 
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,303,_ctx);
						} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
						}
						break;
					}
					} 
				}
				setState(3207);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,305,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TypedContext extends ParserRuleContext {
		public TerminalNode DOUBLE_COLON() { return getToken(GQLParser.DOUBLE_COLON, 0); }
		public TerminalNode TYPED() { return getToken(GQLParser.TYPED, 0); }
		public TypedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typed; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterTyped(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitTyped(this);
		}
	}

	public final TypedContext typed() throws RecognitionException {
		TypedContext _localctx = new TypedContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_typed);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3208);
			_la = _input.LA(1);
			if ( !(_la==TYPED || _la==DOUBLE_COLON) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PredefinedTypeContext extends ParserRuleContext {
		public BooleanTypeContext booleanType() {
			return getRuleContext(BooleanTypeContext.class,0);
		}
		public CharacterStringTypeContext characterStringType() {
			return getRuleContext(CharacterStringTypeContext.class,0);
		}
		public ByteStringTypeContext byteStringType() {
			return getRuleContext(ByteStringTypeContext.class,0);
		}
		public NumericTypeContext numericType() {
			return getRuleContext(NumericTypeContext.class,0);
		}
		public TemporalTypeContext temporalType() {
			return getRuleContext(TemporalTypeContext.class,0);
		}
		public ReferenceValueTypeContext referenceValueType() {
			return getRuleContext(ReferenceValueTypeContext.class,0);
		}
		public PredefinedTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predefinedType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterPredefinedType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitPredefinedType(this);
		}
	}

	public final PredefinedTypeContext predefinedType() throws RecognitionException {
		PredefinedTypeContext _localctx = new PredefinedTypeContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_predefinedType);
		try {
			setState(3216);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BOOL:
			case BOOLEAN:
				enterOuterAlt(_localctx, 1);
				{
				setState(3210);
				booleanType();
				}
				break;
			case STRING:
			case VARCHAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(3211);
				characterStringType();
				}
				break;
			case BINARY:
			case BYTES:
			case VARBINARY:
				enterOuterAlt(_localctx, 3);
				{
				setState(3212);
				byteStringType();
				}
				break;
			case BIG:
			case BIGINT:
			case DEC:
			case DECIMAL:
			case DOUBLE:
			case FLOAT:
			case FLOAT128:
			case FLOAT16:
			case FLOAT256:
			case FLOAT32:
			case FLOAT64:
			case INT:
			case INT8:
			case INT16:
			case INT32:
			case INT64:
			case INT128:
			case INT256:
			case INTEGER:
			case INTEGER8:
			case INTEGER16:
			case INTEGER32:
			case INTEGER64:
			case INTEGER128:
			case INTEGER256:
			case REAL:
			case SIGNED:
			case SMALL:
			case SMALLINT:
			case UBIGINT:
			case UINT:
			case UINT128:
			case UINT16:
			case UINT256:
			case UINT32:
			case UINT64:
			case UINT8:
			case UNSIGNED:
			case USMALLINT:
				enterOuterAlt(_localctx, 4);
				{
				setState(3213);
				numericType();
				}
				break;
			case DATE:
			case DURATION:
			case LOCAL:
			case TIME:
			case TIMESTAMP:
			case ZONED:
				enterOuterAlt(_localctx, 5);
				{
				setState(3214);
				temporalType();
				}
				break;
			case LEFT_PAREN:
			case ANY:
			case BINDING:
			case DIRECTED:
			case GRAPH:
			case PROPERTY:
			case TABLE:
			case UNDIRECTED:
			case EDGE_SYNONYM:
			case NODE_SYNONYM:
				enterOuterAlt(_localctx, 6);
				{
				setState(3215);
				referenceValueType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BooleanTypeContext extends ParserRuleContext {
		public TerminalNode BOOL() { return getToken(GQLParser.BOOL, 0); }
		public TerminalNode BOOLEAN() { return getToken(GQLParser.BOOLEAN, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public BooleanTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterBooleanType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitBooleanType(this);
		}
	}

	public final BooleanTypeContext booleanType() throws RecognitionException {
		BooleanTypeContext _localctx = new BooleanTypeContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_booleanType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3218);
			_la = _input.LA(1);
			if ( !(_la==BOOL || _la==BOOLEAN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3220);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,307,_ctx) ) {
			case 1:
				{
				setState(3219);
				notNull();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CharacterStringTypeContext extends ParserRuleContext {
		public TerminalNode STRING() { return getToken(GQLParser.STRING, 0); }
		public TerminalNode VARCHAR() { return getToken(GQLParser.VARCHAR, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public MaxLengthContext maxLength() {
			return getRuleContext(MaxLengthContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public CharacterStringTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_characterStringType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterCharacterStringType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitCharacterStringType(this);
		}
	}

	public final CharacterStringTypeContext characterStringType() throws RecognitionException {
		CharacterStringTypeContext _localctx = new CharacterStringTypeContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_characterStringType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3222);
			_la = _input.LA(1);
			if ( !(_la==STRING || _la==VARCHAR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3227);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,308,_ctx) ) {
			case 1:
				{
				setState(3223);
				match(LEFT_PAREN);
				setState(3224);
				maxLength();
				setState(3225);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(3230);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,309,_ctx) ) {
			case 1:
				{
				setState(3229);
				notNull();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ByteStringTypeContext extends ParserRuleContext {
		public TerminalNode BYTES() { return getToken(GQLParser.BYTES, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public MaxLengthContext maxLength() {
			return getRuleContext(MaxLengthContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public MinLengthContext minLength() {
			return getRuleContext(MinLengthContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(GQLParser.COMMA, 0); }
		public TerminalNode BINARY() { return getToken(GQLParser.BINARY, 0); }
		public FixedLengthContext fixedLength() {
			return getRuleContext(FixedLengthContext.class,0);
		}
		public TerminalNode VARBINARY() { return getToken(GQLParser.VARBINARY, 0); }
		public ByteStringTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_byteStringType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterByteStringType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitByteStringType(this);
		}
	}

	public final ByteStringTypeContext byteStringType() throws RecognitionException {
		ByteStringTypeContext _localctx = new ByteStringTypeContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_byteStringType);
		try {
			setState(3267);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BYTES:
				enterOuterAlt(_localctx, 1);
				{
				setState(3232);
				match(BYTES);
				setState(3242);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,311,_ctx) ) {
				case 1:
					{
					setState(3233);
					match(LEFT_PAREN);
					setState(3237);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,310,_ctx) ) {
					case 1:
						{
						setState(3234);
						minLength();
						setState(3235);
						match(COMMA);
						}
						break;
					}
					setState(3239);
					maxLength();
					setState(3240);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(3245);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,312,_ctx) ) {
				case 1:
					{
					setState(3244);
					notNull();
					}
					break;
				}
				}
				break;
			case BINARY:
				enterOuterAlt(_localctx, 2);
				{
				setState(3247);
				match(BINARY);
				setState(3252);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,313,_ctx) ) {
				case 1:
					{
					setState(3248);
					match(LEFT_PAREN);
					setState(3249);
					fixedLength();
					setState(3250);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(3255);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,314,_ctx) ) {
				case 1:
					{
					setState(3254);
					notNull();
					}
					break;
				}
				}
				break;
			case VARBINARY:
				enterOuterAlt(_localctx, 3);
				{
				setState(3257);
				match(VARBINARY);
				setState(3262);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,315,_ctx) ) {
				case 1:
					{
					setState(3258);
					match(LEFT_PAREN);
					setState(3259);
					maxLength();
					setState(3260);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(3265);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,316,_ctx) ) {
				case 1:
					{
					setState(3264);
					notNull();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MinLengthContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_DECIMAL_INTEGER() { return getToken(GQLParser.UNSIGNED_DECIMAL_INTEGER, 0); }
		public MinLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_minLength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterMinLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitMinLength(this);
		}
	}

	public final MinLengthContext minLength() throws RecognitionException {
		MinLengthContext _localctx = new MinLengthContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_minLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3269);
			match(UNSIGNED_DECIMAL_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class MaxLengthContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_DECIMAL_INTEGER() { return getToken(GQLParser.UNSIGNED_DECIMAL_INTEGER, 0); }
		public MaxLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_maxLength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterMaxLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitMaxLength(this);
		}
	}

	public final MaxLengthContext maxLength() throws RecognitionException {
		MaxLengthContext _localctx = new MaxLengthContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_maxLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3271);
			match(UNSIGNED_DECIMAL_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FixedLengthContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_DECIMAL_INTEGER() { return getToken(GQLParser.UNSIGNED_DECIMAL_INTEGER, 0); }
		public FixedLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fixedLength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterFixedLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitFixedLength(this);
		}
	}

	public final FixedLengthContext fixedLength() throws RecognitionException {
		FixedLengthContext _localctx = new FixedLengthContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_fixedLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3273);
			match(UNSIGNED_DECIMAL_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NumericTypeContext extends ParserRuleContext {
		public ExactNumericTypeContext exactNumericType() {
			return getRuleContext(ExactNumericTypeContext.class,0);
		}
		public ApproximateNumericTypeContext approximateNumericType() {
			return getRuleContext(ApproximateNumericTypeContext.class,0);
		}
		public NumericTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numericType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterNumericType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitNumericType(this);
		}
	}

	public final NumericTypeContext numericType() throws RecognitionException {
		NumericTypeContext _localctx = new NumericTypeContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_numericType);
		try {
			setState(3277);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BIG:
			case BIGINT:
			case DEC:
			case DECIMAL:
			case INT:
			case INT8:
			case INT16:
			case INT32:
			case INT64:
			case INT128:
			case INT256:
			case INTEGER:
			case INTEGER8:
			case INTEGER16:
			case INTEGER32:
			case INTEGER64:
			case INTEGER128:
			case INTEGER256:
			case SIGNED:
			case SMALL:
			case SMALLINT:
			case UBIGINT:
			case UINT:
			case UINT128:
			case UINT16:
			case UINT256:
			case UINT32:
			case UINT64:
			case UINT8:
			case UNSIGNED:
			case USMALLINT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3275);
				exactNumericType();
				}
				break;
			case DOUBLE:
			case FLOAT:
			case FLOAT128:
			case FLOAT16:
			case FLOAT256:
			case FLOAT32:
			case FLOAT64:
			case REAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3276);
				approximateNumericType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExactNumericTypeContext extends ParserRuleContext {
		public BinaryExactNumericTypeContext binaryExactNumericType() {
			return getRuleContext(BinaryExactNumericTypeContext.class,0);
		}
		public DecimalExactNumericTypeContext decimalExactNumericType() {
			return getRuleContext(DecimalExactNumericTypeContext.class,0);
		}
		public ExactNumericTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exactNumericType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterExactNumericType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitExactNumericType(this);
		}
	}

	public final ExactNumericTypeContext exactNumericType() throws RecognitionException {
		ExactNumericTypeContext _localctx = new ExactNumericTypeContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_exactNumericType);
		try {
			setState(3281);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BIG:
			case BIGINT:
			case INT:
			case INT8:
			case INT16:
			case INT32:
			case INT64:
			case INT128:
			case INT256:
			case INTEGER:
			case INTEGER8:
			case INTEGER16:
			case INTEGER32:
			case INTEGER64:
			case INTEGER128:
			case INTEGER256:
			case SIGNED:
			case SMALL:
			case SMALLINT:
			case UBIGINT:
			case UINT:
			case UINT128:
			case UINT16:
			case UINT256:
			case UINT32:
			case UINT64:
			case UINT8:
			case UNSIGNED:
			case USMALLINT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3279);
				binaryExactNumericType();
				}
				break;
			case DEC:
			case DECIMAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3280);
				decimalExactNumericType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BinaryExactNumericTypeContext extends ParserRuleContext {
		public SignedBinaryExactNumericTypeContext signedBinaryExactNumericType() {
			return getRuleContext(SignedBinaryExactNumericTypeContext.class,0);
		}
		public UnsignedBinaryExactNumericTypeContext unsignedBinaryExactNumericType() {
			return getRuleContext(UnsignedBinaryExactNumericTypeContext.class,0);
		}
		public BinaryExactNumericTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_binaryExactNumericType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterBinaryExactNumericType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitBinaryExactNumericType(this);
		}
	}

	public final BinaryExactNumericTypeContext binaryExactNumericType() throws RecognitionException {
		BinaryExactNumericTypeContext _localctx = new BinaryExactNumericTypeContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_binaryExactNumericType);
		try {
			setState(3285);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BIG:
			case BIGINT:
			case INT:
			case INT8:
			case INT16:
			case INT32:
			case INT64:
			case INT128:
			case INT256:
			case INTEGER:
			case INTEGER8:
			case INTEGER16:
			case INTEGER32:
			case INTEGER64:
			case INTEGER128:
			case INTEGER256:
			case SIGNED:
			case SMALL:
			case SMALLINT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3283);
				signedBinaryExactNumericType();
				}
				break;
			case UBIGINT:
			case UINT:
			case UINT128:
			case UINT16:
			case UINT256:
			case UINT32:
			case UINT64:
			case UINT8:
			case UNSIGNED:
			case USMALLINT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3284);
				unsignedBinaryExactNumericType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SignedBinaryExactNumericTypeContext extends ParserRuleContext {
		public TerminalNode INT8() { return getToken(GQLParser.INT8, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public TerminalNode INT16() { return getToken(GQLParser.INT16, 0); }
		public TerminalNode INT32() { return getToken(GQLParser.INT32, 0); }
		public TerminalNode INT64() { return getToken(GQLParser.INT64, 0); }
		public TerminalNode INT128() { return getToken(GQLParser.INT128, 0); }
		public TerminalNode INT256() { return getToken(GQLParser.INT256, 0); }
		public TerminalNode SMALLINT() { return getToken(GQLParser.SMALLINT, 0); }
		public TerminalNode INT() { return getToken(GQLParser.INT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public PrecisionContext precision() {
			return getRuleContext(PrecisionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public TerminalNode BIGINT() { return getToken(GQLParser.BIGINT, 0); }
		public VerboseBinaryExactNumericTypeContext verboseBinaryExactNumericType() {
			return getRuleContext(VerboseBinaryExactNumericTypeContext.class,0);
		}
		public TerminalNode SIGNED() { return getToken(GQLParser.SIGNED, 0); }
		public SignedBinaryExactNumericTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signedBinaryExactNumericType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSignedBinaryExactNumericType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSignedBinaryExactNumericType(this);
		}
	}

	public final SignedBinaryExactNumericTypeContext signedBinaryExactNumericType() throws RecognitionException {
		SignedBinaryExactNumericTypeContext _localctx = new SignedBinaryExactNumericTypeContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_signedBinaryExactNumericType);
		int _la;
		try {
			setState(3333);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INT8:
				enterOuterAlt(_localctx, 1);
				{
				setState(3287);
				match(INT8);
				setState(3289);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,321,_ctx) ) {
				case 1:
					{
					setState(3288);
					notNull();
					}
					break;
				}
				}
				break;
			case INT16:
				enterOuterAlt(_localctx, 2);
				{
				setState(3291);
				match(INT16);
				setState(3293);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,322,_ctx) ) {
				case 1:
					{
					setState(3292);
					notNull();
					}
					break;
				}
				}
				break;
			case INT32:
				enterOuterAlt(_localctx, 3);
				{
				setState(3295);
				match(INT32);
				setState(3297);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,323,_ctx) ) {
				case 1:
					{
					setState(3296);
					notNull();
					}
					break;
				}
				}
				break;
			case INT64:
				enterOuterAlt(_localctx, 4);
				{
				setState(3299);
				match(INT64);
				setState(3301);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,324,_ctx) ) {
				case 1:
					{
					setState(3300);
					notNull();
					}
					break;
				}
				}
				break;
			case INT128:
				enterOuterAlt(_localctx, 5);
				{
				setState(3303);
				match(INT128);
				setState(3305);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,325,_ctx) ) {
				case 1:
					{
					setState(3304);
					notNull();
					}
					break;
				}
				}
				break;
			case INT256:
				enterOuterAlt(_localctx, 6);
				{
				setState(3307);
				match(INT256);
				setState(3309);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,326,_ctx) ) {
				case 1:
					{
					setState(3308);
					notNull();
					}
					break;
				}
				}
				break;
			case SMALLINT:
				enterOuterAlt(_localctx, 7);
				{
				setState(3311);
				match(SMALLINT);
				setState(3313);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,327,_ctx) ) {
				case 1:
					{
					setState(3312);
					notNull();
					}
					break;
				}
				}
				break;
			case INT:
				enterOuterAlt(_localctx, 8);
				{
				setState(3315);
				match(INT);
				setState(3320);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,328,_ctx) ) {
				case 1:
					{
					setState(3316);
					match(LEFT_PAREN);
					setState(3317);
					precision();
					setState(3318);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(3323);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,329,_ctx) ) {
				case 1:
					{
					setState(3322);
					notNull();
					}
					break;
				}
				}
				break;
			case BIGINT:
				enterOuterAlt(_localctx, 9);
				{
				setState(3325);
				match(BIGINT);
				}
				break;
			case BIG:
			case INTEGER:
			case INTEGER8:
			case INTEGER16:
			case INTEGER32:
			case INTEGER64:
			case INTEGER128:
			case INTEGER256:
			case SIGNED:
			case SMALL:
				enterOuterAlt(_localctx, 10);
				{
				setState(3327);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SIGNED) {
					{
					setState(3326);
					match(SIGNED);
					}
				}

				setState(3329);
				verboseBinaryExactNumericType();
				setState(3331);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,331,_ctx) ) {
				case 1:
					{
					setState(3330);
					notNull();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnsignedBinaryExactNumericTypeContext extends ParserRuleContext {
		public TerminalNode UINT8() { return getToken(GQLParser.UINT8, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public TerminalNode UINT16() { return getToken(GQLParser.UINT16, 0); }
		public TerminalNode UINT32() { return getToken(GQLParser.UINT32, 0); }
		public TerminalNode UINT64() { return getToken(GQLParser.UINT64, 0); }
		public TerminalNode UINT128() { return getToken(GQLParser.UINT128, 0); }
		public TerminalNode UINT256() { return getToken(GQLParser.UINT256, 0); }
		public TerminalNode USMALLINT() { return getToken(GQLParser.USMALLINT, 0); }
		public TerminalNode UINT() { return getToken(GQLParser.UINT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public PrecisionContext precision() {
			return getRuleContext(PrecisionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public TerminalNode UBIGINT() { return getToken(GQLParser.UBIGINT, 0); }
		public TerminalNode UNSIGNED() { return getToken(GQLParser.UNSIGNED, 0); }
		public VerboseBinaryExactNumericTypeContext verboseBinaryExactNumericType() {
			return getRuleContext(VerboseBinaryExactNumericTypeContext.class,0);
		}
		public UnsignedBinaryExactNumericTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unsignedBinaryExactNumericType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterUnsignedBinaryExactNumericType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitUnsignedBinaryExactNumericType(this);
		}
	}

	public final UnsignedBinaryExactNumericTypeContext unsignedBinaryExactNumericType() throws RecognitionException {
		UnsignedBinaryExactNumericTypeContext _localctx = new UnsignedBinaryExactNumericTypeContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_unsignedBinaryExactNumericType);
		try {
			setState(3382);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UINT8:
				enterOuterAlt(_localctx, 1);
				{
				setState(3335);
				match(UINT8);
				setState(3337);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,333,_ctx) ) {
				case 1:
					{
					setState(3336);
					notNull();
					}
					break;
				}
				}
				break;
			case UINT16:
				enterOuterAlt(_localctx, 2);
				{
				setState(3339);
				match(UINT16);
				setState(3341);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,334,_ctx) ) {
				case 1:
					{
					setState(3340);
					notNull();
					}
					break;
				}
				}
				break;
			case UINT32:
				enterOuterAlt(_localctx, 3);
				{
				setState(3343);
				match(UINT32);
				setState(3345);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,335,_ctx) ) {
				case 1:
					{
					setState(3344);
					notNull();
					}
					break;
				}
				}
				break;
			case UINT64:
				enterOuterAlt(_localctx, 4);
				{
				setState(3347);
				match(UINT64);
				setState(3349);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,336,_ctx) ) {
				case 1:
					{
					setState(3348);
					notNull();
					}
					break;
				}
				}
				break;
			case UINT128:
				enterOuterAlt(_localctx, 5);
				{
				setState(3351);
				match(UINT128);
				setState(3353);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,337,_ctx) ) {
				case 1:
					{
					setState(3352);
					notNull();
					}
					break;
				}
				}
				break;
			case UINT256:
				enterOuterAlt(_localctx, 6);
				{
				setState(3355);
				match(UINT256);
				setState(3357);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,338,_ctx) ) {
				case 1:
					{
					setState(3356);
					notNull();
					}
					break;
				}
				}
				break;
			case USMALLINT:
				enterOuterAlt(_localctx, 7);
				{
				setState(3359);
				match(USMALLINT);
				setState(3361);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,339,_ctx) ) {
				case 1:
					{
					setState(3360);
					notNull();
					}
					break;
				}
				}
				break;
			case UINT:
				enterOuterAlt(_localctx, 8);
				{
				setState(3363);
				match(UINT);
				setState(3368);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,340,_ctx) ) {
				case 1:
					{
					setState(3364);
					match(LEFT_PAREN);
					setState(3365);
					precision();
					setState(3366);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(3371);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,341,_ctx) ) {
				case 1:
					{
					setState(3370);
					notNull();
					}
					break;
				}
				}
				break;
			case UBIGINT:
				enterOuterAlt(_localctx, 9);
				{
				setState(3373);
				match(UBIGINT);
				setState(3375);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,342,_ctx) ) {
				case 1:
					{
					setState(3374);
					notNull();
					}
					break;
				}
				}
				break;
			case UNSIGNED:
				enterOuterAlt(_localctx, 10);
				{
				setState(3377);
				match(UNSIGNED);
				setState(3378);
				verboseBinaryExactNumericType();
				setState(3380);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,343,_ctx) ) {
				case 1:
					{
					setState(3379);
					notNull();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class VerboseBinaryExactNumericTypeContext extends ParserRuleContext {
		public TerminalNode INTEGER8() { return getToken(GQLParser.INTEGER8, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public TerminalNode INTEGER16() { return getToken(GQLParser.INTEGER16, 0); }
		public TerminalNode INTEGER32() { return getToken(GQLParser.INTEGER32, 0); }
		public TerminalNode INTEGER64() { return getToken(GQLParser.INTEGER64, 0); }
		public TerminalNode INTEGER128() { return getToken(GQLParser.INTEGER128, 0); }
		public TerminalNode INTEGER256() { return getToken(GQLParser.INTEGER256, 0); }
		public TerminalNode SMALL() { return getToken(GQLParser.SMALL, 0); }
		public TerminalNode INTEGER() { return getToken(GQLParser.INTEGER, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public PrecisionContext precision() {
			return getRuleContext(PrecisionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public TerminalNode BIG() { return getToken(GQLParser.BIG, 0); }
		public VerboseBinaryExactNumericTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_verboseBinaryExactNumericType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterVerboseBinaryExactNumericType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitVerboseBinaryExactNumericType(this);
		}
	}

	public final VerboseBinaryExactNumericTypeContext verboseBinaryExactNumericType() throws RecognitionException {
		VerboseBinaryExactNumericTypeContext _localctx = new VerboseBinaryExactNumericTypeContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_verboseBinaryExactNumericType);
		try {
			setState(3428);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTEGER8:
				enterOuterAlt(_localctx, 1);
				{
				setState(3384);
				match(INTEGER8);
				setState(3386);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,345,_ctx) ) {
				case 1:
					{
					setState(3385);
					notNull();
					}
					break;
				}
				}
				break;
			case INTEGER16:
				enterOuterAlt(_localctx, 2);
				{
				setState(3388);
				match(INTEGER16);
				setState(3390);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,346,_ctx) ) {
				case 1:
					{
					setState(3389);
					notNull();
					}
					break;
				}
				}
				break;
			case INTEGER32:
				enterOuterAlt(_localctx, 3);
				{
				setState(3392);
				match(INTEGER32);
				setState(3394);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,347,_ctx) ) {
				case 1:
					{
					setState(3393);
					notNull();
					}
					break;
				}
				}
				break;
			case INTEGER64:
				enterOuterAlt(_localctx, 4);
				{
				setState(3396);
				match(INTEGER64);
				setState(3398);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,348,_ctx) ) {
				case 1:
					{
					setState(3397);
					notNull();
					}
					break;
				}
				}
				break;
			case INTEGER128:
				enterOuterAlt(_localctx, 5);
				{
				setState(3400);
				match(INTEGER128);
				setState(3402);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,349,_ctx) ) {
				case 1:
					{
					setState(3401);
					notNull();
					}
					break;
				}
				}
				break;
			case INTEGER256:
				enterOuterAlt(_localctx, 6);
				{
				setState(3404);
				match(INTEGER256);
				setState(3406);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,350,_ctx) ) {
				case 1:
					{
					setState(3405);
					notNull();
					}
					break;
				}
				}
				break;
			case SMALL:
				enterOuterAlt(_localctx, 7);
				{
				setState(3408);
				match(SMALL);
				setState(3409);
				match(INTEGER);
				setState(3411);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,351,_ctx) ) {
				case 1:
					{
					setState(3410);
					notNull();
					}
					break;
				}
				}
				break;
			case INTEGER:
				enterOuterAlt(_localctx, 8);
				{
				setState(3413);
				match(INTEGER);
				setState(3418);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,352,_ctx) ) {
				case 1:
					{
					setState(3414);
					match(LEFT_PAREN);
					setState(3415);
					precision();
					setState(3416);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(3421);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,353,_ctx) ) {
				case 1:
					{
					setState(3420);
					notNull();
					}
					break;
				}
				}
				break;
			case BIG:
				enterOuterAlt(_localctx, 9);
				{
				setState(3423);
				match(BIG);
				setState(3424);
				match(INTEGER);
				setState(3426);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,354,_ctx) ) {
				case 1:
					{
					setState(3425);
					notNull();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DecimalExactNumericTypeContext extends ParserRuleContext {
		public TerminalNode DECIMAL() { return getToken(GQLParser.DECIMAL, 0); }
		public TerminalNode DEC() { return getToken(GQLParser.DEC, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public PrecisionContext precision() {
			return getRuleContext(PrecisionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public TerminalNode COMMA() { return getToken(GQLParser.COMMA, 0); }
		public ScaleContext scale() {
			return getRuleContext(ScaleContext.class,0);
		}
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public DecimalExactNumericTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decimalExactNumericType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterDecimalExactNumericType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitDecimalExactNumericType(this);
		}
	}

	public final DecimalExactNumericTypeContext decimalExactNumericType() throws RecognitionException {
		DecimalExactNumericTypeContext _localctx = new DecimalExactNumericTypeContext(_ctx, getState());
		enterRule(_localctx, 808, RULE_decimalExactNumericType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3430);
			_la = _input.LA(1);
			if ( !(_la==DEC || _la==DECIMAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3441);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,358,_ctx) ) {
			case 1:
				{
				setState(3431);
				match(LEFT_PAREN);
				setState(3432);
				precision();
				setState(3435);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3433);
					match(COMMA);
					setState(3434);
					scale();
					}
				}

				setState(3437);
				match(RIGHT_PAREN);
				setState(3439);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,357,_ctx) ) {
				case 1:
					{
					setState(3438);
					notNull();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PrecisionContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_DECIMAL_INTEGER() { return getToken(GQLParser.UNSIGNED_DECIMAL_INTEGER, 0); }
		public PrecisionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precision; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterPrecision(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitPrecision(this);
		}
	}

	public final PrecisionContext precision() throws RecognitionException {
		PrecisionContext _localctx = new PrecisionContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_precision);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3443);
			match(UNSIGNED_DECIMAL_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ScaleContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_DECIMAL_INTEGER() { return getToken(GQLParser.UNSIGNED_DECIMAL_INTEGER, 0); }
		public ScaleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scale; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterScale(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitScale(this);
		}
	}

	public final ScaleContext scale() throws RecognitionException {
		ScaleContext _localctx = new ScaleContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_scale);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3445);
			match(UNSIGNED_DECIMAL_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ApproximateNumericTypeContext extends ParserRuleContext {
		public TerminalNode FLOAT16() { return getToken(GQLParser.FLOAT16, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public TerminalNode FLOAT32() { return getToken(GQLParser.FLOAT32, 0); }
		public TerminalNode FLOAT64() { return getToken(GQLParser.FLOAT64, 0); }
		public TerminalNode FLOAT128() { return getToken(GQLParser.FLOAT128, 0); }
		public TerminalNode FLOAT256() { return getToken(GQLParser.FLOAT256, 0); }
		public TerminalNode FLOAT() { return getToken(GQLParser.FLOAT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public PrecisionContext precision() {
			return getRuleContext(PrecisionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public TerminalNode COMMA() { return getToken(GQLParser.COMMA, 0); }
		public ScaleContext scale() {
			return getRuleContext(ScaleContext.class,0);
		}
		public TerminalNode REAL() { return getToken(GQLParser.REAL, 0); }
		public TerminalNode DOUBLE() { return getToken(GQLParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(GQLParser.PRECISION, 0); }
		public ApproximateNumericTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_approximateNumericType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterApproximateNumericType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitApproximateNumericType(this);
		}
	}

	public final ApproximateNumericTypeContext approximateNumericType() throws RecognitionException {
		ApproximateNumericTypeContext _localctx = new ApproximateNumericTypeContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_approximateNumericType);
		int _la;
		try {
			setState(3492);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FLOAT16:
				enterOuterAlt(_localctx, 1);
				{
				setState(3447);
				match(FLOAT16);
				setState(3449);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,359,_ctx) ) {
				case 1:
					{
					setState(3448);
					notNull();
					}
					break;
				}
				}
				break;
			case FLOAT32:
				enterOuterAlt(_localctx, 2);
				{
				setState(3451);
				match(FLOAT32);
				setState(3453);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,360,_ctx) ) {
				case 1:
					{
					setState(3452);
					notNull();
					}
					break;
				}
				}
				break;
			case FLOAT64:
				enterOuterAlt(_localctx, 3);
				{
				setState(3455);
				match(FLOAT64);
				setState(3457);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,361,_ctx) ) {
				case 1:
					{
					setState(3456);
					notNull();
					}
					break;
				}
				}
				break;
			case FLOAT128:
				enterOuterAlt(_localctx, 4);
				{
				setState(3459);
				match(FLOAT128);
				setState(3461);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,362,_ctx) ) {
				case 1:
					{
					setState(3460);
					notNull();
					}
					break;
				}
				}
				break;
			case FLOAT256:
				enterOuterAlt(_localctx, 5);
				{
				setState(3463);
				match(FLOAT256);
				setState(3465);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,363,_ctx) ) {
				case 1:
					{
					setState(3464);
					notNull();
					}
					break;
				}
				}
				break;
			case FLOAT:
				enterOuterAlt(_localctx, 6);
				{
				setState(3467);
				match(FLOAT);
				setState(3476);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,365,_ctx) ) {
				case 1:
					{
					setState(3468);
					match(LEFT_PAREN);
					setState(3469);
					precision();
					setState(3472);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3470);
						match(COMMA);
						setState(3471);
						scale();
						}
					}

					setState(3474);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(3479);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,366,_ctx) ) {
				case 1:
					{
					setState(3478);
					notNull();
					}
					break;
				}
				}
				break;
			case REAL:
				enterOuterAlt(_localctx, 7);
				{
				setState(3481);
				match(REAL);
				setState(3483);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,367,_ctx) ) {
				case 1:
					{
					setState(3482);
					notNull();
					}
					break;
				}
				}
				break;
			case DOUBLE:
				enterOuterAlt(_localctx, 8);
				{
				setState(3485);
				match(DOUBLE);
				setState(3487);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,368,_ctx) ) {
				case 1:
					{
					setState(3486);
					match(PRECISION);
					}
					break;
				}
				setState(3490);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,369,_ctx) ) {
				case 1:
					{
					setState(3489);
					notNull();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TemporalTypeContext extends ParserRuleContext {
		public TemporalInstantTypeContext temporalInstantType() {
			return getRuleContext(TemporalInstantTypeContext.class,0);
		}
		public TemporalDurationTypeContext temporalDurationType() {
			return getRuleContext(TemporalDurationTypeContext.class,0);
		}
		public TemporalTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_temporalType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterTemporalType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitTemporalType(this);
		}
	}

	public final TemporalTypeContext temporalType() throws RecognitionException {
		TemporalTypeContext _localctx = new TemporalTypeContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_temporalType);
		try {
			setState(3496);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATE:
			case LOCAL:
			case TIME:
			case TIMESTAMP:
			case ZONED:
				enterOuterAlt(_localctx, 1);
				{
				setState(3494);
				temporalInstantType();
				}
				break;
			case DURATION:
				enterOuterAlt(_localctx, 2);
				{
				setState(3495);
				temporalDurationType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TemporalInstantTypeContext extends ParserRuleContext {
		public DatetimeTypeContext datetimeType() {
			return getRuleContext(DatetimeTypeContext.class,0);
		}
		public LocaldatetimeTypeContext localdatetimeType() {
			return getRuleContext(LocaldatetimeTypeContext.class,0);
		}
		public DateTypeContext dateType() {
			return getRuleContext(DateTypeContext.class,0);
		}
		public TimeTypeContext timeType() {
			return getRuleContext(TimeTypeContext.class,0);
		}
		public LocaltimeTypeContext localtimeType() {
			return getRuleContext(LocaltimeTypeContext.class,0);
		}
		public TemporalInstantTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_temporalInstantType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterTemporalInstantType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitTemporalInstantType(this);
		}
	}

	public final TemporalInstantTypeContext temporalInstantType() throws RecognitionException {
		TemporalInstantTypeContext _localctx = new TemporalInstantTypeContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_temporalInstantType);
		try {
			setState(3503);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,372,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3498);
				datetimeType();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3499);
				localdatetimeType();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3500);
				dateType();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3501);
				timeType();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3502);
				localtimeType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TemporalDurationTypeContext extends ParserRuleContext {
		public DurationTypeContext durationType() {
			return getRuleContext(DurationTypeContext.class,0);
		}
		public TemporalDurationTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_temporalDurationType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterTemporalDurationType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitTemporalDurationType(this);
		}
	}

	public final TemporalDurationTypeContext temporalDurationType() throws RecognitionException {
		TemporalDurationTypeContext _localctx = new TemporalDurationTypeContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_temporalDurationType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3505);
			durationType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DatetimeTypeContext extends ParserRuleContext {
		public TerminalNode ZONED() { return getToken(GQLParser.ZONED, 0); }
		public TerminalNode DATETIME() { return getToken(GQLParser.DATETIME, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public TerminalNode TIMESTAMP() { return getToken(GQLParser.TIMESTAMP, 0); }
		public TerminalNode WITH() { return getToken(GQLParser.WITH, 0); }
		public TerminalNode TIMEZONE() { return getToken(GQLParser.TIMEZONE, 0); }
		public DatetimeTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetimeType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterDatetimeType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitDatetimeType(this);
		}
	}

	public final DatetimeTypeContext datetimeType() throws RecognitionException {
		DatetimeTypeContext _localctx = new DatetimeTypeContext(_ctx, getState());
		enterRule(_localctx, 822, RULE_datetimeType);
		try {
			setState(3518);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZONED:
				enterOuterAlt(_localctx, 1);
				{
				setState(3507);
				match(ZONED);
				setState(3508);
				match(DATETIME);
				setState(3510);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,373,_ctx) ) {
				case 1:
					{
					setState(3509);
					notNull();
					}
					break;
				}
				}
				break;
			case TIMESTAMP:
				enterOuterAlt(_localctx, 2);
				{
				setState(3512);
				match(TIMESTAMP);
				setState(3513);
				match(WITH);
				setState(3514);
				match(TIMEZONE);
				setState(3516);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,374,_ctx) ) {
				case 1:
					{
					setState(3515);
					notNull();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LocaldatetimeTypeContext extends ParserRuleContext {
		public TerminalNode LOCAL() { return getToken(GQLParser.LOCAL, 0); }
		public TerminalNode DATETIME() { return getToken(GQLParser.DATETIME, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public TerminalNode TIMESTAMP() { return getToken(GQLParser.TIMESTAMP, 0); }
		public TerminalNode WITHOUT() { return getToken(GQLParser.WITHOUT, 0); }
		public TerminalNode TIMEZONE() { return getToken(GQLParser.TIMEZONE, 0); }
		public LocaldatetimeTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_localdatetimeType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterLocaldatetimeType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitLocaldatetimeType(this);
		}
	}

	public final LocaldatetimeTypeContext localdatetimeType() throws RecognitionException {
		LocaldatetimeTypeContext _localctx = new LocaldatetimeTypeContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_localdatetimeType);
		try {
			setState(3533);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3520);
				match(LOCAL);
				setState(3521);
				match(DATETIME);
				setState(3523);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,376,_ctx) ) {
				case 1:
					{
					setState(3522);
					notNull();
					}
					break;
				}
				}
				break;
			case TIMESTAMP:
				enterOuterAlt(_localctx, 2);
				{
				setState(3525);
				match(TIMESTAMP);
				setState(3528);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,377,_ctx) ) {
				case 1:
					{
					setState(3526);
					match(WITHOUT);
					setState(3527);
					match(TIMEZONE);
					}
					break;
				}
				setState(3531);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,378,_ctx) ) {
				case 1:
					{
					setState(3530);
					notNull();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DateTypeContext extends ParserRuleContext {
		public TerminalNode DATE() { return getToken(GQLParser.DATE, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public DateTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dateType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterDateType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitDateType(this);
		}
	}

	public final DateTypeContext dateType() throws RecognitionException {
		DateTypeContext _localctx = new DateTypeContext(_ctx, getState());
		enterRule(_localctx, 826, RULE_dateType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3535);
			match(DATE);
			setState(3537);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,380,_ctx) ) {
			case 1:
				{
				setState(3536);
				notNull();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TimeTypeContext extends ParserRuleContext {
		public TerminalNode ZONED() { return getToken(GQLParser.ZONED, 0); }
		public TerminalNode TIME() { return getToken(GQLParser.TIME, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public TerminalNode WITH() { return getToken(GQLParser.WITH, 0); }
		public TerminalNode TIMEZONE() { return getToken(GQLParser.TIMEZONE, 0); }
		public TimeTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timeType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterTimeType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitTimeType(this);
		}
	}

	public final TimeTypeContext timeType() throws RecognitionException {
		TimeTypeContext _localctx = new TimeTypeContext(_ctx, getState());
		enterRule(_localctx, 828, RULE_timeType);
		try {
			setState(3550);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZONED:
				enterOuterAlt(_localctx, 1);
				{
				setState(3539);
				match(ZONED);
				setState(3540);
				match(TIME);
				setState(3542);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,381,_ctx) ) {
				case 1:
					{
					setState(3541);
					notNull();
					}
					break;
				}
				}
				break;
			case TIME:
				enterOuterAlt(_localctx, 2);
				{
				setState(3544);
				match(TIME);
				setState(3545);
				match(WITH);
				setState(3546);
				match(TIMEZONE);
				setState(3548);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,382,_ctx) ) {
				case 1:
					{
					setState(3547);
					notNull();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LocaltimeTypeContext extends ParserRuleContext {
		public TerminalNode LOCAL() { return getToken(GQLParser.LOCAL, 0); }
		public TerminalNode TIME() { return getToken(GQLParser.TIME, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public TerminalNode WITHOUT() { return getToken(GQLParser.WITHOUT, 0); }
		public TerminalNode TIMEZONE() { return getToken(GQLParser.TIMEZONE, 0); }
		public LocaltimeTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_localtimeType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterLocaltimeType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitLocaltimeType(this);
		}
	}

	public final LocaltimeTypeContext localtimeType() throws RecognitionException {
		LocaltimeTypeContext _localctx = new LocaltimeTypeContext(_ctx, getState());
		enterRule(_localctx, 830, RULE_localtimeType);
		try {
			setState(3563);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3552);
				match(LOCAL);
				setState(3553);
				match(TIME);
				setState(3555);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,384,_ctx) ) {
				case 1:
					{
					setState(3554);
					notNull();
					}
					break;
				}
				}
				break;
			case TIME:
				enterOuterAlt(_localctx, 2);
				{
				setState(3557);
				match(TIME);
				setState(3558);
				match(WITHOUT);
				setState(3559);
				match(TIMEZONE);
				setState(3561);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,385,_ctx) ) {
				case 1:
					{
					setState(3560);
					notNull();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DurationTypeContext extends ParserRuleContext {
		public TerminalNode DURATION() { return getToken(GQLParser.DURATION, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public DurationTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_durationType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterDurationType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitDurationType(this);
		}
	}

	public final DurationTypeContext durationType() throws RecognitionException {
		DurationTypeContext _localctx = new DurationTypeContext(_ctx, getState());
		enterRule(_localctx, 832, RULE_durationType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3565);
			match(DURATION);
			setState(3567);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,387,_ctx) ) {
			case 1:
				{
				setState(3566);
				notNull();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReferenceValueTypeContext extends ParserRuleContext {
		public GraphReferenceValueTypeContext graphReferenceValueType() {
			return getRuleContext(GraphReferenceValueTypeContext.class,0);
		}
		public BindingTableReferenceValueTypeContext bindingTableReferenceValueType() {
			return getRuleContext(BindingTableReferenceValueTypeContext.class,0);
		}
		public NodeReferenceValueTypeContext nodeReferenceValueType() {
			return getRuleContext(NodeReferenceValueTypeContext.class,0);
		}
		public EdgeReferenceValueTypeContext edgeReferenceValueType() {
			return getRuleContext(EdgeReferenceValueTypeContext.class,0);
		}
		public ReferenceValueTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceValueType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterReferenceValueType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitReferenceValueType(this);
		}
	}

	public final ReferenceValueTypeContext referenceValueType() throws RecognitionException {
		ReferenceValueTypeContext _localctx = new ReferenceValueTypeContext(_ctx, getState());
		enterRule(_localctx, 834, RULE_referenceValueType);
		try {
			setState(3573);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,388,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3569);
				graphReferenceValueType();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3570);
				bindingTableReferenceValueType();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3571);
				nodeReferenceValueType();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3572);
				edgeReferenceValueType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GraphReferenceValueTypeContext extends ParserRuleContext {
		public OpenGraphReferenceValueTypeContext openGraphReferenceValueType() {
			return getRuleContext(OpenGraphReferenceValueTypeContext.class,0);
		}
		public ClosedGraphReferenceValueTypeContext closedGraphReferenceValueType() {
			return getRuleContext(ClosedGraphReferenceValueTypeContext.class,0);
		}
		public GraphReferenceValueTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_graphReferenceValueType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGraphReferenceValueType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGraphReferenceValueType(this);
		}
	}

	public final GraphReferenceValueTypeContext graphReferenceValueType() throws RecognitionException {
		GraphReferenceValueTypeContext _localctx = new GraphReferenceValueTypeContext(_ctx, getState());
		enterRule(_localctx, 836, RULE_graphReferenceValueType);
		try {
			setState(3577);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ANY:
				enterOuterAlt(_localctx, 1);
				{
				setState(3575);
				openGraphReferenceValueType();
				}
				break;
			case GRAPH:
			case PROPERTY:
				enterOuterAlt(_localctx, 2);
				{
				setState(3576);
				closedGraphReferenceValueType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ClosedGraphReferenceValueTypeContext extends ParserRuleContext {
		public TerminalNode GRAPH() { return getToken(GQLParser.GRAPH, 0); }
		public NestedGraphTypeSpecificationContext nestedGraphTypeSpecification() {
			return getRuleContext(NestedGraphTypeSpecificationContext.class,0);
		}
		public TerminalNode PROPERTY() { return getToken(GQLParser.PROPERTY, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public ClosedGraphReferenceValueTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_closedGraphReferenceValueType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterClosedGraphReferenceValueType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitClosedGraphReferenceValueType(this);
		}
	}

	public final ClosedGraphReferenceValueTypeContext closedGraphReferenceValueType() throws RecognitionException {
		ClosedGraphReferenceValueTypeContext _localctx = new ClosedGraphReferenceValueTypeContext(_ctx, getState());
		enterRule(_localctx, 838, RULE_closedGraphReferenceValueType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3580);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PROPERTY) {
				{
				setState(3579);
				match(PROPERTY);
				}
			}

			setState(3582);
			match(GRAPH);
			setState(3583);
			nestedGraphTypeSpecification();
			setState(3585);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,391,_ctx) ) {
			case 1:
				{
				setState(3584);
				notNull();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OpenGraphReferenceValueTypeContext extends ParserRuleContext {
		public TerminalNode ANY() { return getToken(GQLParser.ANY, 0); }
		public TerminalNode GRAPH() { return getToken(GQLParser.GRAPH, 0); }
		public TerminalNode PROPERTY() { return getToken(GQLParser.PROPERTY, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public OpenGraphReferenceValueTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_openGraphReferenceValueType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterOpenGraphReferenceValueType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitOpenGraphReferenceValueType(this);
		}
	}

	public final OpenGraphReferenceValueTypeContext openGraphReferenceValueType() throws RecognitionException {
		OpenGraphReferenceValueTypeContext _localctx = new OpenGraphReferenceValueTypeContext(_ctx, getState());
		enterRule(_localctx, 840, RULE_openGraphReferenceValueType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3587);
			match(ANY);
			setState(3589);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PROPERTY) {
				{
				setState(3588);
				match(PROPERTY);
				}
			}

			setState(3591);
			match(GRAPH);
			setState(3593);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,393,_ctx) ) {
			case 1:
				{
				setState(3592);
				notNull();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BindingTableReferenceValueTypeContext extends ParserRuleContext {
		public BindingTableTypeContext bindingTableType() {
			return getRuleContext(BindingTableTypeContext.class,0);
		}
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public BindingTableReferenceValueTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bindingTableReferenceValueType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterBindingTableReferenceValueType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitBindingTableReferenceValueType(this);
		}
	}

	public final BindingTableReferenceValueTypeContext bindingTableReferenceValueType() throws RecognitionException {
		BindingTableReferenceValueTypeContext _localctx = new BindingTableReferenceValueTypeContext(_ctx, getState());
		enterRule(_localctx, 842, RULE_bindingTableReferenceValueType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3595);
			bindingTableType();
			setState(3597);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,394,_ctx) ) {
			case 1:
				{
				setState(3596);
				notNull();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NodeReferenceValueTypeContext extends ParserRuleContext {
		public OpenNodeReferenceValueTypeContext openNodeReferenceValueType() {
			return getRuleContext(OpenNodeReferenceValueTypeContext.class,0);
		}
		public ClosedNodeReferenceValueTypeContext closedNodeReferenceValueType() {
			return getRuleContext(ClosedNodeReferenceValueTypeContext.class,0);
		}
		public NodeReferenceValueTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nodeReferenceValueType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterNodeReferenceValueType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitNodeReferenceValueType(this);
		}
	}

	public final NodeReferenceValueTypeContext nodeReferenceValueType() throws RecognitionException {
		NodeReferenceValueTypeContext _localctx = new NodeReferenceValueTypeContext(_ctx, getState());
		enterRule(_localctx, 844, RULE_nodeReferenceValueType);
		try {
			setState(3601);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,395,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3599);
				openNodeReferenceValueType();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3600);
				closedNodeReferenceValueType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ClosedNodeReferenceValueTypeContext extends ParserRuleContext {
		public NodeTypeDefinitionContext nodeTypeDefinition() {
			return getRuleContext(NodeTypeDefinitionContext.class,0);
		}
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public ClosedNodeReferenceValueTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_closedNodeReferenceValueType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterClosedNodeReferenceValueType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitClosedNodeReferenceValueType(this);
		}
	}

	public final ClosedNodeReferenceValueTypeContext closedNodeReferenceValueType() throws RecognitionException {
		ClosedNodeReferenceValueTypeContext _localctx = new ClosedNodeReferenceValueTypeContext(_ctx, getState());
		enterRule(_localctx, 846, RULE_closedNodeReferenceValueType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3603);
			nodeTypeDefinition();
			setState(3605);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,396,_ctx) ) {
			case 1:
				{
				setState(3604);
				notNull();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OpenNodeReferenceValueTypeContext extends ParserRuleContext {
		public TerminalNode NODE_SYNONYM() { return getToken(GQLParser.NODE_SYNONYM, 0); }
		public TerminalNode ANY() { return getToken(GQLParser.ANY, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public OpenNodeReferenceValueTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_openNodeReferenceValueType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterOpenNodeReferenceValueType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitOpenNodeReferenceValueType(this);
		}
	}

	public final OpenNodeReferenceValueTypeContext openNodeReferenceValueType() throws RecognitionException {
		OpenNodeReferenceValueTypeContext _localctx = new OpenNodeReferenceValueTypeContext(_ctx, getState());
		enterRule(_localctx, 848, RULE_openNodeReferenceValueType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3608);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ANY) {
				{
				setState(3607);
				match(ANY);
				}
			}

			setState(3610);
			match(NODE_SYNONYM);
			setState(3612);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,398,_ctx) ) {
			case 1:
				{
				setState(3611);
				notNull();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class EdgeReferenceValueTypeContext extends ParserRuleContext {
		public OpenEdgeReferenceValueTypeContext openEdgeReferenceValueType() {
			return getRuleContext(OpenEdgeReferenceValueTypeContext.class,0);
		}
		public ClosedEdgeReferenceValueTypeContext closedEdgeReferenceValueType() {
			return getRuleContext(ClosedEdgeReferenceValueTypeContext.class,0);
		}
		public EdgeReferenceValueTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_edgeReferenceValueType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterEdgeReferenceValueType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitEdgeReferenceValueType(this);
		}
	}

	public final EdgeReferenceValueTypeContext edgeReferenceValueType() throws RecognitionException {
		EdgeReferenceValueTypeContext _localctx = new EdgeReferenceValueTypeContext(_ctx, getState());
		enterRule(_localctx, 850, RULE_edgeReferenceValueType);
		try {
			setState(3616);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,399,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3614);
				openEdgeReferenceValueType();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3615);
				closedEdgeReferenceValueType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ClosedEdgeReferenceValueTypeContext extends ParserRuleContext {
		public EdgeTypeDefinitionContext edgeTypeDefinition() {
			return getRuleContext(EdgeTypeDefinitionContext.class,0);
		}
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public ClosedEdgeReferenceValueTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_closedEdgeReferenceValueType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterClosedEdgeReferenceValueType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitClosedEdgeReferenceValueType(this);
		}
	}

	public final ClosedEdgeReferenceValueTypeContext closedEdgeReferenceValueType() throws RecognitionException {
		ClosedEdgeReferenceValueTypeContext _localctx = new ClosedEdgeReferenceValueTypeContext(_ctx, getState());
		enterRule(_localctx, 852, RULE_closedEdgeReferenceValueType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3618);
			edgeTypeDefinition();
			setState(3620);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,400,_ctx) ) {
			case 1:
				{
				setState(3619);
				notNull();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OpenEdgeReferenceValueTypeContext extends ParserRuleContext {
		public TerminalNode EDGE_SYNONYM() { return getToken(GQLParser.EDGE_SYNONYM, 0); }
		public TerminalNode ANY() { return getToken(GQLParser.ANY, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public OpenEdgeReferenceValueTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_openEdgeReferenceValueType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterOpenEdgeReferenceValueType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitOpenEdgeReferenceValueType(this);
		}
	}

	public final OpenEdgeReferenceValueTypeContext openEdgeReferenceValueType() throws RecognitionException {
		OpenEdgeReferenceValueTypeContext _localctx = new OpenEdgeReferenceValueTypeContext(_ctx, getState());
		enterRule(_localctx, 854, RULE_openEdgeReferenceValueType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3623);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ANY) {
				{
				setState(3622);
				match(ANY);
				}
			}

			setState(3625);
			match(EDGE_SYNONYM);
			setState(3627);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,402,_ctx) ) {
			case 1:
				{
				setState(3626);
				notNull();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ListValueTypeNameContext extends ParserRuleContext {
		public ListValueTypeNameSynonymContext listValueTypeNameSynonym() {
			return getRuleContext(ListValueTypeNameSynonymContext.class,0);
		}
		public TerminalNode GROUP() { return getToken(GQLParser.GROUP, 0); }
		public ListValueTypeNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listValueTypeName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterListValueTypeName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitListValueTypeName(this);
		}
	}

	public final ListValueTypeNameContext listValueTypeName() throws RecognitionException {
		ListValueTypeNameContext _localctx = new ListValueTypeNameContext(_ctx, getState());
		enterRule(_localctx, 856, RULE_listValueTypeName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3630);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GROUP) {
				{
				setState(3629);
				match(GROUP);
				}
			}

			setState(3632);
			listValueTypeNameSynonym();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ListValueTypeNameSynonymContext extends ParserRuleContext {
		public TerminalNode LIST() { return getToken(GQLParser.LIST, 0); }
		public TerminalNode ARRAY() { return getToken(GQLParser.ARRAY, 0); }
		public ListValueTypeNameSynonymContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listValueTypeNameSynonym; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterListValueTypeNameSynonym(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitListValueTypeNameSynonym(this);
		}
	}

	public final ListValueTypeNameSynonymContext listValueTypeNameSynonym() throws RecognitionException {
		ListValueTypeNameSynonymContext _localctx = new ListValueTypeNameSynonymContext(_ctx, getState());
		enterRule(_localctx, 858, RULE_listValueTypeNameSynonym);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3634);
			_la = _input.LA(1);
			if ( !(_la==ARRAY || _la==LIST) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FieldTypesSpecificationContext extends ParserRuleContext {
		public TerminalNode LEFT_BRACE() { return getToken(GQLParser.LEFT_BRACE, 0); }
		public TerminalNode RIGHT_BRACE() { return getToken(GQLParser.RIGHT_BRACE, 0); }
		public FieldTypeListContext fieldTypeList() {
			return getRuleContext(FieldTypeListContext.class,0);
		}
		public FieldTypesSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldTypesSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterFieldTypesSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitFieldTypesSpecification(this);
		}
	}

	public final FieldTypesSpecificationContext fieldTypesSpecification() throws RecognitionException {
		FieldTypesSpecificationContext _localctx = new FieldTypesSpecificationContext(_ctx, getState());
		enterRule(_localctx, 860, RULE_fieldTypesSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3636);
			match(LEFT_BRACE);
			setState(3638);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & -1L) != 0) || ((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & -1L) != 0) || ((((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & -1L) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -1L) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & 603482350067652607L) != 0)) {
				{
				setState(3637);
				fieldTypeList();
				}
			}

			setState(3640);
			match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FieldTypeListContext extends ParserRuleContext {
		public List<FieldTypeContext> fieldType() {
			return getRuleContexts(FieldTypeContext.class);
		}
		public FieldTypeContext fieldType(int i) {
			return getRuleContext(FieldTypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQLParser.COMMA, i);
		}
		public FieldTypeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldTypeList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterFieldTypeList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitFieldTypeList(this);
		}
	}

	public final FieldTypeListContext fieldTypeList() throws RecognitionException {
		FieldTypeListContext _localctx = new FieldTypeListContext(_ctx, getState());
		enterRule(_localctx, 862, RULE_fieldTypeList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3642);
			fieldType();
			setState(3647);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3643);
				match(COMMA);
				setState(3644);
				fieldType();
				}
				}
				setState(3649);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PathValueTypeContext extends ParserRuleContext {
		public TerminalNode PATH() { return getToken(GQLParser.PATH, 0); }
		public NotNullContext notNull() {
			return getRuleContext(NotNullContext.class,0);
		}
		public PathValueTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pathValueType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterPathValueType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitPathValueType(this);
		}
	}

	public final PathValueTypeContext pathValueType() throws RecognitionException {
		PathValueTypeContext _localctx = new PathValueTypeContext(_ctx, getState());
		enterRule(_localctx, 864, RULE_pathValueType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3650);
			match(PATH);
			setState(3652);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,406,_ctx) ) {
			case 1:
				{
				setState(3651);
				notNull();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NotNullContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(GQLParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(GQLParser.NULL, 0); }
		public NotNullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notNull; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterNotNull(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitNotNull(this);
		}
	}

	public final NotNullContext notNull() throws RecognitionException {
		NotNullContext _localctx = new NotNullContext(_ctx, getState());
		enterRule(_localctx, 866, RULE_notNull);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3654);
			match(NOT);
			setState(3655);
			match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FieldTypeContext extends ParserRuleContext {
		public FieldNameContext fieldName() {
			return getRuleContext(FieldNameContext.class,0);
		}
		public ValueTypeContext valueType() {
			return getRuleContext(ValueTypeContext.class,0);
		}
		public TypedContext typed() {
			return getRuleContext(TypedContext.class,0);
		}
		public FieldTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fieldType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterFieldType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitFieldType(this);
		}
	}

	public final FieldTypeContext fieldType() throws RecognitionException {
		FieldTypeContext _localctx = new FieldTypeContext(_ctx, getState());
		enterRule(_localctx, 868, RULE_fieldType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3657);
			fieldName();
			setState(3659);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TYPED || _la==DOUBLE_COLON) {
				{
				setState(3658);
				typed();
				}
			}

			setState(3661);
			valueType(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SchemaReferenceContext extends ParserRuleContext {
		public AbsoluteCatalogSchemaReferenceContext absoluteCatalogSchemaReference() {
			return getRuleContext(AbsoluteCatalogSchemaReferenceContext.class,0);
		}
		public RelativeCatalogSchemaReferenceContext relativeCatalogSchemaReference() {
			return getRuleContext(RelativeCatalogSchemaReferenceContext.class,0);
		}
		public ReferenceParameterContext referenceParameter() {
			return getRuleContext(ReferenceParameterContext.class,0);
		}
		public SchemaReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSchemaReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSchemaReference(this);
		}
	}

	public final SchemaReferenceContext schemaReference() throws RecognitionException {
		SchemaReferenceContext _localctx = new SchemaReferenceContext(_ctx, getState());
		enterRule(_localctx, 870, RULE_schemaReference);
		try {
			setState(3666);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SOLIDUS:
				enterOuterAlt(_localctx, 1);
				{
				setState(3663);
				absoluteCatalogSchemaReference();
				}
				break;
			case PERIOD:
			case CURRENT_SCHEMA:
			case HOME_SCHEMA:
			case DOUBLE_PERIOD:
				enterOuterAlt(_localctx, 2);
				{
				setState(3664);
				relativeCatalogSchemaReference();
				}
				break;
			case DOLLAR_SIGN:
				enterOuterAlt(_localctx, 3);
				{
				setState(3665);
				referenceParameter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AbsoluteCatalogSchemaReferenceContext extends ParserRuleContext {
		public TerminalNode SOLIDUS() { return getToken(GQLParser.SOLIDUS, 0); }
		public AbsoluteDirectoryPathContext absoluteDirectoryPath() {
			return getRuleContext(AbsoluteDirectoryPathContext.class,0);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public AbsoluteCatalogSchemaReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_absoluteCatalogSchemaReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterAbsoluteCatalogSchemaReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitAbsoluteCatalogSchemaReference(this);
		}
	}

	public final AbsoluteCatalogSchemaReferenceContext absoluteCatalogSchemaReference() throws RecognitionException {
		AbsoluteCatalogSchemaReferenceContext _localctx = new AbsoluteCatalogSchemaReferenceContext(_ctx, getState());
		enterRule(_localctx, 872, RULE_absoluteCatalogSchemaReference);
		try {
			setState(3672);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,409,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3668);
				match(SOLIDUS);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3669);
				absoluteDirectoryPath();
				setState(3670);
				schemaName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CatalogSchemaParentAndNameContext extends ParserRuleContext {
		public AbsoluteDirectoryPathContext absoluteDirectoryPath() {
			return getRuleContext(AbsoluteDirectoryPathContext.class,0);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public CatalogSchemaParentAndNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_catalogSchemaParentAndName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterCatalogSchemaParentAndName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitCatalogSchemaParentAndName(this);
		}
	}

	public final CatalogSchemaParentAndNameContext catalogSchemaParentAndName() throws RecognitionException {
		CatalogSchemaParentAndNameContext _localctx = new CatalogSchemaParentAndNameContext(_ctx, getState());
		enterRule(_localctx, 874, RULE_catalogSchemaParentAndName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3674);
			absoluteDirectoryPath();
			setState(3675);
			schemaName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RelativeCatalogSchemaReferenceContext extends ParserRuleContext {
		public PredefinedSchemaReferenceContext predefinedSchemaReference() {
			return getRuleContext(PredefinedSchemaReferenceContext.class,0);
		}
		public RelativeDirectoryPathContext relativeDirectoryPath() {
			return getRuleContext(RelativeDirectoryPathContext.class,0);
		}
		public SchemaNameContext schemaName() {
			return getRuleContext(SchemaNameContext.class,0);
		}
		public RelativeCatalogSchemaReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relativeCatalogSchemaReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterRelativeCatalogSchemaReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitRelativeCatalogSchemaReference(this);
		}
	}

	public final RelativeCatalogSchemaReferenceContext relativeCatalogSchemaReference() throws RecognitionException {
		RelativeCatalogSchemaReferenceContext _localctx = new RelativeCatalogSchemaReferenceContext(_ctx, getState());
		enterRule(_localctx, 876, RULE_relativeCatalogSchemaReference);
		try {
			setState(3681);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PERIOD:
			case CURRENT_SCHEMA:
			case HOME_SCHEMA:
				enterOuterAlt(_localctx, 1);
				{
				setState(3677);
				predefinedSchemaReference();
				}
				break;
			case DOUBLE_PERIOD:
				enterOuterAlt(_localctx, 2);
				{
				setState(3678);
				relativeDirectoryPath();
				setState(3679);
				schemaName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PredefinedSchemaReferenceContext extends ParserRuleContext {
		public TerminalNode HOME_SCHEMA() { return getToken(GQLParser.HOME_SCHEMA, 0); }
		public TerminalNode CURRENT_SCHEMA() { return getToken(GQLParser.CURRENT_SCHEMA, 0); }
		public TerminalNode PERIOD() { return getToken(GQLParser.PERIOD, 0); }
		public PredefinedSchemaReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predefinedSchemaReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterPredefinedSchemaReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitPredefinedSchemaReference(this);
		}
	}

	public final PredefinedSchemaReferenceContext predefinedSchemaReference() throws RecognitionException {
		PredefinedSchemaReferenceContext _localctx = new PredefinedSchemaReferenceContext(_ctx, getState());
		enterRule(_localctx, 878, RULE_predefinedSchemaReference);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3683);
			_la = _input.LA(1);
			if ( !(_la==PERIOD || _la==CURRENT_SCHEMA || _la==HOME_SCHEMA) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class AbsoluteDirectoryPathContext extends ParserRuleContext {
		public TerminalNode SOLIDUS() { return getToken(GQLParser.SOLIDUS, 0); }
		public SimpleDirectoryPathContext simpleDirectoryPath() {
			return getRuleContext(SimpleDirectoryPathContext.class,0);
		}
		public AbsoluteDirectoryPathContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_absoluteDirectoryPath; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterAbsoluteDirectoryPath(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitAbsoluteDirectoryPath(this);
		}
	}

	public final AbsoluteDirectoryPathContext absoluteDirectoryPath() throws RecognitionException {
		AbsoluteDirectoryPathContext _localctx = new AbsoluteDirectoryPathContext(_ctx, getState());
		enterRule(_localctx, 880, RULE_absoluteDirectoryPath);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3685);
			match(SOLIDUS);
			setState(3687);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,411,_ctx) ) {
			case 1:
				{
				setState(3686);
				simpleDirectoryPath();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RelativeDirectoryPathContext extends ParserRuleContext {
		public List<TerminalNode> DOUBLE_PERIOD() { return getTokens(GQLParser.DOUBLE_PERIOD); }
		public TerminalNode DOUBLE_PERIOD(int i) {
			return getToken(GQLParser.DOUBLE_PERIOD, i);
		}
		public List<TerminalNode> SOLIDUS() { return getTokens(GQLParser.SOLIDUS); }
		public TerminalNode SOLIDUS(int i) {
			return getToken(GQLParser.SOLIDUS, i);
		}
		public SimpleDirectoryPathContext simpleDirectoryPath() {
			return getRuleContext(SimpleDirectoryPathContext.class,0);
		}
		public RelativeDirectoryPathContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relativeDirectoryPath; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterRelativeDirectoryPath(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitRelativeDirectoryPath(this);
		}
	}

	public final RelativeDirectoryPathContext relativeDirectoryPath() throws RecognitionException {
		RelativeDirectoryPathContext _localctx = new RelativeDirectoryPathContext(_ctx, getState());
		enterRule(_localctx, 882, RULE_relativeDirectoryPath);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3689);
			match(DOUBLE_PERIOD);
			setState(3701);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SOLIDUS) {
				{
				setState(3694);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,412,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3690);
						match(SOLIDUS);
						setState(3691);
						match(DOUBLE_PERIOD);
						}
						} 
					}
					setState(3696);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,412,_ctx);
				}
				setState(3697);
				match(SOLIDUS);
				setState(3699);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,413,_ctx) ) {
				case 1:
					{
					setState(3698);
					simpleDirectoryPath();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimpleDirectoryPathContext extends ParserRuleContext {
		public List<DirectoryNameContext> directoryName() {
			return getRuleContexts(DirectoryNameContext.class);
		}
		public DirectoryNameContext directoryName(int i) {
			return getRuleContext(DirectoryNameContext.class,i);
		}
		public List<TerminalNode> SOLIDUS() { return getTokens(GQLParser.SOLIDUS); }
		public TerminalNode SOLIDUS(int i) {
			return getToken(GQLParser.SOLIDUS, i);
		}
		public SimpleDirectoryPathContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleDirectoryPath; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSimpleDirectoryPath(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSimpleDirectoryPath(this);
		}
	}

	public final SimpleDirectoryPathContext simpleDirectoryPath() throws RecognitionException {
		SimpleDirectoryPathContext _localctx = new SimpleDirectoryPathContext(_ctx, getState());
		enterRule(_localctx, 884, RULE_simpleDirectoryPath);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3706); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(3703);
					directoryName();
					setState(3704);
					match(SOLIDUS);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3708); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,415,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GraphReferenceContext extends ParserRuleContext {
		public CatalogObjectParentReferenceContext catalogObjectParentReference() {
			return getRuleContext(CatalogObjectParentReferenceContext.class,0);
		}
		public GraphNameContext graphName() {
			return getRuleContext(GraphNameContext.class,0);
		}
		public DelimitedGraphNameContext delimitedGraphName() {
			return getRuleContext(DelimitedGraphNameContext.class,0);
		}
		public HomeGraphContext homeGraph() {
			return getRuleContext(HomeGraphContext.class,0);
		}
		public ReferenceParameterContext referenceParameter() {
			return getRuleContext(ReferenceParameterContext.class,0);
		}
		public GraphReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_graphReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGraphReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGraphReference(this);
		}
	}

	public final GraphReferenceContext graphReference() throws RecognitionException {
		GraphReferenceContext _localctx = new GraphReferenceContext(_ctx, getState());
		enterRule(_localctx, 886, RULE_graphReference);
		try {
			setState(3716);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,416,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3710);
				catalogObjectParentReference();
				setState(3711);
				graphName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3713);
				delimitedGraphName();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3714);
				homeGraph();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3715);
				referenceParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CatalogGraphParentAndNameContext extends ParserRuleContext {
		public GraphNameContext graphName() {
			return getRuleContext(GraphNameContext.class,0);
		}
		public CatalogObjectParentReferenceContext catalogObjectParentReference() {
			return getRuleContext(CatalogObjectParentReferenceContext.class,0);
		}
		public CatalogGraphParentAndNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_catalogGraphParentAndName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterCatalogGraphParentAndName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitCatalogGraphParentAndName(this);
		}
	}

	public final CatalogGraphParentAndNameContext catalogGraphParentAndName() throws RecognitionException {
		CatalogGraphParentAndNameContext _localctx = new CatalogGraphParentAndNameContext(_ctx, getState());
		enterRule(_localctx, 888, RULE_catalogGraphParentAndName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3719);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,417,_ctx) ) {
			case 1:
				{
				setState(3718);
				catalogObjectParentReference();
				}
				break;
			}
			setState(3721);
			graphName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class HomeGraphContext extends ParserRuleContext {
		public TerminalNode HOME_PROPERTY_GRAPH() { return getToken(GQLParser.HOME_PROPERTY_GRAPH, 0); }
		public TerminalNode HOME_GRAPH() { return getToken(GQLParser.HOME_GRAPH, 0); }
		public HomeGraphContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_homeGraph; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterHomeGraph(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitHomeGraph(this);
		}
	}

	public final HomeGraphContext homeGraph() throws RecognitionException {
		HomeGraphContext _localctx = new HomeGraphContext(_ctx, getState());
		enterRule(_localctx, 890, RULE_homeGraph);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3723);
			_la = _input.LA(1);
			if ( !(_la==HOME_GRAPH || _la==HOME_PROPERTY_GRAPH) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GraphTypeReferenceContext extends ParserRuleContext {
		public CatalogGraphTypeParentAndNameContext catalogGraphTypeParentAndName() {
			return getRuleContext(CatalogGraphTypeParentAndNameContext.class,0);
		}
		public ReferenceParameterContext referenceParameter() {
			return getRuleContext(ReferenceParameterContext.class,0);
		}
		public GraphTypeReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_graphTypeReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGraphTypeReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGraphTypeReference(this);
		}
	}

	public final GraphTypeReferenceContext graphTypeReference() throws RecognitionException {
		GraphTypeReferenceContext _localctx = new GraphTypeReferenceContext(_ctx, getState());
		enterRule(_localctx, 892, RULE_graphTypeReference);
		try {
			setState(3727);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,418,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3725);
				catalogGraphTypeParentAndName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3726);
				referenceParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CatalogGraphTypeParentAndNameContext extends ParserRuleContext {
		public GraphTypeNameContext graphTypeName() {
			return getRuleContext(GraphTypeNameContext.class,0);
		}
		public CatalogObjectParentReferenceContext catalogObjectParentReference() {
			return getRuleContext(CatalogObjectParentReferenceContext.class,0);
		}
		public CatalogGraphTypeParentAndNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_catalogGraphTypeParentAndName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterCatalogGraphTypeParentAndName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitCatalogGraphTypeParentAndName(this);
		}
	}

	public final CatalogGraphTypeParentAndNameContext catalogGraphTypeParentAndName() throws RecognitionException {
		CatalogGraphTypeParentAndNameContext _localctx = new CatalogGraphTypeParentAndNameContext(_ctx, getState());
		enterRule(_localctx, 894, RULE_catalogGraphTypeParentAndName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3730);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,419,_ctx) ) {
			case 1:
				{
				setState(3729);
				catalogObjectParentReference();
				}
				break;
			}
			setState(3732);
			graphTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class BindingTableReferenceContext extends ParserRuleContext {
		public CatalogObjectParentReferenceContext catalogObjectParentReference() {
			return getRuleContext(CatalogObjectParentReferenceContext.class,0);
		}
		public BindingTableNameContext bindingTableName() {
			return getRuleContext(BindingTableNameContext.class,0);
		}
		public DelimitedBindingTableNameContext delimitedBindingTableName() {
			return getRuleContext(DelimitedBindingTableNameContext.class,0);
		}
		public ReferenceParameterContext referenceParameter() {
			return getRuleContext(ReferenceParameterContext.class,0);
		}
		public BindingTableReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bindingTableReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterBindingTableReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitBindingTableReference(this);
		}
	}

	public final BindingTableReferenceContext bindingTableReference() throws RecognitionException {
		BindingTableReferenceContext _localctx = new BindingTableReferenceContext(_ctx, getState());
		enterRule(_localctx, 896, RULE_bindingTableReference);
		try {
			setState(3739);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,420,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3734);
				catalogObjectParentReference();
				setState(3735);
				bindingTableName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3737);
				delimitedBindingTableName();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3738);
				referenceParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CatalogBindingTableParentAndNameContext extends ParserRuleContext {
		public BindingTableNameContext bindingTableName() {
			return getRuleContext(BindingTableNameContext.class,0);
		}
		public CatalogObjectParentReferenceContext catalogObjectParentReference() {
			return getRuleContext(CatalogObjectParentReferenceContext.class,0);
		}
		public CatalogBindingTableParentAndNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_catalogBindingTableParentAndName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterCatalogBindingTableParentAndName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitCatalogBindingTableParentAndName(this);
		}
	}

	public final CatalogBindingTableParentAndNameContext catalogBindingTableParentAndName() throws RecognitionException {
		CatalogBindingTableParentAndNameContext _localctx = new CatalogBindingTableParentAndNameContext(_ctx, getState());
		enterRule(_localctx, 898, RULE_catalogBindingTableParentAndName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3742);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,421,_ctx) ) {
			case 1:
				{
				setState(3741);
				catalogObjectParentReference();
				}
				break;
			}
			setState(3744);
			bindingTableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ProcedureReferenceContext extends ParserRuleContext {
		public CatalogProcedureParentAndNameContext catalogProcedureParentAndName() {
			return getRuleContext(CatalogProcedureParentAndNameContext.class,0);
		}
		public ReferenceParameterContext referenceParameter() {
			return getRuleContext(ReferenceParameterContext.class,0);
		}
		public ProcedureReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterProcedureReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitProcedureReference(this);
		}
	}

	public final ProcedureReferenceContext procedureReference() throws RecognitionException {
		ProcedureReferenceContext _localctx = new ProcedureReferenceContext(_ctx, getState());
		enterRule(_localctx, 900, RULE_procedureReference);
		try {
			setState(3748);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,422,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3746);
				catalogProcedureParentAndName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3747);
				referenceParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CatalogProcedureParentAndNameContext extends ParserRuleContext {
		public ProcedureNameContext procedureName() {
			return getRuleContext(ProcedureNameContext.class,0);
		}
		public CatalogObjectParentReferenceContext catalogObjectParentReference() {
			return getRuleContext(CatalogObjectParentReferenceContext.class,0);
		}
		public CatalogProcedureParentAndNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_catalogProcedureParentAndName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterCatalogProcedureParentAndName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitCatalogProcedureParentAndName(this);
		}
	}

	public final CatalogProcedureParentAndNameContext catalogProcedureParentAndName() throws RecognitionException {
		CatalogProcedureParentAndNameContext _localctx = new CatalogProcedureParentAndNameContext(_ctx, getState());
		enterRule(_localctx, 902, RULE_catalogProcedureParentAndName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3751);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,423,_ctx) ) {
			case 1:
				{
				setState(3750);
				catalogObjectParentReference();
				}
				break;
			}
			setState(3753);
			procedureName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CatalogObjectParentReferenceContext extends ParserRuleContext {
		public SchemaReferenceContext schemaReference() {
			return getRuleContext(SchemaReferenceContext.class,0);
		}
		public TerminalNode SOLIDUS() { return getToken(GQLParser.SOLIDUS, 0); }
		public List<ObjectNameContext> objectName() {
			return getRuleContexts(ObjectNameContext.class);
		}
		public ObjectNameContext objectName(int i) {
			return getRuleContext(ObjectNameContext.class,i);
		}
		public List<TerminalNode> PERIOD() { return getTokens(GQLParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(GQLParser.PERIOD, i);
		}
		public CatalogObjectParentReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_catalogObjectParentReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterCatalogObjectParentReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitCatalogObjectParentReference(this);
		}
	}

	public final CatalogObjectParentReferenceContext catalogObjectParentReference() throws RecognitionException {
		CatalogObjectParentReferenceContext _localctx = new CatalogObjectParentReferenceContext(_ctx, getState());
		enterRule(_localctx, 904, RULE_catalogObjectParentReference);
		int _la;
		try {
			int _alt;
			setState(3774);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOLLAR_SIGN:
			case PERIOD:
			case SOLIDUS:
			case CURRENT_SCHEMA:
			case HOME_SCHEMA:
			case DOUBLE_PERIOD:
				enterOuterAlt(_localctx, 1);
				{
				setState(3755);
				schemaReference();
				setState(3757);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SOLIDUS) {
					{
					setState(3756);
					match(SOLIDUS);
					}
				}

				setState(3764);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,425,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3759);
						objectName();
						setState(3760);
						match(PERIOD);
						}
						} 
					}
					setState(3766);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,425,_ctx);
				}
				}
				break;
			case DOUBLE_QUOTED_STRING_LITERAL:
			case ACCENT_QUOTED_STRING_LITERAL:
			case REGULAR_IDENTIFIER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3770); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(3767);
						objectName();
						setState(3768);
						match(PERIOD);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(3772); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,426,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ReferenceParameterContext extends ParserRuleContext {
		public ParameterContext parameter() {
			return getRuleContext(ParameterContext.class,0);
		}
		public ReferenceParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceParameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterReferenceParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitReferenceParameter(this);
		}
	}

	public final ReferenceParameterContext referenceParameter() throws RecognitionException {
		ReferenceParameterContext _localctx = new ReferenceParameterContext(_ctx, getState());
		enterRule(_localctx, 906, RULE_referenceParameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3776);
			parameter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExternalObjectReferenceContext extends ParserRuleContext {
		public TerminalNode I_DONT_KNOW_3() { return getToken(GQLParser.I_DONT_KNOW_3, 0); }
		public ExternalObjectReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_externalObjectReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterExternalObjectReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitExternalObjectReference(this);
		}
	}

	public final ExternalObjectReferenceContext externalObjectReference() throws RecognitionException {
		ExternalObjectReferenceContext _localctx = new ExternalObjectReferenceContext(_ctx, getState());
		enterRule(_localctx, 908, RULE_externalObjectReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3778);
			match(I_DONT_KNOW_3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ComparisonPredicateCondContext extends ParserRuleContext {
		public CompOpContext compOp() {
			return getRuleContext(CompOpContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ComparisonPredicateCondContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparisonPredicateCond; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterComparisonPredicateCond(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitComparisonPredicateCond(this);
		}
	}

	public final ComparisonPredicateCondContext comparisonPredicateCond() throws RecognitionException {
		ComparisonPredicateCondContext _localctx = new ComparisonPredicateCondContext(_ctx, getState());
		enterRule(_localctx, 910, RULE_comparisonPredicateCond);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3780);
			compOp();
			setState(3781);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CompOpContext extends ParserRuleContext {
		public TerminalNode EQUALS_OPERATOR() { return getToken(GQLParser.EQUALS_OPERATOR, 0); }
		public TerminalNode NOT_EQUALS_OPERATOR() { return getToken(GQLParser.NOT_EQUALS_OPERATOR, 0); }
		public TerminalNode LEFT_ANGLE_BRACKET() { return getToken(GQLParser.LEFT_ANGLE_BRACKET, 0); }
		public TerminalNode RIGHT_ANGLE_BRACKET() { return getToken(GQLParser.RIGHT_ANGLE_BRACKET, 0); }
		public TerminalNode LESS_THAN_OR_EQUALS_OPERATOR() { return getToken(GQLParser.LESS_THAN_OR_EQUALS_OPERATOR, 0); }
		public TerminalNode GREATER_THAN_OR_EQUALS_OPERATOR() { return getToken(GQLParser.GREATER_THAN_OR_EQUALS_OPERATOR, 0); }
		public CompOpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compOp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterCompOp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitCompOp(this);
		}
	}

	public final CompOpContext compOp() throws RecognitionException {
		CompOpContext _localctx = new CompOpContext(_ctx, getState());
		enterRule(_localctx, 912, RULE_compOp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3783);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8832L) != 0) || ((((_la - 302)) & ~0x3f) == 0 && ((1L << (_la - 302)) & 81L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NullPredicateCondContext extends ParserRuleContext {
		public TerminalNode IS() { return getToken(GQLParser.IS, 0); }
		public TerminalNode NULL() { return getToken(GQLParser.NULL, 0); }
		public TerminalNode NOT() { return getToken(GQLParser.NOT, 0); }
		public NullPredicateCondContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullPredicateCond; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterNullPredicateCond(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitNullPredicateCond(this);
		}
	}

	public final NullPredicateCondContext nullPredicateCond() throws RecognitionException {
		NullPredicateCondContext _localctx = new NullPredicateCondContext(_ctx, getState());
		enterRule(_localctx, 914, RULE_nullPredicateCond);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3785);
			match(IS);
			setState(3787);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(3786);
				match(NOT);
				}
			}

			setState(3789);
			match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NormalizedPredicateCondContext extends ParserRuleContext {
		public TerminalNode IS() { return getToken(GQLParser.IS, 0); }
		public TerminalNode NORMALIZED() { return getToken(GQLParser.NORMALIZED, 0); }
		public TerminalNode NOT() { return getToken(GQLParser.NOT, 0); }
		public NormalFormContext normalForm() {
			return getRuleContext(NormalFormContext.class,0);
		}
		public NormalizedPredicateCondContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_normalizedPredicateCond; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterNormalizedPredicateCond(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitNormalizedPredicateCond(this);
		}
	}

	public final NormalizedPredicateCondContext normalizedPredicateCond() throws RecognitionException {
		NormalizedPredicateCondContext _localctx = new NormalizedPredicateCondContext(_ctx, getState());
		enterRule(_localctx, 916, RULE_normalizedPredicateCond);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3791);
			match(IS);
			setState(3793);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(3792);
				match(NOT);
				}
			}

			setState(3796);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 175)) & ~0x3f) == 0 && ((1L << (_la - 175)) & 15L) != 0)) {
				{
				setState(3795);
				normalForm();
				}
			}

			setState(3798);
			match(NORMALIZED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DirectedPredicateCondContext extends ParserRuleContext {
		public TerminalNode IS() { return getToken(GQLParser.IS, 0); }
		public TerminalNode DIRECTED() { return getToken(GQLParser.DIRECTED, 0); }
		public TerminalNode NOT() { return getToken(GQLParser.NOT, 0); }
		public DirectedPredicateCondContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_directedPredicateCond; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterDirectedPredicateCond(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitDirectedPredicateCond(this);
		}
	}

	public final DirectedPredicateCondContext directedPredicateCond() throws RecognitionException {
		DirectedPredicateCondContext _localctx = new DirectedPredicateCondContext(_ctx, getState());
		enterRule(_localctx, 918, RULE_directedPredicateCond);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3800);
			match(IS);
			setState(3802);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(3801);
				match(NOT);
				}
			}

			setState(3804);
			match(DIRECTED);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LabeledPredicateCondContext extends ParserRuleContext {
		public LabelExpressionContext labelExpression() {
			return getRuleContext(LabelExpressionContext.class,0);
		}
		public TerminalNode IS() { return getToken(GQLParser.IS, 0); }
		public TerminalNode LABELED() { return getToken(GQLParser.LABELED, 0); }
		public TerminalNode COLON() { return getToken(GQLParser.COLON, 0); }
		public TerminalNode NOT() { return getToken(GQLParser.NOT, 0); }
		public LabeledPredicateCondContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labeledPredicateCond; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterLabeledPredicateCond(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitLabeledPredicateCond(this);
		}
	}

	public final LabeledPredicateCondContext labeledPredicateCond() throws RecognitionException {
		LabeledPredicateCondContext _localctx = new LabeledPredicateCondContext(_ctx, getState());
		enterRule(_localctx, 920, RULE_labeledPredicateCond);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3812);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IS:
				{
				setState(3806);
				match(IS);
				setState(3808);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(3807);
					match(NOT);
					}
				}

				setState(3810);
				match(LABELED);
				}
				break;
			case COLON:
				{
				setState(3811);
				match(COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3814);
			labelExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SourceDestinationPredicateCondContext extends ParserRuleContext {
		public TerminalNode IS() { return getToken(GQLParser.IS, 0); }
		public TerminalNode OF() { return getToken(GQLParser.OF, 0); }
		public ElementVariableReferenceContext elementVariableReference() {
			return getRuleContext(ElementVariableReferenceContext.class,0);
		}
		public TerminalNode SOURCE() { return getToken(GQLParser.SOURCE, 0); }
		public TerminalNode DESTINATION() { return getToken(GQLParser.DESTINATION, 0); }
		public TerminalNode NOT() { return getToken(GQLParser.NOT, 0); }
		public SourceDestinationPredicateCondContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sourceDestinationPredicateCond; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSourceDestinationPredicateCond(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSourceDestinationPredicateCond(this);
		}
	}

	public final SourceDestinationPredicateCondContext sourceDestinationPredicateCond() throws RecognitionException {
		SourceDestinationPredicateCondContext _localctx = new SourceDestinationPredicateCondContext(_ctx, getState());
		enterRule(_localctx, 922, RULE_sourceDestinationPredicateCond);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3816);
			match(IS);
			setState(3818);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(3817);
				match(NOT);
				}
			}

			setState(3820);
			_la = _input.LA(1);
			if ( !(_la==DESTINATION || _la==SOURCE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3821);
			match(OF);
			setState(3822);
			elementVariableReference();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnsignedValueSpecificationContext extends ParserRuleContext {
		public UnsignedLiteralContext unsignedLiteral() {
			return getRuleContext(UnsignedLiteralContext.class,0);
		}
		public ParameterValueSpecificationContext parameterValueSpecification() {
			return getRuleContext(ParameterValueSpecificationContext.class,0);
		}
		public UnsignedValueSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unsignedValueSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterUnsignedValueSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitUnsignedValueSpecification(this);
		}
	}

	public final UnsignedValueSpecificationContext unsignedValueSpecification() throws RecognitionException {
		UnsignedValueSpecificationContext _localctx = new UnsignedValueSpecificationContext(_ctx, getState());
		enterRule(_localctx, 924, RULE_unsignedValueSpecification);
		try {
			setState(3826);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_BRACE:
			case LEFT_BRACKET:
			case ARRAY:
			case DATE:
			case DATETIME:
			case DURATION:
			case K_FALSE:
			case GROUP:
			case LIST:
			case NULL:
			case RECORD:
			case TIME:
			case TIMESTAMP:
			case K_TRUE:
			case UNKNOWN:
			case UNSIGNED_DECIMAL_INTEGER:
			case UNSIGNED_HEXADECIMAL_INTEGER:
			case UNSIGNED_OCTAL_INTEGER:
			case UNSIGNED_BINARY_INTEGER:
			case UNSIGNED_DECIMAL_IN_SCIENTIFIC_NOTATION:
			case UNSIGNED_DECIMAL_IN_COMMON_NOTATION:
			case SINGLE_QUOTED_STRING_LITERAL:
			case DOUBLE_QUOTED_STRING_LITERAL:
			case BYTE_STRING_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3824);
				unsignedLiteral();
				}
				break;
			case DOLLAR_SIGN:
			case CURRENT_USER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3825);
				parameterValueSpecification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnsignedIntegerSpecificationContext extends ParserRuleContext {
		public IntegerLiteralContext integerLiteral() {
			return getRuleContext(IntegerLiteralContext.class,0);
		}
		public ParameterContext parameter() {
			return getRuleContext(ParameterContext.class,0);
		}
		public UnsignedIntegerSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unsignedIntegerSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterUnsignedIntegerSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitUnsignedIntegerSpecification(this);
		}
	}

	public final UnsignedIntegerSpecificationContext unsignedIntegerSpecification() throws RecognitionException {
		UnsignedIntegerSpecificationContext _localctx = new UnsignedIntegerSpecificationContext(_ctx, getState());
		enterRule(_localctx, 926, RULE_unsignedIntegerSpecification);
		try {
			setState(3830);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNSIGNED_DECIMAL_INTEGER:
			case UNSIGNED_HEXADECIMAL_INTEGER:
			case UNSIGNED_OCTAL_INTEGER:
			case UNSIGNED_BINARY_INTEGER:
				enterOuterAlt(_localctx, 1);
				{
				setState(3828);
				integerLiteral();
				}
				break;
			case DOLLAR_SIGN:
				enterOuterAlt(_localctx, 2);
				{
				setState(3829);
				parameter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ParameterValueSpecificationContext extends ParserRuleContext {
		public ParameterContext parameter() {
			return getRuleContext(ParameterContext.class,0);
		}
		public PredefinedParameterContext predefinedParameter() {
			return getRuleContext(PredefinedParameterContext.class,0);
		}
		public ParameterValueSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterValueSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterParameterValueSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitParameterValueSpecification(this);
		}
	}

	public final ParameterValueSpecificationContext parameterValueSpecification() throws RecognitionException {
		ParameterValueSpecificationContext _localctx = new ParameterValueSpecificationContext(_ctx, getState());
		enterRule(_localctx, 928, RULE_parameterValueSpecification);
		try {
			setState(3834);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOLLAR_SIGN:
				enterOuterAlt(_localctx, 1);
				{
				setState(3832);
				parameter();
				}
				break;
			case CURRENT_USER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3833);
				predefinedParameter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PredefinedParameterContext extends ParserRuleContext {
		public TerminalNode CURRENT_USER() { return getToken(GQLParser.CURRENT_USER, 0); }
		public PredefinedParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predefinedParameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterPredefinedParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitPredefinedParameter(this);
		}
	}

	public final PredefinedParameterContext predefinedParameter() throws RecognitionException {
		PredefinedParameterContext _localctx = new PredefinedParameterContext(_ctx, getState());
		enterRule(_localctx, 930, RULE_predefinedParameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3836);
			match(CURRENT_USER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExpressionContext extends ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
	 
		public ExpressionContext() { }
		public void copyFrom(ExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlPredicateExpressionContext extends ExpressionContext {
		public ExpressionPredicateContext expressionPredicate() {
			return getRuleContext(ExpressionPredicateContext.class,0);
		}
		public GqlPredicateExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlPredicateExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlPredicateExpression(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlNotExpressionContext extends ExpressionContext {
		public TerminalNode NOT() { return getToken(GQLParser.NOT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public GqlNotExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlNotExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlNotExpression(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlLogicalXorExpressionContext extends ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		public TerminalNode XOR() { return getToken(GQLParser.XOR, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public GqlLogicalXorExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlLogicalXorExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlLogicalXorExpression(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlLogicalOrExpressionContext extends ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		public TerminalNode OR() { return getToken(GQLParser.OR, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public GqlLogicalOrExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlLogicalOrExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlLogicalOrExpression(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlLogicalAndExpressionContext extends ExpressionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		public TerminalNode AND() { return getToken(GQLParser.AND, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public GqlLogicalAndExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlLogicalAndExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlLogicalAndExpression(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		return expression(0);
	}

	private ExpressionContext expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 932;
		enterRecursionRule(_localctx, 932, RULE_expression, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3842);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,438,_ctx) ) {
			case 1:
				{
				_localctx = new GqlNotExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(3839);
				match(NOT);
				setState(3840);
				expression(5);
				}
				break;
			case 2:
				{
				_localctx = new GqlPredicateExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3841);
				expressionPredicate(0);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(3855);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,440,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(3853);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,439,_ctx) ) {
					case 1:
						{
						_localctx = new GqlLogicalAndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((GqlLogicalAndExpressionContext)_localctx).lhs = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(3844);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(3845);
						match(AND);
						setState(3846);
						((GqlLogicalAndExpressionContext)_localctx).rhs = expression(5);
						}
						break;
					case 2:
						{
						_localctx = new GqlLogicalXorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((GqlLogicalXorExpressionContext)_localctx).lhs = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(3847);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(3848);
						match(XOR);
						setState(3849);
						((GqlLogicalXorExpressionContext)_localctx).rhs = expression(4);
						}
						break;
					case 3:
						{
						_localctx = new GqlLogicalOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((GqlLogicalOrExpressionContext)_localctx).lhs = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(3850);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(3851);
						match(OR);
						setState(3852);
						((GqlLogicalOrExpressionContext)_localctx).rhs = expression(3);
						}
						break;
					}
					} 
				}
				setState(3857);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,440,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExpressionPredicateContext extends ParserRuleContext {
		public ExpressionPredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionPredicate; }
	 
		public ExpressionPredicateContext() { }
		public void copyFrom(ExpressionPredicateContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlAtomExpressionContext extends ExpressionPredicateContext {
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public GqlAtomExpressionContext(ExpressionPredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlAtomExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlAtomExpression(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlNormalizedExpressionContext extends ExpressionPredicateContext {
		public ExpressionPredicateContext expressionPredicate() {
			return getRuleContext(ExpressionPredicateContext.class,0);
		}
		public NormalizedPredicateCondContext normalizedPredicateCond() {
			return getRuleContext(NormalizedPredicateCondContext.class,0);
		}
		public GqlNormalizedExpressionContext(ExpressionPredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlNormalizedExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlNormalizedExpression(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlSameExpressionContext extends ExpressionPredicateContext {
		public TerminalNode SAME() { return getToken(GQLParser.SAME, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public List<ElementVariableReferenceContext> elementVariableReference() {
			return getRuleContexts(ElementVariableReferenceContext.class);
		}
		public ElementVariableReferenceContext elementVariableReference(int i) {
			return getRuleContext(ElementVariableReferenceContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQLParser.COMMA, i);
		}
		public GqlSameExpressionContext(ExpressionPredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlSameExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlSameExpression(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlDirectedExpressionContext extends ExpressionPredicateContext {
		public ElementVariableReferenceContext elementVariableReference() {
			return getRuleContext(ElementVariableReferenceContext.class,0);
		}
		public DirectedPredicateCondContext directedPredicateCond() {
			return getRuleContext(DirectedPredicateCondContext.class,0);
		}
		public GqlDirectedExpressionContext(ExpressionPredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlDirectedExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlDirectedExpression(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlBooleanTestExpressionContext extends ExpressionPredicateContext {
		public ExpressionPredicateContext expressionPredicate() {
			return getRuleContext(ExpressionPredicateContext.class,0);
		}
		public TerminalNode IS() { return getToken(GQLParser.IS, 0); }
		public TruthValueContext truthValue() {
			return getRuleContext(TruthValueContext.class,0);
		}
		public TerminalNode NOT() { return getToken(GQLParser.NOT, 0); }
		public GqlBooleanTestExpressionContext(ExpressionPredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlBooleanTestExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlBooleanTestExpression(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlGraphRefValueExpressionContext extends ExpressionPredicateContext {
		public TerminalNode GRAPH() { return getToken(GQLParser.GRAPH, 0); }
		public GraphExpressionContext graphExpression() {
			return getRuleContext(GraphExpressionContext.class,0);
		}
		public TerminalNode PROPERTY() { return getToken(GQLParser.PROPERTY, 0); }
		public GqlGraphRefValueExpressionContext(ExpressionPredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlGraphRefValueExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlGraphRefValueExpression(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlAllDifferentExpressionContext extends ExpressionPredicateContext {
		public TerminalNode ALL_DIFFERENT() { return getToken(GQLParser.ALL_DIFFERENT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public List<ElementVariableReferenceContext> elementVariableReference() {
			return getRuleContexts(ElementVariableReferenceContext.class);
		}
		public ElementVariableReferenceContext elementVariableReference(int i) {
			return getRuleContext(ElementVariableReferenceContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQLParser.COMMA, i);
		}
		public GqlAllDifferentExpressionContext(ExpressionPredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlAllDifferentExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlAllDifferentExpression(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlExistsExpressionContext extends ExpressionPredicateContext {
		public TerminalNode EXISTS() { return getToken(GQLParser.EXISTS, 0); }
		public TerminalNode LEFT_BRACE() { return getToken(GQLParser.LEFT_BRACE, 0); }
		public GraphPatternContext graphPattern() {
			return getRuleContext(GraphPatternContext.class,0);
		}
		public TerminalNode RIGHT_BRACE() { return getToken(GQLParser.RIGHT_BRACE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public MatchStatementBlockContext matchStatementBlock() {
			return getRuleContext(MatchStatementBlockContext.class,0);
		}
		public NestedQuerySpecificationContext nestedQuerySpecification() {
			return getRuleContext(NestedQuerySpecificationContext.class,0);
		}
		public GqlExistsExpressionContext(ExpressionPredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlExistsExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlExistsExpression(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlLetExpressionContext extends ExpressionPredicateContext {
		public TerminalNode LET() { return getToken(GQLParser.LET, 0); }
		public LetVariableDefinitionListContext letVariableDefinitionList() {
			return getRuleContext(LetVariableDefinitionListContext.class,0);
		}
		public TerminalNode IN() { return getToken(GQLParser.IN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode END() { return getToken(GQLParser.END, 0); }
		public GqlLetExpressionContext(ExpressionPredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlLetExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlLetExpression(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlComparisonExpressionContext extends ExpressionPredicateContext {
		public ExpressionPredicateContext lhs;
		public ExpressionPredicateContext rhs;
		public CompOpContext compOp() {
			return getRuleContext(CompOpContext.class,0);
		}
		public List<ExpressionPredicateContext> expressionPredicate() {
			return getRuleContexts(ExpressionPredicateContext.class);
		}
		public ExpressionPredicateContext expressionPredicate(int i) {
			return getRuleContext(ExpressionPredicateContext.class,i);
		}
		public GqlComparisonExpressionContext(ExpressionPredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlComparisonExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlComparisonExpression(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlLabeledExpressionContext extends ExpressionPredicateContext {
		public ElementVariableReferenceContext elementVariableReference() {
			return getRuleContext(ElementVariableReferenceContext.class,0);
		}
		public LabeledPredicateCondContext labeledPredicateCond() {
			return getRuleContext(LabeledPredicateCondContext.class,0);
		}
		public GqlLabeledExpressionContext(ExpressionPredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlLabeledExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlLabeledExpression(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlPropertyExistExpressionContext extends ExpressionPredicateContext {
		public TerminalNode PROPERTY_EXISTS() { return getToken(GQLParser.PROPERTY_EXISTS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public ElementVariableReferenceContext elementVariableReference() {
			return getRuleContext(ElementVariableReferenceContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(GQLParser.COMMA, 0); }
		public PropertyNameContext propertyName() {
			return getRuleContext(PropertyNameContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public GqlPropertyExistExpressionContext(ExpressionPredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlPropertyExistExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlPropertyExistExpression(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlNullExpressionContext extends ExpressionPredicateContext {
		public ExpressionPredicateContext expressionPredicate() {
			return getRuleContext(ExpressionPredicateContext.class,0);
		}
		public NullPredicateCondContext nullPredicateCond() {
			return getRuleContext(NullPredicateCondContext.class,0);
		}
		public GqlNullExpressionContext(ExpressionPredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlNullExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlNullExpression(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlSourceDestinationExpressionContext extends ExpressionPredicateContext {
		public ElementVariableReferenceContext elementVariableReference() {
			return getRuleContext(ElementVariableReferenceContext.class,0);
		}
		public SourceDestinationPredicateCondContext sourceDestinationPredicateCond() {
			return getRuleContext(SourceDestinationPredicateCondContext.class,0);
		}
		public GqlSourceDestinationExpressionContext(ExpressionPredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlSourceDestinationExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlSourceDestinationExpression(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlBindingTableValueExpressionContext extends ExpressionPredicateContext {
		public TerminalNode TABLE() { return getToken(GQLParser.TABLE, 0); }
		public BindingTableExpressionContext bindingTableExpression() {
			return getRuleContext(BindingTableExpressionContext.class,0);
		}
		public TerminalNode BINDING() { return getToken(GQLParser.BINDING, 0); }
		public GqlBindingTableValueExpressionContext(ExpressionPredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlBindingTableValueExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlBindingTableValueExpression(this);
		}
	}

	public final ExpressionPredicateContext expressionPredicate() throws RecognitionException {
		return expressionPredicate(0);
	}

	private ExpressionPredicateContext expressionPredicate(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionPredicateContext _localctx = new ExpressionPredicateContext(_ctx, _parentState);
		ExpressionPredicateContext _prevctx = _localctx;
		int _startState = 934;
		enterRecursionRule(_localctx, 934, RULE_expressionPredicate, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3934);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,446,_ctx) ) {
			case 1:
				{
				_localctx = new GqlExistsExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(3859);
				match(EXISTS);
				setState(3877);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,441,_ctx) ) {
				case 1:
					{
					setState(3860);
					match(LEFT_BRACE);
					setState(3861);
					graphPattern();
					setState(3862);
					match(RIGHT_BRACE);
					}
					break;
				case 2:
					{
					setState(3864);
					match(LEFT_PAREN);
					setState(3865);
					graphPattern();
					setState(3866);
					match(RIGHT_PAREN);
					}
					break;
				case 3:
					{
					setState(3868);
					match(LEFT_BRACE);
					setState(3869);
					matchStatementBlock();
					setState(3870);
					match(RIGHT_BRACE);
					}
					break;
				case 4:
					{
					setState(3872);
					match(LEFT_PAREN);
					setState(3873);
					matchStatementBlock();
					setState(3874);
					match(RIGHT_PAREN);
					}
					break;
				case 5:
					{
					setState(3876);
					nestedQuerySpecification();
					}
					break;
				}
				}
				break;
			case 2:
				{
				_localctx = new GqlDirectedExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3879);
				elementVariableReference();
				setState(3880);
				directedPredicateCond();
				}
				break;
			case 3:
				{
				_localctx = new GqlLabeledExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3882);
				elementVariableReference();
				setState(3883);
				labeledPredicateCond();
				}
				break;
			case 4:
				{
				_localctx = new GqlSourceDestinationExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3885);
				elementVariableReference();
				setState(3886);
				sourceDestinationPredicateCond();
				}
				break;
			case 5:
				{
				_localctx = new GqlAllDifferentExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3888);
				match(ALL_DIFFERENT);
				setState(3889);
				match(LEFT_PAREN);
				setState(3890);
				elementVariableReference();
				setState(3893); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3891);
					match(COMMA);
					setState(3892);
					elementVariableReference();
					}
					}
					setState(3895); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(3897);
				match(RIGHT_PAREN);
				}
				break;
			case 6:
				{
				_localctx = new GqlSameExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3899);
				match(SAME);
				setState(3900);
				match(LEFT_PAREN);
				setState(3901);
				elementVariableReference();
				setState(3904); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3902);
					match(COMMA);
					setState(3903);
					elementVariableReference();
					}
					}
					setState(3906); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(3908);
				match(RIGHT_PAREN);
				}
				break;
			case 7:
				{
				_localctx = new GqlPropertyExistExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3910);
				match(PROPERTY_EXISTS);
				setState(3911);
				match(LEFT_PAREN);
				setState(3912);
				elementVariableReference();
				setState(3913);
				match(COMMA);
				setState(3914);
				propertyName();
				setState(3915);
				match(RIGHT_PAREN);
				}
				break;
			case 8:
				{
				_localctx = new GqlGraphRefValueExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3918);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROPERTY) {
					{
					setState(3917);
					match(PROPERTY);
					}
				}

				setState(3920);
				match(GRAPH);
				setState(3921);
				graphExpression();
				}
				break;
			case 9:
				{
				_localctx = new GqlBindingTableValueExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3923);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINDING) {
					{
					setState(3922);
					match(BINDING);
					}
				}

				setState(3925);
				match(TABLE);
				setState(3926);
				bindingTableExpression();
				}
				break;
			case 10:
				{
				_localctx = new GqlLetExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3927);
				match(LET);
				setState(3928);
				letVariableDefinitionList();
				setState(3929);
				match(IN);
				setState(3930);
				expression(0);
				setState(3931);
				match(END);
				}
				break;
			case 11:
				{
				_localctx = new GqlAtomExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3933);
				expressionAtom(0);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(3952);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,449,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(3950);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,448,_ctx) ) {
					case 1:
						{
						_localctx = new GqlComparisonExpressionContext(new ExpressionPredicateContext(_parentctx, _parentState));
						((GqlComparisonExpressionContext)_localctx).lhs = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expressionPredicate);
						setState(3936);
						if (!(precpred(_ctx, 14))) throw new FailedPredicateException(this, "precpred(_ctx, 14)");
						setState(3937);
						compOp();
						setState(3938);
						((GqlComparisonExpressionContext)_localctx).rhs = expressionPredicate(15);
						}
						break;
					case 2:
						{
						_localctx = new GqlBooleanTestExpressionContext(new ExpressionPredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expressionPredicate);
						setState(3940);
						if (!(precpred(_ctx, 15))) throw new FailedPredicateException(this, "precpred(_ctx, 15)");
						setState(3941);
						match(IS);
						setState(3943);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(3942);
							match(NOT);
							}
						}

						setState(3945);
						truthValue();
						}
						break;
					case 3:
						{
						_localctx = new GqlNullExpressionContext(new ExpressionPredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expressionPredicate);
						setState(3946);
						if (!(precpred(_ctx, 12))) throw new FailedPredicateException(this, "precpred(_ctx, 12)");
						setState(3947);
						nullPredicateCond();
						}
						break;
					case 4:
						{
						_localctx = new GqlNormalizedExpressionContext(new ExpressionPredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expressionPredicate);
						setState(3948);
						if (!(precpred(_ctx, 11))) throw new FailedPredicateException(this, "precpred(_ctx, 11)");
						setState(3949);
						normalizedPredicateCond();
						}
						break;
					}
					} 
				}
				setState(3954);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,449,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ExpressionAtomContext extends ParserRuleContext {
		public ExpressionAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionAtom; }
	 
		public ExpressionAtomContext() { }
		public void copyFrom(ExpressionAtomContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlParameterExpressionContext extends ExpressionAtomContext {
		public ParameterValueSpecificationContext parameterValueSpecification() {
			return getRuleContext(ParameterValueSpecificationContext.class,0);
		}
		public GqlParameterExpressionContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlParameterExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlParameterExpression(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlUnaryExpressionContext extends ExpressionAtomContext {
		public UnaryOperatorContext unaryOperator() {
			return getRuleContext(UnaryOperatorContext.class,0);
		}
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public GqlUnaryExpressionContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlUnaryExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlUnaryExpression(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlPropertyReferenceContext extends ExpressionAtomContext {
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(GQLParser.PERIOD, 0); }
		public PropertyNameContext propertyName() {
			return getRuleContext(PropertyNameContext.class,0);
		}
		public GqlPropertyReferenceContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlPropertyReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlPropertyReference(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlHighArithmeticExpressionContext extends ExpressionAtomContext {
		public ExpressionAtomContext lhs;
		public Token op;
		public ExpressionAtomContext rhs;
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public TerminalNode ASTERISK() { return getToken(GQLParser.ASTERISK, 0); }
		public TerminalNode SOLIDUS() { return getToken(GQLParser.SOLIDUS, 0); }
		public GqlHighArithmeticExpressionContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlHighArithmeticExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlHighArithmeticExpression(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlValueQueryExpressionContext extends ExpressionAtomContext {
		public TerminalNode VALUE() { return getToken(GQLParser.VALUE, 0); }
		public NestedQuerySpecificationContext nestedQuerySpecification() {
			return getRuleContext(NestedQuerySpecificationContext.class,0);
		}
		public GqlValueQueryExpressionContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlValueQueryExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlValueQueryExpression(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlLiteralExpressionContext extends ExpressionAtomContext {
		public UnsignedLiteralContext unsignedLiteral() {
			return getRuleContext(UnsignedLiteralContext.class,0);
		}
		public GqlLiteralExpressionContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlLiteralExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlLiteralExpression(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlCollectionExpressionContext extends ExpressionAtomContext {
		public CollectionValueConstructorContext collectionValueConstructor() {
			return getRuleContext(CollectionValueConstructorContext.class,0);
		}
		public GqlCollectionExpressionContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlCollectionExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlCollectionExpression(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlConcatenationExpressionContext extends ExpressionAtomContext {
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public TerminalNode CONCATENATION_OPERATOR() { return getToken(GQLParser.CONCATENATION_OPERATOR, 0); }
		public GqlConcatenationExpressionContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlConcatenationExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlConcatenationExpression(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlLowArithmeticExpressionContext extends ExpressionAtomContext {
		public ExpressionAtomContext lhs;
		public Token op;
		public ExpressionAtomContext rhs;
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public TerminalNode PLUS_SIGN() { return getToken(GQLParser.PLUS_SIGN, 0); }
		public TerminalNode MINUS_SIGN() { return getToken(GQLParser.MINUS_SIGN, 0); }
		public GqlLowArithmeticExpressionContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlLowArithmeticExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlLowArithmeticExpression(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlParenthesizedExpressionContext extends ExpressionAtomContext {
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public GqlParenthesizedExpressionContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlParenthesizedExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlParenthesizedExpression(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlFunctionExpressionContext extends ExpressionAtomContext {
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public GqlFunctionExpressionContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlFunctionExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlFunctionExpression(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlVariableExpressionContext extends ExpressionAtomContext {
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public GqlVariableExpressionContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlVariableExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlVariableExpression(this);
		}
	}

	public final ExpressionAtomContext expressionAtom() throws RecognitionException {
		return expressionAtom(0);
	}

	private ExpressionAtomContext expressionAtom(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionAtomContext _localctx = new ExpressionAtomContext(_ctx, _parentState);
		ExpressionAtomContext _prevctx = _localctx;
		int _startState = 936;
		enterRecursionRule(_localctx, 936, RULE_expressionAtom, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3970);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,450,_ctx) ) {
			case 1:
				{
				_localctx = new GqlParenthesizedExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(3956);
				match(LEFT_PAREN);
				setState(3957);
				expression(0);
				setState(3958);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				_localctx = new GqlLiteralExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3960);
				unsignedLiteral();
				}
				break;
			case 3:
				{
				_localctx = new GqlUnaryExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3961);
				unaryOperator();
				setState(3962);
				expressionAtom(8);
				}
				break;
			case 4:
				{
				_localctx = new GqlFunctionExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3964);
				functionCall();
				}
				break;
			case 5:
				{
				_localctx = new GqlCollectionExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3965);
				collectionValueConstructor();
				}
				break;
			case 6:
				{
				_localctx = new GqlValueQueryExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3966);
				match(VALUE);
				setState(3967);
				nestedQuerySpecification();
				}
				break;
			case 7:
				{
				_localctx = new GqlParameterExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3968);
				parameterValueSpecification();
				}
				break;
			case 8:
				{
				_localctx = new GqlVariableExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3969);
				variable();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(3986);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,452,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(3984);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,451,_ctx) ) {
					case 1:
						{
						_localctx = new GqlConcatenationExpressionContext(new ExpressionAtomContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(3972);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(3973);
						match(CONCATENATION_OPERATOR);
						setState(3974);
						expressionAtom(11);
						}
						break;
					case 2:
						{
						_localctx = new GqlHighArithmeticExpressionContext(new ExpressionAtomContext(_parentctx, _parentState));
						((GqlHighArithmeticExpressionContext)_localctx).lhs = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(3975);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(3976);
						((GqlHighArithmeticExpressionContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ASTERISK || _la==SOLIDUS) ) {
							((GqlHighArithmeticExpressionContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(3977);
						((GqlHighArithmeticExpressionContext)_localctx).rhs = expressionAtom(5);
						}
						break;
					case 3:
						{
						_localctx = new GqlLowArithmeticExpressionContext(new ExpressionAtomContext(_parentctx, _parentState));
						((GqlLowArithmeticExpressionContext)_localctx).lhs = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(3978);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(3979);
						((GqlLowArithmeticExpressionContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==MINUS_SIGN || _la==PLUS_SIGN) ) {
							((GqlLowArithmeticExpressionContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(3980);
						((GqlLowArithmeticExpressionContext)_localctx).rhs = expressionAtom(4);
						}
						break;
					case 4:
						{
						_localctx = new GqlPropertyReferenceContext(new ExpressionAtomContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(3981);
						if (!(precpred(_ctx, 11))) throw new FailedPredicateException(this, "precpred(_ctx, 11)");
						setState(3982);
						match(PERIOD);
						setState(3983);
						propertyName();
						}
						break;
					}
					} 
				}
				setState(3988);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,452,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TruthValueContext extends ParserRuleContext {
		public TerminalNode K_TRUE() { return getToken(GQLParser.K_TRUE, 0); }
		public TerminalNode K_FALSE() { return getToken(GQLParser.K_FALSE, 0); }
		public TerminalNode UNKNOWN() { return getToken(GQLParser.UNKNOWN, 0); }
		public TruthValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truthValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterTruthValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitTruthValue(this);
		}
	}

	public final TruthValueContext truthValue() throws RecognitionException {
		TruthValueContext _localctx = new TruthValueContext(_ctx, getState());
		enterRule(_localctx, 938, RULE_truthValue);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3989);
			_la = _input.LA(1);
			if ( !(_la==K_FALSE || _la==K_TRUE || _la==UNKNOWN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnaryOperatorContext extends ParserRuleContext {
		public TerminalNode EXCLAMATION_MARK() { return getToken(GQLParser.EXCLAMATION_MARK, 0); }
		public TerminalNode PLUS_SIGN() { return getToken(GQLParser.PLUS_SIGN, 0); }
		public TerminalNode MINUS_SIGN() { return getToken(GQLParser.MINUS_SIGN, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unaryOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterUnaryOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitUnaryOperator(this);
		}
	}

	public final UnaryOperatorContext unaryOperator() throws RecognitionException {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(_ctx, getState());
		enterRule(_localctx, 940, RULE_unaryOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3991);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 147712L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FunctionCallContext extends ParserRuleContext {
		public NumericFunctionContext numericFunction() {
			return getRuleContext(NumericFunctionContext.class,0);
		}
		public AggregateFunctionContext aggregateFunction() {
			return getRuleContext(AggregateFunctionContext.class,0);
		}
		public CaseFunctionContext caseFunction() {
			return getRuleContext(CaseFunctionContext.class,0);
		}
		public CastFunctionContext castFunction() {
			return getRuleContext(CastFunctionContext.class,0);
		}
		public ElementIdFunctionContext elementIdFunction() {
			return getRuleContext(ElementIdFunctionContext.class,0);
		}
		public DatetimeValueFunctionContext datetimeValueFunction() {
			return getRuleContext(DatetimeValueFunctionContext.class,0);
		}
		public DurationFunctionContext durationFunction() {
			return getRuleContext(DurationFunctionContext.class,0);
		}
		public ListFunctionContext listFunction() {
			return getRuleContext(ListFunctionContext.class,0);
		}
		public StringFunctionContext stringFunction() {
			return getRuleContext(StringFunctionContext.class,0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionCall; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitFunctionCall(this);
		}
	}

	public final FunctionCallContext functionCall() throws RecognitionException {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, getState());
		enterRule(_localctx, 942, RULE_functionCall);
		try {
			setState(4002);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,453,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3993);
				numericFunction();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3994);
				aggregateFunction();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3995);
				caseFunction();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3996);
				castFunction();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3997);
				elementIdFunction();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3998);
				datetimeValueFunction();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3999);
				durationFunction();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4000);
				listFunction();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4001);
				stringFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NumericFunctionContext extends ParserRuleContext {
		public NumericFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numericFunction; }
	 
		public NumericFunctionContext() { }
		public void copyFrom(NumericFunctionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlTwoArgScalarFunctionContext extends NumericFunctionContext {
		public TwoArgNumericFunctionNameContext twoArgNumericFunctionName() {
			return getRuleContext(TwoArgNumericFunctionNameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public List<FunctionParameterContext> functionParameter() {
			return getRuleContexts(FunctionParameterContext.class);
		}
		public FunctionParameterContext functionParameter(int i) {
			return getRuleContext(FunctionParameterContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(GQLParser.COMMA, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public GqlTwoArgScalarFunctionContext(NumericFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlTwoArgScalarFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlTwoArgScalarFunction(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlOneArgScalarFunctionContext extends NumericFunctionContext {
		public OneArgNumericFunctionNameContext oneArgNumericFunctionName() {
			return getRuleContext(OneArgNumericFunctionNameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public FunctionParameterContext functionParameter() {
			return getRuleContext(FunctionParameterContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public GqlOneArgScalarFunctionContext(NumericFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlOneArgScalarFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlOneArgScalarFunction(this);
		}
	}

	public final NumericFunctionContext numericFunction() throws RecognitionException {
		NumericFunctionContext _localctx = new NumericFunctionContext(_ctx, getState());
		enterRule(_localctx, 944, RULE_numericFunction);
		try {
			setState(4016);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABS:
			case ACOS:
			case ASIN:
			case ATAN:
			case BYTE_LENGTH:
			case CEIL:
			case CEILING:
			case CHAR_LENGTH:
			case CHARACTER_LENGTH:
			case COS:
			case COSH:
			case COT:
			case DEGREES:
			case EXP:
			case FLOOR:
			case LN:
			case LOG10:
			case OCTET_LENGTH:
			case PATH_LENGTH:
			case RADIANS:
			case SIN:
			case SINH:
			case SQRT:
			case TAN:
			case TANH:
				_localctx = new GqlOneArgScalarFunctionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4004);
				oneArgNumericFunctionName();
				setState(4005);
				match(LEFT_PAREN);
				setState(4006);
				functionParameter();
				setState(4007);
				match(RIGHT_PAREN);
				}
				break;
			case LOG:
			case MOD:
			case POWER:
				_localctx = new GqlTwoArgScalarFunctionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4009);
				twoArgNumericFunctionName();
				setState(4010);
				match(LEFT_PAREN);
				setState(4011);
				functionParameter();
				setState(4012);
				match(COMMA);
				setState(4013);
				functionParameter();
				setState(4014);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FunctionParameterContext extends ParserRuleContext {
		public UnsignedLiteralContext unsignedLiteral() {
			return getRuleContext(UnsignedLiteralContext.class,0);
		}
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public PropertyReferenceContext propertyReference() {
			return getRuleContext(PropertyReferenceContext.class,0);
		}
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public FunctionParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionParameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterFunctionParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitFunctionParameter(this);
		}
	}

	public final FunctionParameterContext functionParameter() throws RecognitionException {
		FunctionParameterContext _localctx = new FunctionParameterContext(_ctx, getState());
		enterRule(_localctx, 946, RULE_functionParameter);
		try {
			setState(4023);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,455,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4018);
				unsignedLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4019);
				variable();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4020);
				propertyReference();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4021);
				functionCall();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4022);
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PropertyReferenceContext extends ParserRuleContext {
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(GQLParser.PERIOD, 0); }
		public PropertyNameContext propertyName() {
			return getRuleContext(PropertyNameContext.class,0);
		}
		public PropertyReferenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_propertyReference; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterPropertyReference(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitPropertyReference(this);
		}
	}

	public final PropertyReferenceContext propertyReference() throws RecognitionException {
		PropertyReferenceContext _localctx = new PropertyReferenceContext(_ctx, getState());
		enterRule(_localctx, 948, RULE_propertyReference);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4025);
			variable();
			setState(4026);
			match(PERIOD);
			setState(4027);
			propertyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class OneArgNumericFunctionNameContext extends ParserRuleContext {
		public TerminalNode CHAR_LENGTH() { return getToken(GQLParser.CHAR_LENGTH, 0); }
		public TerminalNode CHARACTER_LENGTH() { return getToken(GQLParser.CHARACTER_LENGTH, 0); }
		public TerminalNode BYTE_LENGTH() { return getToken(GQLParser.BYTE_LENGTH, 0); }
		public TerminalNode OCTET_LENGTH() { return getToken(GQLParser.OCTET_LENGTH, 0); }
		public TerminalNode PATH_LENGTH() { return getToken(GQLParser.PATH_LENGTH, 0); }
		public TerminalNode ABS() { return getToken(GQLParser.ABS, 0); }
		public TerminalNode SIN() { return getToken(GQLParser.SIN, 0); }
		public TerminalNode COS() { return getToken(GQLParser.COS, 0); }
		public TerminalNode TAN() { return getToken(GQLParser.TAN, 0); }
		public TerminalNode COT() { return getToken(GQLParser.COT, 0); }
		public TerminalNode SINH() { return getToken(GQLParser.SINH, 0); }
		public TerminalNode COSH() { return getToken(GQLParser.COSH, 0); }
		public TerminalNode TANH() { return getToken(GQLParser.TANH, 0); }
		public TerminalNode ASIN() { return getToken(GQLParser.ASIN, 0); }
		public TerminalNode ACOS() { return getToken(GQLParser.ACOS, 0); }
		public TerminalNode ATAN() { return getToken(GQLParser.ATAN, 0); }
		public TerminalNode DEGREES() { return getToken(GQLParser.DEGREES, 0); }
		public TerminalNode RADIANS() { return getToken(GQLParser.RADIANS, 0); }
		public TerminalNode LOG10() { return getToken(GQLParser.LOG10, 0); }
		public TerminalNode LN() { return getToken(GQLParser.LN, 0); }
		public TerminalNode EXP() { return getToken(GQLParser.EXP, 0); }
		public TerminalNode SQRT() { return getToken(GQLParser.SQRT, 0); }
		public TerminalNode FLOOR() { return getToken(GQLParser.FLOOR, 0); }
		public TerminalNode CEIL() { return getToken(GQLParser.CEIL, 0); }
		public TerminalNode CEILING() { return getToken(GQLParser.CEILING, 0); }
		public OneArgNumericFunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_oneArgNumericFunctionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterOneArgNumericFunctionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitOneArgNumericFunctionName(this);
		}
	}

	public final OneArgNumericFunctionNameContext oneArgNumericFunctionName() throws RecognitionException {
		OneArgNumericFunctionNameContext _localctx = new OneArgNumericFunctionNameContext(_ctx, getState());
		enterRule(_localctx, 950, RULE_oneArgNumericFunctionName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4029);
			_la = _input.LA(1);
			if ( !(((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & 144130597378336771L) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & 4683743612465317889L) != 0) || ((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & 54197127160545281L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TwoArgNumericFunctionNameContext extends ParserRuleContext {
		public TerminalNode MOD() { return getToken(GQLParser.MOD, 0); }
		public TerminalNode LOG() { return getToken(GQLParser.LOG, 0); }
		public TerminalNode POWER() { return getToken(GQLParser.POWER, 0); }
		public TwoArgNumericFunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_twoArgNumericFunctionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterTwoArgNumericFunctionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitTwoArgNumericFunctionName(this);
		}
	}

	public final TwoArgNumericFunctionNameContext twoArgNumericFunctionName() throws RecognitionException {
		TwoArgNumericFunctionNameContext _localctx = new TwoArgNumericFunctionNameContext(_ctx, getState());
		enterRule(_localctx, 952, RULE_twoArgNumericFunctionName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4031);
			_la = _input.LA(1);
			if ( !(((((_la - 166)) & ~0x3f) == 0 && ((1L << (_la - 166)) & 549755814017L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class StringFunctionContext extends ParserRuleContext {
		public StringFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringFunction; }
	 
		public StringFunctionContext() { }
		public void copyFrom(StringFunctionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlSubstringFunctionContext extends StringFunctionContext {
		public Token dir;
		public ExpressionAtomContext str;
		public ExpressionAtomContext strLen;
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public TerminalNode COMMA() { return getToken(GQLParser.COMMA, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public TerminalNode LEFT() { return getToken(GQLParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(GQLParser.RIGHT, 0); }
		public GqlSubstringFunctionContext(StringFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlSubstringFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlSubstringFunction(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlMultiTrimStringFunctionContext extends StringFunctionContext {
		public Token dir;
		public ExpressionAtomContext trimSrc;
		public ExpressionAtomContext delChar;
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public TerminalNode BTRIM() { return getToken(GQLParser.BTRIM, 0); }
		public TerminalNode LTRIM() { return getToken(GQLParser.LTRIM, 0); }
		public TerminalNode RTRIM() { return getToken(GQLParser.RTRIM, 0); }
		public TerminalNode COMMA() { return getToken(GQLParser.COMMA, 0); }
		public GqlMultiTrimStringFunctionContext(StringFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlMultiTrimStringFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlMultiTrimStringFunction(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlFoldStringFunctionContext extends StringFunctionContext {
		public Token dir;
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public TerminalNode UPPER() { return getToken(GQLParser.UPPER, 0); }
		public TerminalNode LOWER() { return getToken(GQLParser.LOWER, 0); }
		public GqlFoldStringFunctionContext(StringFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlFoldStringFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlFoldStringFunction(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlSingleTrimStringFunctionContext extends StringFunctionContext {
		public ExpressionAtomContext trimSrc;
		public TerminalNode TRIM() { return getToken(GQLParser.TRIM, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public TerminalNode FROM() { return getToken(GQLParser.FROM, 0); }
		public TrimSpecificationContext trimSpecification() {
			return getRuleContext(TrimSpecificationContext.class,0);
		}
		public GqlSingleTrimStringFunctionContext(StringFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlSingleTrimStringFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlSingleTrimStringFunction(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlNormStringFunctionContext extends StringFunctionContext {
		public TerminalNode NORMALIZE() { return getToken(GQLParser.NORMALIZE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public TerminalNode COMMA() { return getToken(GQLParser.COMMA, 0); }
		public NormalFormContext normalForm() {
			return getRuleContext(NormalFormContext.class,0);
		}
		public GqlNormStringFunctionContext(StringFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlNormStringFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlNormStringFunction(this);
		}
	}

	public final StringFunctionContext stringFunction() throws RecognitionException {
		StringFunctionContext _localctx = new StringFunctionContext(_ctx, getState());
		enterRule(_localctx, 954, RULE_stringFunction);
		int _la;
		try {
			setState(4077);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT:
			case RIGHT:
				_localctx = new GqlSubstringFunctionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4033);
				((GqlSubstringFunctionContext)_localctx).dir = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LEFT || _la==RIGHT) ) {
					((GqlSubstringFunctionContext)_localctx).dir = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4034);
				match(LEFT_PAREN);
				setState(4035);
				((GqlSubstringFunctionContext)_localctx).str = expressionAtom(0);
				setState(4036);
				match(COMMA);
				setState(4037);
				((GqlSubstringFunctionContext)_localctx).strLen = expressionAtom(0);
				setState(4038);
				match(RIGHT_PAREN);
				}
				break;
			case LOWER:
			case UPPER:
				_localctx = new GqlFoldStringFunctionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4040);
				((GqlFoldStringFunctionContext)_localctx).dir = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LOWER || _la==UPPER) ) {
					((GqlFoldStringFunctionContext)_localctx).dir = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4041);
				match(LEFT_PAREN);
				setState(4042);
				expressionAtom(0);
				setState(4043);
				match(RIGHT_PAREN);
				}
				break;
			case TRIM:
				_localctx = new GqlSingleTrimStringFunctionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4045);
				match(TRIM);
				setState(4046);
				match(LEFT_PAREN);
				setState(4054);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,458,_ctx) ) {
				case 1:
					{
					setState(4048);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,456,_ctx) ) {
					case 1:
						{
						setState(4047);
						trimSpecification();
						}
						break;
					}
					setState(4051);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,457,_ctx) ) {
					case 1:
						{
						setState(4050);
						expressionAtom(0);
						}
						break;
					}
					setState(4053);
					match(FROM);
					}
					break;
				}
				setState(4056);
				((GqlSingleTrimStringFunctionContext)_localctx).trimSrc = expressionAtom(0);
				setState(4057);
				match(RIGHT_PAREN);
				}
				break;
			case BTRIM:
			case LTRIM:
			case RTRIM:
				_localctx = new GqlMultiTrimStringFunctionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4059);
				((GqlMultiTrimStringFunctionContext)_localctx).dir = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BTRIM || _la==LTRIM || _la==RTRIM) ) {
					((GqlMultiTrimStringFunctionContext)_localctx).dir = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4060);
				match(LEFT_PAREN);
				setState(4061);
				((GqlMultiTrimStringFunctionContext)_localctx).trimSrc = expressionAtom(0);
				setState(4064);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4062);
					match(COMMA);
					setState(4063);
					((GqlMultiTrimStringFunctionContext)_localctx).delChar = expressionAtom(0);
					}
				}

				setState(4066);
				match(RIGHT_PAREN);
				}
				break;
			case NORMALIZE:
				_localctx = new GqlNormStringFunctionContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(4068);
				match(NORMALIZE);
				setState(4069);
				match(LEFT_PAREN);
				setState(4070);
				expressionAtom(0);
				setState(4073);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4071);
					match(COMMA);
					setState(4072);
					normalForm();
					}
				}

				setState(4075);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ListFunctionContext extends ParserRuleContext {
		public ListFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listFunction; }
	 
		public ListFunctionContext() { }
		public void copyFrom(ListFunctionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlElementsOfPathFunctionContext extends ListFunctionContext {
		public TerminalNode ELEMENTS() { return getToken(GQLParser.ELEMENTS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public GqlElementsOfPathFunctionContext(ListFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlElementsOfPathFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlElementsOfPathFunction(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlListTrimFunctionContext extends ListFunctionContext {
		public ExpressionAtomContext list;
		public ExpressionAtomContext trim;
		public TerminalNode TRIM() { return getToken(GQLParser.TRIM, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public TerminalNode COMMA() { return getToken(GQLParser.COMMA, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public GqlListTrimFunctionContext(ListFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlListTrimFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlListTrimFunction(this);
		}
	}

	public final ListFunctionContext listFunction() throws RecognitionException {
		ListFunctionContext _localctx = new ListFunctionContext(_ctx, getState());
		enterRule(_localctx, 956, RULE_listFunction);
		try {
			setState(4091);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TRIM:
				_localctx = new GqlListTrimFunctionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4079);
				match(TRIM);
				setState(4080);
				match(LEFT_PAREN);
				setState(4081);
				((GqlListTrimFunctionContext)_localctx).list = expressionAtom(0);
				setState(4082);
				match(COMMA);
				setState(4083);
				((GqlListTrimFunctionContext)_localctx).trim = expressionAtom(0);
				setState(4084);
				match(RIGHT_PAREN);
				}
				break;
			case ELEMENTS:
				_localctx = new GqlElementsOfPathFunctionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4086);
				match(ELEMENTS);
				setState(4087);
				match(LEFT_PAREN);
				setState(4088);
				expressionAtom(0);
				setState(4089);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CaseFunctionContext extends ParserRuleContext {
		public CaseFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseFunction; }
	 
		public CaseFunctionContext() { }
		public void copyFrom(CaseFunctionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlCoalesceCaseFunctionContext extends CaseFunctionContext {
		public TerminalNode COALESCE() { return getToken(GQLParser.COALESCE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQLParser.COMMA, i);
		}
		public GqlCoalesceCaseFunctionContext(CaseFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlCoalesceCaseFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlCoalesceCaseFunction(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlSimpleCaseFunctionContext extends CaseFunctionContext {
		public TerminalNode CASE() { return getToken(GQLParser.CASE, 0); }
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public TerminalNode END() { return getToken(GQLParser.END, 0); }
		public List<SimpleWhenClauseContext> simpleWhenClause() {
			return getRuleContexts(SimpleWhenClauseContext.class);
		}
		public SimpleWhenClauseContext simpleWhenClause(int i) {
			return getRuleContext(SimpleWhenClauseContext.class,i);
		}
		public ElseClauseContext elseClause() {
			return getRuleContext(ElseClauseContext.class,0);
		}
		public GqlSimpleCaseFunctionContext(CaseFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlSimpleCaseFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlSimpleCaseFunction(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlNullIfCaseFunctionContext extends CaseFunctionContext {
		public ExpressionContext lhs;
		public ExpressionContext rhs;
		public TerminalNode NULLIF() { return getToken(GQLParser.NULLIF, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public TerminalNode COMMA() { return getToken(GQLParser.COMMA, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public GqlNullIfCaseFunctionContext(CaseFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlNullIfCaseFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlNullIfCaseFunction(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlSearchedCaseFunctionContext extends CaseFunctionContext {
		public TerminalNode CASE() { return getToken(GQLParser.CASE, 0); }
		public TerminalNode END() { return getToken(GQLParser.END, 0); }
		public List<SearchedWhenClauseContext> searchedWhenClause() {
			return getRuleContexts(SearchedWhenClauseContext.class);
		}
		public SearchedWhenClauseContext searchedWhenClause(int i) {
			return getRuleContext(SearchedWhenClauseContext.class,i);
		}
		public ElseClauseContext elseClause() {
			return getRuleContext(ElseClauseContext.class,0);
		}
		public GqlSearchedCaseFunctionContext(CaseFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlSearchedCaseFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlSearchedCaseFunction(this);
		}
	}

	public final CaseFunctionContext caseFunction() throws RecognitionException {
		CaseFunctionContext _localctx = new CaseFunctionContext(_ctx, getState());
		enterRule(_localctx, 958, RULE_caseFunction);
		int _la;
		try {
			setState(4134);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,468,_ctx) ) {
			case 1:
				_localctx = new GqlNullIfCaseFunctionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4093);
				match(NULLIF);
				setState(4094);
				match(LEFT_PAREN);
				setState(4095);
				((GqlNullIfCaseFunctionContext)_localctx).lhs = expression(0);
				setState(4096);
				match(COMMA);
				setState(4097);
				((GqlNullIfCaseFunctionContext)_localctx).rhs = expression(0);
				setState(4098);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				_localctx = new GqlCoalesceCaseFunctionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4100);
				match(COALESCE);
				setState(4101);
				match(LEFT_PAREN);
				setState(4102);
				expression(0);
				setState(4105); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4103);
					match(COMMA);
					setState(4104);
					expression(0);
					}
					}
					setState(4107); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(4109);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				_localctx = new GqlSimpleCaseFunctionContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(4111);
				match(CASE);
				setState(4112);
				expressionAtom(0);
				setState(4114); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4113);
					simpleWhenClause();
					}
					}
					setState(4116); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(4119);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(4118);
					elseClause();
					}
				}

				setState(4121);
				match(END);
				}
				break;
			case 4:
				_localctx = new GqlSearchedCaseFunctionContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(4123);
				match(CASE);
				setState(4125); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4124);
					searchedWhenClause();
					}
					}
					setState(4127); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(4130);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(4129);
					elseClause();
					}
				}

				setState(4132);
				match(END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SimpleWhenClauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(GQLParser.WHEN, 0); }
		public List<WhenOperandContext> whenOperand() {
			return getRuleContexts(WhenOperandContext.class);
		}
		public WhenOperandContext whenOperand(int i) {
			return getRuleContext(WhenOperandContext.class,i);
		}
		public TerminalNode THEN() { return getToken(GQLParser.THEN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQLParser.COMMA, i);
		}
		public SimpleWhenClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleWhenClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSimpleWhenClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSimpleWhenClause(this);
		}
	}

	public final SimpleWhenClauseContext simpleWhenClause() throws RecognitionException {
		SimpleWhenClauseContext _localctx = new SimpleWhenClauseContext(_ctx, getState());
		enterRule(_localctx, 960, RULE_simpleWhenClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4136);
			match(WHEN);
			setState(4137);
			whenOperand();
			setState(4142);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4138);
				match(COMMA);
				setState(4139);
				whenOperand();
				}
				}
				setState(4144);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4145);
			match(THEN);
			setState(4146);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class SearchedWhenClauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(GQLParser.WHEN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode THEN() { return getToken(GQLParser.THEN, 0); }
		public SearchedWhenClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searchedWhenClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterSearchedWhenClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitSearchedWhenClause(this);
		}
	}

	public final SearchedWhenClauseContext searchedWhenClause() throws RecognitionException {
		SearchedWhenClauseContext _localctx = new SearchedWhenClauseContext(_ctx, getState());
		enterRule(_localctx, 962, RULE_searchedWhenClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4148);
			match(WHEN);
			setState(4149);
			expression(0);
			setState(4150);
			match(THEN);
			setState(4151);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ElseClauseContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(GQLParser.ELSE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ElseClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elseClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterElseClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitElseClause(this);
		}
	}

	public final ElseClauseContext elseClause() throws RecognitionException {
		ElseClauseContext _localctx = new ElseClauseContext(_ctx, getState());
		enterRule(_localctx, 964, RULE_elseClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4153);
			match(ELSE);
			setState(4154);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class WhenOperandContext extends ParserRuleContext {
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public ComparisonPredicateCondContext comparisonPredicateCond() {
			return getRuleContext(ComparisonPredicateCondContext.class,0);
		}
		public NullPredicateCondContext nullPredicateCond() {
			return getRuleContext(NullPredicateCondContext.class,0);
		}
		public DirectedPredicateCondContext directedPredicateCond() {
			return getRuleContext(DirectedPredicateCondContext.class,0);
		}
		public LabeledPredicateCondContext labeledPredicateCond() {
			return getRuleContext(LabeledPredicateCondContext.class,0);
		}
		public SourceDestinationPredicateCondContext sourceDestinationPredicateCond() {
			return getRuleContext(SourceDestinationPredicateCondContext.class,0);
		}
		public WhenOperandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whenOperand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterWhenOperand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitWhenOperand(this);
		}
	}

	public final WhenOperandContext whenOperand() throws RecognitionException {
		WhenOperandContext _localctx = new WhenOperandContext(_ctx, getState());
		enterRule(_localctx, 966, RULE_whenOperand);
		try {
			setState(4162);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,470,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4156);
				expressionAtom(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4157);
				comparisonPredicateCond();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4158);
				nullPredicateCond();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4159);
				directedPredicateCond();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4160);
				labeledPredicateCond();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4161);
				sourceDestinationPredicateCond();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CastFunctionContext extends ParserRuleContext {
		public TerminalNode CAST() { return getToken(GQLParser.CAST, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(GQLParser.AS, 0); }
		public ValueTypeContext valueType() {
			return getRuleContext(ValueTypeContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public CastFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_castFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterCastFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitCastFunction(this);
		}
	}

	public final CastFunctionContext castFunction() throws RecognitionException {
		CastFunctionContext _localctx = new CastFunctionContext(_ctx, getState());
		enterRule(_localctx, 968, RULE_castFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4164);
			match(CAST);
			setState(4165);
			match(LEFT_PAREN);
			setState(4166);
			expression(0);
			setState(4167);
			match(AS);
			setState(4168);
			valueType(0);
			setState(4169);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ElementIdFunctionContext extends ParserRuleContext {
		public TerminalNode ELEMENT_ID() { return getToken(GQLParser.ELEMENT_ID, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public ElementIdFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elementIdFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterElementIdFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitElementIdFunction(this);
		}
	}

	public final ElementIdFunctionContext elementIdFunction() throws RecognitionException {
		ElementIdFunctionContext _localctx = new ElementIdFunctionContext(_ctx, getState());
		enterRule(_localctx, 970, RULE_elementIdFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4171);
			match(ELEMENT_ID);
			setState(4172);
			match(LEFT_PAREN);
			setState(4173);
			variable();
			setState(4174);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DatetimeValueFunctionContext extends ParserRuleContext {
		public DateFunctionContext dateFunction() {
			return getRuleContext(DateFunctionContext.class,0);
		}
		public TimeFunctionContext timeFunction() {
			return getRuleContext(TimeFunctionContext.class,0);
		}
		public DatetimeFunctionContext datetimeFunction() {
			return getRuleContext(DatetimeFunctionContext.class,0);
		}
		public LocalTimeFunctionContext localTimeFunction() {
			return getRuleContext(LocalTimeFunctionContext.class,0);
		}
		public LocalDatetimeFunctionContext localDatetimeFunction() {
			return getRuleContext(LocalDatetimeFunctionContext.class,0);
		}
		public DatetimeValueFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetimeValueFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterDatetimeValueFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitDatetimeValueFunction(this);
		}
	}

	public final DatetimeValueFunctionContext datetimeValueFunction() throws RecognitionException {
		DatetimeValueFunctionContext _localctx = new DatetimeValueFunctionContext(_ctx, getState());
		enterRule(_localctx, 972, RULE_datetimeValueFunction);
		try {
			setState(4181);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT_DATE:
			case DATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4176);
				dateFunction();
				}
				break;
			case CURRENT_TIME:
			case ZONED_TIME:
				enterOuterAlt(_localctx, 2);
				{
				setState(4177);
				timeFunction();
				}
				break;
			case CURRENT_TIMESTAMP:
			case ZONED_DATETIME:
				enterOuterAlt(_localctx, 3);
				{
				setState(4178);
				datetimeFunction();
				}
				break;
			case LOCAL_TIME:
				enterOuterAlt(_localctx, 4);
				{
				setState(4179);
				localTimeFunction();
				}
				break;
			case LOCAL_DATETIME:
			case LOCAL_TIMESTAMP:
				enterOuterAlt(_localctx, 5);
				{
				setState(4180);
				localDatetimeFunction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DateFunctionContext extends ParserRuleContext {
		public TerminalNode CURRENT_DATE() { return getToken(GQLParser.CURRENT_DATE, 0); }
		public TerminalNode DATE() { return getToken(GQLParser.DATE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public DateFunctionParametersContext dateFunctionParameters() {
			return getRuleContext(DateFunctionParametersContext.class,0);
		}
		public DateFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dateFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterDateFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitDateFunction(this);
		}
	}

	public final DateFunctionContext dateFunction() throws RecognitionException {
		DateFunctionContext _localctx = new DateFunctionContext(_ctx, getState());
		enterRule(_localctx, 974, RULE_dateFunction);
		int _la;
		try {
			setState(4190);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT_DATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4183);
				match(CURRENT_DATE);
				}
				break;
			case DATE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4184);
				match(DATE);
				setState(4185);
				match(LEFT_PAREN);
				setState(4187);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_BRACE || _la==RECORD || _la==SINGLE_QUOTED_STRING_LITERAL || _la==DOUBLE_QUOTED_STRING_LITERAL) {
					{
					setState(4186);
					dateFunctionParameters();
					}
				}

				setState(4189);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TimeFunctionContext extends ParserRuleContext {
		public TerminalNode CURRENT_TIME() { return getToken(GQLParser.CURRENT_TIME, 0); }
		public TerminalNode ZONED_TIME() { return getToken(GQLParser.ZONED_TIME, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public TimeFunctionParametersContext timeFunctionParameters() {
			return getRuleContext(TimeFunctionParametersContext.class,0);
		}
		public TimeFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timeFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterTimeFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitTimeFunction(this);
		}
	}

	public final TimeFunctionContext timeFunction() throws RecognitionException {
		TimeFunctionContext _localctx = new TimeFunctionContext(_ctx, getState());
		enterRule(_localctx, 976, RULE_timeFunction);
		int _la;
		try {
			setState(4199);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT_TIME:
				enterOuterAlt(_localctx, 1);
				{
				setState(4192);
				match(CURRENT_TIME);
				}
				break;
			case ZONED_TIME:
				enterOuterAlt(_localctx, 2);
				{
				setState(4193);
				match(ZONED_TIME);
				setState(4194);
				match(LEFT_PAREN);
				setState(4196);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_BRACE || _la==RECORD || _la==SINGLE_QUOTED_STRING_LITERAL || _la==DOUBLE_QUOTED_STRING_LITERAL) {
					{
					setState(4195);
					timeFunctionParameters();
					}
				}

				setState(4198);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LocalTimeFunctionContext extends ParserRuleContext {
		public TerminalNode LOCAL_TIME() { return getToken(GQLParser.LOCAL_TIME, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public TimeFunctionParametersContext timeFunctionParameters() {
			return getRuleContext(TimeFunctionParametersContext.class,0);
		}
		public LocalTimeFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_localTimeFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterLocalTimeFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitLocalTimeFunction(this);
		}
	}

	public final LocalTimeFunctionContext localTimeFunction() throws RecognitionException {
		LocalTimeFunctionContext _localctx = new LocalTimeFunctionContext(_ctx, getState());
		enterRule(_localctx, 978, RULE_localTimeFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4201);
			match(LOCAL_TIME);
			setState(4207);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,477,_ctx) ) {
			case 1:
				{
				setState(4202);
				match(LEFT_PAREN);
				setState(4204);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_BRACE || _la==RECORD || _la==SINGLE_QUOTED_STRING_LITERAL || _la==DOUBLE_QUOTED_STRING_LITERAL) {
					{
					setState(4203);
					timeFunctionParameters();
					}
				}

				setState(4206);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DatetimeFunctionContext extends ParserRuleContext {
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(GQLParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode ZONED_DATETIME() { return getToken(GQLParser.ZONED_DATETIME, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public DatetimeFunctionParametersContext datetimeFunctionParameters() {
			return getRuleContext(DatetimeFunctionParametersContext.class,0);
		}
		public DatetimeFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetimeFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterDatetimeFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitDatetimeFunction(this);
		}
	}

	public final DatetimeFunctionContext datetimeFunction() throws RecognitionException {
		DatetimeFunctionContext _localctx = new DatetimeFunctionContext(_ctx, getState());
		enterRule(_localctx, 980, RULE_datetimeFunction);
		int _la;
		try {
			setState(4216);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT_TIMESTAMP:
				enterOuterAlt(_localctx, 1);
				{
				setState(4209);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case ZONED_DATETIME:
				enterOuterAlt(_localctx, 2);
				{
				setState(4210);
				match(ZONED_DATETIME);
				setState(4211);
				match(LEFT_PAREN);
				setState(4213);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_BRACE || _la==RECORD || _la==SINGLE_QUOTED_STRING_LITERAL || _la==DOUBLE_QUOTED_STRING_LITERAL) {
					{
					setState(4212);
					datetimeFunctionParameters();
					}
				}

				setState(4215);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class LocalDatetimeFunctionContext extends ParserRuleContext {
		public TerminalNode LOCAL_TIMESTAMP() { return getToken(GQLParser.LOCAL_TIMESTAMP, 0); }
		public TerminalNode LOCAL_DATETIME() { return getToken(GQLParser.LOCAL_DATETIME, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public DatetimeFunctionParametersContext datetimeFunctionParameters() {
			return getRuleContext(DatetimeFunctionParametersContext.class,0);
		}
		public LocalDatetimeFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_localDatetimeFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterLocalDatetimeFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitLocalDatetimeFunction(this);
		}
	}

	public final LocalDatetimeFunctionContext localDatetimeFunction() throws RecognitionException {
		LocalDatetimeFunctionContext _localctx = new LocalDatetimeFunctionContext(_ctx, getState());
		enterRule(_localctx, 982, RULE_localDatetimeFunction);
		int _la;
		try {
			setState(4225);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCAL_TIMESTAMP:
				enterOuterAlt(_localctx, 1);
				{
				setState(4218);
				match(LOCAL_TIMESTAMP);
				}
				break;
			case LOCAL_DATETIME:
				enterOuterAlt(_localctx, 2);
				{
				setState(4219);
				match(LOCAL_DATETIME);
				setState(4220);
				match(LEFT_PAREN);
				setState(4222);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_BRACE || _la==RECORD || _la==SINGLE_QUOTED_STRING_LITERAL || _la==DOUBLE_QUOTED_STRING_LITERAL) {
					{
					setState(4221);
					datetimeFunctionParameters();
					}
				}

				setState(4224);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DateFunctionParametersContext extends ParserRuleContext {
		public DateStringContext dateString() {
			return getRuleContext(DateStringContext.class,0);
		}
		public RecordValueConstructorContext recordValueConstructor() {
			return getRuleContext(RecordValueConstructorContext.class,0);
		}
		public DateFunctionParametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dateFunctionParameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterDateFunctionParameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitDateFunctionParameters(this);
		}
	}

	public final DateFunctionParametersContext dateFunctionParameters() throws RecognitionException {
		DateFunctionParametersContext _localctx = new DateFunctionParametersContext(_ctx, getState());
		enterRule(_localctx, 984, RULE_dateFunctionParameters);
		try {
			setState(4229);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SINGLE_QUOTED_STRING_LITERAL:
			case DOUBLE_QUOTED_STRING_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4227);
				dateString();
				}
				break;
			case LEFT_BRACE:
			case RECORD:
				enterOuterAlt(_localctx, 2);
				{
				setState(4228);
				recordValueConstructor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TimeFunctionParametersContext extends ParserRuleContext {
		public TimeStringContext timeString() {
			return getRuleContext(TimeStringContext.class,0);
		}
		public RecordValueConstructorContext recordValueConstructor() {
			return getRuleContext(RecordValueConstructorContext.class,0);
		}
		public TimeFunctionParametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timeFunctionParameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterTimeFunctionParameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitTimeFunctionParameters(this);
		}
	}

	public final TimeFunctionParametersContext timeFunctionParameters() throws RecognitionException {
		TimeFunctionParametersContext _localctx = new TimeFunctionParametersContext(_ctx, getState());
		enterRule(_localctx, 986, RULE_timeFunctionParameters);
		try {
			setState(4233);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SINGLE_QUOTED_STRING_LITERAL:
			case DOUBLE_QUOTED_STRING_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4231);
				timeString();
				}
				break;
			case LEFT_BRACE:
			case RECORD:
				enterOuterAlt(_localctx, 2);
				{
				setState(4232);
				recordValueConstructor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DatetimeFunctionParametersContext extends ParserRuleContext {
		public DatetimeStringContext datetimeString() {
			return getRuleContext(DatetimeStringContext.class,0);
		}
		public RecordValueConstructorContext recordValueConstructor() {
			return getRuleContext(RecordValueConstructorContext.class,0);
		}
		public DatetimeFunctionParametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetimeFunctionParameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterDatetimeFunctionParameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitDatetimeFunctionParameters(this);
		}
	}

	public final DatetimeFunctionParametersContext datetimeFunctionParameters() throws RecognitionException {
		DatetimeFunctionParametersContext _localctx = new DatetimeFunctionParametersContext(_ctx, getState());
		enterRule(_localctx, 988, RULE_datetimeFunctionParameters);
		try {
			setState(4237);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SINGLE_QUOTED_STRING_LITERAL:
			case DOUBLE_QUOTED_STRING_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4235);
				datetimeString();
				}
				break;
			case LEFT_BRACE:
			case RECORD:
				enterOuterAlt(_localctx, 2);
				{
				setState(4236);
				recordValueConstructor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DateStringContext extends ParserRuleContext {
		public UnbrokenCharacterStringLiteralContext unbrokenCharacterStringLiteral() {
			return getRuleContext(UnbrokenCharacterStringLiteralContext.class,0);
		}
		public DateStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dateString; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterDateString(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitDateString(this);
		}
	}

	public final DateStringContext dateString() throws RecognitionException {
		DateStringContext _localctx = new DateStringContext(_ctx, getState());
		enterRule(_localctx, 990, RULE_dateString);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4239);
			unbrokenCharacterStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TimeStringContext extends ParserRuleContext {
		public UnbrokenCharacterStringLiteralContext unbrokenCharacterStringLiteral() {
			return getRuleContext(UnbrokenCharacterStringLiteralContext.class,0);
		}
		public TimeStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timeString; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterTimeString(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitTimeString(this);
		}
	}

	public final TimeStringContext timeString() throws RecognitionException {
		TimeStringContext _localctx = new TimeStringContext(_ctx, getState());
		enterRule(_localctx, 992, RULE_timeString);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4241);
			unbrokenCharacterStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DatetimeStringContext extends ParserRuleContext {
		public UnbrokenCharacterStringLiteralContext unbrokenCharacterStringLiteral() {
			return getRuleContext(UnbrokenCharacterStringLiteralContext.class,0);
		}
		public DatetimeStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetimeString; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterDatetimeString(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitDatetimeString(this);
		}
	}

	public final DatetimeStringContext datetimeString() throws RecognitionException {
		DatetimeStringContext _localctx = new DatetimeStringContext(_ctx, getState());
		enterRule(_localctx, 994, RULE_datetimeString);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4243);
			unbrokenCharacterStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DurationFunctionContext extends ParserRuleContext {
		public DurationFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_durationFunction; }
	 
		public DurationFunctionContext() { }
		public void copyFrom(DurationFunctionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlDatetimeSubtractionFunctionContext extends DurationFunctionContext {
		public TerminalNode DURATION_BETWEEN() { return getToken(GQLParser.DURATION_BETWEEN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(GQLParser.COMMA, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public GqlDatetimeSubtractionFunctionContext(DurationFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlDatetimeSubtractionFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlDatetimeSubtractionFunction(this);
		}
	}
	@SuppressWarnings("CheckReturnValue")
	public static class GqlDurationFunctionContext extends DurationFunctionContext {
		public TerminalNode DURATION() { return getToken(GQLParser.DURATION, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public DurationFunctionParametersContext durationFunctionParameters() {
			return getRuleContext(DurationFunctionParametersContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public GqlDurationFunctionContext(DurationFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGqlDurationFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGqlDurationFunction(this);
		}
	}

	public final DurationFunctionContext durationFunction() throws RecognitionException {
		DurationFunctionContext _localctx = new DurationFunctionContext(_ctx, getState());
		enterRule(_localctx, 996, RULE_durationFunction);
		try {
			setState(4257);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DURATION_BETWEEN:
				_localctx = new GqlDatetimeSubtractionFunctionContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(4245);
				match(DURATION_BETWEEN);
				setState(4246);
				match(LEFT_PAREN);
				setState(4247);
				expressionAtom(0);
				setState(4248);
				match(COMMA);
				setState(4249);
				expressionAtom(0);
				setState(4250);
				match(RIGHT_PAREN);
				}
				break;
			case DURATION:
				_localctx = new GqlDurationFunctionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(4252);
				match(DURATION);
				setState(4253);
				match(LEFT_PAREN);
				setState(4254);
				durationFunctionParameters();
				setState(4255);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DurationFunctionParametersContext extends ParserRuleContext {
		public DurationStringContext durationString() {
			return getRuleContext(DurationStringContext.class,0);
		}
		public RecordValueConstructorContext recordValueConstructor() {
			return getRuleContext(RecordValueConstructorContext.class,0);
		}
		public DurationFunctionParametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_durationFunctionParameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterDurationFunctionParameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitDurationFunctionParameters(this);
		}
	}

	public final DurationFunctionParametersContext durationFunctionParameters() throws RecognitionException {
		DurationFunctionParametersContext _localctx = new DurationFunctionParametersContext(_ctx, getState());
		enterRule(_localctx, 998, RULE_durationFunctionParameters);
		try {
			setState(4261);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SINGLE_QUOTED_STRING_LITERAL:
			case DOUBLE_QUOTED_STRING_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4259);
				durationString();
				}
				break;
			case LEFT_BRACE:
			case RECORD:
				enterOuterAlt(_localctx, 2);
				{
				setState(4260);
				recordValueConstructor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class DurationStringContext extends ParserRuleContext {
		public UnbrokenCharacterStringLiteralContext unbrokenCharacterStringLiteral() {
			return getRuleContext(UnbrokenCharacterStringLiteralContext.class,0);
		}
		public DurationStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_durationString; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterDurationString(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitDurationString(this);
		}
	}

	public final DurationStringContext durationString() throws RecognitionException {
		DurationStringContext _localctx = new DurationStringContext(_ctx, getState());
		enterRule(_localctx, 1000, RULE_durationString);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4263);
			unbrokenCharacterStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GeneralFunctionContext extends ParserRuleContext {
		public FunctionNameContext functionName() {
			return getRuleContext(FunctionNameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(GQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(GQLParser.RIGHT_PAREN, 0); }
		public ProcedureArgumentListContext procedureArgumentList() {
			return getRuleContext(ProcedureArgumentListContext.class,0);
		}
		public GeneralFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generalFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGeneralFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGeneralFunction(this);
		}
	}

	public final GeneralFunctionContext generalFunction() throws RecognitionException {
		GeneralFunctionContext _localctx = new GeneralFunctionContext(_ctx, getState());
		enterRule(_localctx, 1002, RULE_generalFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4265);
			functionName();
			setState(4266);
			match(LEFT_PAREN);
			setState(4268);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -268280512L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -1L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -1L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & 1649267441663L) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & 36671L) != 0)) {
				{
				setState(4267);
				procedureArgumentList();
				}
			}

			setState(4270);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class CollectionValueConstructorContext extends ParserRuleContext {
		public ListValueConstructorContext listValueConstructor() {
			return getRuleContext(ListValueConstructorContext.class,0);
		}
		public RecordValueConstructorContext recordValueConstructor() {
			return getRuleContext(RecordValueConstructorContext.class,0);
		}
		public PathValueConstructorContext pathValueConstructor() {
			return getRuleContext(PathValueConstructorContext.class,0);
		}
		public CollectionValueConstructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collectionValueConstructor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterCollectionValueConstructor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitCollectionValueConstructor(this);
		}
	}

	public final CollectionValueConstructorContext collectionValueConstructor() throws RecognitionException {
		CollectionValueConstructorContext _localctx = new CollectionValueConstructorContext(_ctx, getState());
		enterRule(_localctx, 1004, RULE_collectionValueConstructor);
		try {
			setState(4275);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_BRACKET:
			case ARRAY:
			case GROUP:
			case LIST:
				enterOuterAlt(_localctx, 1);
				{
				setState(4272);
				listValueConstructor();
				}
				break;
			case LEFT_BRACE:
			case RECORD:
				enterOuterAlt(_localctx, 2);
				{
				setState(4273);
				recordValueConstructor();
				}
				break;
			case PATH:
				enterOuterAlt(_localctx, 3);
				{
				setState(4274);
				pathValueConstructor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class TrimSpecificationContext extends ParserRuleContext {
		public TerminalNode LEADING() { return getToken(GQLParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(GQLParser.TRAILING, 0); }
		public TerminalNode BOTH() { return getToken(GQLParser.BOTH, 0); }
		public TrimSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trimSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterTrimSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitTrimSpecification(this);
		}
	}

	public final TrimSpecificationContext trimSpecification() throws RecognitionException {
		TrimSpecificationContext _localctx = new TrimSpecificationContext(_ctx, getState());
		enterRule(_localctx, 1006, RULE_trimSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4277);
			_la = _input.LA(1);
			if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class NormalFormContext extends ParserRuleContext {
		public TerminalNode NFC() { return getToken(GQLParser.NFC, 0); }
		public TerminalNode NFD() { return getToken(GQLParser.NFD, 0); }
		public TerminalNode NFKC() { return getToken(GQLParser.NFKC, 0); }
		public TerminalNode NFKD() { return getToken(GQLParser.NFKD, 0); }
		public NormalFormContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_normalForm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterNormalForm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitNormalForm(this);
		}
	}

	public final NormalFormContext normalForm() throws RecognitionException {
		NormalFormContext _localctx = new NormalFormContext(_ctx, getState());
		enterRule(_localctx, 1008, RULE_normalForm);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4279);
			_la = _input.LA(1);
			if ( !(((((_la - 175)) & ~0x3f) == 0 && ((1L << (_la - 175)) & 15L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ListValueConstructorContext extends ParserRuleContext {
		public TerminalNode LEFT_BRACKET() { return getToken(GQLParser.LEFT_BRACKET, 0); }
		public TerminalNode RIGHT_BRACKET() { return getToken(GQLParser.RIGHT_BRACKET, 0); }
		public ListValueTypeNameContext listValueTypeName() {
			return getRuleContext(ListValueTypeNameContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQLParser.COMMA, i);
		}
		public ListValueConstructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listValueConstructor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterListValueConstructor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitListValueConstructor(this);
		}
	}

	public final ListValueConstructorContext listValueConstructor() throws RecognitionException {
		ListValueConstructorContext _localctx = new ListValueConstructorContext(_ctx, getState());
		enterRule(_localctx, 1010, RULE_listValueConstructor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4282);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ARRAY || _la==GROUP || _la==LIST) {
				{
				setState(4281);
				listValueTypeName();
				}
			}

			setState(4284);
			match(LEFT_BRACKET);
			setState(4293);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & -268280512L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -1L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -1L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & 1649267441663L) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & 36671L) != 0)) {
				{
				setState(4285);
				expression(0);
				setState(4290);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4286);
					match(COMMA);
					setState(4287);
					expression(0);
					}
					}
					setState(4292);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(4295);
			match(RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RecordValueConstructorContext extends ParserRuleContext {
		public TerminalNode LEFT_BRACE() { return getToken(GQLParser.LEFT_BRACE, 0); }
		public TerminalNode RIGHT_BRACE() { return getToken(GQLParser.RIGHT_BRACE, 0); }
		public TerminalNode RECORD() { return getToken(GQLParser.RECORD, 0); }
		public List<FieldContext> field() {
			return getRuleContexts(FieldContext.class);
		}
		public FieldContext field(int i) {
			return getRuleContext(FieldContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQLParser.COMMA, i);
		}
		public RecordValueConstructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_recordValueConstructor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterRecordValueConstructor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitRecordValueConstructor(this);
		}
	}

	public final RecordValueConstructorContext recordValueConstructor() throws RecognitionException {
		RecordValueConstructorContext _localctx = new RecordValueConstructorContext(_ctx, getState());
		enterRule(_localctx, 1012, RULE_recordValueConstructor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4298);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RECORD) {
				{
				setState(4297);
				match(RECORD);
				}
			}

			setState(4300);
			match(LEFT_BRACE);
			setState(4309);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & -1L) != 0) || ((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & -1L) != 0) || ((((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & -1L) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -1L) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & 603482350067652607L) != 0)) {
				{
				setState(4301);
				field();
				setState(4306);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4302);
					match(COMMA);
					setState(4303);
					field();
					}
					}
					setState(4308);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(4311);
			match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class FieldContext extends ParserRuleContext {
		public FieldNameContext key;
		public ExpressionContext value;
		public TerminalNode COLON() { return getToken(GQLParser.COLON, 0); }
		public FieldNameContext fieldName() {
			return getRuleContext(FieldNameContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public FieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_field; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitField(this);
		}
	}

	public final FieldContext field() throws RecognitionException {
		FieldContext _localctx = new FieldContext(_ctx, getState());
		enterRule(_localctx, 1014, RULE_field);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4313);
			((FieldContext)_localctx).key = fieldName();
			setState(4314);
			match(COLON);
			setState(4315);
			((FieldContext)_localctx).value = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class PathValueConstructorContext extends ParserRuleContext {
		public TerminalNode PATH() { return getToken(GQLParser.PATH, 0); }
		public TerminalNode LEFT_BRACKET() { return getToken(GQLParser.LEFT_BRACKET, 0); }
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public TerminalNode RIGHT_BRACKET() { return getToken(GQLParser.RIGHT_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(GQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQLParser.COMMA, i);
		}
		public PathValueConstructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pathValueConstructor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterPathValueConstructor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitPathValueConstructor(this);
		}
	}

	public final PathValueConstructorContext pathValueConstructor() throws RecognitionException {
		PathValueConstructorContext _localctx = new PathValueConstructorContext(_ctx, getState());
		enterRule(_localctx, 1016, RULE_pathValueConstructor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4317);
			match(PATH);
			setState(4318);
			match(LEFT_BRACKET);
			setState(4319);
			expressionAtom(0);
			setState(4327);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4320);
				match(COMMA);
				setState(4321);
				expressionAtom(0);
				setState(4322);
				match(COMMA);
				setState(4323);
				expressionAtom(0);
				}
				}
				setState(4329);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4330);
			match(RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class UnsignedLiteralContext extends ParserRuleContext {
		public UnsignedNumericLiteralContext unsignedNumericLiteral() {
			return getRuleContext(UnsignedNumericLiteralContext.class,0);
		}
		public GeneralLiteralContext generalLiteral() {
			return getRuleContext(GeneralLiteralContext.class,0);
		}
		public UnsignedLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unsignedLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterUnsignedLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitUnsignedLiteral(this);
		}
	}

	public final UnsignedLiteralContext unsignedLiteral() throws RecognitionException {
		UnsignedLiteralContext _localctx = new UnsignedLiteralContext(_ctx, getState());
		enterRule(_localctx, 1018, RULE_unsignedLiteral);
		try {
			setState(4334);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,496,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4332);
				unsignedNumericLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4333);
				generalLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class GeneralLiteralContext extends ParserRuleContext {
		public PredefinedTypeLiteralContext predefinedTypeLiteral() {
			return getRuleContext(PredefinedTypeLiteralContext.class,0);
		}
		public ListLiteralContext listLiteral() {
			return getRuleContext(ListLiteralContext.class,0);
		}
		public RecordLiteralContext recordLiteral() {
			return getRuleContext(RecordLiteralContext.class,0);
		}
		public GeneralLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generalLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterGeneralLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitGeneralLiteral(this);
		}
	}

	public final GeneralLiteralContext generalLiteral() throws RecognitionException {
		GeneralLiteralContext _localctx = new GeneralLiteralContext(_ctx, getState());
		enterRule(_localctx, 1020, RULE_generalLiteral);
		try {
			setState(4339);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATE:
			case DATETIME:
			case DURATION:
			case K_FALSE:
			case NULL:
			case TIME:
			case TIMESTAMP:
			case K_TRUE:
			case UNKNOWN:
			case UNSIGNED_DECIMAL_INTEGER:
			case SINGLE_QUOTED_STRING_LITERAL:
			case DOUBLE_QUOTED_STRING_LITERAL:
			case BYTE_STRING_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(4336);
				predefinedTypeLiteral();
				}
				break;
			case LEFT_BRACKET:
			case ARRAY:
			case GROUP:
			case LIST:
				enterOuterAlt(_localctx, 2);
				{
				setState(4337);
				listLiteral();
				}
				break;
			case LEFT_BRACE:
			case RECORD:
				enterOuterAlt(_localctx, 3);
				{
				setState(4338);
				recordLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class ListLiteralContext extends ParserRuleContext {
		public TerminalNode LEFT_BRACKET() { return getToken(GQLParser.LEFT_BRACKET, 0); }
		public TerminalNode RIGHT_BRACKET() { return getToken(GQLParser.RIGHT_BRACKET, 0); }
		public ListValueTypeNameContext listValueTypeName() {
			return getRuleContext(ListValueTypeNameContext.class,0);
		}
		public List<GeneralLiteralContext> generalLiteral() {
			return getRuleContexts(GeneralLiteralContext.class);
		}
		public GeneralLiteralContext generalLiteral(int i) {
			return getRuleContext(GeneralLiteralContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQLParser.COMMA, i);
		}
		public ListLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterListLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitListLiteral(this);
		}
	}

	public final ListLiteralContext listLiteral() throws RecognitionException {
		ListLiteralContext _localctx = new ListLiteralContext(_ctx, getState());
		enterRule(_localctx, 1022, RULE_listLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4342);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ARRAY || _la==GROUP || _la==LIST) {
				{
				setState(4341);
				listValueTypeName();
				}
			}

			setState(4344);
			match(LEFT_BRACKET);
			setState(4353);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 34359741440L) != 0) || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & 549789401091L) != 0) || ((((_la - 160)) & ~0x3f) == 0 && ((1L << (_la - 160)) & 4503599644147713L) != 0) || ((((_la - 245)) & ~0x3f) == 0 && ((1L << (_la - 245)) & 2097411L) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & 2817L) != 0)) {
				{
				setState(4345);
				generalLiteral();
				setState(4350);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4346);
					match(COMMA);
					setState(4347);
					generalLiteral();
					}
					}
					setState(4352);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(4355);
			match(RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RecordLiteralContext extends ParserRuleContext {
		public TerminalNode LEFT_BRACE() { return getToken(GQLParser.LEFT_BRACE, 0); }
		public TerminalNode RIGHT_BRACE() { return getToken(GQLParser.RIGHT_BRACE, 0); }
		public TerminalNode RECORD() { return getToken(GQLParser.RECORD, 0); }
		public List<RecordFieldLiteralContext> recordFieldLiteral() {
			return getRuleContexts(RecordFieldLiteralContext.class);
		}
		public RecordFieldLiteralContext recordFieldLiteral(int i) {
			return getRuleContext(RecordFieldLiteralContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(GQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(GQLParser.COMMA, i);
		}
		public RecordLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_recordLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterRecordLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitRecordLiteral(this);
		}
	}

	public final RecordLiteralContext recordLiteral() throws RecognitionException {
		RecordLiteralContext _localctx = new RecordLiteralContext(_ctx, getState());
		enterRule(_localctx, 1024, RULE_recordLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4358);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RECORD) {
				{
				setState(4357);
				match(RECORD);
				}
			}

			setState(4360);
			match(LEFT_BRACE);
			setState(4369);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & -1L) != 0) || ((((_la - 92)) & ~0x3f) == 0 && ((1L << (_la - 92)) & -1L) != 0) || ((((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & -1L) != 0) || ((((_la - 220)) & ~0x3f) == 0 && ((1L << (_la - 220)) & -1L) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & 603482350067652607L) != 0)) {
				{
				setState(4361);
				recordFieldLiteral();
				setState(4366);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4362);
					match(COMMA);
					setState(4363);
					recordFieldLiteral();
					}
					}
					setState(4368);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(4371);
			match(RIGHT_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class RecordFieldLiteralContext extends ParserRuleContext {
		public VariableContext key;
		public GeneralLiteralContext value;
		public TerminalNode COLON() { return getToken(GQLParser.COLON, 0); }
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public GeneralLiteralContext generalLiteral() {
			return getRuleContext(GeneralLiteralContext.class,0);
		}
		public RecordFieldLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_recordFieldLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterRecordFieldLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitRecordFieldLiteral(this);
		}
	}

	public final RecordFieldLiteralContext recordFieldLiteral() throws RecognitionException {
		RecordFieldLiteralContext _localctx = new RecordFieldLiteralContext(_ctx, getState());
		enterRule(_localctx, 1026, RULE_recordFieldLiteral);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4373);
			((RecordFieldLiteralContext)_localctx).key = variable();
			setState(4374);
			match(COLON);
			setState(4375);
			((RecordFieldLiteralContext)_localctx).value = generalLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	@SuppressWarnings("CheckReturnValue")
	public static class KeywordContext extends ParserRuleContext {
		public TerminalNode ABS() { return getToken(GQLParser.ABS, 0); }
		public TerminalNode ACOS() { return getToken(GQLParser.ACOS, 0); }
		public TerminalNode ACYCLIC() { return getToken(GQLParser.ACYCLIC, 0); }
		public TerminalNode ALL() { return getToken(GQLParser.ALL, 0); }
		public TerminalNode ALL_DIFFERENT() { return getToken(GQLParser.ALL_DIFFERENT, 0); }
		public TerminalNode AND() { return getToken(GQLParser.AND, 0); }
		public TerminalNode ANY() { return getToken(GQLParser.ANY, 0); }
		public TerminalNode ARRAY() { return getToken(GQLParser.ARRAY, 0); }
		public TerminalNode AS() { return getToken(GQLParser.AS, 0); }
		public TerminalNode ASC() { return getToken(GQLParser.ASC, 0); }
		public TerminalNode ASCENDING() { return getToken(GQLParser.ASCENDING, 0); }
		public TerminalNode ASIN() { return getToken(GQLParser.ASIN, 0); }
		public TerminalNode AT() { return getToken(GQLParser.AT, 0); }
		public TerminalNode ATAN() { return getToken(GQLParser.ATAN, 0); }
		public TerminalNode AVG() { return getToken(GQLParser.AVG, 0); }
		public TerminalNode BIG() { return getToken(GQLParser.BIG, 0); }
		public TerminalNode BIGINT() { return getToken(GQLParser.BIGINT, 0); }
		public TerminalNode BINARY() { return getToken(GQLParser.BINARY, 0); }
		public TerminalNode BINDING() { return getToken(GQLParser.BINDING, 0); }
		public TerminalNode BINDINGS() { return getToken(GQLParser.BINDINGS, 0); }
		public TerminalNode BOOL() { return getToken(GQLParser.BOOL, 0); }
		public TerminalNode BOOLEAN() { return getToken(GQLParser.BOOLEAN, 0); }
		public TerminalNode BOTH() { return getToken(GQLParser.BOTH, 0); }
		public TerminalNode BTRIM() { return getToken(GQLParser.BTRIM, 0); }
		public TerminalNode BY() { return getToken(GQLParser.BY, 0); }
		public TerminalNode BYTE_LENGTH() { return getToken(GQLParser.BYTE_LENGTH, 0); }
		public TerminalNode BYTES() { return getToken(GQLParser.BYTES, 0); }
		public TerminalNode CALL() { return getToken(GQLParser.CALL, 0); }
		public TerminalNode CASE() { return getToken(GQLParser.CASE, 0); }
		public TerminalNode CAST() { return getToken(GQLParser.CAST, 0); }
		public TerminalNode CEIL() { return getToken(GQLParser.CEIL, 0); }
		public TerminalNode CEILING() { return getToken(GQLParser.CEILING, 0); }
		public TerminalNode CHAR_LENGTH() { return getToken(GQLParser.CHAR_LENGTH, 0); }
		public TerminalNode CHARACTER_LENGTH() { return getToken(GQLParser.CHARACTER_LENGTH, 0); }
		public TerminalNode CHARACTERISTICS() { return getToken(GQLParser.CHARACTERISTICS, 0); }
		public TerminalNode CLOSE() { return getToken(GQLParser.CLOSE, 0); }
		public TerminalNode COALESCE() { return getToken(GQLParser.COALESCE, 0); }
		public TerminalNode COLLECT() { return getToken(GQLParser.COLLECT, 0); }
		public TerminalNode COMMIT() { return getToken(GQLParser.COMMIT, 0); }
		public TerminalNode CONNECTING() { return getToken(GQLParser.CONNECTING, 0); }
		public TerminalNode COPY() { return getToken(GQLParser.COPY, 0); }
		public TerminalNode COS() { return getToken(GQLParser.COS, 0); }
		public TerminalNode COSH() { return getToken(GQLParser.COSH, 0); }
		public TerminalNode COT() { return getToken(GQLParser.COT, 0); }
		public TerminalNode COUNT() { return getToken(GQLParser.COUNT, 0); }
		public TerminalNode CREATE() { return getToken(GQLParser.CREATE, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(GQLParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_GRAPH() { return getToken(GQLParser.CURRENT_GRAPH, 0); }
		public TerminalNode CURRENT_PROPERTY_GRAPH() { return getToken(GQLParser.CURRENT_PROPERTY_GRAPH, 0); }
		public TerminalNode CURRENT_SCHEMA() { return getToken(GQLParser.CURRENT_SCHEMA, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(GQLParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(GQLParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(GQLParser.CURRENT_USER, 0); }
		public TerminalNode DATE() { return getToken(GQLParser.DATE, 0); }
		public TerminalNode DATETIME() { return getToken(GQLParser.DATETIME, 0); }
		public TerminalNode DEC() { return getToken(GQLParser.DEC, 0); }
		public TerminalNode DECIMAL() { return getToken(GQLParser.DECIMAL, 0); }
		public TerminalNode DEGREES() { return getToken(GQLParser.DEGREES, 0); }
		public TerminalNode DELETE() { return getToken(GQLParser.DELETE, 0); }
		public TerminalNode DESC() { return getToken(GQLParser.DESC, 0); }
		public TerminalNode DESCENDING() { return getToken(GQLParser.DESCENDING, 0); }
		public TerminalNode DESTINATION() { return getToken(GQLParser.DESTINATION, 0); }
		public TerminalNode DETACH() { return getToken(GQLParser.DETACH, 0); }
		public TerminalNode DIFFERENT() { return getToken(GQLParser.DIFFERENT, 0); }
		public TerminalNode DIRECTED() { return getToken(GQLParser.DIRECTED, 0); }
		public TerminalNode DISTINCT() { return getToken(GQLParser.DISTINCT, 0); }
		public TerminalNode DOUBLE() { return getToken(GQLParser.DOUBLE, 0); }
		public TerminalNode DROP() { return getToken(GQLParser.DROP, 0); }
		public TerminalNode DURATION() { return getToken(GQLParser.DURATION, 0); }
		public TerminalNode DURATION_BETWEEN() { return getToken(GQLParser.DURATION_BETWEEN, 0); }
		public TerminalNode ELEMENT() { return getToken(GQLParser.ELEMENT, 0); }
		public TerminalNode ELEMENT_ID() { return getToken(GQLParser.ELEMENT_ID, 0); }
		public TerminalNode ELEMENTS() { return getToken(GQLParser.ELEMENTS, 0); }
		public TerminalNode ELSE() { return getToken(GQLParser.ELSE, 0); }
		public TerminalNode END() { return getToken(GQLParser.END, 0); }
		public TerminalNode EXCEPT() { return getToken(GQLParser.EXCEPT, 0); }
		public TerminalNode EXISTS() { return getToken(GQLParser.EXISTS, 0); }
		public TerminalNode EXP() { return getToken(GQLParser.EXP, 0); }
		public TerminalNode K_FALSE() { return getToken(GQLParser.K_FALSE, 0); }
		public TerminalNode FILTER() { return getToken(GQLParser.FILTER, 0); }
		public TerminalNode FINISH() { return getToken(GQLParser.FINISH, 0); }
		public TerminalNode FIRST() { return getToken(GQLParser.FIRST, 0); }
		public TerminalNode FLOAT() { return getToken(GQLParser.FLOAT, 0); }
		public TerminalNode FLOAT128() { return getToken(GQLParser.FLOAT128, 0); }
		public TerminalNode FLOAT16() { return getToken(GQLParser.FLOAT16, 0); }
		public TerminalNode FLOAT256() { return getToken(GQLParser.FLOAT256, 0); }
		public TerminalNode FLOAT32() { return getToken(GQLParser.FLOAT32, 0); }
		public TerminalNode FLOAT64() { return getToken(GQLParser.FLOAT64, 0); }
		public TerminalNode FLOOR() { return getToken(GQLParser.FLOOR, 0); }
		public TerminalNode FOR() { return getToken(GQLParser.FOR, 0); }
		public TerminalNode FROM() { return getToken(GQLParser.FROM, 0); }
		public TerminalNode GRAPH() { return getToken(GQLParser.GRAPH, 0); }
		public TerminalNode GROUP() { return getToken(GQLParser.GROUP, 0); }
		public TerminalNode GROUPS() { return getToken(GQLParser.GROUPS, 0); }
		public TerminalNode HAVING() { return getToken(GQLParser.HAVING, 0); }
		public TerminalNode HOME_GRAPH() { return getToken(GQLParser.HOME_GRAPH, 0); }
		public TerminalNode HOME_PROPERTY_GRAPH() { return getToken(GQLParser.HOME_PROPERTY_GRAPH, 0); }
		public TerminalNode HOME_SCHEMA() { return getToken(GQLParser.HOME_SCHEMA, 0); }
		public TerminalNode I_DONT_KNOW_1() { return getToken(GQLParser.I_DONT_KNOW_1, 0); }
		public TerminalNode I_DONT_KNOW_2() { return getToken(GQLParser.I_DONT_KNOW_2, 0); }
		public TerminalNode I_DONT_KNOW_3() { return getToken(GQLParser.I_DONT_KNOW_3, 0); }
		public TerminalNode I_DONT_KNOW_4() { return getToken(GQLParser.I_DONT_KNOW_4, 0); }
		public TerminalNode I_DONT_KNOW_5() { return getToken(GQLParser.I_DONT_KNOW_5, 0); }
		public TerminalNode IF() { return getToken(GQLParser.IF, 0); }
		public TerminalNode IN() { return getToken(GQLParser.IN, 0); }
		public TerminalNode INSERT() { return getToken(GQLParser.INSERT, 0); }
		public TerminalNode INT() { return getToken(GQLParser.INT, 0); }
		public TerminalNode INT8() { return getToken(GQLParser.INT8, 0); }
		public TerminalNode INT16() { return getToken(GQLParser.INT16, 0); }
		public TerminalNode INT32() { return getToken(GQLParser.INT32, 0); }
		public TerminalNode INT64() { return getToken(GQLParser.INT64, 0); }
		public TerminalNode INT128() { return getToken(GQLParser.INT128, 0); }
		public TerminalNode INT256() { return getToken(GQLParser.INT256, 0); }
		public TerminalNode INTEGER() { return getToken(GQLParser.INTEGER, 0); }
		public TerminalNode INTEGER8() { return getToken(GQLParser.INTEGER8, 0); }
		public TerminalNode INTEGER16() { return getToken(GQLParser.INTEGER16, 0); }
		public TerminalNode INTEGER32() { return getToken(GQLParser.INTEGER32, 0); }
		public TerminalNode INTEGER64() { return getToken(GQLParser.INTEGER64, 0); }
		public TerminalNode INTEGER128() { return getToken(GQLParser.INTEGER128, 0); }
		public TerminalNode INTEGER256() { return getToken(GQLParser.INTEGER256, 0); }
		public TerminalNode INTERSECT() { return getToken(GQLParser.INTERSECT, 0); }
		public TerminalNode IS() { return getToken(GQLParser.IS, 0); }
		public TerminalNode KEEP() { return getToken(GQLParser.KEEP, 0); }
		public TerminalNode LABEL() { return getToken(GQLParser.LABEL, 0); }
		public TerminalNode LABELED() { return getToken(GQLParser.LABELED, 0); }
		public TerminalNode LABELS() { return getToken(GQLParser.LABELS, 0); }
		public TerminalNode LAST() { return getToken(GQLParser.LAST, 0); }
		public TerminalNode LEADING() { return getToken(GQLParser.LEADING, 0); }
		public TerminalNode LEFT() { return getToken(GQLParser.LEFT, 0); }
		public TerminalNode LET() { return getToken(GQLParser.LET, 0); }
		public TerminalNode LIKE() { return getToken(GQLParser.LIKE, 0); }
		public TerminalNode LIMIT() { return getToken(GQLParser.LIMIT, 0); }
		public TerminalNode LIST() { return getToken(GQLParser.LIST, 0); }
		public TerminalNode LN() { return getToken(GQLParser.LN, 0); }
		public TerminalNode LOCAL() { return getToken(GQLParser.LOCAL, 0); }
		public TerminalNode LOCAL_DATETIME() { return getToken(GQLParser.LOCAL_DATETIME, 0); }
		public TerminalNode LOCAL_TIME() { return getToken(GQLParser.LOCAL_TIME, 0); }
		public TerminalNode LOCAL_TIMESTAMP() { return getToken(GQLParser.LOCAL_TIMESTAMP, 0); }
		public TerminalNode LOG() { return getToken(GQLParser.LOG, 0); }
		public TerminalNode LOG10() { return getToken(GQLParser.LOG10, 0); }
		public TerminalNode LOWER() { return getToken(GQLParser.LOWER, 0); }
		public TerminalNode LTRIM() { return getToken(GQLParser.LTRIM, 0); }
		public TerminalNode MATCH() { return getToken(GQLParser.MATCH, 0); }
		public TerminalNode MAX() { return getToken(GQLParser.MAX, 0); }
		public TerminalNode MIN() { return getToken(GQLParser.MIN, 0); }
		public TerminalNode MOD() { return getToken(GQLParser.MOD, 0); }
		public TerminalNode NEXT() { return getToken(GQLParser.NEXT, 0); }
		public TerminalNode NFC() { return getToken(GQLParser.NFC, 0); }
		public TerminalNode NFD() { return getToken(GQLParser.NFD, 0); }
		public TerminalNode NFKC() { return getToken(GQLParser.NFKC, 0); }
		public TerminalNode NFKD() { return getToken(GQLParser.NFKD, 0); }
		public TerminalNode NO() { return getToken(GQLParser.NO, 0); }
		public TerminalNode NODETACH() { return getToken(GQLParser.NODETACH, 0); }
		public TerminalNode NORMALIZE() { return getToken(GQLParser.NORMALIZE, 0); }
		public TerminalNode NORMALIZED() { return getToken(GQLParser.NORMALIZED, 0); }
		public TerminalNode NOT() { return getToken(GQLParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(GQLParser.NULL, 0); }
		public TerminalNode NULLIF() { return getToken(GQLParser.NULLIF, 0); }
		public TerminalNode NULLS() { return getToken(GQLParser.NULLS, 0); }
		public TerminalNode OCTET_LENGTH() { return getToken(GQLParser.OCTET_LENGTH, 0); }
		public TerminalNode OF() { return getToken(GQLParser.OF, 0); }
		public TerminalNode OFFSET() { return getToken(GQLParser.OFFSET, 0); }
		public TerminalNode SKIP_() { return getToken(GQLParser.SKIP_, 0); }
		public TerminalNode ONLY() { return getToken(GQLParser.ONLY, 0); }
		public TerminalNode OPEN() { return getToken(GQLParser.OPEN, 0); }
		public TerminalNode OPTIONAL() { return getToken(GQLParser.OPTIONAL, 0); }
		public TerminalNode OR() { return getToken(GQLParser.OR, 0); }
		public TerminalNode ORDER() { return getToken(GQLParser.ORDER, 0); }
		public TerminalNode ORDINALITY() { return getToken(GQLParser.ORDINALITY, 0); }
		public TerminalNode OTHERWISE() { return getToken(GQLParser.OTHERWISE, 0); }
		public TerminalNode PARAMETER() { return getToken(GQLParser.PARAMETER, 0); }
		public TerminalNode PARAMETERS() { return getToken(GQLParser.PARAMETERS, 0); }
		public TerminalNode PATH() { return getToken(GQLParser.PATH, 0); }
		public TerminalNode PATH_LENGTH() { return getToken(GQLParser.PATH_LENGTH, 0); }
		public TerminalNode PATHS() { return getToken(GQLParser.PATHS, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(GQLParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(GQLParser.PERCENTILE_DISC, 0); }
		public TerminalNode POWER() { return getToken(GQLParser.POWER, 0); }
		public TerminalNode PRECISION() { return getToken(GQLParser.PRECISION, 0); }
		public TerminalNode PROPERTY() { return getToken(GQLParser.PROPERTY, 0); }
		public TerminalNode PROPERTY_EXISTS() { return getToken(GQLParser.PROPERTY_EXISTS, 0); }
		public TerminalNode RADIANS() { return getToken(GQLParser.RADIANS, 0); }
		public TerminalNode READ() { return getToken(GQLParser.READ, 0); }
		public TerminalNode REAL() { return getToken(GQLParser.REAL, 0); }
		public TerminalNode RECORD() { return getToken(GQLParser.RECORD, 0); }
		public TerminalNode REMOVE() { return getToken(GQLParser.REMOVE, 0); }
		public TerminalNode REPEATABLE() { return getToken(GQLParser.REPEATABLE, 0); }
		public TerminalNode REPLACE() { return getToken(GQLParser.REPLACE, 0); }
		public TerminalNode RESET() { return getToken(GQLParser.RESET, 0); }
		public TerminalNode RETURN() { return getToken(GQLParser.RETURN, 0); }
		public TerminalNode ROLLBACK() { return getToken(GQLParser.ROLLBACK, 0); }
		public TerminalNode RTRIM() { return getToken(GQLParser.RTRIM, 0); }
		public TerminalNode RIGHT() { return getToken(GQLParser.RIGHT, 0); }
		public TerminalNode SAME() { return getToken(GQLParser.SAME, 0); }
		public TerminalNode SCHEMA() { return getToken(GQLParser.SCHEMA, 0); }
		public TerminalNode SELECT() { return getToken(GQLParser.SELECT, 0); }
		public TerminalNode SESSION() { return getToken(GQLParser.SESSION, 0); }
		public TerminalNode SET() { return getToken(GQLParser.SET, 0); }
		public TerminalNode SHORTEST() { return getToken(GQLParser.SHORTEST, 0); }
		public TerminalNode SIGNED() { return getToken(GQLParser.SIGNED, 0); }
		public TerminalNode SIMPLE() { return getToken(GQLParser.SIMPLE, 0); }
		public TerminalNode SIN() { return getToken(GQLParser.SIN, 0); }
		public TerminalNode SINH() { return getToken(GQLParser.SINH, 0); }
		public TerminalNode SMALL() { return getToken(GQLParser.SMALL, 0); }
		public TerminalNode SMALLINT() { return getToken(GQLParser.SMALLINT, 0); }
		public TerminalNode SOURCE() { return getToken(GQLParser.SOURCE, 0); }
		public TerminalNode SQRT() { return getToken(GQLParser.SQRT, 0); }
		public TerminalNode START() { return getToken(GQLParser.START, 0); }
		public TerminalNode STDDEV_POP() { return getToken(GQLParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(GQLParser.STDDEV_SAMP, 0); }
		public TerminalNode STRING() { return getToken(GQLParser.STRING, 0); }
		public TerminalNode SUM() { return getToken(GQLParser.SUM, 0); }
		public TerminalNode TABLE() { return getToken(GQLParser.TABLE, 0); }
		public TerminalNode TAN() { return getToken(GQLParser.TAN, 0); }
		public TerminalNode TANH() { return getToken(GQLParser.TANH, 0); }
		public TerminalNode TEMP() { return getToken(GQLParser.TEMP, 0); }
		public TerminalNode THEN() { return getToken(GQLParser.THEN, 0); }
		public TerminalNode TIME() { return getToken(GQLParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(GQLParser.TIMESTAMP, 0); }
		public TerminalNode TIMEZONE() { return getToken(GQLParser.TIMEZONE, 0); }
		public TerminalNode TO() { return getToken(GQLParser.TO, 0); }
		public TerminalNode TRAIL() { return getToken(GQLParser.TRAIL, 0); }
		public TerminalNode TRAILING() { return getToken(GQLParser.TRAILING, 0); }
		public TerminalNode TRANSACTION() { return getToken(GQLParser.TRANSACTION, 0); }
		public TerminalNode TRIM() { return getToken(GQLParser.TRIM, 0); }
		public TerminalNode K_TRUE() { return getToken(GQLParser.K_TRUE, 0); }
		public TerminalNode TYPE() { return getToken(GQLParser.TYPE, 0); }
		public TerminalNode TYPED() { return getToken(GQLParser.TYPED, 0); }
		public TerminalNode UBIGINT() { return getToken(GQLParser.UBIGINT, 0); }
		public TerminalNode UINT() { return getToken(GQLParser.UINT, 0); }
		public TerminalNode UINT128() { return getToken(GQLParser.UINT128, 0); }
		public TerminalNode UINT16() { return getToken(GQLParser.UINT16, 0); }
		public TerminalNode UINT256() { return getToken(GQLParser.UINT256, 0); }
		public TerminalNode UINT32() { return getToken(GQLParser.UINT32, 0); }
		public TerminalNode UINT64() { return getToken(GQLParser.UINT64, 0); }
		public TerminalNode UINT8() { return getToken(GQLParser.UINT8, 0); }
		public TerminalNode UNDIRECTED() { return getToken(GQLParser.UNDIRECTED, 0); }
		public TerminalNode UNION() { return getToken(GQLParser.UNION, 0); }
		public TerminalNode UNKNOWN() { return getToken(GQLParser.UNKNOWN, 0); }
		public TerminalNode UNSIGNED() { return getToken(GQLParser.UNSIGNED, 0); }
		public TerminalNode UPPER() { return getToken(GQLParser.UPPER, 0); }
		public TerminalNode USE() { return getToken(GQLParser.USE, 0); }
		public TerminalNode USMALLINT() { return getToken(GQLParser.USMALLINT, 0); }
		public TerminalNode VALUE() { return getToken(GQLParser.VALUE, 0); }
		public TerminalNode VARBINARY() { return getToken(GQLParser.VARBINARY, 0); }
		public TerminalNode VARCHAR() { return getToken(GQLParser.VARCHAR, 0); }
		public TerminalNode VARIABLE() { return getToken(GQLParser.VARIABLE, 0); }
		public TerminalNode WALK() { return getToken(GQLParser.WALK, 0); }
		public TerminalNode WHEN() { return getToken(GQLParser.WHEN, 0); }
		public TerminalNode WHERE() { return getToken(GQLParser.WHERE, 0); }
		public TerminalNode WITH() { return getToken(GQLParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(GQLParser.WITHOUT, 0); }
		public TerminalNode WRITE() { return getToken(GQLParser.WRITE, 0); }
		public TerminalNode XOR() { return getToken(GQLParser.XOR, 0); }
		public TerminalNode YIELD() { return getToken(GQLParser.YIELD, 0); }
		public TerminalNode ZONE() { return getToken(GQLParser.ZONE, 0); }
		public TerminalNode ZONED() { return getToken(GQLParser.ZONED, 0); }
		public TerminalNode ZONED_DATETIME() { return getToken(GQLParser.ZONED_DATETIME, 0); }
		public TerminalNode ZONED_TIME() { return getToken(GQLParser.ZONED_TIME, 0); }
		public TerminalNode INTERVAL_DAY() { return getToken(GQLParser.INTERVAL_DAY, 0); }
		public TerminalNode INTERVAL_WEEK() { return getToken(GQLParser.INTERVAL_WEEK, 0); }
		public TerminalNode INTERVAL_MONTH() { return getToken(GQLParser.INTERVAL_MONTH, 0); }
		public TerminalNode INTERVAL_YEAR() { return getToken(GQLParser.INTERVAL_YEAR, 0); }
		public TerminalNode EDGE_SYNONYM() { return getToken(GQLParser.EDGE_SYNONYM, 0); }
		public TerminalNode EDGES_SYNONYM() { return getToken(GQLParser.EDGES_SYNONYM, 0); }
		public TerminalNode NODE_SYNONYM() { return getToken(GQLParser.NODE_SYNONYM, 0); }
		public TerminalNode KEY_WORD() { return getToken(GQLParser.KEY_WORD, 0); }
		public TerminalNode PRE_RESERVED_WORD() { return getToken(GQLParser.PRE_RESERVED_WORD, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).enterKeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof GQLParserListener ) ((GQLParserListener)listener).exitKeyword(this);
		}
	}

	public final KeywordContext keyword() throws RecognitionException {
		KeywordContext _localctx = new KeywordContext(_ctx, getState());
		enterRule(_localctx, 1028, RULE_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4377);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & -268435456L) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & -1L) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & -1L) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & -1L) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & 1649267441663L) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 149:
			return compositeQueryExpression_sempred((CompositeQueryExpressionContext)_localctx, predIndex);
		case 389:
			return valueType_sempred((ValueTypeContext)_localctx, predIndex);
		case 466:
			return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 467:
			return expressionPredicate_sempred((ExpressionPredicateContext)_localctx, predIndex);
		case 468:
			return expressionAtom_sempred((ExpressionAtomContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean compositeQueryExpression_sempred(CompositeQueryExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean valueType_sempred(ValueTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1:
			return precpred(_ctx, 7);
		case 2:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3:
			return precpred(_ctx, 4);
		case 4:
			return precpred(_ctx, 3);
		case 5:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean expressionPredicate_sempred(ExpressionPredicateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6:
			return precpred(_ctx, 14);
		case 7:
			return precpred(_ctx, 15);
		case 8:
			return precpred(_ctx, 12);
		case 9:
			return precpred(_ctx, 11);
		}
		return true;
	}
	private boolean expressionAtom_sempred(ExpressionAtomContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10:
			return precpred(_ctx, 10);
		case 11:
			return precpred(_ctx, 4);
		case 12:
			return precpred(_ctx, 3);
		case 13:
			return precpred(_ctx, 11);
		}
		return true;
	}

	private static final String _serializedATNSegment0 =
		"\u0004\u0001\u016e\u111c\u0002\u0000\u0007\u0000\u0002\u0001\u0007\u0001"+
		"\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004\u0007\u0004"+
		"\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007\u0007\u0007"+
		"\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b\u0007\u000b"+
		"\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002\u000f\u0007"+
		"\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002\u0012\u0007"+
		"\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002\u0015\u0007"+
		"\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002\u0018\u0007"+
		"\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002\u001b\u0007"+
		"\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002\u001e\u0007"+
		"\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007!\u0002\"\u0007"+
		"\"\u0002#\u0007#\u0002$\u0007$\u0002%\u0007%\u0002&\u0007&\u0002\'\u0007"+
		"\'\u0002(\u0007(\u0002)\u0007)\u0002*\u0007*\u0002+\u0007+\u0002,\u0007"+
		",\u0002-\u0007-\u0002.\u0007.\u0002/\u0007/\u00020\u00070\u00021\u0007"+
		"1\u00022\u00072\u00023\u00073\u00024\u00074\u00025\u00075\u00026\u0007"+
		"6\u00027\u00077\u00028\u00078\u00029\u00079\u0002:\u0007:\u0002;\u0007"+
		";\u0002<\u0007<\u0002=\u0007=\u0002>\u0007>\u0002?\u0007?\u0002@\u0007"+
		"@\u0002A\u0007A\u0002B\u0007B\u0002C\u0007C\u0002D\u0007D\u0002E\u0007"+
		"E\u0002F\u0007F\u0002G\u0007G\u0002H\u0007H\u0002I\u0007I\u0002J\u0007"+
		"J\u0002K\u0007K\u0002L\u0007L\u0002M\u0007M\u0002N\u0007N\u0002O\u0007"+
		"O\u0002P\u0007P\u0002Q\u0007Q\u0002R\u0007R\u0002S\u0007S\u0002T\u0007"+
		"T\u0002U\u0007U\u0002V\u0007V\u0002W\u0007W\u0002X\u0007X\u0002Y\u0007"+
		"Y\u0002Z\u0007Z\u0002[\u0007[\u0002\\\u0007\\\u0002]\u0007]\u0002^\u0007"+
		"^\u0002_\u0007_\u0002`\u0007`\u0002a\u0007a\u0002b\u0007b\u0002c\u0007"+
		"c\u0002d\u0007d\u0002e\u0007e\u0002f\u0007f\u0002g\u0007g\u0002h\u0007"+
		"h\u0002i\u0007i\u0002j\u0007j\u0002k\u0007k\u0002l\u0007l\u0002m\u0007"+
		"m\u0002n\u0007n\u0002o\u0007o\u0002p\u0007p\u0002q\u0007q\u0002r\u0007"+
		"r\u0002s\u0007s\u0002t\u0007t\u0002u\u0007u\u0002v\u0007v\u0002w\u0007"+
		"w\u0002x\u0007x\u0002y\u0007y\u0002z\u0007z\u0002{\u0007{\u0002|\u0007"+
		"|\u0002}\u0007}\u0002~\u0007~\u0002\u007f\u0007\u007f\u0002\u0080\u0007"+
		"\u0080\u0002\u0081\u0007\u0081\u0002\u0082\u0007\u0082\u0002\u0083\u0007"+
		"\u0083\u0002\u0084\u0007\u0084\u0002\u0085\u0007\u0085\u0002\u0086\u0007"+
		"\u0086\u0002\u0087\u0007\u0087\u0002\u0088\u0007\u0088\u0002\u0089\u0007"+
		"\u0089\u0002\u008a\u0007\u008a\u0002\u008b\u0007\u008b\u0002\u008c\u0007"+
		"\u008c\u0002\u008d\u0007\u008d\u0002\u008e\u0007\u008e\u0002\u008f\u0007"+
		"\u008f\u0002\u0090\u0007\u0090\u0002\u0091\u0007\u0091\u0002\u0092\u0007"+
		"\u0092\u0002\u0093\u0007\u0093\u0002\u0094\u0007\u0094\u0002\u0095\u0007"+
		"\u0095\u0002\u0096\u0007\u0096\u0002\u0097\u0007\u0097\u0002\u0098\u0007"+
		"\u0098\u0002\u0099\u0007\u0099\u0002\u009a\u0007\u009a\u0002\u009b\u0007"+
		"\u009b\u0002\u009c\u0007\u009c\u0002\u009d\u0007\u009d\u0002\u009e\u0007"+
		"\u009e\u0002\u009f\u0007\u009f\u0002\u00a0\u0007\u00a0\u0002\u00a1\u0007"+
		"\u00a1\u0002\u00a2\u0007\u00a2\u0002\u00a3\u0007\u00a3\u0002\u00a4\u0007"+
		"\u00a4\u0002\u00a5\u0007\u00a5\u0002\u00a6\u0007\u00a6\u0002\u00a7\u0007"+
		"\u00a7\u0002\u00a8\u0007\u00a8\u0002\u00a9\u0007\u00a9\u0002\u00aa\u0007"+
		"\u00aa\u0002\u00ab\u0007\u00ab\u0002\u00ac\u0007\u00ac\u0002\u00ad\u0007"+
		"\u00ad\u0002\u00ae\u0007\u00ae\u0002\u00af\u0007\u00af\u0002\u00b0\u0007"+
		"\u00b0\u0002\u00b1\u0007\u00b1\u0002\u00b2\u0007\u00b2\u0002\u00b3\u0007"+
		"\u00b3\u0002\u00b4\u0007\u00b4\u0002\u00b5\u0007\u00b5\u0002\u00b6\u0007"+
		"\u00b6\u0002\u00b7\u0007\u00b7\u0002\u00b8\u0007\u00b8\u0002\u00b9\u0007"+
		"\u00b9\u0002\u00ba\u0007\u00ba\u0002\u00bb\u0007\u00bb\u0002\u00bc\u0007"+
		"\u00bc\u0002\u00bd\u0007\u00bd\u0002\u00be\u0007\u00be\u0002\u00bf\u0007"+
		"\u00bf\u0002\u00c0\u0007\u00c0\u0002\u00c1\u0007\u00c1\u0002\u00c2\u0007"+
		"\u00c2\u0002\u00c3\u0007\u00c3\u0002\u00c4\u0007\u00c4\u0002\u00c5\u0007"+
		"\u00c5\u0002\u00c6\u0007\u00c6\u0002\u00c7\u0007\u00c7\u0002\u00c8\u0007"+
		"\u00c8\u0002\u00c9\u0007\u00c9\u0002\u00ca\u0007\u00ca\u0002\u00cb\u0007"+
		"\u00cb\u0002\u00cc\u0007\u00cc\u0002\u00cd\u0007\u00cd\u0002\u00ce\u0007"+
		"\u00ce\u0002\u00cf\u0007\u00cf\u0002\u00d0\u0007\u00d0\u0002\u00d1\u0007"+
		"\u00d1\u0002\u00d2\u0007\u00d2\u0002\u00d3\u0007\u00d3\u0002\u00d4\u0007"+
		"\u00d4\u0002\u00d5\u0007\u00d5\u0002\u00d6\u0007\u00d6\u0002\u00d7\u0007"+
		"\u00d7\u0002\u00d8\u0007\u00d8\u0002\u00d9\u0007\u00d9\u0002\u00da\u0007"+
		"\u00da\u0002\u00db\u0007\u00db\u0002\u00dc\u0007\u00dc\u0002\u00dd\u0007"+
		"\u00dd\u0002\u00de\u0007\u00de\u0002\u00df\u0007\u00df\u0002\u00e0\u0007"+
		"\u00e0\u0002\u00e1\u0007\u00e1\u0002\u00e2\u0007\u00e2\u0002\u00e3\u0007"+
		"\u00e3\u0002\u00e4\u0007\u00e4\u0002\u00e5\u0007\u00e5\u0002\u00e6\u0007"+
		"\u00e6\u0002\u00e7\u0007\u00e7\u0002\u00e8\u0007\u00e8\u0002\u00e9\u0007"+
		"\u00e9\u0002\u00ea\u0007\u00ea\u0002\u00eb\u0007\u00eb\u0002\u00ec\u0007"+
		"\u00ec\u0002\u00ed\u0007\u00ed\u0002\u00ee\u0007\u00ee\u0002\u00ef\u0007"+
		"\u00ef\u0002\u00f0\u0007\u00f0\u0002\u00f1\u0007\u00f1\u0002\u00f2\u0007"+
		"\u00f2\u0002\u00f3\u0007\u00f3\u0002\u00f4\u0007\u00f4\u0002\u00f5\u0007"+
		"\u00f5\u0002\u00f6\u0007\u00f6\u0002\u00f7\u0007\u00f7\u0002\u00f8\u0007"+
		"\u00f8\u0002\u00f9\u0007\u00f9\u0002\u00fa\u0007\u00fa\u0002\u00fb\u0007"+
		"\u00fb\u0002\u00fc\u0007\u00fc\u0002\u00fd\u0007\u00fd\u0002\u00fe\u0007"+
		"\u00fe\u0002\u00ff\u0007\u00ff\u0002\u0100\u0007\u0100\u0002\u0101\u0007"+
		"\u0101\u0002\u0102\u0007\u0102\u0002\u0103\u0007\u0103\u0002\u0104\u0007"+
		"\u0104\u0002\u0105\u0007\u0105\u0002\u0106\u0007\u0106\u0002\u0107\u0007"+
		"\u0107\u0002\u0108\u0007\u0108\u0002\u0109\u0007\u0109\u0002\u010a\u0007"+
		"\u010a\u0002\u010b\u0007\u010b\u0002\u010c\u0007\u010c\u0002\u010d\u0007"+
		"\u010d\u0002\u010e\u0007\u010e\u0002\u010f\u0007\u010f\u0002\u0110\u0007"+
		"\u0110\u0002\u0111\u0007\u0111\u0002\u0112\u0007\u0112\u0002\u0113\u0007"+
		"\u0113\u0002\u0114\u0007\u0114\u0002\u0115\u0007\u0115\u0002\u0116\u0007"+
		"\u0116\u0002\u0117\u0007\u0117\u0002\u0118\u0007\u0118\u0002\u0119\u0007"+
		"\u0119\u0002\u011a\u0007\u011a\u0002\u011b\u0007\u011b\u0002\u011c\u0007"+
		"\u011c\u0002\u011d\u0007\u011d\u0002\u011e\u0007\u011e\u0002\u011f\u0007"+
		"\u011f\u0002\u0120\u0007\u0120\u0002\u0121\u0007\u0121\u0002\u0122\u0007"+
		"\u0122\u0002\u0123\u0007\u0123\u0002\u0124\u0007\u0124\u0002\u0125\u0007"+
		"\u0125\u0002\u0126\u0007\u0126\u0002\u0127\u0007\u0127\u0002\u0128\u0007"+
		"\u0128\u0002\u0129\u0007\u0129\u0002\u012a\u0007\u012a\u0002\u012b\u0007"+
		"\u012b\u0002\u012c\u0007\u012c\u0002\u012d\u0007\u012d\u0002\u012e\u0007"+
		"\u012e\u0002\u012f\u0007\u012f\u0002\u0130\u0007\u0130\u0002\u0131\u0007"+
		"\u0131\u0002\u0132\u0007\u0132\u0002\u0133\u0007\u0133\u0002\u0134\u0007"+
		"\u0134\u0002\u0135\u0007\u0135\u0002\u0136\u0007\u0136\u0002\u0137\u0007"+
		"\u0137\u0002\u0138\u0007\u0138\u0002\u0139\u0007\u0139\u0002\u013a\u0007"+
		"\u013a\u0002\u013b\u0007\u013b\u0002\u013c\u0007\u013c\u0002\u013d\u0007"+
		"\u013d\u0002\u013e\u0007\u013e\u0002\u013f\u0007\u013f\u0002\u0140\u0007"+
		"\u0140\u0002\u0141\u0007\u0141\u0002\u0142\u0007\u0142\u0002\u0143\u0007"+
		"\u0143\u0002\u0144\u0007\u0144\u0002\u0145\u0007\u0145\u0002\u0146\u0007"+
		"\u0146\u0002\u0147\u0007\u0147\u0002\u0148\u0007\u0148\u0002\u0149\u0007"+
		"\u0149\u0002\u014a\u0007\u014a\u0002\u014b\u0007\u014b\u0002\u014c\u0007"+
		"\u014c\u0002\u014d\u0007\u014d\u0002\u014e\u0007\u014e\u0002\u014f\u0007"+
		"\u014f\u0002\u0150\u0007\u0150\u0002\u0151\u0007\u0151\u0002\u0152\u0007"+
		"\u0152\u0002\u0153\u0007\u0153\u0002\u0154\u0007\u0154\u0002\u0155\u0007"+
		"\u0155\u0002\u0156\u0007\u0156\u0002\u0157\u0007\u0157\u0002\u0158\u0007"+
		"\u0158\u0002\u0159\u0007\u0159\u0002\u015a\u0007\u015a\u0002\u015b\u0007"+
		"\u015b\u0002\u015c\u0007\u015c\u0002\u015d\u0007\u015d\u0002\u015e\u0007"+
		"\u015e\u0002\u015f\u0007\u015f\u0002\u0160\u0007\u0160\u0002\u0161\u0007"+
		"\u0161\u0002\u0162\u0007\u0162\u0002\u0163\u0007\u0163\u0002\u0164\u0007"+
		"\u0164\u0002\u0165\u0007\u0165\u0002\u0166\u0007\u0166\u0002\u0167\u0007"+
		"\u0167\u0002\u0168\u0007\u0168\u0002\u0169\u0007\u0169\u0002\u016a\u0007"+
		"\u016a\u0002\u016b\u0007\u016b\u0002\u016c\u0007\u016c\u0002\u016d\u0007"+
		"\u016d\u0002\u016e\u0007\u016e\u0002\u016f\u0007\u016f\u0002\u0170\u0007"+
		"\u0170\u0002\u0171\u0007\u0171\u0002\u0172\u0007\u0172\u0002\u0173\u0007"+
		"\u0173\u0002\u0174\u0007\u0174\u0002\u0175\u0007\u0175\u0002\u0176\u0007"+
		"\u0176\u0002\u0177\u0007\u0177\u0002\u0178\u0007\u0178\u0002\u0179\u0007"+
		"\u0179\u0002\u017a\u0007\u017a\u0002\u017b\u0007\u017b\u0002\u017c\u0007"+
		"\u017c\u0002\u017d\u0007\u017d\u0002\u017e\u0007\u017e\u0002\u017f\u0007"+
		"\u017f\u0002\u0180\u0007\u0180\u0002\u0181\u0007\u0181\u0002\u0182\u0007"+
		"\u0182\u0002\u0183\u0007\u0183\u0002\u0184\u0007\u0184\u0002\u0185\u0007"+
		"\u0185\u0002\u0186\u0007\u0186\u0002\u0187\u0007\u0187\u0002\u0188\u0007"+
		"\u0188\u0002\u0189\u0007\u0189\u0002\u018a\u0007\u018a\u0002\u018b\u0007"+
		"\u018b\u0002\u018c\u0007\u018c\u0002\u018d\u0007\u018d\u0002\u018e\u0007"+
		"\u018e\u0002\u018f\u0007\u018f\u0002\u0190\u0007\u0190\u0002\u0191\u0007"+
		"\u0191\u0002\u0192\u0007\u0192\u0002\u0193\u0007\u0193\u0002\u0194\u0007"+
		"\u0194\u0002\u0195\u0007\u0195\u0002\u0196\u0007\u0196\u0002\u0197\u0007"+
		"\u0197\u0002\u0198\u0007\u0198\u0002\u0199\u0007\u0199\u0002\u019a\u0007"+
		"\u019a\u0002\u019b\u0007\u019b\u0002\u019c\u0007\u019c\u0002\u019d\u0007"+
		"\u019d\u0002\u019e\u0007\u019e\u0002\u019f\u0007\u019f\u0002\u01a0\u0007"+
		"\u01a0\u0002\u01a1\u0007\u01a1\u0002\u01a2\u0007\u01a2\u0002\u01a3\u0007"+
		"\u01a3\u0002\u01a4\u0007\u01a4\u0002\u01a5\u0007\u01a5\u0002\u01a6\u0007"+
		"\u01a6\u0002\u01a7\u0007\u01a7\u0002\u01a8\u0007\u01a8\u0002\u01a9\u0007"+
		"\u01a9\u0002\u01aa\u0007\u01aa\u0002\u01ab\u0007\u01ab\u0002\u01ac\u0007"+
		"\u01ac\u0002\u01ad\u0007\u01ad\u0002\u01ae\u0007\u01ae\u0002\u01af\u0007"+
		"\u01af\u0002\u01b0\u0007\u01b0\u0002\u01b1\u0007\u01b1\u0002\u01b2\u0007"+
		"\u01b2\u0002\u01b3\u0007\u01b3\u0002\u01b4\u0007\u01b4\u0002\u01b5\u0007"+
		"\u01b5\u0002\u01b6\u0007\u01b6\u0002\u01b7\u0007\u01b7\u0002\u01b8\u0007"+
		"\u01b8\u0002\u01b9\u0007\u01b9\u0002\u01ba\u0007\u01ba\u0002\u01bb\u0007"+
		"\u01bb\u0002\u01bc\u0007\u01bc\u0002\u01bd\u0007\u01bd\u0002\u01be\u0007"+
		"\u01be\u0002\u01bf\u0007\u01bf\u0002\u01c0\u0007\u01c0\u0002\u01c1\u0007"+
		"\u01c1\u0002\u01c2\u0007\u01c2\u0002\u01c3\u0007\u01c3\u0002\u01c4\u0007"+
		"\u01c4\u0002\u01c5\u0007\u01c5\u0002\u01c6\u0007\u01c6\u0002\u01c7\u0007"+
		"\u01c7\u0002\u01c8\u0007\u01c8\u0002\u01c9\u0007\u01c9\u0002\u01ca\u0007"+
		"\u01ca\u0002\u01cb\u0007\u01cb\u0002\u01cc\u0007\u01cc\u0002\u01cd\u0007"+
		"\u01cd\u0002\u01ce\u0007\u01ce\u0002\u01cf\u0007\u01cf\u0002\u01d0\u0007"+
		"\u01d0\u0002\u01d1\u0007\u01d1\u0002\u01d2\u0007\u01d2\u0002\u01d3\u0007"+
		"\u01d3\u0002\u01d4\u0007\u01d4\u0002\u01d5\u0007\u01d5\u0002\u01d6\u0007"+
		"\u01d6\u0002\u01d7\u0007\u01d7\u0002\u01d8\u0007\u01d8\u0002\u01d9\u0007"+
		"\u01d9\u0002\u01da\u0007\u01da\u0002\u01db\u0007\u01db\u0002\u01dc\u0007"+
		"\u01dc\u0002\u01dd\u0007\u01dd\u0002\u01de\u0007\u01de\u0002\u01df\u0007"+
		"\u01df\u0002\u01e0\u0007\u01e0\u0002\u01e1\u0007\u01e1\u0002\u01e2\u0007"+
		"\u01e2\u0002\u01e3\u0007\u01e3\u0002\u01e4\u0007\u01e4\u0002\u01e5\u0007"+
		"\u01e5\u0002\u01e6\u0007\u01e6\u0002\u01e7\u0007\u01e7\u0002\u01e8\u0007"+
		"\u01e8\u0002\u01e9\u0007\u01e9\u0002\u01ea\u0007\u01ea\u0002\u01eb\u0007"+
		"\u01eb\u0002\u01ec\u0007\u01ec\u0002\u01ed\u0007\u01ed\u0002\u01ee\u0007"+
		"\u01ee\u0002\u01ef\u0007\u01ef\u0002\u01f0\u0007\u01f0\u0002\u01f1\u0007"+
		"\u01f1\u0002\u01f2\u0007\u01f2\u0002\u01f3\u0007\u01f3\u0002\u01f4\u0007"+
		"\u01f4\u0002\u01f5\u0007\u01f5\u0002\u01f6\u0007\u01f6\u0002\u01f7\u0007"+
		"\u01f7\u0002\u01f8\u0007\u01f8\u0002\u01f9\u0007\u01f9\u0002\u01fa\u0007"+
		"\u01fa\u0002\u01fb\u0007\u01fb\u0002\u01fc\u0007\u01fc\u0002\u01fd\u0007"+
		"\u01fd\u0002\u01fe\u0007\u01fe\u0002\u01ff\u0007\u01ff\u0002\u0200\u0007"+
		"\u0200\u0002\u0201\u0007\u0201\u0002\u0202\u0007\u0202\u0001\u0000\u0001"+
		"\u0000\u0003\u0000\u0409\b\u0000\u0001\u0000\u0001\u0000\u0001\u0001\u0001"+
		"\u0001\u0003\u0001\u040f\b\u0001\u0001\u0001\u0003\u0001\u0412\b\u0001"+
		"\u0001\u0002\u0001\u0002\u0003\u0002\u0416\b\u0002\u0001\u0003\u0004\u0003"+
		"\u0419\b\u0003\u000b\u0003\f\u0003\u041a\u0001\u0004\u0001\u0004\u0003"+
		"\u0004\u041f\b\u0004\u0001\u0005\u0001\u0005\u0001\u0005\u0003\u0005\u0424"+
		"\b\u0005\u0003\u0005\u0426\b\u0005\u0001\u0005\u0001\u0005\u0003\u0005"+
		"\u042a\b\u0005\u0001\u0005\u0003\u0005\u042d\b\u0005\u0001\u0006\u0001"+
		"\u0006\u0003\u0006\u0431\b\u0006\u0001\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u0439\b\u0007\u0001\b\u0001"+
		"\b\u0001\b\u0001\t\u0003\t\u043f\b\t\u0001\t\u0001\t\u0001\t\u0001\n\u0001"+
		"\n\u0001\n\u0001\n\u0001\u000b\u0001\u000b\u0001\f\u0001\f\u0001\f\u0003"+
		"\f\u044d\b\f\u0001\r\u0003\r\u0450\b\r\u0001\r\u0001\r\u0001\r\u0001\r"+
		"\u0001\u000e\u0003\u000e\u0457\b\u000e\u0001\u000e\u0001\u000e\u0001\u000e"+
		"\u0001\u000e\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u0010"+
		"\u0001\u0010\u0001\u0010\u0003\u0010\u0464\b\u0010\u0001\u0010\u0001\u0010"+
		"\u0001\u0011\u0001\u0011\u0001\u0011\u0003\u0011\u046b\b\u0011\u0001\u0012"+
		"\u0003\u0012\u046e\b\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0003\u0012"+
		"\u0473\b\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0003\u0012"+
		"\u0479\b\u0012\u0001\u0012\u0003\u0012\u047c\b\u0012\u0001\u0013\u0001"+
		"\u0013\u0001\u0013\u0001\u0014\u0001\u0014\u0001\u0014\u0003\u0014\u0484"+
		"\b\u0014\u0001\u0015\u0001\u0015\u0001\u0015\u0005\u0015\u0489\b\u0015"+
		"\n\u0015\f\u0015\u048c\t\u0015\u0001\u0016\u0001\u0016\u0003\u0016\u0490"+
		"\b\u0016\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0017\u0003\u0017\u0496"+
		"\b\u0017\u0001\u0018\u0001\u0018\u0001\u0019\u0001\u0019\u0001\u001a\u0001"+
		"\u001a\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001c\u0001"+
		"\u001c\u0001\u001d\u0001\u001d\u0001\u001e\u0001\u001e\u0001\u001e\u0001"+
		"\u001e\u0001\u001f\u0001\u001f\u0001 \u0001 \u0001 \u0001 \u0001!\u0001"+
		"!\u0001\"\u0001\"\u0003\"\u04b4\b\"\u0001#\u0001#\u0001$\u0001$\u0001"+
		"%\u0001%\u0001&\u0001&\u0001\'\u0001\'\u0001(\u0001(\u0001(\u0005(\u04c3"+
		"\b(\n(\f(\u04c6\t(\u0001)\u0001)\u0001)\u0005)\u04cb\b)\n)\f)\u04ce\t"+
		")\u0001*\u0001*\u0001*\u0005*\u04d3\b*\n*\f*\u04d6\t*\u0001+\u0001+\u0003"+
		"+\u04da\b+\u0001,\u0001,\u0001-\u0001-\u0001-\u0001-\u0003-\u04e2\b-\u0001"+
		".\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001"+
		".\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001"+
		".\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001"+
		".\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001"+
		".\u0001.\u0003.\u050e\b.\u0001/\u0001/\u0001/\u00010\u00010\u00010\u0001"+
		"1\u00011\u00011\u00012\u00012\u00012\u00032\u051c\b2\u00013\u00013\u0001"+
		"3\u00014\u00014\u00015\u00015\u00035\u0525\b5\u00016\u00016\u00036\u0529"+
		"\b6\u00017\u00017\u00018\u00018\u00019\u00019\u0001:\u0001:\u0001;\u0001"+
		";\u0003;\u0535\b;\u0001<\u0001<\u0001=\u0001=\u0001>\u0001>\u0001?\u0001"+
		"?\u0003?\u053f\b?\u0001@\u0001@\u0001A\u0001A\u0001B\u0001B\u0003B\u0547"+
		"\bB\u0001C\u0001C\u0001D\u0001D\u0003D\u054d\bD\u0001E\u0001E\u0003E\u0551"+
		"\bE\u0001F\u0001F\u0001F\u0003F\u0556\bF\u0001G\u0001G\u0001H\u0001H\u0001"+
		"I\u0001I\u0003I\u055e\bI\u0001J\u0001J\u0003J\u0562\bJ\u0001K\u0001K\u0001"+
		"L\u0001L\u0001M\u0001M\u0001N\u0001N\u0001O\u0001O\u0001P\u0001P\u0003"+
		"P\u0570\bP\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0003Q\u0578\bQ\u0001"+
		"R\u0001R\u0001S\u0001S\u0003S\u057e\bS\u0001T\u0001T\u0001U\u0003U\u0583"+
		"\bU\u0001U\u0003U\u0586\bU\u0001U\u0001U\u0001V\u0004V\u058b\bV\u000b"+
		"V\fV\u058c\u0001W\u0001W\u0001W\u0003W\u0592\bW\u0001X\u0001X\u0005X\u0596"+
		"\bX\nX\fX\u0599\tX\u0001Y\u0001Y\u0001Y\u0003Y\u059e\bY\u0001Z\u0001Z"+
		"\u0003Z\u05a2\bZ\u0001Z\u0001Z\u0001[\u0003[\u05a7\b[\u0001[\u0001[\u0001"+
		"[\u0001[\u0001\\\u0003\\\u05ae\b\\\u0001\\\u0003\\\u05b1\b\\\u0001\\\u0001"+
		"\\\u0001]\u0001]\u0001]\u0001^\u0003^\u05b9\b^\u0001^\u0001^\u0001^\u0001"+
		"^\u0001_\u0003_\u05c0\b_\u0001_\u0003_\u05c3\b_\u0001_\u0001_\u0001`\u0001"+
		"`\u0001`\u0001a\u0001a\u0001a\u0001a\u0001b\u0003b\u05cf\bb\u0001b\u0003"+
		"b\u05d2\bb\u0001b\u0001b\u0001b\u0001c\u0001c\u0001c\u0001c\u0001c\u0003"+
		"c\u05dc\bc\u0001d\u0001d\u0001e\u0001e\u0001f\u0001f\u0001f\u0001f\u0003"+
		"f\u05e6\bf\u0001g\u0001g\u0001h\u0001h\u0001h\u0001h\u0001h\u0001h\u0001"+
		"h\u0003h\u05f1\bh\u0001i\u0004i\u05f4\bi\u000bi\fi\u05f5\u0001j\u0001"+
		"j\u0003j\u05fa\bj\u0001k\u0001k\u0001k\u0001k\u0001k\u0001k\u0003k\u0602"+
		"\bk\u0001l\u0001l\u0001l\u0001l\u0001l\u0003l\u0609\bl\u0001l\u0001l\u0001"+
		"m\u0001m\u0001m\u0001m\u0003m\u0611\bm\u0001m\u0001m\u0001n\u0001n\u0003"+
		"n\u0617\bn\u0001n\u0001n\u0001n\u0001n\u0003n\u061d\bn\u0001n\u0001n\u0001"+
		"n\u0003n\u0622\bn\u0001n\u0003n\u0625\bn\u0001n\u0001n\u0001n\u0003n\u062a"+
		"\bn\u0001n\u0003n\u062d\bn\u0001o\u0003o\u0630\bo\u0001o\u0001o\u0003"+
		"o\u0634\bo\u0001o\u0003o\u0637\bo\u0001p\u0001p\u0003p\u063b\bp\u0001"+
		"p\u0001p\u0003p\u063f\bp\u0001p\u0003p\u0642\bp\u0001p\u0003p\u0645\b"+
		"p\u0001p\u0003p\u0648\bp\u0001q\u0001q\u0001q\u0001r\u0001r\u0001r\u0001"+
		"r\u0001r\u0001s\u0001s\u0003s\u0654\bs\u0001s\u0001s\u0001s\u0003s\u0659"+
		"\bs\u0001s\u0001s\u0001t\u0001t\u0003t\u065f\bt\u0001t\u0001t\u0001t\u0001"+
		"t\u0001t\u0003t\u0666\bt\u0001t\u0001t\u0001t\u0003t\u066b\bt\u0001t\u0001"+
		"t\u0003t\u066f\bt\u0001t\u0001t\u0001t\u0001u\u0003u\u0675\bu\u0001u\u0001"+
		"u\u0001u\u0003u\u067a\bu\u0001u\u0003u\u067d\bu\u0001v\u0001v\u0001v\u0001"+
		"v\u0003v\u0683\bv\u0001w\u0001w\u0003w\u0687\bw\u0001w\u0001w\u0001w\u0001"+
		"w\u0003w\u068d\bw\u0001w\u0001w\u0001x\u0001x\u0001y\u0001y\u0003y\u0695"+
		"\by\u0001z\u0001z\u0003z\u0699\bz\u0001{\u0001{\u0001{\u0003{\u069e\b"+
		"{\u0001|\u0001|\u0001|\u0001}\u0001}\u0003}\u06a5\b}\u0001~\u0001~\u0003"+
		"~\u06a9\b~\u0001\u007f\u0004\u007f\u06ac\b\u007f\u000b\u007f\f\u007f\u06ad"+
		"\u0001\u0080\u0001\u0080\u0003\u0080\u06b2\b\u0080\u0001\u0081\u0001\u0081"+
		"\u0003\u0081\u06b6\b\u0081\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082"+
		"\u0003\u0082\u06bc\b\u0082\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0084"+
		"\u0001\u0084\u0001\u0084\u0001\u0085\u0001\u0085\u0001\u0085\u0005\u0085"+
		"\u06c7\b\u0085\n\u0085\f\u0085\u06ca\t\u0085\u0001\u0086\u0001\u0086\u0001"+
		"\u0086\u0003\u0086\u06cf\b\u0086\u0001\u0087\u0001\u0087\u0001\u0087\u0001"+
		"\u0087\u0001\u0087\u0001\u0087\u0001\u0088\u0001\u0088\u0001\u0088\u0001"+
		"\u0088\u0003\u0088\u06db\b\u0088\u0001\u0088\u0001\u0088\u0001\u0089\u0001"+
		"\u0089\u0001\u0089\u0001\u0089\u0001\u008a\u0001\u008a\u0001\u008a\u0005"+
		"\u008a\u06e6\b\u008a\n\u008a\f\u008a\u06e9\t\u008a\u0001\u008b\u0001\u008b"+
		"\u0001\u008b\u0001\u008c\u0001\u008c\u0001\u008c\u0005\u008c\u06f1\b\u008c"+
		"\n\u008c\f\u008c\u06f4\t\u008c\u0001\u008d\u0001\u008d\u0003\u008d\u06f8"+
		"\b\u008d\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008e\u0001\u008f\u0001"+
		"\u008f\u0001\u008f\u0001\u008f\u0001\u0090\u0003\u0090\u0703\b\u0090\u0001"+
		"\u0090\u0001\u0090\u0001\u0090\u0001\u0091\u0001\u0091\u0001\u0091\u0005"+
		"\u0091\u070b\b\u0091\n\u0091\f\u0091\u070e\t\u0091\u0001\u0092\u0001\u0092"+
		"\u0001\u0093\u0001\u0093\u0001\u0094\u0001\u0094\u0001\u0095\u0001\u0095"+
		"\u0001\u0095\u0001\u0095\u0001\u0095\u0001\u0095\u0001\u0095\u0005\u0095"+
		"\u071d\b\u0095\n\u0095\f\u0095\u0720\t\u0095\u0001\u0096\u0001\u0096\u0003"+
		"\u0096\u0724\b\u0096\u0001\u0097\u0001\u0097\u0003\u0097\u0728\b\u0097"+
		"\u0001\u0097\u0001\u0097\u0003\u0097\u072c\b\u0097\u0001\u0097\u0001\u0097"+
		"\u0003\u0097\u0730\b\u0097\u0003\u0097\u0732\b\u0097\u0001\u0098\u0001"+
		"\u0098\u0001\u0099\u0001\u0099\u0003\u0099\u0738\b\u0099\u0001\u009a\u0005"+
		"\u009a\u073b\b\u009a\n\u009a\f\u009a\u073e\t\u009a\u0001\u009a\u0001\u009a"+
		"\u0001\u009a\u0001\u009a\u0003\u009a\u0744\b\u009a\u0001\u009b\u0001\u009b"+
		"\u0001\u009b\u0001\u009c\u0001\u009c\u0001\u009c\u0001\u009c\u0001\u009d"+
		"\u0001\u009d\u0001\u009d\u0001\u009e\u0001\u009e\u0001\u009e\u0001\u009f"+
		"\u0003\u009f\u0754\b\u009f\u0001\u009f\u0001\u009f\u0003\u009f\u0758\b"+
		"\u009f\u0001\u00a0\u0004\u00a0\u075b\b\u00a0\u000b\u00a0\f\u00a0\u075c"+
		"\u0001\u00a1\u0001\u00a1\u0003\u00a1\u0761\b\u00a1\u0001\u00a2\u0001\u00a2"+
		"\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0003\u00a2\u0768\b\u00a2\u0001\u00a3"+
		"\u0001\u00a3\u0003\u00a3\u076c\b\u00a3\u0001\u00a4\u0001\u00a4\u0001\u00a4"+
		"\u0001\u00a5\u0001\u00a5\u0001\u00a5\u0001\u00a6\u0001\u00a6\u0001\u00a6"+
		"\u0001\u00a6\u0001\u00a6\u0001\u00a6\u0001\u00a6\u0001\u00a6\u0001\u00a6"+
		"\u0003\u00a6\u077d\b\u00a6\u0001\u00a7\u0004\u00a7\u0780\b\u00a7\u000b"+
		"\u00a7\f\u00a7\u0781\u0001\u00a8\u0001\u00a8\u0001\u00a9\u0001\u00a9\u0001"+
		"\u00a9\u0003\u00a9\u0789\b\u00a9\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001"+
		"\u00ab\u0001\u00ab\u0001\u00ab\u0005\u00ab\u0791\b\u00ab\n\u00ab\f\u00ab"+
		"\u0794\t\u00ab\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac"+
		"\u0003\u00ac\u079b\b\u00ac\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0003\u00ad"+
		"\u07a0\b\u00ad\u0001\u00ae\u0001\u00ae\u0001\u00ae\u0001\u00af\u0001\u00af"+
		"\u0001\u00af\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b0\u0001\u00b1"+
		"\u0001\u00b1\u0003\u00b1\u07ae\b\u00b1\u0001\u00b1\u0003\u00b1\u07b1\b"+
		"\u00b1\u0001\u00b1\u0001\u00b1\u0003\u00b1\u07b5\b\u00b1\u0001\u00b1\u0003"+
		"\u00b1\u07b8\b\u00b1\u0001\u00b2\u0001\u00b2\u0003\u00b2\u07bc\b\u00b2"+
		"\u0001\u00b2\u0003\u00b2\u07bf\b\u00b2\u0001\u00b3\u0001\u00b3\u0001\u00b3"+
		"\u0001\u00b4\u0003\u00b4\u07c5\b\u00b4\u0001\u00b4\u0001\u00b4\u0003\u00b4"+
		"\u07c9\b\u00b4\u0001\u00b4\u0003\u00b4\u07cc\b\u00b4\u0001\u00b4\u0001"+
		"\u00b4\u0003\u00b4\u07d0\b\u00b4\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0005"+
		"\u00b5\u07d5\b\u00b5\n\u00b5\f\u00b5\u07d8\t\u00b5\u0001\u00b6\u0001\u00b6"+
		"\u0003\u00b6\u07dc\b\u00b6\u0001\u00b7\u0001\u00b7\u0001\u00b7\u0001\u00b8"+
		"\u0001\u00b8\u0003\u00b8\u07e3\b\u00b8\u0001\u00b8\u0001\u00b8\u0003\u00b8"+
		"\u07e7\b\u00b8\u0001\u00b8\u0001\u00b8\u0003\u00b8\u07eb\b\u00b8\u0001"+
		"\u00b8\u0003\u00b8\u07ee\b\u00b8\u0001\u00b8\u0003\u00b8\u07f1\b\u00b8"+
		"\u0001\u00b8\u0003\u00b8\u07f4\b\u00b8\u0001\u00b8\u0003\u00b8\u07f7\b"+
		"\u00b8\u0001\u00b8\u0003\u00b8\u07fa\b\u00b8\u0003\u00b8\u07fc\b\u00b8"+
		"\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0005\u00b9\u0801\b\u00b9\n\u00b9"+
		"\f\u00b9\u0804\t\u00b9\u0001\u00ba\u0001\u00ba\u0003\u00ba\u0808\b\u00ba"+
		"\u0001\u00bb\u0001\u00bb\u0001\u00bb\u0001\u00bc\u0001\u00bc\u0001\u00bc"+
		"\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0003\u00bd\u0814\b\u00bd"+
		"\u0001\u00be\u0001\u00be\u0001\u00be\u0005\u00be\u0819\b\u00be\n\u00be"+
		"\f\u00be\u081c\t\u00be\u0001\u00bf\u0001\u00bf\u0001\u00bf\u0001\u00c0"+
		"\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0003\u00c0\u0825\b\u00c0\u0001\u00c1"+
		"\u0003\u00c1\u0828\b\u00c1\u0001\u00c1\u0001\u00c1\u0001\u00c1\u0001\u00c2"+
		"\u0001\u00c2\u0003\u00c2\u082f\b\u00c2\u0001\u00c3\u0003\u00c3\u0832\b"+
		"\u00c3\u0001\u00c3\u0001\u00c3\u0001\u00c4\u0001\u00c4\u0003\u00c4\u0838"+
		"\b\u00c4\u0001\u00c4\u0001\u00c4\u0001\u00c5\u0001\u00c5\u0001\u00c5\u0005"+
		"\u00c5\u083f\b\u00c5\n\u00c5\f\u00c5\u0842\t\u00c5\u0001\u00c6\u0001\u00c6"+
		"\u0001\u00c6\u0003\u00c6\u0847\b\u00c6\u0001\u00c6\u0001\u00c6\u0003\u00c6"+
		"\u084b\b\u00c6\u0001\u00c7\u0001\u00c7\u0001\u00c7\u0005\u00c7\u0850\b"+
		"\u00c7\n\u00c7\f\u00c7\u0853\t\u00c7\u0001\u00c8\u0001\u00c8\u0001\u00c9"+
		"\u0001\u00c9\u0001\u00c9\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00cb"+
		"\u0001\u00cb\u0001\u00cc\u0001\u00cc\u0001\u00cd\u0001\u00cd\u0001\u00ce"+
		"\u0001\u00ce\u0001\u00cf\u0001\u00cf\u0003\u00cf\u0867\b\u00cf\u0001\u00d0"+
		"\u0001\u00d0\u0001\u00d0\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0005\u00d1"+
		"\u086f\b\u00d1\n\u00d1\f\u00d1\u0872\t\u00d1\u0001\u00d1\u0001\u00d1\u0003"+
		"\u00d1\u0876\b\u00d1\u0001\u00d2\u0001\u00d2\u0003\u00d2\u087a\b\u00d2"+
		"\u0001\u00d3\u0003\u00d3\u087d\b\u00d3\u0001\u00d3\u0001\u00d3\u0003\u00d3"+
		"\u0881\b\u00d3\u0001\u00d3\u0003\u00d3\u0884\b\u00d3\u0001\u00d4\u0001"+
		"\u00d4\u0003\u00d4\u0888\b\u00d4\u0001\u00d5\u0001\u00d5\u0001\u00d5\u0001"+
		"\u00d6\u0001\u00d6\u0001\u00d6\u0001\u00d7\u0001\u00d7\u0003\u00d7\u0892"+
		"\b\u00d7\u0001\u00d7\u0003\u00d7\u0895\b\u00d7\u0001\u00d8\u0001\u00d8"+
		"\u0003\u00d8\u0899\b\u00d8\u0001\u00d8\u0003\u00d8\u089c\b\u00d8\u0001"+
		"\u00d9\u0001\u00d9\u0001\u00d9\u0005\u00d9\u08a1\b\u00d9\n\u00d9\f\u00d9"+
		"\u08a4\t\u00d9\u0001\u00da\u0003\u00da\u08a7\b\u00da\u0001\u00da\u0003"+
		"\u00da\u08aa\b\u00da\u0001\u00da\u0001\u00da\u0001\u00db\u0001\u00db\u0001"+
		"\u00db\u0001\u00dc\u0001\u00dc\u0001\u00dc\u0001\u00dd\u0001\u00dd\u0001"+
		"\u00dd\u0001\u00de\u0001\u00de\u0003\u00de\u08b9\b\u00de\u0001\u00df\u0001"+
		"\u00df\u0003\u00df\u08bd\b\u00df\u0001\u00e0\u0001\u00e0\u0001\u00e1\u0001"+
		"\u00e1\u0001\u00e1\u0003\u00e1\u08c4\b\u00e1\u0001\u00e2\u0001\u00e2\u0003"+
		"\u00e2\u08c8\b\u00e2\u0001\u00e2\u0003\u00e2\u08cb\b\u00e2\u0001\u00e3"+
		"\u0001\u00e3\u0001\u00e4\u0001\u00e4\u0003\u00e4\u08d1\b\u00e4\u0001\u00e4"+
		"\u0003\u00e4\u08d4\b\u00e4\u0001\u00e4\u0003\u00e4\u08d7\b\u00e4\u0001"+
		"\u00e5\u0001\u00e5\u0001\u00e6\u0001\u00e6\u0001\u00e6\u0001\u00e6\u0003"+
		"\u00e6\u08df\b\u00e6\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0003\u00e7\u08e4"+
		"\b\u00e7\u0001\u00e7\u0003\u00e7\u08e7\b\u00e7\u0001\u00e8\u0001\u00e8"+
		"\u0001\u00e8\u0003\u00e8\u08ec\b\u00e8\u0001\u00e8\u0003\u00e8\u08ef\b"+
		"\u00e8\u0001\u00e9\u0001\u00e9\u0001\u00e9\u0003\u00e9\u08f4\b\u00e9\u0001"+
		"\u00e9\u0003\u00e9\u08f7\b\u00e9\u0001\u00ea\u0001\u00ea\u0001\u00ea\u0003"+
		"\u00ea\u08fc\b\u00ea\u0001\u00ea\u0003\u00ea\u08ff\b\u00ea\u0001\u00ea"+
		"\u0001\u00ea\u0001\u00eb\u0001\u00eb\u0001\u00ec\u0001\u00ec\u0001\u00ec"+
		"\u0003\u00ec\u0908\b\u00ec\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed"+
		"\u0001\u00ed\u0005\u00ed\u090f\b\u00ed\n\u00ed\f\u00ed\u0912\t\u00ed\u0001"+
		"\u00ee\u0001\u00ee\u0001\u00ee\u0001\u00ee\u0001\u00ee\u0005\u00ee\u0919"+
		"\b\u00ee\n\u00ee\f\u00ee\u091c\t\u00ee\u0001\u00ef\u0004\u00ef\u091f\b"+
		"\u00ef\u000b\u00ef\f\u00ef\u0920\u0001\u00f0\u0001\u00f0\u0001\u00f0\u0003"+
		"\u00f0\u0926\b\u00f0\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0001\u00f2\u0001"+
		"\u00f2\u0001\u00f2\u0001\u00f3\u0001\u00f3\u0001\u00f3\u0003\u00f3\u0931"+
		"\b\u00f3\u0001\u00f4\u0001\u00f4\u0003\u00f4\u0935\b\u00f4\u0001\u00f5"+
		"\u0001\u00f5\u0001\u00f5\u0001\u00f5\u0001\u00f6\u0003\u00f6\u093c\b\u00f6"+
		"\u0001\u00f6\u0003\u00f6\u093f\b\u00f6\u0001\u00f6\u0003\u00f6\u0942\b"+
		"\u00f6\u0001\u00f7\u0003\u00f7\u0945\b\u00f7\u0001\u00f7\u0001\u00f7\u0001"+
		"\u00f8\u0001\u00f8\u0001\u00f8\u0001\u00f9\u0001\u00f9\u0001\u00fa\u0001"+
		"\u00fa\u0003\u00fa\u0950\b\u00fa\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0001"+
		"\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fd\u0001\u00fd\u0001"+
		"\u00fd\u0005\u00fd\u095c\b\u00fd\n\u00fd\f\u00fd\u095f\t\u00fd\u0001\u00fe"+
		"\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00ff\u0001\u00ff\u0003\u00ff"+
		"\u0967\b\u00ff\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100"+
		"\u0001\u0100\u0001\u0100\u0003\u0100\u0970\b\u0100\u0001\u0101\u0001\u0101"+
		"\u0001\u0101\u0001\u0101\u0001\u0101\u0001\u0101\u0001\u0101\u0001\u0102"+
		"\u0001\u0102\u0001\u0102\u0001\u0102\u0001\u0102\u0001\u0102\u0001\u0103"+
		"\u0001\u0103\u0001\u0103\u0001\u0103\u0001\u0103\u0001\u0103\u0001\u0104"+
		"\u0001\u0104\u0001\u0104\u0001\u0104\u0001\u0104\u0001\u0104\u0001\u0104"+
		"\u0001\u0105\u0001\u0105\u0001\u0105\u0001\u0105\u0001\u0105\u0001\u0105"+
		"\u0001\u0106\u0001\u0106\u0001\u0106\u0001\u0106\u0001\u0106\u0001\u0106"+
		"\u0001\u0106\u0001\u0107\u0001\u0107\u0001\u0107\u0001\u0107\u0001\u0107"+
		"\u0001\u0107\u0001\u0108\u0001\u0108\u0001\u0108\u0001\u0108\u0001\u0108"+
		"\u0001\u0108\u0001\u0108\u0001\u0108\u0001\u0108\u0003\u0108\u09a8\b\u0108"+
		"\u0001\u0109\u0001\u0109\u0003\u0109\u09ac\b\u0109\u0001\u0109\u0003\u0109"+
		"\u09af\b\u0109\u0001\u0109\u0001\u0109\u0003\u0109\u09b3\b\u0109\u0001"+
		"\u0109\u0001\u0109\u0001\u010a\u0001\u010a\u0001\u010a\u0001\u010b\u0001"+
		"\u010b\u0001\u010b\u0001\u010c\u0001\u010c\u0001\u010d\u0001\u010d\u0001"+
		"\u010d\u0005\u010d\u09c2\b\u010d\n\u010d\f\u010d\u09c5\t\u010d\u0001\u010e"+
		"\u0001\u010e\u0001\u010e\u0001\u010e\u0005\u010e\u09cb\b\u010e\n\u010e"+
		"\f\u010e\u09ce\t\u010e\u0001\u010f\u0001\u010f\u0003\u010f\u09d2\b\u010f"+
		"\u0001\u010f\u0001\u010f\u0001\u0110\u0001\u0110\u0001\u0110\u0003\u0110"+
		"\u09d9\b\u0110\u0001\u0111\u0001\u0111\u0001\u0111\u0001\u0111\u0003\u0111"+
		"\u09df\b\u0111\u0001\u0111\u0001\u0111\u0001\u0111\u0001\u0112\u0001\u0112"+
		"\u0001\u0112\u0003\u0112\u09e7\b\u0112\u0001\u0112\u0001\u0112\u0001\u0112"+
		"\u0001\u0113\u0001\u0113\u0001\u0113\u0003\u0113\u09ef\b\u0113\u0001\u0113"+
		"\u0001\u0113\u0001\u0113\u0001\u0114\u0001\u0114\u0001\u0114\u0001\u0114"+
		"\u0001\u0114\u0003\u0114\u09f9\b\u0114\u0001\u0115\u0001\u0115\u0001\u0115"+
		"\u0001\u0115\u0001\u0115\u0001\u0115\u0001\u0115\u0001\u0115\u0003\u0115"+
		"\u0a03\b\u0115\u0001\u0116\u0001\u0116\u0001\u0116\u0005\u0116\u0a08\b"+
		"\u0116\n\u0116\f\u0116\u0a0b\t\u0116\u0001\u0117\u0001\u0117\u0001\u0117"+
		"\u0005\u0117\u0a10\b\u0117\n\u0117\f\u0117\u0a13\t\u0117\u0001\u0118\u0003"+
		"\u0118\u0a16\b\u0118\u0001\u0118\u0001\u0118\u0001\u0119\u0001\u0119\u0001"+
		"\u0119\u0003\u0119\u0a1d\b\u0119\u0001\u011a\u0001\u011a\u0001\u011b\u0001"+
		"\u011b\u0001\u011b\u0001\u011b\u0001\u011c\u0001\u011c\u0001\u011c\u0001"+
		"\u011c\u0003\u011c\u0a29\b\u011c\u0001\u011d\u0001\u011d\u0001\u011d\u0001"+
		"\u011d\u0001\u011e\u0001\u011e\u0003\u011e\u0a31\b\u011e\u0001\u011e\u0001"+
		"\u011e\u0003\u011e\u0a35\b\u011e\u0001\u011e\u0001\u011e\u0001\u011f\u0001"+
		"\u011f\u0001\u0120\u0001\u0120\u0001\u0121\u0001\u0121\u0001\u0121\u0001"+
		"\u0121\u0001\u0121\u0001\u0121\u0001\u0121\u0003\u0121\u0a44\b\u0121\u0001"+
		"\u0122\u0001\u0122\u0001\u0122\u0001\u0122\u0001\u0122\u0001\u0123\u0001"+
		"\u0123\u0001\u0123\u0001\u0123\u0001\u0123\u0001\u0124\u0001\u0124\u0001"+
		"\u0124\u0001\u0124\u0001\u0125\u0001\u0125\u0001\u0125\u0001\u0125\u0001"+
		"\u0125\u0001\u0126\u0001\u0126\u0001\u0126\u0001\u0126\u0001\u0127\u0001"+
		"\u0127\u0001\u0127\u0001\u0127\u0001\u0128\u0001\u0128\u0001\u0128\u0001"+
		"\u0128\u0001\u0128\u0001\u0129\u0001\u0129\u0001\u0129\u0003\u0129\u0a69"+
		"\b\u0129\u0001\u012a\u0001\u012a\u0001\u012a\u0001\u012a\u0001\u012a\u0005"+
		"\u012a\u0a70\b\u012a\n\u012a\f\u012a\u0a73\t\u012a\u0001\u012b\u0001\u012b"+
		"\u0001\u012b\u0001\u012b\u0001\u012b\u0005\u012b\u0a7a\b\u012b\n\u012b"+
		"\f\u012b\u0a7d\t\u012b\u0001\u012c\u0004\u012c\u0a80\b\u012c\u000b\u012c"+
		"\f\u012c\u0a81\u0001\u012d\u0001\u012d\u0001\u012d\u0005\u012d\u0a87\b"+
		"\u012d\n\u012d\f\u012d\u0a8a\t\u012d\u0001\u012e\u0001\u012e\u0001\u012e"+
		"\u0003\u012e\u0a8f\b\u012e\u0001\u012f\u0001\u012f\u0001\u012f\u0001\u0130"+
		"\u0001\u0130\u0001\u0130\u0001\u0131\u0001\u0131\u0003\u0131\u0a99\b\u0131"+
		"\u0001\u0132\u0001\u0132\u0001\u0132\u0001\u0132\u0001\u0132\u0001\u0132"+
		"\u0001\u0132\u0003\u0132\u0aa2\b\u0132\u0001\u0133\u0001\u0133\u0001\u0133"+
		"\u0001\u0134\u0001\u0134\u0001\u0134\u0001\u0135\u0001\u0135\u0001\u0135"+
		"\u0001\u0136\u0001\u0136\u0001\u0136\u0001\u0136\u0001\u0137\u0001\u0137"+
		"\u0001\u0137\u0001\u0137\u0001\u0138\u0001\u0138\u0001\u0138\u0001\u0138"+
		"\u0001\u0139\u0001\u0139\u0001\u0139\u0001\u013a\u0001\u013a\u0003\u013a"+
		"\u0abe\b\u013a\u0001\u013b\u0001\u013b\u0001\u013b\u0001\u013c\u0001\u013c"+
		"\u0001\u013c\u0001\u013c\u0001\u013c\u0003\u013c\u0ac8\b\u013c\u0001\u013d"+
		"\u0001\u013d\u0001\u013d\u0001\u013e\u0001\u013e\u0001\u013e\u0001\u013f"+
		"\u0001\u013f\u0001\u013f\u0005\u013f\u0ad3\b\u013f\n\u013f\f\u013f\u0ad6"+
		"\t\u013f\u0001\u0140\u0001\u0140\u0003\u0140\u0ada\b\u0140\u0001\u0141"+
		"\u0001\u0141\u0001\u0142\u0001\u0142\u0001\u0142\u0001\u0143\u0001\u0143"+
		"\u0001\u0143\u0001\u0143\u0001\u0144\u0001\u0144\u0001\u0144\u0003\u0144"+
		"\u0ae8\b\u0144\u0001\u0144\u0003\u0144\u0aeb\b\u0144\u0001\u0145\u0001"+
		"\u0145\u0001\u0146\u0001\u0146\u0001\u0146\u0001\u0147\u0001\u0147\u0001"+
		"\u0147\u0001\u0147\u0001\u0148\u0001\u0148\u0001\u0148\u0001\u0148\u0001"+
		"\u0148\u0001\u0148\u0001\u0148\u0003\u0148\u0afd\b\u0148\u0001\u0148\u0001"+
		"\u0148\u0001\u0148\u0001\u0148\u0001\u0148\u0001\u0148\u0003\u0148\u0b05"+
		"\b\u0148\u0001\u0148\u0001\u0148\u0001\u0148\u0001\u0148\u0001\u0148\u0003"+
		"\u0148\u0b0c\b\u0148\u0001\u0149\u0001\u0149\u0001\u014a\u0001\u014a\u0001"+
		"\u014b\u0001\u014b\u0001\u014c\u0001\u014c\u0001\u014c\u0005\u014c\u0b17"+
		"\b\u014c\n\u014c\f\u014c\u0b1a\t\u014c\u0001\u014d\u0001\u014d\u0003\u014d"+
		"\u0b1e\b\u014d\u0001\u014d\u0003\u014d\u0b21\b\u014d\u0001\u014e\u0001"+
		"\u014e\u0001\u014f\u0001\u014f\u0001\u0150\u0001\u0150\u0001\u0150\u0001"+
		"\u0150\u0003\u0150\u0b2b\b\u0150\u0001\u0151\u0001\u0151\u0001\u0151\u0001"+
		"\u0152\u0001\u0152\u0001\u0152\u0001\u0153\u0001\u0153\u0001\u0154\u0001"+
		"\u0154\u0001\u0154\u0001\u0154\u0001\u0155\u0001\u0155\u0001\u0156\u0001"+
		"\u0156\u0001\u0156\u0005\u0156\u0b3e\b\u0156\n\u0156\f\u0156\u0b41\t\u0156"+
		"\u0001\u0157\u0001\u0157\u0003\u0157\u0b45\b\u0157\u0001\u0158\u0001\u0158"+
		"\u0001\u0158\u0003\u0158\u0b4a\b\u0158\u0001\u0159\u0001\u0159\u0003\u0159"+
		"\u0b4e\b\u0159\u0001\u0159\u0003\u0159\u0b51\b\u0159\u0001\u0159\u0001"+
		"\u0159\u0001\u015a\u0003\u015a\u0b56\b\u015a\u0001\u015a\u0001\u015a\u0003"+
		"\u015a\u0b5a\b\u015a\u0001\u015a\u0003\u015a\u0b5d\b\u015a\u0001\u015b"+
		"\u0001\u015b\u0001\u015c\u0001\u015c\u0001\u015c\u0001\u015c\u0001\u015c"+
		"\u0003\u015c\u0b66\b\u015c\u0001\u015d\u0001\u015d\u0001\u015e\u0001\u015e"+
		"\u0001\u015f\u0001\u015f\u0003\u015f\u0b6e\b\u015f\u0001\u015f\u0001\u015f"+
		"\u0003\u015f\u0b72\b\u015f\u0001\u0160\u0001\u0160\u0003\u0160\u0b76\b"+
		"\u0160\u0001\u0161\u0003\u0161\u0b79\b\u0161\u0001\u0161\u0001\u0161\u0001"+
		"\u0161\u0001\u0161\u0003\u0161\u0b7f\b\u0161\u0001\u0161\u0001\u0161\u0001"+
		"\u0161\u0003\u0161\u0b84\b\u0161\u0001\u0162\u0001\u0162\u0001\u0163\u0001"+
		"\u0163\u0001\u0163\u0001\u0163\u0001\u0163\u0003\u0163\u0b8d\b\u0163\u0001"+
		"\u0164\u0001\u0164\u0001\u0165\u0001\u0165\u0001\u0166\u0001\u0166\u0001"+
		"\u0166\u0003\u0166\u0b96\b\u0166\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0168\u0001\u0168\u0001\u0168\u0001\u0168\u0001\u0169\u0001"+
		"\u0169\u0001\u0169\u0001\u0169\u0001\u016a\u0001\u016a\u0001\u016a\u0001"+
		"\u016a\u0001\u016a\u0001\u016a\u0001\u016b\u0001\u016b\u0001\u016b\u0001"+
		"\u016b\u0001\u016b\u0001\u016b\u0001\u016b\u0001\u016c\u0001\u016c\u0001"+
		"\u016c\u0001\u016c\u0001\u016c\u0001\u016c\u0001\u016d\u0003\u016d\u0bb8"+
		"\b\u016d\u0001\u016d\u0003\u016d\u0bbb\b\u016d\u0001\u016e\u0001\u016e"+
		"\u0001\u016e\u0003\u016e\u0bc0\b\u016e\u0001\u016f\u0001\u016f\u0001\u016f"+
		"\u0001\u016f\u0001\u0170\u0001\u0170\u0001\u0170\u0001\u0170\u0001\u0170"+
		"\u0001\u0171\u0001\u0171\u0001\u0171\u0001\u0171\u0001\u0172\u0001\u0172"+
		"\u0003\u0172\u0bd1\b\u0172\u0001\u0173\u0001\u0173\u0001\u0173\u0001\u0173"+
		"\u0001\u0173\u0001\u0173\u0003\u0173\u0bd9\b\u0173\u0001\u0173\u0003\u0173"+
		"\u0bdc\b\u0173\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174\u0001\u0174"+
		"\u0001\u0174\u0003\u0174\u0be4\b\u0174\u0001\u0174\u0003\u0174\u0be7\b"+
		"\u0174\u0001\u0175\u0001\u0175\u0001\u0176\u0001\u0176\u0001\u0176\u0001"+
		"\u0177\u0001\u0177\u0001\u0177\u0001\u0177\u0003\u0177\u0bf2\b\u0177\u0001"+
		"\u0178\u0001\u0178\u0001\u0178\u0001\u0178\u0001\u0178\u0001\u0178\u0001"+
		"\u0179\u0001\u0179\u0001\u0179\u0001\u0179\u0001\u0179\u0001\u0179\u0001"+
		"\u0179\u0001\u017a\u0001\u017a\u0001\u017a\u0001\u017a\u0001\u017a\u0001"+
		"\u017a\u0001\u017b\u0001\u017b\u0001\u017c\u0001\u017c\u0001\u017d\u0001"+
		"\u017d\u0001\u017e\u0001\u017e\u0001\u017f\u0001\u017f\u0001\u017f\u0001"+
		"\u017f\u0001\u017f\u0001\u017f\u0001\u017f\u0003\u017f\u0c16\b\u017f\u0001"+
		"\u0180\u0001\u0180\u0003\u0180\u0c1a\b\u0180\u0001\u0180\u0001\u0180\u0001"+
		"\u0181\u0001\u0181\u0001\u0181\u0005\u0181\u0c21\b\u0181\n\u0181\f\u0181"+
		"\u0c24\t\u0181\u0001\u0182\u0001\u0182\u0003\u0182\u0c28\b\u0182\u0001"+
		"\u0182\u0001\u0182\u0001\u0183\u0001\u0183\u0001\u0184\u0003\u0184\u0c2f"+
		"\b\u0184\u0001\u0184\u0001\u0184\u0001\u0184\u0001\u0185\u0001\u0185\u0001"+
		"\u0185\u0001\u0185\u0001\u0185\u0001\u0185\u0001\u0185\u0001\u0185\u0001"+
		"\u0185\u0001\u0185\u0001\u0185\u0003\u0185\u0c3f\b\u0185\u0001\u0185\u0003"+
		"\u0185\u0c42\b\u0185\u0001\u0185\u0003\u0185\u0c45\b\u0185\u0001\u0185"+
		"\u0001\u0185\u0003\u0185\u0c49\b\u0185\u0001\u0185\u0003\u0185\u0c4c\b"+
		"\u0185\u0001\u0185\u0001\u0185\u0003\u0185\u0c50\b\u0185\u0001\u0185\u0001"+
		"\u0185\u0003\u0185\u0c54\b\u0185\u0001\u0185\u0003\u0185\u0c57\b\u0185"+
		"\u0001\u0185\u0003\u0185\u0c5a\b\u0185\u0001\u0185\u0001\u0185\u0001\u0185"+
		"\u0003\u0185\u0c5f\b\u0185\u0001\u0185\u0001\u0185\u0003\u0185\u0c63\b"+
		"\u0185\u0001\u0185\u0001\u0185\u0001\u0185\u0001\u0185\u0005\u0185\u0c69"+
		"\b\u0185\n\u0185\f\u0185\u0c6c\t\u0185\u0001\u0185\u0001\u0185\u0003\u0185"+
		"\u0c70\b\u0185\u0001\u0185\u0001\u0185\u0001\u0185\u0001\u0185\u0001\u0185"+
		"\u0001\u0185\u0003\u0185\u0c78\b\u0185\u0001\u0185\u0003\u0185\u0c7b\b"+
		"\u0185\u0001\u0185\u0001\u0185\u0001\u0185\u0004\u0185\u0c80\b\u0185\u000b"+
		"\u0185\f\u0185\u0c81\u0005\u0185\u0c84\b\u0185\n\u0185\f\u0185\u0c87\t"+
		"\u0185\u0001\u0186\u0001\u0186\u0001\u0187\u0001\u0187\u0001\u0187\u0001"+
		"\u0187\u0001\u0187\u0001\u0187\u0003\u0187\u0c91\b\u0187\u0001\u0188\u0001"+
		"\u0188\u0003\u0188\u0c95\b\u0188\u0001\u0189\u0001\u0189\u0001\u0189\u0001"+
		"\u0189\u0001\u0189\u0003\u0189\u0c9c\b\u0189\u0001\u0189\u0003\u0189\u0c9f"+
		"\b\u0189\u0001\u018a\u0001\u018a\u0001\u018a\u0001\u018a\u0001\u018a\u0003"+
		"\u018a\u0ca6\b\u018a\u0001\u018a\u0001\u018a\u0001\u018a\u0003\u018a\u0cab"+
		"\b\u018a\u0001\u018a\u0003\u018a\u0cae\b\u018a\u0001\u018a\u0001\u018a"+
		"\u0001\u018a\u0001\u018a\u0001\u018a\u0003\u018a\u0cb5\b\u018a\u0001\u018a"+
		"\u0003\u018a\u0cb8\b\u018a\u0001\u018a\u0001\u018a\u0001\u018a\u0001\u018a"+
		"\u0001\u018a\u0003\u018a\u0cbf\b\u018a\u0001\u018a\u0003\u018a\u0cc2\b"+
		"\u018a\u0003\u018a\u0cc4\b\u018a\u0001\u018b\u0001\u018b\u0001\u018c\u0001"+
		"\u018c\u0001\u018d\u0001\u018d\u0001\u018e\u0001\u018e\u0003\u018e\u0cce"+
		"\b\u018e\u0001\u018f\u0001\u018f\u0003\u018f\u0cd2\b\u018f\u0001\u0190"+
		"\u0001\u0190\u0003\u0190\u0cd6\b\u0190\u0001\u0191\u0001\u0191\u0003\u0191"+
		"\u0cda\b\u0191\u0001\u0191\u0001\u0191\u0003\u0191\u0cde\b\u0191\u0001"+
		"\u0191\u0001\u0191\u0003\u0191\u0ce2\b\u0191\u0001\u0191\u0001\u0191\u0003"+
		"\u0191\u0ce6\b\u0191\u0001\u0191\u0001\u0191\u0003\u0191\u0cea\b\u0191"+
		"\u0001\u0191\u0001\u0191\u0003\u0191\u0cee\b\u0191\u0001\u0191\u0001\u0191"+
		"\u0003\u0191\u0cf2\b\u0191\u0001\u0191\u0001\u0191\u0001\u0191\u0001\u0191"+
		"\u0001\u0191\u0003\u0191\u0cf9\b\u0191\u0001\u0191\u0003\u0191\u0cfc\b"+
		"\u0191\u0001\u0191\u0001\u0191\u0003\u0191\u0d00\b\u0191\u0001\u0191\u0001"+
		"\u0191\u0003\u0191\u0d04\b\u0191\u0003\u0191\u0d06\b\u0191\u0001\u0192"+
		"\u0001\u0192\u0003\u0192\u0d0a\b\u0192\u0001\u0192\u0001\u0192\u0003\u0192"+
		"\u0d0e\b\u0192\u0001\u0192\u0001\u0192\u0003\u0192\u0d12\b\u0192\u0001"+
		"\u0192\u0001\u0192\u0003\u0192\u0d16\b\u0192\u0001\u0192\u0001\u0192\u0003"+
		"\u0192\u0d1a\b\u0192\u0001\u0192\u0001\u0192\u0003\u0192\u0d1e\b\u0192"+
		"\u0001\u0192\u0001\u0192\u0003\u0192\u0d22\b\u0192\u0001\u0192\u0001\u0192"+
		"\u0001\u0192\u0001\u0192\u0001\u0192\u0003\u0192\u0d29\b\u0192\u0001\u0192"+
		"\u0003\u0192\u0d2c\b\u0192\u0001\u0192\u0001\u0192\u0003\u0192\u0d30\b"+
		"\u0192\u0001\u0192\u0001\u0192\u0001\u0192\u0003\u0192\u0d35\b\u0192\u0003"+
		"\u0192\u0d37\b\u0192\u0001\u0193\u0001\u0193\u0003\u0193\u0d3b\b\u0193"+
		"\u0001\u0193\u0001\u0193\u0003\u0193\u0d3f\b\u0193\u0001\u0193\u0001\u0193"+
		"\u0003\u0193\u0d43\b\u0193\u0001\u0193\u0001\u0193\u0003\u0193\u0d47\b"+
		"\u0193\u0001\u0193\u0001\u0193\u0003\u0193\u0d4b\b\u0193\u0001\u0193\u0001"+
		"\u0193\u0003\u0193\u0d4f\b\u0193\u0001\u0193\u0001\u0193\u0001\u0193\u0003"+
		"\u0193\u0d54\b\u0193\u0001\u0193\u0001\u0193\u0001\u0193\u0001\u0193\u0001"+
		"\u0193\u0003\u0193\u0d5b\b\u0193\u0001\u0193\u0003\u0193\u0d5e\b\u0193"+
		"\u0001\u0193\u0001\u0193\u0001\u0193\u0003\u0193\u0d63\b\u0193\u0003\u0193"+
		"\u0d65\b\u0193\u0001\u0194\u0001\u0194\u0001\u0194\u0001\u0194\u0001\u0194"+
		"\u0003\u0194\u0d6c\b\u0194\u0001\u0194\u0001\u0194\u0003\u0194\u0d70\b"+
		"\u0194\u0003\u0194\u0d72\b\u0194\u0001\u0195\u0001\u0195\u0001\u0196\u0001"+
		"\u0196\u0001\u0197\u0001\u0197\u0003\u0197\u0d7a\b\u0197\u0001\u0197\u0001"+
		"\u0197\u0003\u0197\u0d7e\b\u0197\u0001\u0197\u0001\u0197\u0003\u0197\u0d82"+
		"\b\u0197\u0001\u0197\u0001\u0197\u0003\u0197\u0d86\b\u0197\u0001\u0197"+
		"\u0001\u0197\u0003\u0197\u0d8a\b\u0197\u0001\u0197\u0001\u0197\u0001\u0197"+
		"\u0001\u0197\u0001\u0197\u0003\u0197\u0d91\b\u0197\u0001\u0197\u0001\u0197"+
		"\u0003\u0197\u0d95\b\u0197\u0001\u0197\u0003\u0197\u0d98\b\u0197\u0001"+
		"\u0197\u0001\u0197\u0003\u0197\u0d9c\b\u0197\u0001\u0197\u0001\u0197\u0003"+
		"\u0197\u0da0\b\u0197\u0001\u0197\u0003\u0197\u0da3\b\u0197\u0003\u0197"+
		"\u0da5\b\u0197\u0001\u0198\u0001\u0198\u0003\u0198\u0da9\b\u0198\u0001"+
		"\u0199\u0001\u0199\u0001\u0199\u0001\u0199\u0001\u0199\u0003\u0199\u0db0"+
		"\b\u0199\u0001\u019a\u0001\u019a\u0001\u019b\u0001\u019b\u0001\u019b\u0003"+
		"\u019b\u0db7\b\u019b\u0001\u019b\u0001\u019b\u0001\u019b\u0001\u019b\u0003"+
		"\u019b\u0dbd\b\u019b\u0003\u019b\u0dbf\b\u019b\u0001\u019c\u0001\u019c"+
		"\u0001\u019c\u0003\u019c\u0dc4\b\u019c\u0001\u019c\u0001\u019c\u0001\u019c"+
		"\u0003\u019c\u0dc9\b\u019c\u0001\u019c\u0003\u019c\u0dcc\b\u019c\u0003"+
		"\u019c\u0dce\b\u019c\u0001\u019d\u0001\u019d\u0003\u019d\u0dd2\b\u019d"+
		"\u0001\u019e\u0001\u019e\u0001\u019e\u0003\u019e\u0dd7\b\u019e\u0001\u019e"+
		"\u0001\u019e\u0001\u019e\u0001\u019e\u0003\u019e\u0ddd\b\u019e\u0003\u019e"+
		"\u0ddf\b\u019e\u0001\u019f\u0001\u019f\u0001\u019f\u0003\u019f\u0de4\b"+
		"\u019f\u0001\u019f\u0001\u019f\u0001\u019f\u0001\u019f\u0003\u019f\u0dea"+
		"\b\u019f\u0003\u019f\u0dec\b\u019f\u0001\u01a0\u0001\u01a0\u0003\u01a0"+
		"\u0df0\b\u01a0\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0003\u01a1"+
		"\u0df6\b\u01a1\u0001\u01a2\u0001\u01a2\u0003\u01a2\u0dfa\b\u01a2\u0001"+
		"\u01a3\u0003\u01a3\u0dfd\b\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0003"+
		"\u01a3\u0e02\b\u01a3\u0001\u01a4\u0001\u01a4\u0003\u01a4\u0e06\b\u01a4"+
		"\u0001\u01a4\u0001\u01a4\u0003\u01a4\u0e0a\b\u01a4\u0001\u01a5\u0001\u01a5"+
		"\u0003\u01a5\u0e0e\b\u01a5\u0001\u01a6\u0001\u01a6\u0003\u01a6\u0e12\b"+
		"\u01a6\u0001\u01a7\u0001\u01a7\u0003\u01a7\u0e16\b\u01a7\u0001\u01a8\u0003"+
		"\u01a8\u0e19\b\u01a8\u0001\u01a8\u0001\u01a8\u0003\u01a8\u0e1d\b\u01a8"+
		"\u0001\u01a9\u0001\u01a9\u0003\u01a9\u0e21\b\u01a9\u0001\u01aa\u0001\u01aa"+
		"\u0003\u01aa\u0e25\b\u01aa\u0001\u01ab\u0003\u01ab\u0e28\b\u01ab\u0001"+
		"\u01ab\u0001\u01ab\u0003\u01ab\u0e2c\b\u01ab\u0001\u01ac\u0003\u01ac\u0e2f"+
		"\b\u01ac\u0001\u01ac\u0001\u01ac\u0001\u01ad\u0001\u01ad\u0001\u01ae\u0001"+
		"\u01ae\u0003\u01ae\u0e37\b\u01ae\u0001\u01ae\u0001\u01ae\u0001\u01af\u0001"+
		"\u01af\u0001\u01af\u0005\u01af\u0e3e\b\u01af\n\u01af\f\u01af\u0e41\t\u01af"+
		"\u0001\u01b0\u0001\u01b0\u0003\u01b0\u0e45\b\u01b0\u0001\u01b1\u0001\u01b1"+
		"\u0001\u01b1\u0001\u01b2\u0001\u01b2\u0003\u01b2\u0e4c\b\u01b2\u0001\u01b2"+
		"\u0001\u01b2\u0001\u01b3\u0001\u01b3\u0001\u01b3\u0003\u01b3\u0e53\b\u01b3"+
		"\u0001\u01b4\u0001\u01b4\u0001\u01b4\u0001\u01b4\u0003\u01b4\u0e59\b\u01b4"+
		"\u0001\u01b5\u0001\u01b5\u0001\u01b5\u0001\u01b6\u0001\u01b6\u0001\u01b6"+
		"\u0001\u01b6\u0003\u01b6\u0e62\b\u01b6\u0001\u01b7\u0001\u01b7\u0001\u01b8"+
		"\u0001\u01b8\u0003\u01b8\u0e68\b\u01b8\u0001\u01b9\u0001\u01b9\u0001\u01b9"+
		"\u0005\u01b9\u0e6d\b\u01b9\n\u01b9\f\u01b9\u0e70\t\u01b9\u0001\u01b9\u0001"+
		"\u01b9\u0003\u01b9\u0e74\b\u01b9\u0003\u01b9\u0e76\b\u01b9\u0001\u01ba"+
		"\u0001\u01ba\u0001\u01ba\u0004\u01ba\u0e7b\b\u01ba\u000b\u01ba\f\u01ba"+
		"\u0e7c\u0001\u01bb\u0001\u01bb\u0001\u01bb\u0001\u01bb\u0001\u01bb\u0001"+
		"\u01bb\u0003\u01bb\u0e85\b\u01bb\u0001\u01bc\u0003\u01bc\u0e88\b\u01bc"+
		"\u0001\u01bc\u0001\u01bc\u0001\u01bd\u0001\u01bd\u0001\u01be\u0001\u01be"+
		"\u0003\u01be\u0e90\b\u01be\u0001\u01bf\u0003\u01bf\u0e93\b\u01bf\u0001"+
		"\u01bf\u0001\u01bf\u0001\u01c0\u0001\u01c0\u0001\u01c0\u0001\u01c0\u0001"+
		"\u01c0\u0003\u01c0\u0e9c\b\u01c0\u0001\u01c1\u0003\u01c1\u0e9f\b\u01c1"+
		"\u0001\u01c1\u0001\u01c1\u0001\u01c2\u0001\u01c2\u0003\u01c2\u0ea5\b\u01c2"+
		"\u0001\u01c3\u0003\u01c3\u0ea8\b\u01c3\u0001\u01c3\u0001\u01c3\u0001\u01c4"+
		"\u0001\u01c4\u0003\u01c4\u0eae\b\u01c4\u0001\u01c4\u0001\u01c4\u0001\u01c4"+
		"\u0005\u01c4\u0eb3\b\u01c4\n\u01c4\f\u01c4\u0eb6\t\u01c4\u0001\u01c4\u0001"+
		"\u01c4\u0001\u01c4\u0004\u01c4\u0ebb\b\u01c4\u000b\u01c4\f\u01c4\u0ebc"+
		"\u0003\u01c4\u0ebf\b\u01c4\u0001\u01c5\u0001\u01c5\u0001\u01c6\u0001\u01c6"+
		"\u0001\u01c7\u0001\u01c7\u0001\u01c7\u0001\u01c8\u0001\u01c8\u0001\u01c9"+
		"\u0001\u01c9\u0003\u01c9\u0ecc\b\u01c9\u0001\u01c9\u0001\u01c9\u0001\u01ca"+
		"\u0001\u01ca\u0003\u01ca\u0ed2\b\u01ca\u0001\u01ca\u0003\u01ca\u0ed5\b"+
		"\u01ca\u0001\u01ca\u0001\u01ca\u0001\u01cb\u0001\u01cb\u0003\u01cb\u0edb"+
		"\b\u01cb\u0001\u01cb\u0001\u01cb\u0001\u01cc\u0001\u01cc\u0003\u01cc\u0ee1"+
		"\b\u01cc\u0001\u01cc\u0001\u01cc\u0003\u01cc\u0ee5\b\u01cc\u0001\u01cc"+
		"\u0001\u01cc\u0001\u01cd\u0001\u01cd\u0003\u01cd\u0eeb\b\u01cd\u0001\u01cd"+
		"\u0001\u01cd\u0001\u01cd\u0001\u01cd\u0001\u01ce\u0001\u01ce\u0003\u01ce"+
		"\u0ef3\b\u01ce\u0001\u01cf\u0001\u01cf\u0003\u01cf\u0ef7\b\u01cf\u0001"+
		"\u01d0\u0001\u01d0\u0003\u01d0\u0efb\b\u01d0\u0001\u01d1\u0001\u01d1\u0001"+
		"\u01d2\u0001\u01d2\u0001\u01d2\u0001\u01d2\u0003\u01d2\u0f03\b\u01d2\u0001"+
		"\u01d2\u0001\u01d2\u0001\u01d2\u0001\u01d2\u0001\u01d2\u0001\u01d2\u0001"+
		"\u01d2\u0001\u01d2\u0001\u01d2\u0005\u01d2\u0f0e\b\u01d2\n\u01d2\f\u01d2"+
		"\u0f11\t\u01d2\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3"+
		"\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3"+
		"\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3"+
		"\u0001\u01d3\u0001\u01d3\u0003\u01d3\u0f26\b\u01d3\u0001\u01d3\u0001\u01d3"+
		"\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3"+
		"\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3"+
		"\u0004\u01d3\u0f36\b\u01d3\u000b\u01d3\f\u01d3\u0f37\u0001\u01d3\u0001"+
		"\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0004"+
		"\u01d3\u0f41\b\u01d3\u000b\u01d3\f\u01d3\u0f42\u0001\u01d3\u0001\u01d3"+
		"\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3"+
		"\u0001\u01d3\u0001\u01d3\u0003\u01d3\u0f4f\b\u01d3\u0001\u01d3\u0001\u01d3"+
		"\u0001\u01d3\u0003\u01d3\u0f54\b\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3"+
		"\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3"+
		"\u0003\u01d3\u0f5f\b\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3"+
		"\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0003\u01d3\u0f68\b\u01d3\u0001\u01d3"+
		"\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0001\u01d3\u0005\u01d3\u0f6f\b\u01d3"+
		"\n\u01d3\f\u01d3\u0f72\t\u01d3\u0001\u01d4\u0001\u01d4\u0001\u01d4\u0001"+
		"\u01d4\u0001\u01d4\u0001\u01d4\u0001\u01d4\u0001\u01d4\u0001\u01d4\u0001"+
		"\u01d4\u0001\u01d4\u0001\u01d4\u0001\u01d4\u0001\u01d4\u0001\u01d4\u0003"+
		"\u01d4\u0f83\b\u01d4\u0001\u01d4\u0001\u01d4\u0001\u01d4\u0001\u01d4\u0001"+
		"\u01d4\u0001\u01d4\u0001\u01d4\u0001\u01d4\u0001\u01d4\u0001\u01d4\u0001"+
		"\u01d4\u0001\u01d4\u0005\u01d4\u0f91\b\u01d4\n\u01d4\f\u01d4\u0f94\t\u01d4"+
		"\u0001\u01d5\u0001\u01d5\u0001\u01d6\u0001\u01d6\u0001\u01d7\u0001\u01d7"+
		"\u0001\u01d7\u0001\u01d7\u0001\u01d7\u0001\u01d7\u0001\u01d7\u0001\u01d7"+
		"\u0001\u01d7\u0003\u01d7\u0fa3\b\u01d7\u0001\u01d8\u0001\u01d8\u0001\u01d8"+
		"\u0001\u01d8\u0001\u01d8\u0001\u01d8\u0001\u01d8\u0001\u01d8\u0001\u01d8"+
		"\u0001\u01d8\u0001\u01d8\u0001\u01d8\u0003\u01d8\u0fb1\b\u01d8\u0001\u01d9"+
		"\u0001\u01d9\u0001\u01d9\u0001\u01d9\u0001\u01d9\u0003\u01d9\u0fb8\b\u01d9"+
		"\u0001\u01da\u0001\u01da\u0001\u01da\u0001\u01da\u0001\u01db\u0001\u01db"+
		"\u0001\u01dc\u0001\u01dc\u0001\u01dd\u0001\u01dd\u0001\u01dd\u0001\u01dd"+
		"\u0001\u01dd\u0001\u01dd\u0001\u01dd\u0001\u01dd\u0001\u01dd\u0001\u01dd"+
		"\u0001\u01dd\u0001\u01dd\u0001\u01dd\u0001\u01dd\u0001\u01dd\u0003\u01dd"+
		"\u0fd1\b\u01dd\u0001\u01dd\u0003\u01dd\u0fd4\b\u01dd\u0001\u01dd\u0003"+
		"\u01dd\u0fd7\b\u01dd\u0001\u01dd\u0001\u01dd\u0001\u01dd\u0001\u01dd\u0001"+
		"\u01dd\u0001\u01dd\u0001\u01dd\u0001\u01dd\u0003\u01dd\u0fe1\b\u01dd\u0001"+
		"\u01dd\u0001\u01dd\u0001\u01dd\u0001\u01dd\u0001\u01dd\u0001\u01dd\u0001"+
		"\u01dd\u0003\u01dd\u0fea\b\u01dd\u0001\u01dd\u0001\u01dd\u0003\u01dd\u0fee"+
		"\b\u01dd\u0001\u01de\u0001\u01de\u0001\u01de\u0001\u01de\u0001\u01de\u0001"+
		"\u01de\u0001\u01de\u0001\u01de\u0001\u01de\u0001\u01de\u0001\u01de\u0001"+
		"\u01de\u0003\u01de\u0ffc\b\u01de\u0001\u01df\u0001\u01df\u0001\u01df\u0001"+
		"\u01df\u0001\u01df\u0001\u01df\u0001\u01df\u0001\u01df\u0001\u01df\u0001"+
		"\u01df\u0001\u01df\u0001\u01df\u0004\u01df\u100a\b\u01df\u000b\u01df\f"+
		"\u01df\u100b\u0001\u01df\u0001\u01df\u0001\u01df\u0001\u01df\u0001\u01df"+
		"\u0004\u01df\u1013\b\u01df\u000b\u01df\f\u01df\u1014\u0001\u01df\u0003"+
		"\u01df\u1018\b\u01df\u0001\u01df\u0001\u01df\u0001\u01df\u0001\u01df\u0004"+
		"\u01df\u101e\b\u01df\u000b\u01df\f\u01df\u101f\u0001\u01df\u0003\u01df"+
		"\u1023\b\u01df\u0001\u01df\u0001\u01df\u0003\u01df\u1027\b\u01df\u0001"+
		"\u01e0\u0001\u01e0\u0001\u01e0\u0001\u01e0\u0005\u01e0\u102d\b\u01e0\n"+
		"\u01e0\f\u01e0\u1030\t\u01e0\u0001\u01e0\u0001\u01e0\u0001\u01e0\u0001"+
		"\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e1\u0001\u01e2\u0001"+
		"\u01e2\u0001\u01e2\u0001\u01e3\u0001\u01e3\u0001\u01e3\u0001\u01e3\u0001"+
		"\u01e3\u0001\u01e3\u0003\u01e3\u1043\b\u01e3\u0001\u01e4\u0001\u01e4\u0001"+
		"\u01e4\u0001\u01e4\u0001\u01e4\u0001\u01e4\u0001\u01e4\u0001\u01e5\u0001"+
		"\u01e5\u0001\u01e5\u0001\u01e5\u0001\u01e5\u0001\u01e6\u0001\u01e6\u0001"+
		"\u01e6\u0001\u01e6\u0001\u01e6\u0003\u01e6\u1056\b\u01e6\u0001\u01e7\u0001"+
		"\u01e7\u0001\u01e7\u0001\u01e7\u0003\u01e7\u105c\b\u01e7\u0001\u01e7\u0003"+
		"\u01e7\u105f\b\u01e7\u0001\u01e8\u0001\u01e8\u0001\u01e8\u0001\u01e8\u0003"+
		"\u01e8\u1065\b\u01e8\u0001\u01e8\u0003\u01e8\u1068\b\u01e8\u0001\u01e9"+
		"\u0001\u01e9\u0001\u01e9\u0003\u01e9\u106d\b\u01e9\u0001\u01e9\u0003\u01e9"+
		"\u1070\b\u01e9\u0001\u01ea\u0001\u01ea\u0001\u01ea\u0001\u01ea\u0003\u01ea"+
		"\u1076\b\u01ea\u0001\u01ea\u0003\u01ea\u1079\b\u01ea\u0001\u01eb\u0001"+
		"\u01eb\u0001\u01eb\u0001\u01eb\u0003\u01eb\u107f\b\u01eb\u0001\u01eb\u0003"+
		"\u01eb\u1082\b\u01eb\u0001\u01ec\u0001\u01ec\u0003\u01ec\u1086\b\u01ec"+
		"\u0001\u01ed\u0001\u01ed\u0003\u01ed\u108a\b\u01ed\u0001\u01ee\u0001\u01ee"+
		"\u0003\u01ee\u108e\b\u01ee\u0001\u01ef\u0001\u01ef\u0001\u01f0\u0001\u01f0"+
		"\u0001\u01f1\u0001\u01f1\u0001\u01f2\u0001\u01f2\u0001\u01f2\u0001\u01f2"+
		"\u0001\u01f2\u0001\u01f2\u0001\u01f2\u0001\u01f2\u0001\u01f2\u0001\u01f2"+
		"\u0001\u01f2\u0001\u01f2\u0003\u01f2\u10a2\b\u01f2\u0001\u01f3\u0001\u01f3"+
		"\u0003\u01f3\u10a6\b\u01f3\u0001\u01f4\u0001\u01f4\u0001\u01f5\u0001\u01f5"+
		"\u0001\u01f5\u0003\u01f5\u10ad\b\u01f5\u0001\u01f5\u0001\u01f5\u0001\u01f6"+
		"\u0001\u01f6\u0001\u01f6\u0003\u01f6\u10b4\b\u01f6\u0001\u01f7\u0001\u01f7"+
		"\u0001\u01f8\u0001\u01f8\u0001\u01f9\u0003\u01f9\u10bb\b\u01f9\u0001\u01f9"+
		"\u0001\u01f9\u0001\u01f9\u0001\u01f9\u0005\u01f9\u10c1\b\u01f9\n\u01f9"+
		"\f\u01f9\u10c4\t\u01f9\u0003\u01f9\u10c6\b\u01f9\u0001\u01f9\u0001\u01f9"+
		"\u0001\u01fa\u0003\u01fa\u10cb\b\u01fa\u0001\u01fa\u0001\u01fa\u0001\u01fa"+
		"\u0001\u01fa\u0005\u01fa\u10d1\b\u01fa\n\u01fa\f\u01fa\u10d4\t\u01fa\u0003"+
		"\u01fa\u10d6\b\u01fa\u0001\u01fa\u0001\u01fa\u0001\u01fb\u0001\u01fb\u0001"+
		"\u01fb\u0001\u01fb\u0001\u01fc\u0001\u01fc\u0001\u01fc\u0001\u01fc\u0001"+
		"\u01fc\u0001\u01fc\u0001\u01fc\u0001\u01fc\u0005\u01fc\u10e6\b\u01fc\n"+
		"\u01fc\f\u01fc\u10e9\t\u01fc\u0001\u01fc\u0001\u01fc\u0001\u01fd\u0001"+
		"\u01fd\u0003\u01fd\u10ef\b\u01fd\u0001\u01fe\u0001\u01fe\u0001\u01fe\u0003"+
		"\u01fe\u10f4\b\u01fe\u0001\u01ff\u0003\u01ff\u10f7\b\u01ff\u0001\u01ff"+
		"\u0001\u01ff\u0001\u01ff\u0001\u01ff\u0005\u01ff\u10fd\b\u01ff\n\u01ff"+
		"\f\u01ff\u1100\t\u01ff\u0003\u01ff\u1102\b\u01ff\u0001\u01ff\u0001\u01ff"+
		"\u0001\u0200\u0003\u0200\u1107\b\u0200\u0001\u0200\u0001\u0200\u0001\u0200"+
		"\u0001\u0200\u0005\u0200\u110d\b\u0200\n\u0200\f\u0200\u1110\t\u0200\u0003"+
		"\u0200\u1112\b\u0200\u0001\u0200\u0001\u0200\u0001\u0201\u0001\u0201\u0001"+
		"\u0201\u0001\u0201\u0001\u0202\u0001\u0202\u0001\u0202\u0000\u0005\u012a"+
		"\u030a\u03a4\u03a6\u03a8\u0203\u0000\u0002\u0004\u0006\b\n\f\u000e\u0010"+
		"\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPR"+
		"TVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e"+
		"\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6"+
		"\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be"+
		"\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6"+
		"\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee"+
		"\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106"+
		"\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e"+
		"\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136"+
		"\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e"+
		"\u0150\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166"+
		"\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e"+
		"\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196"+
		"\u0198\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae"+
		"\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6"+
		"\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de"+
		"\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6"+
		"\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c\u020e"+
		"\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224\u0226"+
		"\u0228\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a\u023c\u023e"+
		"\u0240\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250\u0252\u0254\u0256"+
		"\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268\u026a\u026c\u026e"+
		"\u0270\u0272\u0274\u0276\u0278\u027a\u027c\u027e\u0280\u0282\u0284\u0286"+
		"\u0288\u028a\u028c\u028e\u0290\u0292\u0294\u0296\u0298\u029a\u029c\u029e"+
		"\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6"+
		"\u02b8\u02ba\u02bc\u02be\u02c0\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce"+
		"\u02d0\u02d2\u02d4\u02d6\u02d8\u02da\u02dc\u02de\u02e0\u02e2\u02e4\u02e6"+
		"\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8\u02fa\u02fc\u02fe"+
		"\u0300\u0302\u0304\u0306\u0308\u030a\u030c\u030e\u0310\u0312\u0314\u0316"+
		"\u0318\u031a\u031c\u031e\u0320\u0322\u0324\u0326\u0328\u032a\u032c\u032e"+
		"\u0330\u0332\u0334\u0336\u0338\u033a\u033c\u033e\u0340\u0342\u0344\u0346"+
		"\u0348\u034a\u034c\u034e\u0350\u0352\u0354\u0356\u0358\u035a\u035c\u035e"+
		"\u0360\u0362\u0364\u0366\u0368\u036a\u036c\u036e\u0370\u0372\u0374\u0376"+
		"\u0378\u037a\u037c\u037e\u0380\u0382\u0384\u0386\u0388\u038a\u038c\u038e"+
		"\u0390\u0392\u0394\u0396\u0398\u039a\u039c\u039e\u03a0\u03a2\u03a4\u03a6"+
		"\u03a8\u03aa\u03ac\u03ae\u03b0\u03b2\u03b4\u03b6\u03b8\u03ba\u03bc\u03be"+
		"\u03c0\u03c2\u03c4\u03c6\u03c8\u03ca\u03cc\u03ce\u03d0\u03d2\u03d4\u03d6"+
		"\u03d8\u03da\u03dc\u03de\u03e0\u03e2\u03e4\u03e6\u03e8\u03ea\u03ec\u03ee"+
		"\u03f0\u03f2\u03f4\u03f6\u03f8\u03fa\u03fc\u03fe\u0400\u0402\u0404\u0000"+
		")\u0002\u0000>>\u00c7\u00c7\u0001\u0000\u0148\u014b\u0001\u0000\u014c"+
		"\u014d\u0002\u0000RR\u00f6\u00f6\u0001\u0000\u011f\u0122\u0003\u0000j"+
		"j\u00fd\u00fd\u010a\u010a\u0001\u0000KL\u0002\u0000ZZ\u00b4\u00b4\u0002"+
		"\u0000\u00bd\u00bd\u00c4\u00c4\u0004\u0000\u001e\u001e\u00e4\u00e4\u00f9"+
		"\u00f9\u0113\u0113\u0002\u0000\u00c8\u00c8\u00ca\u00ca\u0001\u0000xy\u0002"+
		"\u0000\u0004\u0004\u0095\u0095\u0006\u0000**AAHH\u00ab\u00ac\u00ec\u00ed"+
		"\u00ef\u00ef\u0002\u0000\u001f\u001f]]\u0001\u0000\u00cb\u00cc\u0002\u0000"+
		"%&WX\u0001\u0000\u00bd\u00be\u0002\u0000\\\\\u0108\u0108\u0002\u0000\u00f8"+
		"\u00f8\u0135\u0135\u0002\u0000\u0019\u0019\u00f8\u00f8\u0002\u0000\u00ff"+
		"\u00ff\u012c\u012c\u0001\u000001\u0002\u0000\u00ee\u00ee\u0111\u0111\u0001"+
		"\u0000ST\u0002\u0000##\u00a0\u00a0\u0003\u0000\u0010\u0010MM}}\u0001\u0000"+
		"{|\u0006\u0000\u0007\u0007\t\t\r\r\u012e\u012e\u0132\u0132\u0134\u0134"+
		"\u0002\u0000YY\u00e9\u00e9\u0002\u0000\u0002\u0002\u0018\u0018\u0002\u0000"+
		"\u000e\u000e\u0011\u0011\u0003\u0000\b\b\u000e\u000e\u0011\u0011\u0011"+
		"\u0000\u001c\u001d\'\'))55:=EGUUiitt\u00a1\u00a1\u00a7\u00a7\u00bb\u00bb"+
		"\u00c9\u00c9\u00d1\u00d1\u00e5\u00e6\u00ea\u00ea\u00f1\u00f2\u0003\u0000"+
		"\u00a6\u00a6\u00ad\u00ad\u00cd\u00cd\u0002\u0000\u009c\u009c\u00dc\u00dc"+
		"\u0002\u0000\u00a8\u00a8\u010c\u010c\u0003\u000033\u00a9\u00a9\u00db\u00db"+
		"\u0003\u000022\u009b\u009b\u00fa\u00fa\u0001\u0000\u00af\u00b2\u0002\u0000"+
		"\u001c\u0126\u0128\u0128\u11c2\u0000\u0406\u0001\u0000\u0000\u0000\u0002"+
		"\u0411\u0001\u0000\u0000\u0000\u0004\u0415\u0001\u0000\u0000\u0000\u0006"+
		"\u0418\u0001\u0000\u0000\u0000\b\u041e\u0001\u0000\u0000\u0000\n\u042c"+
		"\u0001\u0000\u0000\u0000\f\u0430\u0001\u0000\u0000\u0000\u000e\u0432\u0001"+
		"\u0000\u0000\u0000\u0010\u043a\u0001\u0000\u0000\u0000\u0012\u043e\u0001"+
		"\u0000\u0000\u0000\u0014\u0443\u0001\u0000\u0000\u0000\u0016\u0447\u0001"+
		"\u0000\u0000\u0000\u0018\u044c\u0001\u0000\u0000\u0000\u001a\u044f\u0001"+
		"\u0000\u0000\u0000\u001c\u0456\u0001\u0000\u0000\u0000\u001e\u045c\u0001"+
		"\u0000\u0000\u0000 \u0463\u0001\u0000\u0000\u0000\"\u0467\u0001\u0000"+
		"\u0000\u0000$\u047b\u0001\u0000\u0000\u0000&\u047d\u0001\u0000\u0000\u0000"+
		"(\u0480\u0001\u0000\u0000\u0000*\u0485\u0001\u0000\u0000\u0000,\u048f"+
		"\u0001\u0000\u0000\u0000.\u0495\u0001\u0000\u0000\u00000\u0497\u0001\u0000"+
		"\u0000\u00002\u0499\u0001\u0000\u0000\u00004\u049b\u0001\u0000\u0000\u0000"+
		"6\u049d\u0001\u0000\u0000\u00008\u04a1\u0001\u0000\u0000\u0000:\u04a3"+
		"\u0001\u0000\u0000\u0000<\u04a5\u0001\u0000\u0000\u0000>\u04a9\u0001\u0000"+
		"\u0000\u0000@\u04ab\u0001\u0000\u0000\u0000B\u04af\u0001\u0000\u0000\u0000"+
		"D\u04b3\u0001\u0000\u0000\u0000F\u04b5\u0001\u0000\u0000\u0000H\u04b7"+
		"\u0001\u0000\u0000\u0000J\u04b9\u0001\u0000\u0000\u0000L\u04bb\u0001\u0000"+
		"\u0000\u0000N\u04bd\u0001\u0000\u0000\u0000P\u04bf\u0001\u0000\u0000\u0000"+
		"R\u04c7\u0001\u0000\u0000\u0000T\u04cf\u0001\u0000\u0000\u0000V\u04d9"+
		"\u0001\u0000\u0000\u0000X\u04db\u0001\u0000\u0000\u0000Z\u04e1\u0001\u0000"+
		"\u0000\u0000\\\u050d\u0001\u0000\u0000\u0000^\u050f\u0001\u0000\u0000"+
		"\u0000`\u0512\u0001\u0000\u0000\u0000b\u0515\u0001\u0000\u0000\u0000d"+
		"\u051b\u0001\u0000\u0000\u0000f\u051d\u0001\u0000\u0000\u0000h\u0520\u0001"+
		"\u0000\u0000\u0000j\u0524\u0001\u0000\u0000\u0000l\u0528\u0001\u0000\u0000"+
		"\u0000n\u052a\u0001\u0000\u0000\u0000p\u052c\u0001\u0000\u0000\u0000r"+
		"\u052e\u0001\u0000\u0000\u0000t\u0530\u0001\u0000\u0000\u0000v\u0534\u0001"+
		"\u0000\u0000\u0000x\u0536\u0001\u0000\u0000\u0000z\u0538\u0001\u0000\u0000"+
		"\u0000|\u053a\u0001\u0000\u0000\u0000~\u053e\u0001\u0000\u0000\u0000\u0080"+
		"\u0540\u0001\u0000\u0000\u0000\u0082\u0542\u0001\u0000\u0000\u0000\u0084"+
		"\u0546\u0001\u0000\u0000\u0000\u0086\u0548\u0001\u0000\u0000\u0000\u0088"+
		"\u054c\u0001\u0000\u0000\u0000\u008a\u0550\u0001\u0000\u0000\u0000\u008c"+
		"\u0552\u0001\u0000\u0000\u0000\u008e\u0557\u0001\u0000\u0000\u0000\u0090"+
		"\u0559\u0001\u0000\u0000\u0000\u0092\u055d\u0001\u0000\u0000\u0000\u0094"+
		"\u0561\u0001\u0000\u0000\u0000\u0096\u0563\u0001\u0000\u0000\u0000\u0098"+
		"\u0565\u0001\u0000\u0000\u0000\u009a\u0567\u0001\u0000\u0000\u0000\u009c"+
		"\u0569\u0001\u0000\u0000\u0000\u009e\u056b\u0001\u0000\u0000\u0000\u00a0"+
		"\u056f\u0001\u0000\u0000\u0000\u00a2\u0577\u0001\u0000\u0000\u0000\u00a4"+
		"\u0579\u0001\u0000\u0000\u0000\u00a6\u057d\u0001\u0000\u0000\u0000\u00a8"+
		"\u057f\u0001\u0000\u0000\u0000\u00aa\u0582\u0001\u0000\u0000\u0000\u00ac"+
		"\u058a\u0001\u0000\u0000\u0000\u00ae\u0591\u0001\u0000\u0000\u0000\u00b0"+
		"\u0593\u0001\u0000\u0000\u0000\u00b2\u059d\u0001\u0000\u0000\u0000\u00b4"+
		"\u059f\u0001\u0000\u0000\u0000\u00b6\u05a6\u0001\u0000\u0000\u0000\u00b8"+
		"\u05b0\u0001\u0000\u0000\u0000\u00ba\u05b4\u0001\u0000\u0000\u0000\u00bc"+
		"\u05b8\u0001\u0000\u0000\u0000\u00be\u05c2\u0001\u0000\u0000\u0000\u00c0"+
		"\u05c6\u0001\u0000\u0000\u0000\u00c2\u05c9\u0001\u0000\u0000\u0000\u00c4"+
		"\u05d1\u0001\u0000\u0000\u0000\u00c6\u05db\u0001\u0000\u0000\u0000\u00c8"+
		"\u05dd\u0001\u0000\u0000\u0000\u00ca\u05df\u0001\u0000\u0000\u0000\u00cc"+
		"\u05e5\u0001\u0000\u0000\u0000\u00ce\u05e7\u0001\u0000\u0000\u0000\u00d0"+
		"\u05f0\u0001\u0000\u0000\u0000\u00d2\u05f3\u0001\u0000\u0000\u0000\u00d4"+
		"\u05f9\u0001\u0000\u0000\u0000\u00d6\u0601\u0001\u0000\u0000\u0000\u00d8"+
		"\u0603\u0001\u0000\u0000\u0000\u00da\u060c\u0001\u0000\u0000\u0000\u00dc"+
		"\u0614\u0001\u0000\u0000\u0000\u00de\u062f\u0001\u0000\u0000\u0000\u00e0"+
		"\u0647\u0001\u0000\u0000\u0000\u00e2\u0649\u0001\u0000\u0000\u0000\u00e4"+
		"\u064c\u0001\u0000\u0000\u0000\u00e6\u0651\u0001\u0000\u0000\u0000\u00e8"+
		"\u065c\u0001\u0000\u0000\u0000\u00ea\u067c\u0001\u0000\u0000\u0000\u00ec"+
		"\u067e\u0001\u0000\u0000\u0000\u00ee\u0684\u0001\u0000\u0000\u0000\u00f0"+
		"\u0690\u0001\u0000\u0000\u0000\u00f2\u0694\u0001\u0000\u0000\u0000\u00f4"+
		"\u0698\u0001\u0000\u0000\u0000\u00f6\u069a\u0001\u0000\u0000\u0000\u00f8"+
		"\u069f\u0001\u0000\u0000\u0000\u00fa\u06a4\u0001\u0000\u0000\u0000\u00fc"+
		"\u06a6\u0001\u0000\u0000\u0000\u00fe\u06ab\u0001\u0000\u0000\u0000\u0100"+
		"\u06b1\u0001\u0000\u0000\u0000\u0102\u06b5\u0001\u0000\u0000\u0000\u0104"+
		"\u06bb\u0001\u0000\u0000\u0000\u0106\u06bd\u0001\u0000\u0000\u0000\u0108"+
		"\u06c0\u0001\u0000\u0000\u0000\u010a\u06c3\u0001\u0000\u0000\u0000\u010c"+
		"\u06ce\u0001\u0000\u0000\u0000\u010e\u06d0\u0001\u0000\u0000\u0000\u0110"+
		"\u06d6\u0001\u0000\u0000\u0000\u0112\u06de\u0001\u0000\u0000\u0000\u0114"+
		"\u06e2\u0001\u0000\u0000\u0000\u0116\u06ea\u0001\u0000\u0000\u0000\u0118"+
		"\u06ed\u0001\u0000\u0000\u0000\u011a\u06f7\u0001\u0000\u0000\u0000\u011c"+
		"\u06f9\u0001\u0000\u0000\u0000\u011e\u06fd\u0001\u0000\u0000\u0000\u0120"+
		"\u0702\u0001\u0000\u0000\u0000\u0122\u0707\u0001\u0000\u0000\u0000\u0124"+
		"\u070f\u0001\u0000\u0000\u0000\u0126\u0711\u0001\u0000\u0000\u0000\u0128"+
		"\u0713\u0001\u0000\u0000\u0000\u012a\u0715\u0001\u0000\u0000\u0000\u012c"+
		"\u0723\u0001\u0000\u0000\u0000\u012e\u0731\u0001\u0000\u0000\u0000\u0130"+
		"\u0733\u0001\u0000\u0000\u0000\u0132\u0737\u0001\u0000\u0000\u0000\u0134"+
		"\u0743\u0001\u0000\u0000\u0000\u0136\u0745\u0001\u0000\u0000\u0000\u0138"+
		"\u0748\u0001\u0000\u0000\u0000\u013a\u074c\u0001\u0000\u0000\u0000\u013c"+
		"\u074f\u0001\u0000\u0000\u0000\u013e\u0757\u0001\u0000\u0000\u0000\u0140"+
		"\u075a\u0001\u0000\u0000\u0000\u0142\u0760\u0001\u0000\u0000\u0000\u0144"+
		"\u0767\u0001\u0000\u0000\u0000\u0146\u076b\u0001\u0000\u0000\u0000\u0148"+
		"\u076d\u0001\u0000\u0000\u0000\u014a\u0770\u0001\u0000\u0000\u0000\u014c"+
		"\u077c\u0001\u0000\u0000\u0000\u014e\u077f\u0001\u0000\u0000\u0000\u0150"+
		"\u0783\u0001\u0000\u0000\u0000\u0152\u0785\u0001\u0000\u0000\u0000\u0154"+
		"\u078a\u0001\u0000\u0000\u0000\u0156\u078d\u0001\u0000\u0000\u0000\u0158"+
		"\u079a\u0001\u0000\u0000\u0000\u015a\u079c\u0001\u0000\u0000\u0000\u015c"+
		"\u07a1\u0001\u0000\u0000\u0000\u015e\u07a4\u0001\u0000\u0000\u0000\u0160"+
		"\u07a7\u0001\u0000\u0000\u0000\u0162\u07b7\u0001\u0000\u0000\u0000\u0164"+
		"\u07be\u0001\u0000\u0000\u0000\u0166\u07c0\u0001\u0000\u0000\u0000\u0168"+
		"\u07cf\u0001\u0000\u0000\u0000\u016a\u07d1\u0001\u0000\u0000\u0000\u016c"+
		"\u07d9\u0001\u0000\u0000\u0000\u016e\u07dd\u0001\u0000\u0000\u0000\u0170"+
		"\u07e0\u0001\u0000\u0000\u0000\u0172\u07fd\u0001\u0000\u0000\u0000\u0174"+
		"\u0805\u0001\u0000\u0000\u0000\u0176\u0809\u0001\u0000\u0000\u0000\u0178"+
		"\u080c\u0001\u0000\u0000\u0000\u017a\u0813\u0001\u0000\u0000\u0000\u017c"+
		"\u0815\u0001\u0000\u0000\u0000\u017e\u081d\u0001\u0000\u0000\u0000\u0180"+
		"\u0824\u0001\u0000\u0000\u0000\u0182\u0827\u0001\u0000\u0000\u0000\u0184"+
		"\u082e\u0001\u0000\u0000\u0000\u0186\u0831\u0001\u0000\u0000\u0000\u0188"+
		"\u0835\u0001\u0000\u0000\u0000\u018a\u083b\u0001\u0000\u0000\u0000\u018c"+
		"\u0843\u0001\u0000\u0000\u0000\u018e\u084c\u0001\u0000\u0000\u0000\u0190"+
		"\u0854\u0001\u0000\u0000\u0000\u0192\u0856\u0001\u0000\u0000\u0000\u0194"+
		"\u0859\u0001\u0000\u0000\u0000\u0196\u085c\u0001\u0000\u0000\u0000\u0198"+
		"\u085e\u0001\u0000\u0000\u0000\u019a\u0860\u0001\u0000\u0000\u0000\u019c"+
		"\u0862\u0001\u0000\u0000\u0000\u019e\u0864\u0001\u0000\u0000\u0000\u01a0"+
		"\u0868\u0001\u0000\u0000\u0000\u01a2\u0875\u0001\u0000\u0000\u0000\u01a4"+
		"\u0879\u0001\u0000\u0000\u0000\u01a6\u087c\u0001\u0000\u0000\u0000\u01a8"+
		"\u0887\u0001\u0000\u0000\u0000\u01aa\u0889\u0001\u0000\u0000\u0000\u01ac"+
		"\u088c\u0001\u0000\u0000\u0000\u01ae\u0894\u0001\u0000\u0000\u0000\u01b0"+
		"\u089b\u0001\u0000\u0000\u0000\u01b2\u089d\u0001\u0000\u0000\u0000\u01b4"+
		"\u08a6\u0001\u0000\u0000\u0000\u01b6\u08ad\u0001\u0000\u0000\u0000\u01b8"+
		"\u08b0\u0001\u0000\u0000\u0000\u01ba\u08b3\u0001\u0000\u0000\u0000\u01bc"+
		"\u08b8\u0001\u0000\u0000\u0000\u01be\u08ba\u0001\u0000\u0000\u0000\u01c0"+
		"\u08be\u0001\u0000\u0000\u0000\u01c2\u08c3\u0001\u0000\u0000\u0000\u01c4"+
		"\u08c5\u0001\u0000\u0000\u0000\u01c6\u08cc\u0001\u0000\u0000\u0000\u01c8"+
		"\u08ce\u0001\u0000\u0000\u0000\u01ca\u08d8\u0001\u0000\u0000\u0000\u01cc"+
		"\u08de\u0001\u0000\u0000\u0000\u01ce\u08e0\u0001\u0000\u0000\u0000\u01d0"+
		"\u08e8\u0001\u0000\u0000\u0000\u01d2\u08f0\u0001\u0000\u0000\u0000\u01d4"+
		"\u08f8\u0001\u0000\u0000\u0000\u01d6\u0902\u0001\u0000\u0000\u0000\u01d8"+
		"\u0907\u0001\u0000\u0000\u0000\u01da\u0909\u0001\u0000\u0000\u0000\u01dc"+
		"\u0913\u0001\u0000\u0000\u0000\u01de\u091e\u0001\u0000\u0000\u0000\u01e0"+
		"\u0925\u0001\u0000\u0000\u0000\u01e2\u0927\u0001\u0000\u0000\u0000\u01e4"+
		"\u092a\u0001\u0000\u0000\u0000\u01e6\u0930\u0001\u0000\u0000\u0000\u01e8"+
		"\u0934\u0001\u0000\u0000\u0000\u01ea\u0936\u0001\u0000\u0000\u0000\u01ec"+
		"\u093b\u0001\u0000\u0000\u0000\u01ee\u0944\u0001\u0000\u0000\u0000\u01f0"+
		"\u0948\u0001\u0000\u0000\u0000\u01f2\u094b\u0001\u0000\u0000\u0000\u01f4"+
		"\u094f\u0001\u0000\u0000\u0000\u01f6\u0951\u0001\u0000\u0000\u0000\u01f8"+
		"\u0954\u0001\u0000\u0000\u0000\u01fa\u0958\u0001\u0000\u0000\u0000\u01fc"+
		"\u0960\u0001\u0000\u0000\u0000\u01fe\u0966\u0001\u0000\u0000\u0000\u0200"+
		"\u096f\u0001\u0000\u0000\u0000\u0202\u0971\u0001\u0000\u0000\u0000\u0204"+
		"\u0978\u0001\u0000\u0000\u0000\u0206\u097e\u0001\u0000\u0000\u0000\u0208"+
		"\u0984\u0001\u0000\u0000\u0000\u020a\u098b\u0001\u0000\u0000\u0000\u020c"+
		"\u0991\u0001\u0000\u0000\u0000\u020e\u0998\u0001\u0000\u0000\u0000\u0210"+
		"\u09a7\u0001\u0000\u0000\u0000\u0212\u09a9\u0001\u0000\u0000\u0000\u0214"+
		"\u09b6\u0001\u0000\u0000\u0000\u0216\u09b9\u0001\u0000\u0000\u0000\u0218"+
		"\u09bc\u0001\u0000\u0000\u0000\u021a\u09be\u0001\u0000\u0000\u0000\u021c"+
		"\u09c6\u0001\u0000\u0000\u0000\u021e\u09cf\u0001\u0000\u0000\u0000\u0220"+
		"\u09d8\u0001\u0000\u0000\u0000\u0222\u09da\u0001\u0000\u0000\u0000\u0224"+
		"\u09e3\u0001\u0000\u0000\u0000\u0226\u09eb\u0001\u0000\u0000\u0000\u0228"+
		"\u09f8\u0001\u0000\u0000\u0000\u022a\u0a02\u0001\u0000\u0000\u0000\u022c"+
		"\u0a04\u0001\u0000\u0000\u0000\u022e\u0a0c\u0001\u0000\u0000\u0000\u0230"+
		"\u0a15\u0001\u0000\u0000\u0000\u0232\u0a1c\u0001\u0000\u0000\u0000\u0234"+
		"\u0a1e\u0001\u0000\u0000\u0000\u0236\u0a20\u0001\u0000\u0000\u0000\u0238"+
		"\u0a28\u0001\u0000\u0000\u0000\u023a\u0a2a\u0001\u0000\u0000\u0000\u023c"+
		"\u0a2e\u0001\u0000\u0000\u0000\u023e\u0a38\u0001\u0000\u0000\u0000\u0240"+
		"\u0a3a\u0001\u0000\u0000\u0000\u0242\u0a43\u0001\u0000\u0000\u0000\u0244"+
		"\u0a45\u0001\u0000\u0000\u0000\u0246\u0a4a\u0001\u0000\u0000\u0000\u0248"+
		"\u0a4f\u0001\u0000\u0000\u0000\u024a\u0a53\u0001\u0000\u0000\u0000\u024c"+
		"\u0a58\u0001\u0000\u0000\u0000\u024e\u0a5c\u0001\u0000\u0000\u0000\u0250"+
		"\u0a60\u0001\u0000\u0000\u0000\u0252\u0a68\u0001\u0000\u0000\u0000\u0254"+
		"\u0a6a\u0001\u0000\u0000\u0000\u0256\u0a74\u0001\u0000\u0000\u0000\u0258"+
		"\u0a7f\u0001\u0000\u0000\u0000\u025a\u0a83\u0001\u0000\u0000\u0000\u025c"+
		"\u0a8e\u0001\u0000\u0000\u0000\u025e\u0a90\u0001\u0000\u0000\u0000\u0260"+
		"\u0a93\u0001\u0000\u0000\u0000\u0262\u0a98\u0001\u0000\u0000\u0000\u0264"+
		"\u0aa1\u0001\u0000\u0000\u0000\u0266\u0aa3\u0001\u0000\u0000\u0000\u0268"+
		"\u0aa6\u0001\u0000\u0000\u0000\u026a\u0aa9\u0001\u0000\u0000\u0000\u026c"+
		"\u0aac\u0001\u0000\u0000\u0000\u026e\u0ab0\u0001\u0000\u0000\u0000\u0270"+
		"\u0ab4\u0001\u0000\u0000\u0000\u0272\u0ab8\u0001\u0000\u0000\u0000\u0274"+
		"\u0abd\u0001\u0000\u0000\u0000\u0276\u0abf\u0001\u0000\u0000\u0000\u0278"+
		"\u0ac7\u0001\u0000\u0000\u0000\u027a\u0ac9\u0001\u0000\u0000\u0000\u027c"+
		"\u0acc\u0001\u0000\u0000\u0000\u027e\u0acf\u0001\u0000\u0000\u0000\u0280"+
		"\u0ad7\u0001\u0000\u0000\u0000\u0282\u0adb\u0001\u0000\u0000\u0000\u0284"+
		"\u0add\u0001\u0000\u0000\u0000\u0286\u0ae0\u0001\u0000\u0000\u0000\u0288"+
		"\u0aea\u0001\u0000\u0000\u0000\u028a\u0aec\u0001\u0000\u0000\u0000\u028c"+
		"\u0aee\u0001\u0000\u0000\u0000\u028e\u0af1\u0001\u0000\u0000\u0000\u0290"+
		"\u0b0b\u0001\u0000\u0000\u0000\u0292\u0b0d\u0001\u0000\u0000\u0000\u0294"+
		"\u0b0f\u0001\u0000\u0000\u0000\u0296\u0b11\u0001\u0000\u0000\u0000\u0298"+
		"\u0b13\u0001\u0000\u0000\u0000\u029a\u0b1b\u0001\u0000\u0000\u0000\u029c"+
		"\u0b22\u0001\u0000\u0000\u0000\u029e\u0b24\u0001\u0000\u0000\u0000\u02a0"+
		"\u0b2a\u0001\u0000\u0000\u0000\u02a2\u0b2c\u0001\u0000\u0000\u0000\u02a4"+
		"\u0b2f\u0001\u0000\u0000\u0000\u02a6\u0b32\u0001\u0000\u0000\u0000\u02a8"+
		"\u0b34\u0001\u0000\u0000\u0000\u02aa\u0b38\u0001\u0000\u0000\u0000\u02ac"+
		"\u0b3a\u0001\u0000\u0000\u0000\u02ae\u0b44\u0001\u0000\u0000\u0000\u02b0"+
		"\u0b49\u0001\u0000\u0000\u0000\u02b2\u0b4b\u0001\u0000\u0000\u0000\u02b4"+
		"\u0b5c\u0001\u0000\u0000\u0000\u02b6\u0b5e\u0001\u0000\u0000\u0000\u02b8"+
		"\u0b65\u0001\u0000\u0000\u0000\u02ba\u0b67\u0001\u0000\u0000\u0000\u02bc"+
		"\u0b69\u0001\u0000\u0000\u0000\u02be\u0b71\u0001\u0000\u0000\u0000\u02c0"+
		"\u0b75\u0001\u0000\u0000\u0000\u02c2\u0b83\u0001\u0000\u0000\u0000\u02c4"+
		"\u0b85\u0001\u0000\u0000\u0000\u02c6\u0b8c\u0001\u0000\u0000\u0000\u02c8"+
		"\u0b8e\u0001\u0000\u0000\u0000\u02ca\u0b90\u0001\u0000\u0000\u0000\u02cc"+
		"\u0b95\u0001\u0000\u0000\u0000\u02ce\u0b97\u0001\u0000\u0000\u0000\u02d0"+
		"\u0b9b\u0001\u0000\u0000\u0000\u02d2\u0b9f\u0001\u0000\u0000\u0000\u02d4"+
		"\u0ba3\u0001\u0000\u0000\u0000\u02d6\u0ba9\u0001\u0000\u0000\u0000\u02d8"+
		"\u0bb0\u0001\u0000\u0000\u0000\u02da\u0bb7\u0001\u0000\u0000\u0000\u02dc"+
		"\u0bbf\u0001\u0000\u0000\u0000\u02de\u0bc1\u0001\u0000\u0000\u0000\u02e0"+
		"\u0bc5\u0001\u0000\u0000\u0000\u02e2\u0bca\u0001\u0000\u0000\u0000\u02e4"+
		"\u0bd0\u0001\u0000\u0000\u0000\u02e6\u0bdb\u0001\u0000\u0000\u0000\u02e8"+
		"\u0be6\u0001\u0000\u0000\u0000\u02ea\u0be8\u0001\u0000\u0000\u0000\u02ec"+
		"\u0bea\u0001\u0000\u0000\u0000\u02ee\u0bf1\u0001\u0000\u0000\u0000\u02f0"+
		"\u0bf3\u0001\u0000\u0000\u0000\u02f2\u0bf9\u0001\u0000\u0000\u0000\u02f4"+
		"\u0c00\u0001\u0000\u0000\u0000\u02f6\u0c06\u0001\u0000\u0000\u0000\u02f8"+
		"\u0c08\u0001\u0000\u0000\u0000\u02fa\u0c0a\u0001\u0000\u0000\u0000\u02fc"+
		"\u0c0c\u0001\u0000\u0000\u0000\u02fe\u0c15\u0001\u0000\u0000\u0000\u0300"+
		"\u0c17\u0001\u0000\u0000\u0000\u0302\u0c1d\u0001\u0000\u0000\u0000\u0304"+
		"\u0c25\u0001\u0000\u0000\u0000\u0306\u0c2b\u0001\u0000\u0000\u0000\u0308"+
		"\u0c2e\u0001\u0000\u0000\u0000\u030a\u0c6f\u0001\u0000\u0000\u0000\u030c"+
		"\u0c88\u0001\u0000\u0000\u0000\u030e\u0c90\u0001\u0000\u0000\u0000\u0310"+
		"\u0c92\u0001\u0000\u0000\u0000\u0312\u0c96\u0001\u0000\u0000\u0000\u0314"+
		"\u0cc3\u0001\u0000\u0000\u0000\u0316\u0cc5\u0001\u0000\u0000\u0000\u0318"+
		"\u0cc7\u0001\u0000\u0000\u0000\u031a\u0cc9\u0001\u0000\u0000\u0000\u031c"+
		"\u0ccd\u0001\u0000\u0000\u0000\u031e\u0cd1\u0001\u0000\u0000\u0000\u0320"+
		"\u0cd5\u0001\u0000\u0000\u0000\u0322\u0d05\u0001\u0000\u0000\u0000\u0324"+
		"\u0d36\u0001\u0000\u0000\u0000\u0326\u0d64\u0001\u0000\u0000\u0000\u0328"+
		"\u0d66\u0001\u0000\u0000\u0000\u032a\u0d73\u0001\u0000\u0000\u0000\u032c"+
		"\u0d75\u0001\u0000\u0000\u0000\u032e\u0da4\u0001\u0000\u0000\u0000\u0330"+
		"\u0da8\u0001\u0000\u0000\u0000\u0332\u0daf\u0001\u0000\u0000\u0000\u0334"+
		"\u0db1\u0001\u0000\u0000\u0000\u0336\u0dbe\u0001\u0000\u0000\u0000\u0338"+
		"\u0dcd\u0001\u0000\u0000\u0000\u033a\u0dcf\u0001\u0000\u0000\u0000\u033c"+
		"\u0dde\u0001\u0000\u0000\u0000\u033e\u0deb\u0001\u0000\u0000\u0000\u0340"+
		"\u0ded\u0001\u0000\u0000\u0000\u0342\u0df5\u0001\u0000\u0000\u0000\u0344"+
		"\u0df9\u0001\u0000\u0000\u0000\u0346\u0dfc\u0001\u0000\u0000\u0000\u0348"+
		"\u0e03\u0001\u0000\u0000\u0000\u034a\u0e0b\u0001\u0000\u0000\u0000\u034c"+
		"\u0e11\u0001\u0000\u0000\u0000\u034e\u0e13\u0001\u0000\u0000\u0000\u0350"+
		"\u0e18\u0001\u0000\u0000\u0000\u0352\u0e20\u0001\u0000\u0000\u0000\u0354"+
		"\u0e22\u0001\u0000\u0000\u0000\u0356\u0e27\u0001\u0000\u0000\u0000\u0358"+
		"\u0e2e\u0001\u0000\u0000\u0000\u035a\u0e32\u0001\u0000\u0000\u0000\u035c"+
		"\u0e34\u0001\u0000\u0000\u0000\u035e\u0e3a\u0001\u0000\u0000\u0000\u0360"+
		"\u0e42\u0001\u0000\u0000\u0000\u0362\u0e46\u0001\u0000\u0000\u0000\u0364"+
		"\u0e49\u0001\u0000\u0000\u0000\u0366\u0e52\u0001\u0000\u0000\u0000\u0368"+
		"\u0e58\u0001\u0000\u0000\u0000\u036a\u0e5a\u0001\u0000\u0000\u0000\u036c"+
		"\u0e61\u0001\u0000\u0000\u0000\u036e\u0e63\u0001\u0000\u0000\u0000\u0370"+
		"\u0e65\u0001\u0000\u0000\u0000\u0372\u0e69\u0001\u0000\u0000\u0000\u0374"+
		"\u0e7a\u0001\u0000\u0000\u0000\u0376\u0e84\u0001\u0000\u0000\u0000\u0378"+
		"\u0e87\u0001\u0000\u0000\u0000\u037a\u0e8b\u0001\u0000\u0000\u0000\u037c"+
		"\u0e8f\u0001\u0000\u0000\u0000\u037e\u0e92\u0001\u0000\u0000\u0000\u0380"+
		"\u0e9b\u0001\u0000\u0000\u0000\u0382\u0e9e\u0001\u0000\u0000\u0000\u0384"+
		"\u0ea4\u0001\u0000\u0000\u0000\u0386\u0ea7\u0001\u0000\u0000\u0000\u0388"+
		"\u0ebe\u0001\u0000\u0000\u0000\u038a\u0ec0\u0001\u0000\u0000\u0000\u038c"+
		"\u0ec2\u0001\u0000\u0000\u0000\u038e\u0ec4\u0001\u0000\u0000\u0000\u0390"+
		"\u0ec7\u0001\u0000\u0000\u0000\u0392\u0ec9\u0001\u0000\u0000\u0000\u0394"+
		"\u0ecf\u0001\u0000\u0000\u0000\u0396\u0ed8\u0001\u0000\u0000\u0000\u0398"+
		"\u0ee4\u0001\u0000\u0000\u0000\u039a\u0ee8\u0001\u0000\u0000\u0000\u039c"+
		"\u0ef2\u0001\u0000\u0000\u0000\u039e\u0ef6\u0001\u0000\u0000\u0000\u03a0"+
		"\u0efa\u0001\u0000\u0000\u0000\u03a2\u0efc\u0001\u0000\u0000\u0000\u03a4"+
		"\u0f02\u0001\u0000\u0000\u0000\u03a6\u0f5e\u0001\u0000\u0000\u0000\u03a8"+
		"\u0f82\u0001\u0000\u0000\u0000\u03aa\u0f95\u0001\u0000\u0000\u0000\u03ac"+
		"\u0f97\u0001\u0000\u0000\u0000\u03ae\u0fa2\u0001\u0000\u0000\u0000\u03b0"+
		"\u0fb0\u0001\u0000\u0000\u0000\u03b2\u0fb7\u0001\u0000\u0000\u0000\u03b4"+
		"\u0fb9\u0001\u0000\u0000\u0000\u03b6\u0fbd\u0001\u0000\u0000\u0000\u03b8"+
		"\u0fbf\u0001\u0000\u0000\u0000\u03ba\u0fed\u0001\u0000\u0000\u0000\u03bc"+
		"\u0ffb\u0001\u0000\u0000\u0000\u03be\u1026\u0001\u0000\u0000\u0000\u03c0"+
		"\u1028\u0001\u0000\u0000\u0000\u03c2\u1034\u0001\u0000\u0000\u0000\u03c4"+
		"\u1039\u0001\u0000\u0000\u0000\u03c6\u1042\u0001\u0000\u0000\u0000\u03c8"+
		"\u1044\u0001\u0000\u0000\u0000\u03ca\u104b\u0001\u0000\u0000\u0000\u03cc"+
		"\u1055\u0001\u0000\u0000\u0000\u03ce\u105e\u0001\u0000\u0000\u0000\u03d0"+
		"\u1067\u0001\u0000\u0000\u0000\u03d2\u1069\u0001\u0000\u0000\u0000\u03d4"+
		"\u1078\u0001\u0000\u0000\u0000\u03d6\u1081\u0001\u0000\u0000\u0000\u03d8"+
		"\u1085\u0001\u0000\u0000\u0000\u03da\u1089\u0001\u0000\u0000\u0000\u03dc"+
		"\u108d\u0001\u0000\u0000\u0000\u03de\u108f\u0001\u0000\u0000\u0000\u03e0"+
		"\u1091\u0001\u0000\u0000\u0000\u03e2\u1093\u0001\u0000\u0000\u0000\u03e4"+
		"\u10a1\u0001\u0000\u0000\u0000\u03e6\u10a5\u0001\u0000\u0000\u0000\u03e8"+
		"\u10a7\u0001\u0000\u0000\u0000\u03ea\u10a9\u0001\u0000\u0000\u0000\u03ec"+
		"\u10b3\u0001\u0000\u0000\u0000\u03ee\u10b5\u0001\u0000\u0000\u0000\u03f0"+
		"\u10b7\u0001\u0000\u0000\u0000\u03f2\u10ba\u0001\u0000\u0000\u0000\u03f4"+
		"\u10ca\u0001\u0000\u0000\u0000\u03f6\u10d9\u0001\u0000\u0000\u0000\u03f8"+
		"\u10dd\u0001\u0000\u0000\u0000\u03fa\u10ee\u0001\u0000\u0000\u0000\u03fc"+
		"\u10f3\u0001\u0000\u0000\u0000\u03fe\u10f6\u0001\u0000\u0000\u0000\u0400"+
		"\u1106\u0001\u0000\u0000\u0000\u0402\u1115\u0001\u0000\u0000\u0000\u0404"+
		"\u1119\u0001\u0000\u0000\u0000\u0406\u0408\u0003\u0002\u0001\u0000\u0407"+
		"\u0409\u0005\u0017\u0000\u0000\u0408\u0407\u0001\u0000\u0000\u0000\u0408"+
		"\u0409\u0001\u0000\u0000\u0000\u0409\u040a\u0001\u0000\u0000\u0000\u040a"+
		"\u040b\u0005\u0000\u0000\u0001\u040b\u0001\u0001\u0000\u0000\u0000\u040c"+
		"\u040e\u0003\u0004\u0002\u0000\u040d\u040f\u0003&\u0013\u0000\u040e\u040d"+
		"\u0001\u0000\u0000\u0000\u040e\u040f\u0001\u0000\u0000\u0000\u040f\u0412"+
		"\u0001\u0000\u0000\u0000\u0410\u0412\u0003&\u0013\u0000\u0411\u040c\u0001"+
		"\u0000\u0000\u0000\u0411\u0410\u0001\u0000\u0000\u0000\u0412\u0003\u0001"+
		"\u0000\u0000\u0000\u0413\u0416\u0003\u0006\u0003\u0000\u0414\u0416\u0003"+
		"\n\u0005\u0000\u0415\u0413\u0001\u0000\u0000\u0000\u0415\u0414\u0001\u0000"+
		"\u0000\u0000\u0416\u0005\u0001\u0000\u0000\u0000\u0417\u0419\u0003\b\u0004"+
		"\u0000\u0418\u0417\u0001\u0000\u0000\u0000\u0419\u041a\u0001\u0000\u0000"+
		"\u0000\u041a\u0418\u0001\u0000\u0000\u0000\u041a\u041b\u0001\u0000\u0000"+
		"\u0000\u041b\u0007\u0001\u0000\u0000\u0000\u041c\u041f\u0003\u000e\u0007"+
		"\u0000\u041d\u041f\u0003\"\u0011\u0000\u041e\u041c\u0001\u0000\u0000\u0000"+
		"\u041e\u041d\u0001\u0000\u0000\u0000\u041f\t\u0001\u0000\u0000\u0000\u0420"+
		"\u0425\u0003(\u0014\u0000\u0421\u0423\u00038\u001c\u0000\u0422\u0424\u0003"+
		"\f\u0006\u0000\u0423\u0422\u0001\u0000\u0000\u0000\u0423\u0424\u0001\u0000"+
		"\u0000\u0000\u0424\u0426\u0001\u0000\u0000\u0000\u0425\u0421\u0001\u0000"+
		"\u0000\u0000\u0425\u0426\u0001\u0000\u0000\u0000\u0426\u042d\u0001\u0000"+
		"\u0000\u0000\u0427\u0429\u00038\u001c\u0000\u0428\u042a\u0003\f\u0006"+
		"\u0000\u0429\u0428\u0001\u0000\u0000\u0000\u0429\u042a\u0001\u0000\u0000"+
		"\u0000\u042a\u042d\u0001\u0000\u0000\u0000\u042b\u042d\u0003\f\u0006\u0000"+
		"\u042c\u0420\u0001\u0000\u0000\u0000\u042c\u0427\u0001\u0000\u0000\u0000"+
		"\u042c\u042b\u0001\u0000\u0000\u0000\u042d\u000b\u0001\u0000\u0000\u0000"+
		"\u042e\u0431\u00032\u0019\u0000\u042f\u0431\u00034\u001a\u0000\u0430\u042e"+
		"\u0001\u0000\u0000\u0000\u0430\u042f\u0001\u0000\u0000\u0000\u0431\r\u0001"+
		"\u0000\u0000\u0000\u0432\u0433\u0005\u00e0\u0000\u0000\u0433\u0438\u0005"+
		"\u00e1\u0000\u0000\u0434\u0439\u0003\u0010\b\u0000\u0435\u0439\u0003\u0012"+
		"\t\u0000\u0436\u0439\u0003\u0014\n\u0000\u0437\u0439\u0003\u0018\f\u0000"+
		"\u0438\u0434\u0001\u0000\u0000\u0000\u0438\u0435\u0001\u0000\u0000\u0000"+
		"\u0438\u0436\u0001\u0000\u0000\u0000\u0438\u0437\u0001\u0000\u0000\u0000"+
		"\u0439\u000f\u0001\u0000\u0000\u0000\u043a\u043b\u0005\u00de\u0000\u0000"+
		"\u043b\u043c\u0003\u0366\u01b3\u0000\u043c\u0011\u0001\u0000\u0000\u0000"+
		"\u043d\u043f\u0005\u00cf\u0000\u0000\u043e\u043d\u0001\u0000\u0000\u0000"+
		"\u043e\u043f\u0001\u0000\u0000\u0000\u043f\u0440\u0001\u0000\u0000\u0000"+
		"\u0440\u0441\u0005w\u0000\u0000\u0441\u0442\u0003\u00c6c\u0000\u0442\u0013"+
		"\u0001\u0000\u0000\u0000\u0443\u0444\u0005\u00f5\u0000\u0000\u0444\u0445"+
		"\u0005\u011b\u0000\u0000\u0445\u0446\u0003\u0016\u000b\u0000\u0446\u0015"+
		"\u0001\u0000\u0000\u0000\u0447\u0448\u0003\u03a8\u01d4\u0000\u0448\u0017"+
		"\u0001\u0000\u0000\u0000\u0449\u044d\u0003\u001a\r\u0000\u044a\u044d\u0003"+
		"\u001c\u000e\u0000\u044b\u044d\u0003\u001e\u000f\u0000\u044c\u0449\u0001"+
		"\u0000\u0000\u0000\u044c\u044a\u0001\u0000\u0000\u0000\u044c\u044b\u0001"+
		"\u0000\u0000\u0000\u044d\u0019\u0001\u0000\u0000\u0000\u044e\u0450\u0005"+
		"\u00cf\u0000\u0000\u044f\u044e\u0001\u0000\u0000\u0000\u044f\u0450\u0001"+
		"\u0000\u0000\u0000\u0450\u0451\u0001\u0000\u0000\u0000\u0451\u0452\u0005"+
		"w\u0000\u0000\u0452\u0453\u0003 \u0010\u0000\u0453\u0454\u0003\u00b8\\"+
		"\u0000\u0454\u001b\u0001\u0000\u0000\u0000\u0455\u0457\u0005.\u0000\u0000"+
		"\u0456\u0455\u0001\u0000\u0000\u0000\u0456\u0457\u0001\u0000\u0000\u0000"+
		"\u0457\u0458\u0001\u0000\u0000\u0000\u0458\u0459\u0005\u00f0\u0000\u0000"+
		"\u0459\u045a\u0003 \u0010\u0000\u045a\u045b\u0003\u00be_\u0000\u045b\u001d"+
		"\u0001\u0000\u0000\u0000\u045c\u045d\u0005\u010f\u0000\u0000\u045d\u045e"+
		"\u0003 \u0010\u0000\u045e\u045f\u0003\u00c4b\u0000\u045f\u001f\u0001\u0000"+
		"\u0000\u0000\u0460\u0461\u0005\u0083\u0000\u0000\u0461\u0462\u0005\u00b7"+
		"\u0000\u0000\u0462\u0464\u0005h\u0000\u0000\u0463\u0460\u0001\u0000\u0000"+
		"\u0000\u0463\u0464\u0001\u0000\u0000\u0000\u0464\u0465\u0001\u0000\u0000"+
		"\u0000\u0465\u0466\u0003\u008cF\u0000\u0466!\u0001\u0000\u0000\u0000\u0467"+
		"\u0468\u0005\u00e0\u0000\u0000\u0468\u046a\u0005\u00d8\u0000\u0000\u0469"+
		"\u046b\u0003$\u0012\u0000\u046a\u0469\u0001\u0000\u0000\u0000\u046a\u046b"+
		"\u0001\u0000\u0000\u0000\u046b#\u0001\u0000\u0000\u0000\u046c\u046e\u0005"+
		"\u001f\u0000\u0000\u046d\u046c\u0001\u0000\u0000\u0000\u046d\u046e\u0001"+
		"\u0000\u0000\u0000\u046e\u046f\u0001\u0000\u0000\u0000\u046f\u047c\u0007"+
		"\u0000\u0000\u0000\u0470\u047c\u0005\u00de\u0000\u0000\u0471\u0473\u0005"+
		"\u00cf\u0000\u0000\u0472\u0471\u0001\u0000\u0000\u0000\u0472\u0473\u0001"+
		"\u0000\u0000\u0000\u0473\u0474\u0001\u0000\u0000\u0000\u0474\u047c\u0005"+
		"w\u0000\u0000\u0475\u0476\u0005\u00f5\u0000\u0000\u0476\u047c\u0005\u011b"+
		"\u0000\u0000\u0477\u0479\u0005\u00c6\u0000\u0000\u0478\u0477\u0001\u0000"+
		"\u0000\u0000\u0478\u0479\u0001\u0000\u0000\u0000\u0479\u047a\u0001\u0000"+
		"\u0000\u0000\u047a\u047c\u0003\u008cF\u0000\u047b\u046d\u0001\u0000\u0000"+
		"\u0000\u047b\u0470\u0001\u0000\u0000\u0000\u047b\u0472\u0001\u0000\u0000"+
		"\u0000\u047b\u0475\u0001\u0000\u0000\u0000\u047b\u0478\u0001\u0000\u0000"+
		"\u0000\u047c%\u0001\u0000\u0000\u0000\u047d\u047e\u0005\u00e0\u0000\u0000"+
		"\u047e\u047f\u0005?\u0000\u0000\u047f\'\u0001\u0000\u0000\u0000\u0480"+
		"\u0481\u0005\u00eb\u0000\u0000\u0481\u0483\u0005\u00fb\u0000\u0000\u0482"+
		"\u0484\u0003*\u0015\u0000\u0483\u0482\u0001\u0000\u0000\u0000\u0483\u0484"+
		"\u0001\u0000\u0000\u0000\u0484)\u0001\u0000\u0000\u0000\u0485\u048a\u0003"+
		",\u0016\u0000\u0486\u0487\u0005\u0005\u0000\u0000\u0487\u0489\u0003,\u0016"+
		"\u0000\u0488\u0486\u0001\u0000\u0000\u0000\u0489\u048c\u0001\u0000\u0000"+
		"\u0000\u048a\u0488\u0001\u0000\u0000\u0000\u048a\u048b\u0001\u0000\u0000"+
		"\u0000\u048b+\u0001\u0000\u0000\u0000\u048c\u048a\u0001\u0000\u0000\u0000"+
		"\u048d\u0490\u0003.\u0017\u0000\u048e\u0490\u00030\u0018\u0000\u048f\u048d"+
		"\u0001\u0000\u0000\u0000\u048f\u048e\u0001\u0000\u0000\u0000\u0490-\u0001"+
		"\u0000\u0000\u0000\u0491\u0492\u0005\u00d2\u0000\u0000\u0492\u0496\u0005"+
		"\u00bf\u0000\u0000\u0493\u0494\u0005\u00d2\u0000\u0000\u0494\u0496\u0005"+
		"\u0118\u0000\u0000\u0495\u0491\u0001\u0000\u0000\u0000\u0495\u0493\u0001"+
		"\u0000\u0000\u0000\u0496/\u0001\u0000\u0000\u0000\u0497\u0498\u0005~\u0000"+
		"\u0000\u04981\u0001\u0000\u0000\u0000\u0499\u049a\u0005\u00da\u0000\u0000"+
		"\u049a3\u0001\u0000\u0000\u0000\u049b\u049c\u0005B\u0000\u0000\u049c5"+
		"\u0001\u0000\u0000\u0000\u049d\u049e\u0005\n\u0000\u0000\u049e\u049f\u0003"+
		"8\u001c\u0000\u049f\u04a0\u0005\u0014\u0000\u0000\u04a07\u0001\u0000\u0000"+
		"\u0000\u04a1\u04a2\u0003\u00aaU\u0000\u04a29\u0001\u0000\u0000\u0000\u04a3"+
		"\u04a4\u0003\u00aaU\u0000\u04a4;\u0001\u0000\u0000\u0000\u04a5\u04a6\u0005"+
		"\n\u0000\u0000\u04a6\u04a7\u0003>\u001f\u0000\u04a7\u04a8\u0005\u0014"+
		"\u0000\u0000\u04a8=\u0001\u0000\u0000\u0000\u04a9\u04aa\u0003\u00aaU\u0000"+
		"\u04aa?\u0001\u0000\u0000\u0000\u04ab\u04ac\u0005\n\u0000\u0000\u04ac"+
		"\u04ad\u00038\u001c\u0000\u04ad\u04ae\u0005\u0014\u0000\u0000\u04aeA\u0001"+
		"\u0000\u0000\u0000\u04af\u04b0\u0003\u00aaU\u0000\u04b0C\u0001\u0000\u0000"+
		"\u0000\u04b1\u04b4\u0003F#\u0000\u04b2\u04b4\u0003H$\u0000\u04b3\u04b1"+
		"\u0001\u0000\u0000\u0000\u04b3\u04b2\u0001\u0000\u0000\u0000\u04b4E\u0001"+
		"\u0000\u0000\u0000\u04b5\u04b6\u0007\u0001\u0000\u0000\u04b6G\u0001\u0000"+
		"\u0000\u0000\u04b7\u04b8\u0007\u0002\u0000\u0000\u04b8I\u0001\u0000\u0000"+
		"\u0000\u04b9\u04ba\u0005\u0150\u0000\u0000\u04baK\u0001\u0000\u0000\u0000"+
		"\u04bb\u04bc\u0005\u0151\u0000\u0000\u04bcM\u0001\u0000\u0000\u0000\u04bd"+
		"\u04be\u0005\u0152\u0000\u0000\u04beO\u0001\u0000\u0000\u0000\u04bf\u04c4"+
		"\u0003J%\u0000\u04c0\u04c1\u0005\u001b\u0000\u0000\u04c1\u04c3\u0003J"+
		"%\u0000\u04c2\u04c0\u0001\u0000\u0000\u0000\u04c3\u04c6\u0001\u0000\u0000"+
		"\u0000\u04c4\u04c2\u0001\u0000\u0000\u0000\u04c4\u04c5\u0001\u0000\u0000"+
		"\u0000\u04c5Q\u0001\u0000\u0000\u0000\u04c6\u04c4\u0001\u0000\u0000\u0000"+
		"\u04c7\u04cc\u0003L&\u0000\u04c8\u04c9\u0005\u001b\u0000\u0000\u04c9\u04cb"+
		"\u0003L&\u0000\u04ca\u04c8\u0001\u0000\u0000\u0000\u04cb\u04ce\u0001\u0000"+
		"\u0000\u0000\u04cc\u04ca\u0001\u0000\u0000\u0000\u04cc\u04cd\u0001\u0000"+
		"\u0000\u0000\u04cdS\u0001\u0000\u0000\u0000\u04ce\u04cc\u0001\u0000\u0000"+
		"\u0000\u04cf\u04d4\u0003N\'\u0000\u04d0\u04d1\u0005\u001b\u0000\u0000"+
		"\u04d1\u04d3\u0003N\'\u0000\u04d2\u04d0\u0001\u0000\u0000\u0000\u04d3"+
		"\u04d6\u0001\u0000\u0000\u0000\u04d4\u04d2\u0001\u0000\u0000\u0000\u04d4"+
		"\u04d5\u0001\u0000\u0000\u0000\u04d5U\u0001\u0000\u0000\u0000\u04d6\u04d4"+
		"\u0001\u0000\u0000\u0000\u04d7\u04da\u0003J%\u0000\u04d8\u04da\u0003L"+
		"&\u0000\u04d9\u04d7\u0001\u0000\u0000\u0000\u04d9\u04d8\u0001\u0000\u0000"+
		"\u0000\u04daW\u0001\u0000\u0000\u0000\u04db\u04dc\u0005\u00b8\u0000\u0000"+
		"\u04dcY\u0001\u0000\u0000\u0000\u04dd\u04e2\u0003^/\u0000\u04de\u04e2"+
		"\u0003`0\u0000\u04df\u04e2\u0003b1\u0000\u04e0\u04e2\u0003\\.\u0000\u04e1"+
		"\u04dd\u0001\u0000\u0000\u0000\u04e1\u04de\u0001\u0000\u0000\u0000\u04e1"+
		"\u04df\u0001\u0000\u0000\u0000\u04e1\u04e0\u0001\u0000\u0000\u0000\u04e2"+
		"[\u0001\u0000\u0000\u0000\u04e3\u04e4\u0005Q\u0000\u0000\u04e4\u04e5\u0005"+
		"\u0154\u0000\u0000\u04e5\u04e6\u0005\u014e\u0000\u0000\u04e6\u04e7\u0005"+
		"\u000e\u0000\u0000\u04e7\u04e8\u0005\u014f\u0000\u0000\u04e8\u04e9\u0005"+
		"\u000e\u0000\u0000\u04e9\u04ea\u0005\u014f\u0000\u0000\u04ea\u050e\u0005"+
		"\u0154\u0000\u0000\u04eb\u04ec\u0005\u00f5\u0000\u0000\u04ec\u04ed\u0005"+
		"\u0154\u0000\u0000\u04ed\u04ee\u0005\u014f\u0000\u0000\u04ee\u04ef\u0005"+
		"\u0004\u0000\u0000\u04ef\u04f0\u0005\u014f\u0000\u0000\u04f0\u04f1\u0005"+
		"\u0004\u0000\u0000\u04f1\u04f2\u0005\u014f\u0000\u0000\u04f2\u050e\u0005"+
		"\u0154\u0000\u0000\u04f3\u04f4\u0005\u00f6\u0000\u0000\u04f4\u04f5\u0005"+
		"\u0154\u0000\u0000\u04f5\u04f6\u0005\u014e\u0000\u0000\u04f6\u04f7\u0005"+
		"\u000e\u0000\u0000\u04f7\u04f8\u0005\u014f\u0000\u0000\u04f8\u04f9\u0005"+
		"\u000e\u0000\u0000\u04f9\u04fa\u0005\u014f\u0000\u0000\u04fa\u04fb\u0005"+
		"\u014f\u0000\u0000\u04fb\u04fc\u0005\u0004\u0000\u0000\u04fc\u04fd\u0005"+
		"\u014f\u0000\u0000\u04fd\u04fe\u0005\u0004\u0000\u0000\u04fe\u04ff\u0005"+
		"\u014f\u0000\u0000\u04ff\u050e\u0005\u0154\u0000\u0000\u0500\u0501\u0005"+
		"R\u0000\u0000\u0501\u0502\u0005\u0154\u0000\u0000\u0502\u0503\u0005\u014e"+
		"\u0000\u0000\u0503\u0504\u0005\u000e\u0000\u0000\u0504\u0505\u0005\u014f"+
		"\u0000\u0000\u0505\u0506\u0005\u000e\u0000\u0000\u0506\u0507\u0005\u014f"+
		"\u0000\u0000\u0507\u0508\u0005\u014f\u0000\u0000\u0508\u0509\u0005\u0004"+
		"\u0000\u0000\u0509\u050a\u0005\u014f\u0000\u0000\u050a\u050b\u0005\u0004"+
		"\u0000\u0000\u050b\u050c\u0005\u014f\u0000\u0000\u050c\u050e\u0005\u0154"+
		"\u0000\u0000\u050d\u04e3\u0001\u0000\u0000\u0000\u050d\u04eb\u0001\u0000"+
		"\u0000\u0000\u050d\u04f3\u0001\u0000\u0000\u0000\u050d\u0500\u0001\u0000"+
		"\u0000\u0000\u050e]\u0001\u0000\u0000\u0000\u050f\u0510\u0005Q\u0000\u0000"+
		"\u0510\u0511\u0003V+\u0000\u0511_\u0001\u0000\u0000\u0000\u0512\u0513"+
		"\u0005\u00f5\u0000\u0000\u0513\u0514\u0003V+\u0000\u0514a\u0001\u0000"+
		"\u0000\u0000\u0515\u0516\u0007\u0003\u0000\u0000\u0516\u0517\u0003V+\u0000"+
		"\u0517c\u0001\u0000\u0000\u0000\u0518\u0519\u0005`\u0000\u0000\u0519\u051c"+
		"\u0003V+\u0000\u051a\u051c\u0003f3\u0000\u051b\u0518\u0001\u0000\u0000"+
		"\u0000\u051b\u051a\u0001\u0000\u0000\u0000\u051ce\u0001\u0000\u0000\u0000"+
		"\u051d\u051e\u0005\u0148\u0000\u0000\u051e\u051f\u0003h4\u0000\u051fg"+
		"\u0001\u0000\u0000\u0000\u0520\u0521\u0007\u0004\u0000\u0000\u0521i\u0001"+
		"\u0000\u0000\u0000\u0522\u0525\u0005\u0157\u0000\u0000\u0523\u0525\u0003"+
		"l6\u0000\u0524\u0522\u0001\u0000\u0000\u0000\u0524\u0523\u0001\u0000\u0000"+
		"\u0000\u0525k\u0001\u0000\u0000\u0000\u0526\u0529\u0003R)\u0000\u0527"+
		"\u0529\u0003T*\u0000\u0528\u0526\u0001\u0000\u0000\u0000\u0528\u0527\u0001"+
		"\u0000\u0000\u0000\u0529m\u0001\u0000\u0000\u0000\u052a\u052b\u0003j5"+
		"\u0000\u052bo\u0001\u0000\u0000\u0000\u052c\u052d\u0005\u0157\u0000\u0000"+
		"\u052dq\u0001\u0000\u0000\u0000\u052e\u052f\u0003j5\u0000\u052fs\u0001"+
		"\u0000\u0000\u0000\u0530\u0531\u0003j5\u0000\u0531u\u0001\u0000\u0000"+
		"\u0000\u0532\u0535\u0005\u0157\u0000\u0000\u0533\u0535\u0003x<\u0000\u0534"+
		"\u0532\u0001\u0000\u0000\u0000\u0534\u0533\u0001\u0000\u0000\u0000\u0535"+
		"w\u0001\u0000\u0000\u0000\u0536\u0537\u0003l6\u0000\u0537y\u0001\u0000"+
		"\u0000\u0000\u0538\u0539\u0003j5\u0000\u0539{\u0001\u0000\u0000\u0000"+
		"\u053a\u053b\u0003j5\u0000\u053b}\u0001\u0000\u0000\u0000\u053c\u053f"+
		"\u0005\u0157\u0000\u0000\u053d\u053f\u0003\u0080@\u0000\u053e\u053c\u0001"+
		"\u0000\u0000\u0000\u053e\u053d\u0001\u0000\u0000\u0000\u053f\u007f\u0001"+
		"\u0000\u0000\u0000\u0540\u0541\u0003l6\u0000\u0541\u0081\u0001\u0000\u0000"+
		"\u0000\u0542\u0543\u0003j5\u0000\u0543\u0083\u0001\u0000\u0000\u0000\u0544"+
		"\u0547\u0003j5\u0000\u0545\u0547\u0003\u0404\u0202\u0000\u0546\u0544\u0001"+
		"\u0000\u0000\u0000\u0546\u0545\u0001\u0000\u0000\u0000\u0547\u0085\u0001"+
		"\u0000\u0000\u0000\u0548\u0549\u0003j5\u0000\u0549\u0087\u0001\u0000\u0000"+
		"\u0000\u054a\u054d\u0003j5\u0000\u054b\u054d\u0003\u0404\u0202\u0000\u054c"+
		"\u054a\u0001\u0000\u0000\u0000\u054c\u054b\u0001\u0000\u0000\u0000\u054d"+
		"\u0089\u0001\u0000\u0000\u0000\u054e\u0551\u0003j5\u0000\u054f\u0551\u0003"+
		"\u0404\u0202\u0000\u0550\u054e\u0001\u0000\u0000\u0000\u0550\u054f\u0001"+
		"\u0000\u0000\u0000\u0551\u008b\u0001\u0000\u0000\u0000\u0552\u0555\u0005"+
		"\u0006\u0000\u0000\u0553\u0556\u0003D\"\u0000\u0554\u0556\u0003j5\u0000"+
		"\u0555\u0553\u0001\u0000\u0000\u0000\u0555\u0554\u0001\u0000\u0000\u0000"+
		"\u0556\u008d\u0001\u0000\u0000\u0000\u0557\u0558\u0003\u00a0P\u0000\u0558"+
		"\u008f\u0001\u0000\u0000\u0000\u0559\u055a\u0003\u00a0P\u0000\u055a\u0091"+
		"\u0001\u0000\u0000\u0000\u055b\u055e\u0003\u0096K\u0000\u055c\u055e\u0003"+
		"\u0094J\u0000\u055d\u055b\u0001\u0000\u0000\u0000\u055d\u055c\u0001\u0000"+
		"\u0000\u0000\u055e\u0093\u0001\u0000\u0000\u0000\u055f\u0562\u0003\u0098"+
		"L\u0000\u0560\u0562\u0003\u009aM\u0000\u0561\u055f\u0001\u0000\u0000\u0000"+
		"\u0561\u0560\u0001\u0000\u0000\u0000\u0562\u0095\u0001\u0000\u0000\u0000"+
		"\u0563\u0564\u0003\u00a0P\u0000\u0564\u0097\u0001\u0000\u0000\u0000\u0565"+
		"\u0566\u0003\u00a0P\u0000\u0566\u0099\u0001\u0000\u0000\u0000\u0567\u0568"+
		"\u0003j5\u0000\u0568\u009b\u0001\u0000\u0000\u0000\u0569\u056a\u0003\u00a0"+
		"P\u0000\u056a\u009d\u0001\u0000\u0000\u0000\u056b\u056c\u0003\u00a0P\u0000"+
		"\u056c\u009f\u0001\u0000\u0000\u0000\u056d\u0570\u0003j5\u0000\u056e\u0570"+
		"\u0003\u0404\u0202\u0000\u056f\u056d\u0001\u0000\u0000\u0000\u056f\u056e"+
		"\u0001\u0000\u0000\u0000\u0570\u00a1\u0001\u0000\u0000\u0000\u0571\u0578"+
		"\u0003\u00a4R\u0000\u0572\u0578\u0003\u00a6S\u0000\u0573\u0578\u0003\u00a8"+
		"T\u0000\u0574\u0578\u0003Z-\u0000\u0575\u0578\u0003d2\u0000\u0576\u0578"+
		"\u0003X,\u0000\u0577\u0571\u0001\u0000\u0000\u0000\u0577\u0572\u0001\u0000"+
		"\u0000\u0000\u0577\u0573\u0001\u0000\u0000\u0000\u0577\u0574\u0001\u0000"+
		"\u0000\u0000\u0577\u0575\u0001\u0000\u0000\u0000\u0577\u0576\u0001\u0000"+
		"\u0000\u0000\u0578\u00a3\u0001\u0000\u0000\u0000\u0579\u057a\u0007\u0005"+
		"\u0000\u0000\u057a\u00a5\u0001\u0000\u0000\u0000\u057b\u057e\u0003P(\u0000"+
		"\u057c\u057e\u0003R)\u0000\u057d\u057b\u0001\u0000\u0000\u0000\u057d\u057c"+
		"\u0001\u0000\u0000\u0000\u057e\u00a7\u0001\u0000\u0000\u0000\u057f\u0580"+
		"\u0005\u0153\u0000\u0000\u0580\u00a9\u0001\u0000\u0000\u0000\u0581\u0583"+
		"\u0003\u0194\u00ca\u0000\u0582\u0581\u0001\u0000\u0000\u0000\u0582\u0583"+
		"\u0001\u0000\u0000\u0000\u0583\u0585\u0001\u0000\u0000\u0000\u0584\u0586"+
		"\u0003\u00acV\u0000\u0585\u0584\u0001\u0000\u0000\u0000\u0585\u0586\u0001"+
		"\u0000\u0000\u0000\u0586\u0587\u0001\u0000\u0000\u0000\u0587\u0588\u0003"+
		"\u00b0X\u0000\u0588\u00ab\u0001\u0000\u0000\u0000\u0589\u058b\u0003\u00ae"+
		"W\u0000\u058a\u0589\u0001\u0000\u0000\u0000\u058b\u058c\u0001\u0000\u0000"+
		"\u0000\u058c\u058a\u0001\u0000\u0000\u0000\u058c\u058d\u0001\u0000\u0000"+
		"\u0000\u058d\u00ad\u0001\u0000\u0000\u0000\u058e\u0592\u0003\u00b6[\u0000"+
		"\u058f\u0592\u0003\u00bc^\u0000\u0590\u0592\u0003\u00c2a\u0000\u0591\u058e"+
		"\u0001\u0000\u0000\u0000\u0591\u058f\u0001\u0000\u0000\u0000\u0591\u0590"+
		"\u0001\u0000\u0000\u0000\u0592\u00af\u0001\u0000\u0000\u0000\u0593\u0597"+
		"\u0003\u00b2Y\u0000\u0594\u0596\u0003\u00b4Z\u0000\u0595\u0594\u0001\u0000"+
		"\u0000\u0000\u0596\u0599\u0001\u0000\u0000\u0000\u0597\u0595\u0001\u0000"+
		"\u0000\u0000\u0597\u0598\u0001\u0000\u0000\u0000\u0598\u00b1\u0001\u0000"+
		"\u0000\u0000\u0599\u0597\u0001\u0000\u0000\u0000\u059a\u059e\u0003\u00d2"+
		"i\u0000\u059b\u059e\u0003\u00f2y\u0000\u059c\u059e\u0003\u0128\u0094\u0000"+
		"\u059d\u059a\u0001\u0000\u0000\u0000\u059d\u059b\u0001\u0000\u0000\u0000"+
		"\u059d\u059c\u0001\u0000\u0000\u0000\u059e\u00b3\u0001\u0000\u0000\u0000"+
		"\u059f\u05a1\u0005\u00ae\u0000\u0000\u05a0\u05a2\u0003\u027c\u013e\u0000"+
		"\u05a1\u05a0\u0001\u0000\u0000\u0000\u05a1\u05a2\u0001\u0000\u0000\u0000"+
		"\u05a2\u05a3\u0001\u0000\u0000\u0000\u05a3\u05a4\u0003\u00b2Y\u0000\u05a4"+
		"\u00b5\u0001\u0000\u0000\u0000\u05a5\u05a7\u0005\u00cf\u0000\u0000\u05a6"+
		"\u05a5\u0001\u0000\u0000\u0000\u05a6\u05a7\u0001\u0000\u0000\u0000\u05a7"+
		"\u05a8\u0001\u0000\u0000\u0000\u05a8\u05a9\u0005w\u0000\u0000\u05a9\u05aa"+
		"\u0003\u0090H\u0000\u05aa\u05ab\u0003\u00b8\\\u0000\u05ab\u00b7\u0001"+
		"\u0000\u0000\u0000\u05ac\u05ae\u0003\u030c\u0186\u0000\u05ad\u05ac\u0001"+
		"\u0000\u0000\u0000\u05ad\u05ae\u0001\u0000\u0000\u0000\u05ae\u05af\u0001"+
		"\u0000\u0000\u0000\u05af\u05b1\u0003\u0344\u01a2\u0000\u05b0\u05ad\u0001"+
		"\u0000\u0000\u0000\u05b0\u05b1\u0001\u0000\u0000\u0000\u05b1\u05b2\u0001"+
		"\u0000\u0000\u0000\u05b2\u05b3\u0003\u00ba]\u0000\u05b3\u00b9\u0001\u0000"+
		"\u0000\u0000\u05b4\u05b5\u0005\u0007\u0000\u0000\u05b5\u05b6\u0003\u00c6"+
		"c\u0000\u05b6\u00bb\u0001\u0000\u0000\u0000\u05b7\u05b9\u0005.\u0000\u0000"+
		"\u05b8\u05b7\u0001\u0000\u0000\u0000\u05b8\u05b9\u0001\u0000\u0000\u0000"+
		"\u05b9\u05ba\u0001\u0000\u0000\u0000\u05ba\u05bb\u0005\u00f0\u0000\u0000"+
		"\u05bb\u05bc\u0003\u009cN\u0000\u05bc\u05bd\u0003\u00be_\u0000\u05bd\u00bd"+
		"\u0001\u0000\u0000\u0000\u05be\u05c0\u0003\u030c\u0186\u0000\u05bf\u05be"+
		"\u0001\u0000\u0000\u0000\u05bf\u05c0\u0001\u0000\u0000\u0000\u05c0\u05c1"+
		"\u0001\u0000\u0000\u0000\u05c1\u05c3\u0003\u034a\u01a5\u0000\u05c2\u05bf"+
		"\u0001\u0000\u0000\u0000\u05c2\u05c3\u0001\u0000\u0000\u0000\u05c3\u05c4"+
		"\u0001\u0000\u0000\u0000\u05c4\u05c5\u0003\u00c0`\u0000\u05c5\u00bf\u0001"+
		"\u0000\u0000\u0000\u05c6\u05c7\u0005\u0007\u0000\u0000\u05c7\u05c8\u0003"+
		"\u00ccf\u0000\u05c8\u00c1\u0001\u0000\u0000\u0000\u05c9\u05ca\u0005\u010f"+
		"\u0000\u0000\u05ca\u05cb\u0003\u009eO\u0000\u05cb\u05cc\u0003\u00c4b\u0000"+
		"\u05cc\u00c3\u0001\u0000\u0000\u0000\u05cd\u05cf\u0003\u030c\u0186\u0000"+
		"\u05ce\u05cd\u0001\u0000\u0000\u0000\u05ce\u05cf\u0001\u0000\u0000\u0000"+
		"\u05cf\u05d0\u0001\u0000\u0000\u0000\u05d0\u05d2\u0003\u030a\u0185\u0000"+
		"\u05d1\u05ce\u0001\u0000\u0000\u0000\u05d1\u05d2\u0001\u0000\u0000\u0000"+
		"\u05d2\u05d3\u0001\u0000\u0000\u0000\u05d3\u05d4\u0005\u0007\u0000\u0000"+
		"\u05d4\u05d5\u0003\u03a4\u01d2\u0000\u05d5\u00c5\u0001\u0000\u0000\u0000"+
		"\u05d6\u05dc\u0003\u00cae\u0000\u05d7\u05dc\u0003\u00d0h\u0000\u05d8\u05dc"+
		"\u0003\u0376\u01bb\u0000\u05d9\u05dc\u0003p8\u0000\u05da\u05dc\u0003\u00c8"+
		"d\u0000\u05db\u05d6\u0001\u0000\u0000\u0000\u05db\u05d7\u0001\u0000\u0000"+
		"\u0000\u05db\u05d8\u0001\u0000\u0000\u0000\u05db\u05d9\u0001\u0000\u0000"+
		"\u0000\u05db\u05da\u0001\u0000\u0000\u0000\u05dc\u00c7\u0001\u0000\u0000"+
		"\u0000\u05dd\u05de\u0007\u0006\u0000\u0000\u05de\u00c9\u0001\u0000\u0000"+
		"\u0000\u05df\u05e0\u0003@ \u0000\u05e0\u00cb\u0001\u0000\u0000\u0000\u05e1"+
		"\u05e6\u0003\u00ceg\u0000\u05e2\u05e6\u0003\u00d0h\u0000\u05e3\u05e6\u0003"+
		"\u0380\u01c0\u0000\u05e4\u05e6\u0003p8\u0000\u05e5\u05e1\u0001\u0000\u0000"+
		"\u0000\u05e5\u05e2\u0001\u0000\u0000\u0000\u05e5\u05e3\u0001\u0000\u0000"+
		"\u0000\u05e5\u05e4\u0001\u0000\u0000\u0000\u05e6\u00cd\u0001\u0000\u0000"+
		"\u0000\u05e7\u05e8\u0003@ \u0000\u05e8\u00cf\u0001\u0000\u0000\u0000\u05e9"+
		"\u05ea\u0005\u0112\u0000\u0000\u05ea\u05f1\u0003\u03a8\u01d4\u0000\u05eb"+
		"\u05ec\u0005\f\u0000\u0000\u05ec\u05ed\u0003\u03a4\u01d2\u0000\u05ed\u05ee"+
		"\u0005\u0016\u0000\u0000\u05ee\u05f1\u0001\u0000\u0000\u0000\u05ef\u05f1"+
		"\u0003\u03a8\u01d4\u0000\u05f0\u05e9\u0001\u0000\u0000\u0000\u05f0\u05eb"+
		"\u0001\u0000\u0000\u0000\u05f0\u05ef\u0001\u0000\u0000\u0000\u05f1\u00d1"+
		"\u0001\u0000\u0000\u0000\u05f2\u05f4\u0003\u00d4j\u0000\u05f3\u05f2\u0001"+
		"\u0000\u0000\u0000\u05f4\u05f5\u0001\u0000\u0000\u0000\u05f5\u05f3\u0001"+
		"\u0000\u0000\u0000\u05f5\u05f6\u0001\u0000\u0000\u0000\u05f6\u00d3\u0001"+
		"\u0000\u0000\u0000\u05f7\u05fa\u0003\u00d6k\u0000\u05f8\u05fa\u0003\u00f0"+
		"x\u0000\u05f9\u05f7\u0001\u0000\u0000\u0000\u05f9\u05f8\u0001\u0000\u0000"+
		"\u0000\u05fa\u00d5\u0001\u0000\u0000\u0000\u05fb\u0602\u0003\u00d8l\u0000"+
		"\u05fc\u0602\u0003\u00dcn\u0000\u05fd\u0602\u0003\u00e8t\u0000\u05fe\u0602"+
		"\u0003\u00dam\u0000\u05ff\u0602\u0003\u00e6s\u0000\u0600\u0602\u0003\u00ee"+
		"w\u0000\u0601\u05fb\u0001\u0000\u0000\u0000\u0601\u05fc\u0001\u0000\u0000"+
		"\u0000\u0601\u05fd\u0001\u0000\u0000\u0000\u0601\u05fe\u0001\u0000\u0000"+
		"\u0000\u0601\u05ff\u0001\u0000\u0000\u0000\u0601\u0600\u0001\u0000\u0000"+
		"\u0000\u0602\u00d7\u0001\u0000\u0000\u0000\u0603\u0604\u0005I\u0000\u0000"+
		"\u0604\u0608\u0005\u00de\u0000\u0000\u0605\u0606\u0005\u0083\u0000\u0000"+
		"\u0606\u0607\u0005\u00b7\u0000\u0000\u0607\u0609\u0005h\u0000\u0000\u0608"+
		"\u0605\u0001\u0000\u0000\u0000\u0608\u0609\u0001\u0000\u0000\u0000\u0609"+
		"\u060a\u0001\u0000\u0000\u0000\u060a\u060b\u0003\u036a\u01b5\u0000\u060b"+
		"\u00d9\u0001\u0000\u0000\u0000\u060c\u060d\u0005_\u0000\u0000\u060d\u0610"+
		"\u0005\u00de\u0000\u0000\u060e\u060f\u0005\u0083\u0000\u0000\u060f\u0611"+
		"\u0005h\u0000\u0000\u0610\u060e\u0001\u0000\u0000\u0000\u0610\u0611\u0001"+
		"\u0000\u0000\u0000\u0611\u0612\u0001\u0000\u0000\u0000\u0612\u0613\u0003"+
		"\u036a\u01b5\u0000\u0613\u00db\u0001\u0000\u0000\u0000\u0614\u0624\u0005"+
		"I\u0000\u0000\u0615\u0617\u0005\u00cf\u0000\u0000\u0616\u0615\u0001\u0000"+
		"\u0000\u0000\u0616\u0617\u0001\u0000\u0000\u0000\u0617\u0618\u0001\u0000"+
		"\u0000\u0000\u0618\u061c\u0005w\u0000\u0000\u0619\u061a\u0005\u0083\u0000"+
		"\u0000\u061a\u061b\u0005\u00b7\u0000\u0000\u061b\u061d\u0005h\u0000\u0000"+
		"\u061c\u0619\u0001\u0000\u0000\u0000\u061c\u061d\u0001\u0000\u0000\u0000"+
		"\u061d\u0625\u0001\u0000\u0000\u0000\u061e\u061f\u0005\u00c2\u0000\u0000"+
		"\u061f\u0621\u0005\u00d7\u0000\u0000\u0620\u0622\u0005\u00cf\u0000\u0000"+
		"\u0621\u0620\u0001\u0000\u0000\u0000\u0621\u0622\u0001\u0000\u0000\u0000"+
		"\u0622\u0623\u0001\u0000\u0000\u0000\u0623\u0625\u0005w\u0000\u0000\u0624"+
		"\u0616\u0001\u0000\u0000\u0000\u0624\u061e\u0001\u0000\u0000\u0000\u0625"+
		"\u0626\u0001\u0000\u0000\u0000\u0626\u0629\u0003\u0378\u01bc\u0000\u0627"+
		"\u062a\u0003\u00deo\u0000\u0628\u062a\u0003\u00e0p\u0000\u0629\u0627\u0001"+
		"\u0000\u0000\u0000\u0629\u0628\u0001\u0000\u0000\u0000\u062a\u062c\u0001"+
		"\u0000\u0000\u0000\u062b\u062d\u0003\u00e4r\u0000\u062c\u062b\u0001\u0000"+
		"\u0000\u0000\u062c\u062d\u0001\u0000\u0000\u0000\u062d\u00dd\u0001\u0000"+
		"\u0000\u0000\u062e\u0630\u0003\u030c\u0186\u0000\u062f\u062e\u0001\u0000"+
		"\u0000\u0000\u062f\u0630\u0001\u0000\u0000\u0000\u0630\u0631\u0001\u0000"+
		"\u0000\u0000\u0631\u0636\u0005\"\u0000\u0000\u0632\u0634\u0005\u00cf\u0000"+
		"\u0000\u0633\u0632\u0001\u0000\u0000\u0000\u0633\u0634\u0001\u0000\u0000"+
		"\u0000\u0634\u0635\u0001\u0000\u0000\u0000\u0635\u0637\u0005w\u0000\u0000"+
		"\u0636\u0633\u0001\u0000\u0000\u0000\u0636\u0637\u0001\u0000\u0000\u0000"+
		"\u0637\u00df\u0001\u0000\u0000\u0000\u0638\u0648\u0003\u00e2q\u0000\u0639"+
		"\u063b\u0003\u030c\u0186\u0000\u063a\u0639\u0001\u0000\u0000\u0000\u063a"+
		"\u063b\u0001\u0000\u0000\u0000\u063b\u063c\u0001\u0000\u0000\u0000\u063c"+
		"\u0648\u0003\u037c\u01be\u0000\u063d\u063f\u0003\u030c\u0186\u0000\u063e"+
		"\u063d\u0001\u0000\u0000\u0000\u063e\u063f\u0001\u0000\u0000\u0000\u063f"+
		"\u0644\u0001\u0000\u0000\u0000\u0640\u0642\u0005\u00cf\u0000\u0000\u0641"+
		"\u0640\u0001\u0000\u0000\u0000\u0641\u0642\u0001\u0000\u0000\u0000\u0642"+
		"\u0643\u0001\u0000\u0000\u0000\u0643\u0645\u0005w\u0000\u0000\u0644\u0641"+
		"\u0001\u0000\u0000\u0000\u0644\u0645\u0001\u0000\u0000\u0000\u0645\u0646"+
		"\u0001\u0000\u0000\u0000\u0646\u0648\u0003\u02a8\u0154\u0000\u0647\u0638"+
		"\u0001\u0000\u0000\u0000\u0647\u063a\u0001\u0000\u0000\u0000\u0647\u063e"+
		"\u0001\u0000\u0000\u0000\u0648\u00e1\u0001\u0000\u0000\u0000\u0649\u064a"+
		"\u0005\u009e\u0000\u0000\u064a\u064b\u0003\u00c6c\u0000\u064b\u00e3\u0001"+
		"\u0000\u0000\u0000\u064c\u064d\u0005$\u0000\u0000\u064d\u064e\u0005D\u0000"+
		"\u0000\u064e\u064f\u0005\u00bc\u0000\u0000\u064f\u0650\u0003\u00c6c\u0000"+
		"\u0650\u00e5\u0001\u0000\u0000\u0000\u0651\u0653\u0005_\u0000\u0000\u0652"+
		"\u0654\u0005\u00cf\u0000\u0000\u0653\u0652\u0001\u0000\u0000\u0000\u0653"+
		"\u0654\u0001\u0000\u0000\u0000\u0654\u0655\u0001\u0000\u0000\u0000\u0655"+
		"\u0658\u0005w\u0000\u0000\u0656\u0657\u0005\u0083\u0000\u0000\u0657\u0659"+
		"\u0005h\u0000\u0000\u0658\u0656\u0001\u0000\u0000\u0000\u0658\u0659\u0001"+
		"\u0000\u0000\u0000\u0659\u065a\u0001\u0000\u0000\u0000\u065a\u065b\u0003"+
		"\u0378\u01bc\u0000\u065b\u00e7\u0001\u0000\u0000\u0000\u065c\u066e\u0005"+
		"I\u0000\u0000\u065d\u065f\u0005\u00cf\u0000\u0000\u065e\u065d\u0001\u0000"+
		"\u0000\u0000\u065e\u065f\u0001\u0000\u0000\u0000\u065f\u0660\u0001\u0000"+
		"\u0000\u0000\u0660\u0661\u0005w\u0000\u0000\u0661\u0665\u0005\u00fe\u0000"+
		"\u0000\u0662\u0663\u0005\u0083\u0000\u0000\u0663\u0664\u0005\u00b7\u0000"+
		"\u0000\u0664\u0666\u0005h\u0000\u0000\u0665\u0662\u0001\u0000\u0000\u0000"+
		"\u0665\u0666\u0001\u0000\u0000\u0000\u0666\u066f\u0001\u0000\u0000\u0000"+
		"\u0667\u0668\u0005\u00c2\u0000\u0000\u0668\u066a\u0005\u00d7\u0000\u0000"+
		"\u0669\u066b\u0005\u00cf\u0000\u0000\u066a\u0669\u0001\u0000\u0000\u0000"+
		"\u066a\u066b\u0001\u0000\u0000\u0000\u066b\u066c\u0001\u0000\u0000\u0000"+
		"\u066c\u066d\u0005w\u0000\u0000\u066d\u066f\u0005\u00fe\u0000\u0000\u066e"+
		"\u065e\u0001\u0000\u0000\u0000\u066e\u0667\u0001\u0000\u0000\u0000\u066f"+
		"\u0670\u0001\u0000\u0000\u0000\u0670\u0671\u0003\u037e\u01bf\u0000\u0671"+
		"\u0672\u0003\u00eau\u0000\u0672\u00e9\u0001\u0000\u0000\u0000\u0673\u0675"+
		"\u0005$\u0000\u0000\u0674\u0673\u0001\u0000\u0000\u0000\u0674\u0675\u0001"+
		"\u0000\u0000\u0000\u0675\u0676\u0001\u0000\u0000\u0000\u0676\u067d\u0003"+
		"\u00ecv\u0000\u0677\u067d\u0003\u00e2q\u0000\u0678\u067a\u0005$\u0000"+
		"\u0000\u0679\u0678\u0001\u0000\u0000\u0000\u0679\u067a\u0001\u0000\u0000"+
		"\u0000\u067a\u067b\u0001\u0000\u0000\u0000\u067b\u067d\u0003\u02a8\u0154"+
		"\u0000\u067c\u0674\u0001\u0000\u0000\u0000\u067c\u0677\u0001\u0000\u0000"+
		"\u0000\u067c\u0679\u0001\u0000\u0000\u0000\u067d\u00eb\u0001\u0000\u0000"+
		"\u0000\u067e\u067f\u0005D\u0000\u0000\u067f\u0682\u0005\u00bc\u0000\u0000"+
		"\u0680\u0683\u0003\u037c\u01be\u0000\u0681\u0683\u0003\u038c\u01c6\u0000"+
		"\u0682\u0680\u0001\u0000\u0000\u0000\u0682\u0681\u0001\u0000\u0000\u0000"+
		"\u0683\u00ed\u0001\u0000\u0000\u0000\u0684\u0686\u0005_\u0000\u0000\u0685"+
		"\u0687\u0005\u00cf\u0000\u0000\u0686\u0685\u0001\u0000\u0000\u0000\u0686"+
		"\u0687\u0001\u0000\u0000\u0000\u0687\u0688\u0001\u0000\u0000\u0000\u0688"+
		"\u0689\u0005w\u0000\u0000\u0689\u068c\u0005\u00fe\u0000\u0000\u068a\u068b"+
		"\u0005\u0083\u0000\u0000\u068b\u068d\u0005h\u0000\u0000\u068c\u068a\u0001"+
		"\u0000\u0000\u0000\u068c\u068d\u0001\u0000\u0000\u0000\u068d\u068e\u0001"+
		"\u0000\u0000\u0000\u068e\u068f\u0003\u037e\u01bf\u0000\u068f\u00ef\u0001"+
		"\u0000\u0000\u0000\u0690\u0691\u0003\u0182\u00c1\u0000\u0691\u00f1\u0001"+
		"\u0000\u0000\u0000\u0692\u0695\u0003\u00f4z\u0000\u0693\u0695\u0003\u00fa"+
		"}\u0000\u0694\u0692\u0001\u0000\u0000\u0000\u0694\u0693\u0001\u0000\u0000"+
		"\u0000\u0695\u00f3\u0001\u0000\u0000\u0000\u0696\u0699\u0003\u00f6{\u0000"+
		"\u0697\u0699\u0003\u00f8|\u0000\u0698\u0696\u0001\u0000\u0000\u0000\u0698"+
		"\u0697\u0001\u0000\u0000\u0000\u0699\u00f5\u0001\u0000\u0000\u0000\u069a"+
		"\u069b\u0003\u0192\u00c9\u0000\u069b\u069d\u0003\u00fe\u007f\u0000\u069c"+
		"\u069e\u0003\u0164\u00b2\u0000\u069d\u069c\u0001\u0000\u0000\u0000\u069d"+
		"\u069e\u0001\u0000\u0000\u0000\u069e\u00f7\u0001\u0000\u0000\u0000\u069f"+
		"\u06a0\u0003\u0192\u00c9\u0000\u06a0\u06a1\u0003<\u001e\u0000\u06a1\u00f9"+
		"\u0001\u0000\u0000\u0000\u06a2\u06a5\u0003\u00fc~\u0000\u06a3\u06a5\u0003"+
		"<\u001e\u0000\u06a4\u06a2\u0001\u0000\u0000\u0000\u06a4\u06a3\u0001\u0000"+
		"\u0000\u0000\u06a5\u00fb\u0001\u0000\u0000\u0000\u06a6\u06a8\u0003\u00fe"+
		"\u007f\u0000\u06a7\u06a9\u0003\u0164\u00b2\u0000\u06a8\u06a7\u0001\u0000"+
		"\u0000\u0000\u06a8\u06a9\u0001\u0000\u0000\u0000\u06a9\u00fd\u0001\u0000"+
		"\u0000\u0000\u06aa\u06ac\u0003\u0100\u0080\u0000\u06ab\u06aa\u0001\u0000"+
		"\u0000\u0000\u06ac\u06ad\u0001\u0000\u0000\u0000\u06ad\u06ab\u0001\u0000"+
		"\u0000\u0000\u06ad\u06ae\u0001\u0000\u0000\u0000\u06ae\u00ff\u0001\u0000"+
		"\u0000\u0000\u06af\u06b2\u0003\u0142\u00a1\u0000\u06b0\u06b2\u0003\u0102"+
		"\u0081\u0000\u06b1\u06af\u0001\u0000\u0000\u0000\u06b1\u06b0\u0001\u0000"+
		"\u0000\u0000\u06b2\u0101\u0001\u0000\u0000\u0000\u06b3\u06b6\u0003\u0104"+
		"\u0082\u0000\u06b4\u06b6\u0003\u0126\u0093\u0000\u06b5\u06b3\u0001\u0000"+
		"\u0000\u0000\u06b5\u06b4\u0001\u0000\u0000\u0000\u06b6\u0103\u0001\u0000"+
		"\u0000\u0000\u06b7\u06bc\u0003\u0106\u0083\u0000\u06b8\u06bc\u0003\u0108"+
		"\u0084\u0000\u06b9\u06bc\u0003\u0116\u008b\u0000\u06ba\u06bc\u0003\u0120"+
		"\u0090\u0000\u06bb\u06b7\u0001\u0000\u0000\u0000\u06bb\u06b8\u0001\u0000"+
		"\u0000\u0000\u06bb\u06b9\u0001\u0000\u0000\u0000\u06bb\u06ba\u0001\u0000"+
		"\u0000\u0000\u06bc\u0105\u0001\u0000\u0000\u0000\u06bd\u06be\u0005\u0085"+
		"\u0000\u0000\u06be\u06bf\u0003\u0218\u010c\u0000\u06bf\u0107\u0001\u0000"+
		"\u0000\u0000\u06c0\u06c1\u0005\u00e1\u0000\u0000\u06c1\u06c2\u0003\u010a"+
		"\u0085\u0000\u06c2\u0109\u0001\u0000\u0000\u0000\u06c3\u06c8\u0003\u010c"+
		"\u0086\u0000\u06c4\u06c5\u0005\u0005\u0000\u0000\u06c5\u06c7\u0003\u010c"+
		"\u0086\u0000\u06c6\u06c4\u0001\u0000\u0000\u0000\u06c7\u06ca\u0001\u0000"+
		"\u0000\u0000\u06c8\u06c6\u0001\u0000\u0000\u0000\u06c8\u06c9\u0001\u0000"+
		"\u0000\u0000\u06c9\u010b\u0001\u0000\u0000\u0000\u06ca\u06c8\u0001\u0000"+
		"\u0000\u0000\u06cb\u06cf\u0003\u010e\u0087\u0000\u06cc\u06cf\u0003\u0110"+
		"\u0088\u0000\u06cd\u06cf\u0003\u0112\u0089\u0000\u06ce\u06cb\u0001\u0000"+
		"\u0000\u0000\u06ce\u06cc\u0001\u0000\u0000\u0000\u06ce\u06cd\u0001\u0000"+
		"\u0000\u0000\u06cf\u010d\u0001\u0000\u0000\u0000\u06d0\u06d1\u0003\u0196"+
		"\u00cb\u0000\u06d1\u06d2\u0005\u0010\u0000\u0000\u06d2\u06d3\u0003\u0088"+
		"D\u0000\u06d3\u06d4\u0005\u0007\u0000\u0000\u06d4\u06d5\u0003\u03a4\u01d2"+
		"\u0000\u06d5\u010f\u0001\u0000\u0000\u0000\u06d6\u06d7\u0003\u0196\u00cb"+
		"\u0000\u06d7\u06d8\u0005\u0007\u0000\u0000\u06d8\u06da\u0005\n\u0000\u0000"+
		"\u06d9\u06db\u0003\u01fa\u00fd\u0000\u06da\u06d9\u0001\u0000\u0000\u0000"+
		"\u06da\u06db\u0001\u0000\u0000\u0000\u06db\u06dc\u0001\u0000\u0000\u0000"+
		"\u06dc\u06dd\u0005\u0014\u0000\u0000\u06dd\u0111\u0001\u0000\u0000\u0000"+
		"\u06de\u06df\u0003\u0196\u00cb\u0000\u06df\u06e0\u0003\u01f2\u00f9\u0000"+
		"\u06e0\u06e1\u0003\u0084B\u0000\u06e1\u0113\u0001\u0000\u0000\u0000\u06e2"+
		"\u06e7\u0003\u0084B\u0000\u06e3\u06e4\u0005\u0001\u0000\u0000\u06e4\u06e6"+
		"\u0003\u0084B\u0000\u06e5\u06e3\u0001\u0000\u0000\u0000\u06e6\u06e9\u0001"+
		"\u0000\u0000\u0000\u06e7\u06e5\u0001\u0000\u0000\u0000\u06e7\u06e8\u0001"+
		"\u0000\u0000\u0000\u06e8\u0115\u0001\u0000\u0000\u0000\u06e9\u06e7\u0001"+
		"\u0000\u0000\u0000\u06ea\u06eb\u0005\u00d5\u0000\u0000\u06eb\u06ec\u0003"+
		"\u0118\u008c\u0000\u06ec\u0117\u0001\u0000\u0000\u0000\u06ed\u06f2\u0003"+
		"\u011a\u008d\u0000\u06ee\u06ef\u0005\u0005\u0000\u0000\u06ef\u06f1\u0003"+
		"\u011a\u008d\u0000\u06f0\u06ee\u0001\u0000\u0000\u0000\u06f1\u06f4\u0001"+
		"\u0000\u0000\u0000\u06f2\u06f0\u0001\u0000\u0000\u0000\u06f2\u06f3\u0001"+
		"\u0000\u0000\u0000\u06f3\u0119\u0001\u0000\u0000\u0000\u06f4\u06f2\u0001"+
		"\u0000\u0000\u0000\u06f5\u06f8\u0003\u011c\u008e\u0000\u06f6\u06f8\u0003"+
		"\u011e\u008f\u0000\u06f7\u06f5\u0001\u0000\u0000\u0000\u06f7\u06f6\u0001"+
		"\u0000\u0000\u0000\u06f8\u011b\u0001\u0000\u0000\u0000\u06f9\u06fa\u0003"+
		"\u0196\u00cb\u0000\u06fa\u06fb\u0005\u0010\u0000\u0000\u06fb\u06fc\u0003"+
		"\u0088D\u0000\u06fc\u011d\u0001\u0000\u0000\u0000\u06fd\u06fe\u0003\u0196"+
		"\u00cb\u0000\u06fe\u06ff\u0003\u01f2\u00f9\u0000\u06ff\u0700\u0003\u0084"+
		"B\u0000\u0700\u011f\u0001\u0000\u0000\u0000\u0701\u0703\u0007\u0007\u0000"+
		"\u0000\u0702\u0701\u0001\u0000\u0000\u0000\u0702\u0703\u0001\u0000\u0000"+
		"\u0000\u0703\u0704\u0001\u0000\u0000\u0000\u0704\u0705\u0005V\u0000\u0000"+
		"\u0705\u0706\u0003\u0122\u0091\u0000\u0706\u0121\u0001\u0000\u0000\u0000"+
		"\u0707\u070c\u0003\u0124\u0092\u0000\u0708\u0709\u0005\u0005\u0000\u0000"+
		"\u0709\u070b\u0003\u0124\u0092\u0000\u070a\u0708\u0001\u0000\u0000\u0000"+
		"\u070b\u070e\u0001\u0000\u0000\u0000\u070c\u070a\u0001\u0000\u0000\u0000"+
		"\u070c\u070d\u0001\u0000\u0000\u0000\u070d\u0123\u0001\u0000\u0000\u0000"+
		"\u070e\u070c\u0001\u0000\u0000\u0000\u070f\u0710\u0003\u03a4\u01d2\u0000"+
		"\u0710\u0125\u0001\u0000\u0000\u0000\u0711\u0712\u0003\u0182\u00c1\u0000"+
		"\u0712\u0127\u0001\u0000\u0000\u0000\u0713\u0714\u0003\u012a\u0095\u0000"+
		"\u0714\u0129\u0001\u0000\u0000\u0000\u0715\u0716\u0006\u0095\uffff\uffff"+
		"\u0000\u0716\u0717\u0003\u0130\u0098\u0000\u0717\u071e\u0001\u0000\u0000"+
		"\u0000\u0718\u0719\n\u0002\u0000\u0000\u0719\u071a\u0003\u012c\u0096\u0000"+
		"\u071a\u071b\u0003\u0130\u0098\u0000\u071b\u071d\u0001\u0000\u0000\u0000"+
		"\u071c\u0718\u0001\u0000\u0000\u0000\u071d\u0720\u0001\u0000\u0000\u0000"+
		"\u071e\u071c\u0001\u0000\u0000\u0000\u071e\u071f\u0001\u0000\u0000\u0000"+
		"\u071f\u012b\u0001\u0000\u0000\u0000\u0720\u071e\u0001\u0000\u0000\u0000"+
		"\u0721\u0724\u0003\u012e\u0097\u0000\u0722\u0724\u0005\u00c5\u0000\u0000"+
		"\u0723\u0721\u0001\u0000\u0000\u0000\u0723\u0722\u0001\u0000\u0000\u0000"+
		"\u0724\u012d\u0001\u0000\u0000\u0000\u0725\u0727\u0005\u0109\u0000\u0000"+
		"\u0726\u0728\u0003\u0294\u014a\u0000\u0727\u0726\u0001\u0000\u0000\u0000"+
		"\u0727\u0728\u0001\u0000\u0000\u0000\u0728\u0732\u0001\u0000\u0000\u0000"+
		"\u0729\u072b\u0005g\u0000\u0000\u072a\u072c\u0003\u0294\u014a\u0000\u072b"+
		"\u072a\u0001\u0000\u0000\u0000\u072b\u072c\u0001\u0000\u0000\u0000\u072c"+
		"\u0732\u0001\u0000\u0000\u0000\u072d\u072f\u0005\u0094\u0000\u0000\u072e"+
		"\u0730\u0003\u0294\u014a\u0000\u072f\u072e\u0001\u0000\u0000\u0000\u072f"+
		"\u0730\u0001\u0000\u0000\u0000\u0730\u0732\u0001\u0000\u0000\u0000\u0731"+
		"\u0725\u0001\u0000\u0000\u0000\u0731\u0729\u0001\u0000\u0000\u0000\u0731"+
		"\u072d\u0001\u0000\u0000\u0000\u0732\u012f\u0001\u0000\u0000\u0000\u0733"+
		"\u0734\u0003\u0132\u0099\u0000\u0734\u0131\u0001\u0000\u0000\u0000\u0735"+
		"\u0738\u0003\u0134\u009a\u0000\u0736\u0738\u0003\u013e\u009f\u0000\u0737"+
		"\u0735\u0001\u0000\u0000\u0000\u0737\u0736\u0001\u0000\u0000\u0000\u0738"+
		"\u0133\u0001\u0000\u0000\u0000\u0739\u073b\u0003\u0136\u009b\u0000\u073a"+
		"\u0739\u0001\u0000\u0000\u0000\u073b\u073e\u0001\u0000\u0000\u0000\u073c"+
		"\u073a\u0001\u0000\u0000\u0000\u073c\u073d\u0001\u0000\u0000\u0000\u073d"+
		"\u073f\u0001\u0000\u0000\u0000\u073e\u073c\u0001\u0000\u0000\u0000\u073f"+
		"\u0744\u0003\u0138\u009c\u0000\u0740\u0744\u0003\u013a\u009d\u0000\u0741"+
		"\u0744\u0003\u013c\u009e\u0000\u0742\u0744\u0003\u0170\u00b8\u0000\u0743"+
		"\u073c\u0001\u0000\u0000\u0000\u0743\u0740\u0001\u0000\u0000\u0000\u0743"+
		"\u0741\u0001\u0000\u0000\u0000\u0743\u0742\u0001\u0000\u0000\u0000\u0744"+
		"\u0135\u0001\u0000\u0000\u0000\u0745\u0746\u0003\u0192\u00c9\u0000\u0746"+
		"\u0747\u0003\u0140\u00a0\u0000\u0747\u0137\u0001\u0000\u0000\u0000\u0748"+
		"\u0749\u0003\u0192\u00c9\u0000\u0749\u074a\u0003\u0140\u00a0\u0000\u074a"+
		"\u074b\u0003\u0164\u00b2\u0000\u074b\u0139\u0001\u0000\u0000\u0000\u074c"+
		"\u074d\u0003\u0192\u00c9\u0000\u074d\u074e\u0003\u0164\u00b2\u0000\u074e"+
		"\u013b\u0001\u0000\u0000\u0000\u074f\u0750\u0003\u0192\u00c9\u0000\u0750"+
		"\u0751\u0003@ \u0000\u0751\u013d\u0001\u0000\u0000\u0000\u0752\u0754\u0003"+
		"\u0140\u00a0\u0000\u0753\u0752\u0001\u0000\u0000\u0000\u0753\u0754\u0001"+
		"\u0000\u0000\u0000\u0754\u0755\u0001\u0000\u0000\u0000\u0755\u0758\u0003"+
		"\u0164\u00b2\u0000\u0756\u0758\u0003@ \u0000\u0757\u0753\u0001\u0000\u0000"+
		"\u0000\u0757\u0756\u0001\u0000\u0000\u0000\u0758\u013f\u0001\u0000\u0000"+
		"\u0000\u0759\u075b\u0003\u0142\u00a1\u0000\u075a\u0759\u0001\u0000\u0000"+
		"\u0000\u075b\u075c\u0001\u0000\u0000\u0000\u075c\u075a\u0001\u0000\u0000"+
		"\u0000\u075c\u075d\u0001\u0000\u0000\u0000\u075d\u0141\u0001\u0000\u0000"+
		"\u0000\u075e\u0761\u0003\u0144\u00a2\u0000\u075f\u0761\u0003\u0150\u00a8"+
		"\u0000\u0760\u075e\u0001\u0000\u0000\u0000\u0760\u075f\u0001\u0000\u0000"+
		"\u0000\u0761\u0143\u0001\u0000\u0000\u0000\u0762\u0768\u0003\u0146\u00a3"+
		"\u0000\u0763\u0768\u0003\u0154\u00aa\u0000\u0764\u0768\u0003\u015a\u00ad"+
		"\u0000\u0765\u0768\u0003\u0152\u00a9\u0000\u0766\u0768\u0003\u0162\u00b1"+
		"\u0000\u0767\u0762\u0001\u0000\u0000\u0000\u0767\u0763\u0001\u0000\u0000"+
		"\u0000\u0767\u0764\u0001\u0000\u0000\u0000\u0767\u0765\u0001\u0000\u0000"+
		"\u0000\u0767\u0766\u0001\u0000\u0000\u0000\u0768\u0145\u0001\u0000\u0000"+
		"\u0000\u0769\u076c\u0003\u0148\u00a4\u0000\u076a\u076c\u0003\u014a\u00a5"+
		"\u0000\u076b\u0769\u0001\u0000\u0000\u0000\u076b\u076a\u0001\u0000\u0000"+
		"\u0000\u076c\u0147\u0001\u0000\u0000\u0000\u076d\u076e\u0005\u00aa\u0000"+
		"\u0000\u076e\u076f\u0003\u019e\u00cf\u0000\u076f\u0149\u0001\u0000\u0000"+
		"\u0000\u0770\u0771\u0005\u00c1\u0000\u0000\u0771\u0772\u0003\u014c\u00a6"+
		"\u0000\u0772\u014b\u0001\u0000\u0000\u0000\u0773\u077d\u0003\u0148\u00a4"+
		"\u0000\u0774\u0775\u0005\n\u0000\u0000\u0775\u0776\u0003\u014e\u00a7\u0000"+
		"\u0776\u0777\u0005\u0014\u0000\u0000\u0777\u077d\u0001\u0000\u0000\u0000"+
		"\u0778\u0779\u0005\f\u0000\u0000\u0779\u077a\u0003\u014e\u00a7\u0000\u077a"+
		"\u077b\u0005\u0016\u0000\u0000\u077b\u077d\u0001\u0000\u0000\u0000\u077c"+
		"\u0773\u0001\u0000\u0000\u0000\u077c\u0774\u0001\u0000\u0000\u0000\u077c"+
		"\u0778\u0001\u0000\u0000\u0000\u077d\u014d\u0001\u0000\u0000\u0000\u077e"+
		"\u0780\u0003\u0146\u00a3\u0000\u077f\u077e\u0001\u0000\u0000\u0000\u0780"+
		"\u0781\u0001\u0000\u0000\u0000\u0781\u077f\u0001\u0000\u0000\u0000\u0781"+
		"\u0782\u0001\u0000\u0000\u0000\u0782\u014f\u0001\u0000\u0000\u0000\u0783"+
		"\u0784\u0003\u0182\u00c1\u0000\u0784\u0151\u0001\u0000\u0000\u0000\u0785"+
		"\u0788\u0005k\u0000\u0000\u0786\u0789\u0003\u027a\u013d\u0000\u0787\u0789"+
		"\u0003\u03a4\u01d2\u0000\u0788\u0786\u0001\u0000\u0000\u0000\u0788\u0787"+
		"\u0001\u0000\u0000\u0000\u0789\u0153\u0001\u0000\u0000\u0000\u078a\u078b"+
		"\u0005\u009d\u0000\u0000\u078b\u078c\u0003\u0156\u00ab\u0000\u078c\u0155"+
		"\u0001\u0000\u0000\u0000\u078d\u0792\u0003\u0158\u00ac\u0000\u078e\u078f"+
		"\u0005\u0005\u0000\u0000\u078f\u0791\u0003\u0158\u00ac\u0000\u0790\u078e"+
		"\u0001\u0000\u0000\u0000\u0791\u0794\u0001\u0000\u0000\u0000\u0792\u0790"+
		"\u0001\u0000\u0000\u0000\u0792\u0793\u0001\u0000\u0000\u0000\u0793\u0157"+
		"\u0001\u0000\u0000\u0000\u0794\u0792\u0001\u0000\u0000\u0000\u0795\u079b"+
		"\u0003\u00c2a\u0000\u0796\u0797\u0003\u009eO\u0000\u0797\u0798\u0005\u0007"+
		"\u0000\u0000\u0798\u0799\u0003\u03a4\u01d2\u0000\u0799\u079b\u0001\u0000"+
		"\u0000\u0000\u079a\u0795\u0001\u0000\u0000\u0000\u079a\u0796\u0001\u0000"+
		"\u0000\u0000\u079b\u0159\u0001\u0000\u0000\u0000\u079c\u079d\u0005u\u0000"+
		"\u0000\u079d\u079f\u0003\u015c\u00ae\u0000\u079e\u07a0\u0003\u0160\u00b0"+
		"\u0000\u079f\u079e\u0001\u0000\u0000\u0000\u079f\u07a0\u0001\u0000\u0000"+
		"\u0000\u07a0\u015b\u0001\u0000\u0000\u0000\u07a1\u07a2\u0003\u015e\u00af"+
		"\u0000\u07a2\u07a3\u0003\u03a8\u01d4\u0000\u07a3\u015d\u0001\u0000\u0000"+
		"\u0000\u07a4\u07a5\u0003j5\u0000\u07a5\u07a6\u0005\u0084\u0000\u0000\u07a6"+
		"\u015f\u0001\u0000\u0000\u0000\u07a7\u07a8\u0005\u0116\u0000\u0000\u07a8"+
		"\u07a9\u0007\b\u0000\u0000\u07a9\u07aa\u0003j5\u0000\u07aa\u0161\u0001"+
		"\u0000\u0000\u0000\u07ab\u07ad\u0003\u028e\u0147\u0000\u07ac\u07ae\u0003"+
		"\u02a4\u0152\u0000\u07ad\u07ac\u0001\u0000\u0000\u0000\u07ad\u07ae\u0001"+
		"\u0000\u0000\u0000\u07ae\u07b0\u0001\u0000\u0000\u0000\u07af\u07b1\u0003"+
		"\u02a2\u0151\u0000\u07b0\u07af\u0001\u0000\u0000\u0000\u07b0\u07b1\u0001"+
		"\u0000\u0000\u0000\u07b1\u07b8\u0001\u0000\u0000\u0000\u07b2\u07b4\u0003"+
		"\u02a4\u0152\u0000\u07b3\u07b5\u0003\u02a2\u0151\u0000\u07b4\u07b3\u0001"+
		"\u0000\u0000\u0000\u07b4\u07b5\u0001\u0000\u0000\u0000\u07b5\u07b8\u0001"+
		"\u0000\u0000\u0000\u07b6\u07b8\u0003\u02a2\u0151\u0000\u07b7\u07ab\u0001"+
		"\u0000\u0000\u0000\u07b7\u07b2\u0001\u0000\u0000\u0000\u07b7\u07b6\u0001"+
		"\u0000\u0000\u0000\u07b8\u0163\u0001\u0000\u0000\u0000\u07b9\u07bb\u0003"+
		"\u0166\u00b3\u0000\u07ba\u07bc\u0003\u0162\u00b1\u0000\u07bb\u07ba\u0001"+
		"\u0000\u0000\u0000\u07bb\u07bc\u0001\u0000\u0000\u0000\u07bc\u07bf\u0001"+
		"\u0000\u0000\u0000\u07bd\u07bf\u0005l\u0000\u0000\u07be\u07b9\u0001\u0000"+
		"\u0000\u0000\u07be\u07bd\u0001\u0000\u0000\u0000\u07bf\u0165\u0001\u0000"+
		"\u0000\u0000\u07c0\u07c1\u0005\u00d9\u0000\u0000\u07c1\u07c2\u0003\u0168"+
		"\u00b4\u0000\u07c2\u0167\u0001\u0000\u0000\u0000\u07c3\u07c5\u0003\u0294"+
		"\u014a\u0000\u07c4\u07c3\u0001\u0000\u0000\u0000\u07c4\u07c5\u0001\u0000"+
		"\u0000\u0000\u07c5\u07c8\u0001\u0000\u0000\u0000\u07c6\u07c9\u0005\u0002"+
		"\u0000\u0000\u07c7\u07c9\u0003\u016a\u00b5\u0000\u07c8\u07c6\u0001\u0000"+
		"\u0000\u0000\u07c8\u07c7\u0001\u0000\u0000\u0000\u07c9\u07cb\u0001\u0000"+
		"\u0000\u0000\u07ca\u07cc\u0003\u0286\u0143\u0000\u07cb\u07ca\u0001\u0000"+
		"\u0000\u0000\u07cb\u07cc\u0001\u0000\u0000\u0000\u07cc\u07d0\u0001\u0000"+
		"\u0000\u0000\u07cd\u07ce\u0005\u00b3\u0000\u0000\u07ce\u07d0\u0005/\u0000"+
		"\u0000\u07cf\u07c4\u0001\u0000\u0000\u0000\u07cf\u07cd\u0001\u0000\u0000"+
		"\u0000\u07d0\u0169\u0001\u0000\u0000\u0000\u07d1\u07d6\u0003\u016c\u00b6"+
		"\u0000\u07d2\u07d3\u0005\u0005\u0000\u0000\u07d3\u07d5\u0003\u016c\u00b6"+
		"\u0000\u07d4\u07d2\u0001\u0000\u0000\u0000\u07d5\u07d8\u0001\u0000\u0000"+
		"\u0000\u07d6\u07d4\u0001\u0000\u0000\u0000\u07d6\u07d7\u0001\u0000\u0000"+
		"\u0000\u07d7\u016b\u0001\u0000\u0000\u0000\u07d8\u07d6\u0001\u0000\u0000"+
		"\u0000\u07d9\u07db\u0003\u03a4\u01d2\u0000\u07da\u07dc\u0003\u016e\u00b7"+
		"\u0000\u07db\u07da\u0001\u0000\u0000\u0000\u07db\u07dc\u0001\u0000\u0000"+
		"\u0000\u07dc\u016d\u0001\u0000\u0000\u0000\u07dd\u07de\u0005$\u0000\u0000"+
		"\u07de\u07df\u0003j5\u0000\u07df\u016f\u0001\u0000\u0000\u0000\u07e0\u07e2"+
		"\u0005\u00df\u0000\u0000\u07e1\u07e3\u0003\u0294\u014a\u0000\u07e2\u07e1"+
		"\u0001\u0000\u0000\u0000\u07e2\u07e3\u0001\u0000\u0000\u0000\u07e3\u07e6"+
		"\u0001\u0000\u0000\u0000\u07e4\u07e7\u0005\u0002\u0000\u0000\u07e5\u07e7"+
		"\u0003\u0172\u00b9\u0000\u07e6\u07e4\u0001\u0000\u0000\u0000\u07e6\u07e5"+
		"\u0001\u0000\u0000\u0000\u07e7\u07fb\u0001\u0000\u0000\u0000\u07e8\u07ea"+
		"\u0003\u017a\u00bd\u0000\u07e9\u07eb\u0003\u027a\u013d\u0000\u07ea\u07e9"+
		"\u0001\u0000\u0000\u0000\u07ea\u07eb\u0001\u0000\u0000\u0000\u07eb\u07ed"+
		"\u0001\u0000\u0000\u0000\u07ec\u07ee\u0003\u0286\u0143\u0000\u07ed\u07ec"+
		"\u0001\u0000\u0000\u0000\u07ed\u07ee\u0001\u0000\u0000\u0000\u07ee\u07f0"+
		"\u0001\u0000\u0000\u0000\u07ef\u07f1\u0003\u0178\u00bc\u0000\u07f0\u07ef"+
		"\u0001\u0000\u0000\u0000\u07f0\u07f1\u0001\u0000\u0000\u0000\u07f1\u07f3"+
		"\u0001\u0000\u0000\u0000\u07f2\u07f4\u0003\u028e\u0147\u0000\u07f3\u07f2"+
		"\u0001\u0000\u0000\u0000\u07f3\u07f4\u0001\u0000\u0000\u0000\u07f4\u07f6"+
		"\u0001\u0000\u0000\u0000\u07f5\u07f7\u0003\u02a4\u0152\u0000\u07f6\u07f5"+
		"\u0001\u0000\u0000\u0000\u07f6\u07f7\u0001\u0000\u0000\u0000\u07f7\u07f9"+
		"\u0001\u0000\u0000\u0000\u07f8\u07fa\u0003\u02a2\u0151\u0000\u07f9\u07f8"+
		"\u0001\u0000\u0000\u0000\u07f9\u07fa\u0001\u0000\u0000\u0000\u07fa\u07fc"+
		"\u0001\u0000\u0000\u0000\u07fb\u07e8\u0001\u0000\u0000\u0000\u07fb\u07fc"+
		"\u0001\u0000\u0000\u0000\u07fc\u0171\u0001\u0000\u0000\u0000\u07fd\u0802"+
		"\u0003\u0174\u00ba\u0000\u07fe\u07ff\u0005\u0005\u0000\u0000\u07ff\u0801"+
		"\u0003\u0174\u00ba\u0000\u0800\u07fe\u0001\u0000\u0000\u0000\u0801\u0804"+
		"\u0001\u0000\u0000\u0000\u0802\u0800\u0001\u0000\u0000\u0000\u0802\u0803"+
		"\u0001\u0000\u0000\u0000\u0803\u0173\u0001\u0000\u0000\u0000\u0804\u0802"+
		"\u0001\u0000\u0000\u0000\u0805\u0807\u0003\u03a4\u01d2\u0000\u0806\u0808"+
		"\u0003\u0176\u00bb\u0000\u0807\u0806\u0001\u0000\u0000\u0000\u0807\u0808"+
		"\u0001\u0000\u0000\u0000\u0808\u0175\u0001\u0000\u0000\u0000\u0809\u080a"+
		"\u0005$\u0000\u0000\u080a\u080b\u0003j5\u0000\u080b\u0177\u0001\u0000"+
		"\u0000\u0000\u080c\u080d\u0005z\u0000\u0000\u080d\u080e\u0003\u03a4\u01d2"+
		"\u0000\u080e\u0179\u0001\u0000\u0000\u0000\u080f\u0810\u0005v\u0000\u0000"+
		"\u0810\u0814\u0003\u017c\u00be\u0000\u0811\u0812\u0005v\u0000\u0000\u0812"+
		"\u0814\u0003\u0180\u00c0\u0000\u0813\u080f\u0001\u0000\u0000\u0000\u0813"+
		"\u0811\u0001\u0000\u0000\u0000\u0814\u017b\u0001\u0000\u0000\u0000\u0815"+
		"\u081a\u0003\u017e\u00bf\u0000\u0816\u0817\u0005\u0005\u0000\u0000\u0817"+
		"\u0819\u0003\u017e\u00bf\u0000\u0818\u0816\u0001\u0000\u0000\u0000\u0819"+
		"\u081c\u0001\u0000\u0000\u0000\u081a\u0818\u0001\u0000\u0000\u0000\u081a"+
		"\u081b\u0001\u0000\u0000\u0000\u081b\u017d\u0001\u0000\u0000\u0000\u081c"+
		"\u081a\u0001\u0000\u0000\u0000\u081d\u081e\u0003\u00c6c\u0000\u081e\u081f"+
		"\u0003\u0146\u00a3\u0000\u081f\u017f\u0001\u0000\u0000\u0000\u0820\u0825"+
		"\u0003@ \u0000\u0821\u0822\u0003\u00c6c\u0000\u0822\u0823\u0003@ \u0000"+
		"\u0823\u0825\u0001\u0000\u0000\u0000\u0824\u0820\u0001\u0000\u0000\u0000"+
		"\u0824\u0821\u0001\u0000\u0000\u0000\u0825\u0181\u0001\u0000\u0000\u0000"+
		"\u0826\u0828\u0005\u00c1\u0000\u0000\u0827\u0826\u0001\u0000\u0000\u0000"+
		"\u0827\u0828\u0001\u0000\u0000\u0000\u0828\u0829\u0001\u0000\u0000\u0000"+
		"\u0829\u082a\u00057\u0000\u0000\u082a\u082b\u0003\u0184\u00c2\u0000\u082b"+
		"\u0183\u0001\u0000\u0000\u0000\u082c\u082f\u0003\u0186\u00c3\u0000\u082d"+
		"\u082f\u0003\u018c\u00c6\u0000\u082e\u082c\u0001\u0000\u0000\u0000\u082e"+
		"\u082d\u0001\u0000\u0000\u0000\u082f\u0185\u0001\u0000\u0000\u0000\u0830"+
		"\u0832\u0003\u0188\u00c4\u0000\u0831\u0830\u0001\u0000\u0000\u0000\u0831"+
		"\u0832\u0001\u0000\u0000\u0000\u0832\u0833\u0001\u0000\u0000\u0000\u0833"+
		"\u0834\u00036\u001b\u0000\u0834\u0187\u0001\u0000\u0000\u0000\u0835\u0837"+
		"\u0005\f\u0000\u0000\u0836\u0838\u0003\u018a\u00c5\u0000\u0837\u0836\u0001"+
		"\u0000\u0000\u0000\u0837\u0838\u0001\u0000\u0000\u0000\u0838\u0839\u0001"+
		"\u0000\u0000\u0000\u0839\u083a\u0005\u0016\u0000\u0000\u083a\u0189\u0001"+
		"\u0000\u0000\u0000\u083b\u0840\u0003\u0196\u00cb\u0000\u083c\u083d\u0005"+
		"\u0005\u0000\u0000\u083d\u083f\u0003\u0196\u00cb\u0000\u083e\u083c\u0001"+
		"\u0000\u0000\u0000\u083f\u0842\u0001\u0000\u0000\u0000\u0840\u083e\u0001"+
		"\u0000\u0000\u0000\u0840\u0841\u0001\u0000\u0000\u0000\u0841\u018b\u0001"+
		"\u0000\u0000\u0000\u0842\u0840\u0001\u0000\u0000\u0000\u0843\u0844\u0003"+
		"\u0384\u01c2\u0000\u0844\u0846\u0005\f\u0000\u0000\u0845\u0847\u0003\u018e"+
		"\u00c7\u0000\u0846\u0845\u0001\u0000\u0000\u0000\u0846\u0847\u0001\u0000"+
		"\u0000\u0000\u0847\u0848\u0001\u0000\u0000\u0000\u0848\u084a\u0005\u0016"+
		"\u0000\u0000\u0849\u084b\u0003\u027c\u013e\u0000\u084a\u0849\u0001\u0000"+
		"\u0000\u0000\u084a\u084b\u0001\u0000\u0000\u0000\u084b\u018d\u0001\u0000"+
		"\u0000\u0000\u084c\u0851\u0003\u0190\u00c8\u0000\u084d\u084e\u0005\u0005"+
		"\u0000\u0000\u084e\u0850\u0003\u0190\u00c8\u0000\u084f\u084d\u0001\u0000"+
		"\u0000\u0000\u0850\u0853\u0001\u0000\u0000\u0000\u0851\u084f\u0001\u0000"+
		"\u0000\u0000\u0851\u0852\u0001\u0000\u0000\u0000\u0852\u018f\u0001\u0000"+
		"\u0000\u0000\u0853\u0851\u0001\u0000\u0000\u0000\u0854\u0855\u0003\u03a4"+
		"\u01d2\u0000\u0855\u0191\u0001\u0000\u0000\u0000\u0856\u0857\u0005\u010d"+
		"\u0000\u0000\u0857\u0858\u0003\u00c6c\u0000\u0858\u0193\u0001\u0000\u0000"+
		"\u0000\u0859\u085a\u0005(\u0000\u0000\u085a\u085b\u0003\u0366\u01b3\u0000"+
		"\u085b\u0195\u0001\u0000\u0000\u0000\u085c\u085d\u0003\u00a0P\u0000\u085d"+
		"\u0197\u0001\u0000\u0000\u0000\u085e\u085f\u0003\u0196\u00cb\u0000\u085f"+
		"\u0199\u0001\u0000\u0000\u0000\u0860\u0861\u0003\u0196\u00cb\u0000\u0861"+
		"\u019b\u0001\u0000\u0000\u0000\u0862\u0863\u0003\u008cF\u0000\u0863\u019d"+
		"\u0001\u0000\u0000\u0000\u0864\u0866\u0003\u01a6\u00d3\u0000\u0865\u0867"+
		"\u0003\u01a0\u00d0\u0000\u0866\u0865\u0001\u0000\u0000\u0000\u0866\u0867"+
		"\u0001\u0000\u0000\u0000\u0867\u019f\u0001\u0000\u0000\u0000\u0868\u0869"+
		"\u0005\u011a\u0000\u0000\u0869\u086a\u0003\u01a2\u00d1\u0000\u086a\u01a1"+
		"\u0001\u0000\u0000\u0000\u086b\u0870\u0003\u01a4\u00d2\u0000\u086c\u086d"+
		"\u0005\u0005\u0000\u0000\u086d\u086f\u0003\u01a4\u00d2\u0000\u086e\u086c"+
		"\u0001\u0000\u0000\u0000\u086f\u0872\u0001\u0000\u0000\u0000\u0870\u086e"+
		"\u0001\u0000\u0000\u0000\u0870\u0871\u0001\u0000\u0000\u0000\u0871\u0876"+
		"\u0001\u0000\u0000\u0000\u0872\u0870\u0001\u0000\u0000\u0000\u0873\u0874"+
		"\u0005\u00b3\u0000\u0000\u0874\u0876\u0005/\u0000\u0000\u0875\u086b\u0001"+
		"\u0000\u0000\u0000\u0875\u0873\u0001\u0000\u0000\u0000\u0876\u01a3\u0001"+
		"\u0000\u0000\u0000\u0877\u087a\u0003\u0198\u00cc\u0000\u0878\u087a\u0003"+
		"\u019a\u00cd\u0000\u0879\u0877\u0001\u0000\u0000\u0000\u0879\u0878\u0001"+
		"\u0000\u0000\u0000\u087a\u01a5\u0001\u0000\u0000\u0000\u087b\u087d\u0003"+
		"\u01a8\u00d4\u0000\u087c\u087b\u0001\u0000\u0000\u0000\u087c\u087d\u0001"+
		"\u0000\u0000\u0000\u087d\u087e\u0001\u0000\u0000\u0000\u087e\u0880\u0003"+
		"\u01b2\u00d9\u0000\u087f\u0881\u0003\u01b8\u00dc\u0000\u0880\u087f\u0001"+
		"\u0000\u0000\u0000\u0880\u0881\u0001\u0000\u0000\u0000\u0881\u0883\u0001"+
		"\u0000\u0000\u0000\u0882\u0884\u0003\u01ba\u00dd\u0000\u0883\u0882\u0001"+
		"\u0000\u0000\u0000\u0883\u0884\u0001\u0000\u0000\u0000\u0884\u01a7\u0001"+
		"\u0000\u0000\u0000\u0885\u0888\u0003\u01aa\u00d5\u0000\u0886\u0888\u0003"+
		"\u01ac\u00d6\u0000\u0887\u0885\u0001\u0000\u0000\u0000\u0887\u0886\u0001"+
		"\u0000\u0000\u0000\u0888\u01a9\u0001\u0000\u0000\u0000\u0889\u088a\u0005"+
		"\u00d6\u0000\u0000\u088a\u088b\u0003\u01ae\u00d7\u0000\u088b\u01ab\u0001"+
		"\u0000\u0000\u0000\u088c\u088d\u0005[\u0000\u0000\u088d\u088e\u0003\u01b0"+
		"\u00d8\u0000\u088e\u01ad\u0001\u0000\u0000\u0000\u088f\u0891\u0005b\u0000"+
		"\u0000\u0890\u0892\u0005/\u0000\u0000\u0891\u0890\u0001\u0000\u0000\u0000"+
		"\u0891\u0892\u0001\u0000\u0000\u0000\u0892\u0895\u0001\u0000\u0000\u0000"+
		"\u0893\u0895\u0005d\u0000\u0000\u0894\u088f\u0001\u0000\u0000\u0000\u0894"+
		"\u0893\u0001\u0000\u0000\u0000\u0895\u01af\u0001\u0000\u0000\u0000\u0896"+
		"\u0898\u0005\u0123\u0000\u0000\u0897\u0899\u0005/\u0000\u0000\u0898\u0897"+
		"\u0001\u0000\u0000\u0000\u0898\u0899\u0001\u0000\u0000\u0000\u0899\u089c"+
		"\u0001\u0000\u0000\u0000\u089a\u089c\u0005\u0124\u0000\u0000\u089b\u0896"+
		"\u0001\u0000\u0000\u0000\u089b\u089a\u0001\u0000\u0000\u0000\u089c\u01b1"+
		"\u0001\u0000\u0000\u0000\u089d\u08a2\u0003\u01b4\u00da\u0000\u089e\u089f"+
		"\u0005\u0005\u0000\u0000\u089f\u08a1\u0003\u01b4\u00da\u0000\u08a0\u089e"+
		"\u0001\u0000\u0000\u0000\u08a1\u08a4\u0001\u0000\u0000\u0000\u08a2\u08a0"+
		"\u0001\u0000\u0000\u0000\u08a2\u08a3\u0001\u0000\u0000\u0000\u08a3\u01b3"+
		"\u0001\u0000\u0000\u0000\u08a4\u08a2\u0001\u0000\u0000\u0000\u08a5\u08a7"+
		"\u0003\u01b6\u00db\u0000\u08a6\u08a5\u0001\u0000\u0000\u0000\u08a6\u08a7"+
		"\u0001\u0000\u0000\u0000\u08a7\u08a9\u0001\u0000\u0000\u0000\u08a8\u08aa"+
		"\u0003\u01bc\u00de\u0000\u08a9\u08a8\u0001\u0000\u0000\u0000\u08a9\u08aa"+
		"\u0001\u0000\u0000\u0000\u08aa\u08ab\u0001\u0000\u0000\u0000\u08ab\u08ac"+
		"\u0003\u01d8\u00ec\u0000\u08ac\u01b5\u0001\u0000\u0000\u0000\u08ad\u08ae"+
		"\u0003\u0098L\u0000\u08ae\u08af\u0005\u0007\u0000\u0000\u08af\u01b7\u0001"+
		"\u0000\u0000\u0000\u08b0\u08b1\u0005\u0096\u0000\u0000\u08b1\u08b2\u0003"+
		"\u01bc\u00de\u0000\u08b2\u01b9\u0001\u0000\u0000\u0000\u08b3\u08b4\u0005"+
		"\u0115\u0000\u0000\u08b4\u08b5\u0003\u03a4\u01d2\u0000\u08b5\u01bb\u0001"+
		"\u0000\u0000\u0000\u08b6\u08b9\u0003\u01be\u00df\u0000\u08b7\u08b9\u0003"+
		"\u01c2\u00e1\u0000\u08b8\u08b6\u0001\u0000\u0000\u0000\u08b8\u08b7\u0001"+
		"\u0000\u0000\u0000\u08b9\u01bd\u0001\u0000\u0000\u0000\u08ba\u08bc\u0003"+
		"\u01c0\u00e0\u0000\u08bb\u08bd\u0003\u01c6\u00e3\u0000\u08bc\u08bb\u0001"+
		"\u0000\u0000\u0000\u08bc\u08bd\u0001\u0000\u0000\u0000\u08bd\u01bf\u0001"+
		"\u0000\u0000\u0000\u08be\u08bf\u0007\t\u0000\u0000\u08bf\u01c1\u0001\u0000"+
		"\u0000\u0000\u08c0\u08c4\u0003\u01c4\u00e2";
	private static final String _serializedATNSegment1 =
		"\u0000\u08c1\u08c4\u0003\u01c8\u00e4\u0000\u08c2\u08c4\u0003\u01cc\u00e6"+
		"\u0000\u08c3\u08c0\u0001\u0000\u0000\u0000\u08c3\u08c1\u0001\u0000\u0000"+
		"\u0000\u08c3\u08c2\u0001\u0000\u0000\u0000\u08c4\u01c3\u0001\u0000\u0000"+
		"\u0000\u08c5\u08c7\u0005\u001f\u0000\u0000\u08c6\u08c8\u0003\u01c0\u00e0"+
		"\u0000\u08c7\u08c6\u0001\u0000\u0000\u0000\u08c7\u08c8\u0001\u0000\u0000"+
		"\u0000\u08c8\u08ca\u0001\u0000\u0000\u0000\u08c9\u08cb\u0003\u01c6\u00e3"+
		"\u0000\u08ca\u08c9\u0001\u0000\u0000\u0000\u08ca\u08cb\u0001\u0000\u0000"+
		"\u0000\u08cb\u01c5\u0001\u0000\u0000\u0000\u08cc\u08cd\u0007\n\u0000\u0000"+
		"\u08cd\u01c7\u0001\u0000\u0000\u0000\u08ce\u08d0\u0005\"\u0000\u0000\u08cf"+
		"\u08d1\u0003\u01ca\u00e5\u0000\u08d0\u08cf\u0001\u0000\u0000\u0000\u08d0"+
		"\u08d1\u0001\u0000\u0000\u0000\u08d1\u08d3\u0001\u0000\u0000\u0000\u08d2"+
		"\u08d4\u0003\u01c0\u00e0\u0000\u08d3\u08d2\u0001\u0000\u0000\u0000\u08d3"+
		"\u08d4\u0001\u0000\u0000\u0000\u08d4\u08d6\u0001\u0000\u0000\u0000\u08d5"+
		"\u08d7\u0003\u01c6\u00e3\u0000\u08d6\u08d5\u0001\u0000\u0000\u0000\u08d6"+
		"\u08d7\u0001\u0000\u0000\u0000\u08d7\u01c9\u0001\u0000\u0000\u0000\u08d8"+
		"\u08d9\u0003\u039e\u01cf\u0000\u08d9\u01cb\u0001\u0000\u0000\u0000\u08da"+
		"\u08df\u0003\u01ce\u00e7\u0000\u08db\u08df\u0003\u01d0\u00e8\u0000\u08dc"+
		"\u08df\u0003\u01d2\u00e9\u0000\u08dd\u08df\u0003\u01d4\u00ea\u0000\u08de"+
		"\u08da\u0001\u0000\u0000\u0000\u08de\u08db\u0001\u0000\u0000\u0000\u08de"+
		"\u08dc\u0001\u0000\u0000\u0000\u08de\u08dd\u0001\u0000\u0000\u0000\u08df"+
		"\u01cd\u0001\u0000\u0000\u0000\u08e0\u08e1\u0005\u001f\u0000\u0000\u08e1"+
		"\u08e3\u0005\u00e2\u0000\u0000\u08e2\u08e4\u0003\u01c0\u00e0\u0000\u08e3"+
		"\u08e2\u0001\u0000\u0000\u0000\u08e3\u08e4\u0001\u0000\u0000\u0000\u08e4"+
		"\u08e6\u0001\u0000\u0000\u0000\u08e5\u08e7\u0003\u01c6\u00e3\u0000\u08e6"+
		"\u08e5\u0001\u0000\u0000\u0000\u08e6\u08e7\u0001\u0000\u0000\u0000\u08e7"+
		"\u01cf\u0001\u0000\u0000\u0000\u08e8\u08e9\u0005\"\u0000\u0000\u08e9\u08eb"+
		"\u0005\u00e2\u0000\u0000\u08ea\u08ec\u0003\u01c0\u00e0\u0000\u08eb\u08ea"+
		"\u0001\u0000\u0000\u0000\u08eb\u08ec\u0001\u0000\u0000\u0000\u08ec\u08ee"+
		"\u0001\u0000\u0000\u0000\u08ed\u08ef\u0003\u01c6\u00e3\u0000\u08ee\u08ed"+
		"\u0001\u0000\u0000\u0000\u08ee\u08ef\u0001\u0000\u0000\u0000\u08ef\u01d1"+
		"\u0001\u0000\u0000\u0000\u08f0\u08f1\u0005\u00e2\u0000\u0000\u08f1\u08f3"+
		"\u0003\u01ca\u00e5\u0000\u08f2\u08f4\u0003\u01c0\u00e0\u0000\u08f3\u08f2"+
		"\u0001\u0000\u0000\u0000\u08f3\u08f4\u0001\u0000\u0000\u0000\u08f4\u08f6"+
		"\u0001\u0000\u0000\u0000\u08f5\u08f7\u0003\u01c6\u00e3\u0000\u08f6\u08f5"+
		"\u0001\u0000\u0000\u0000\u08f6\u08f7\u0001\u0000\u0000\u0000\u08f7\u01d3"+
		"\u0001\u0000\u0000\u0000\u08f8\u08f9\u0005\u00e2\u0000\u0000\u08f9\u08fb"+
		"\u0003\u01d6\u00eb\u0000\u08fa\u08fc\u0003\u01c0\u00e0\u0000\u08fb\u08fa"+
		"\u0001\u0000\u0000\u0000\u08fb\u08fc\u0001\u0000\u0000\u0000\u08fc\u08fe"+
		"\u0001\u0000\u0000\u0000\u08fd\u08ff\u0003\u01c6\u00e3\u0000\u08fe\u08fd"+
		"\u0001\u0000\u0000\u0000\u08fe\u08ff\u0001\u0000\u0000\u0000\u08ff\u0900"+
		"\u0001\u0000\u0000\u0000\u0900\u0901\u0007\u000b\u0000\u0000\u0901\u01d5"+
		"\u0001\u0000\u0000\u0000\u0902\u0903\u0003\u039e\u01cf\u0000\u0903\u01d7"+
		"\u0001\u0000\u0000\u0000\u0904\u0908\u0003\u01de\u00ef\u0000\u0905\u0908"+
		"\u0003\u01da\u00ed\u0000\u0906\u0908\u0003\u01dc\u00ee\u0000\u0907\u0904"+
		"\u0001\u0000\u0000\u0000\u0907\u0905\u0001\u0000\u0000\u0000\u0907\u0906"+
		"\u0001\u0000\u0000\u0000\u0908\u01d9\u0001\u0000\u0000\u0000\u0909\u090a"+
		"\u0003\u01de\u00ef\u0000\u090a\u090b\u0005\u012a\u0000\u0000\u090b\u0910"+
		"\u0003\u01de\u00ef\u0000\u090c\u090d\u0005\u012a\u0000\u0000\u090d\u090f"+
		"\u0003\u01de\u00ef\u0000\u090e\u090c\u0001\u0000\u0000\u0000\u090f\u0912"+
		"\u0001\u0000\u0000\u0000\u0910\u090e\u0001\u0000\u0000\u0000\u0910\u0911"+
		"\u0001\u0000\u0000\u0000\u0911\u01db\u0001\u0000\u0000\u0000\u0912\u0910"+
		"\u0001\u0000\u0000\u0000\u0913\u0914\u0003\u01de\u00ef\u0000\u0914\u0915"+
		"\u0005\u001b\u0000\u0000\u0915\u091a\u0003\u01de\u00ef\u0000\u0916\u0917"+
		"\u0005\u001b\u0000\u0000\u0917\u0919\u0003\u01de\u00ef\u0000\u0918\u0916"+
		"\u0001\u0000\u0000\u0000\u0919\u091c\u0001\u0000\u0000\u0000\u091a\u0918"+
		"\u0001\u0000\u0000\u0000\u091a\u091b\u0001\u0000\u0000\u0000\u091b\u01dd"+
		"\u0001\u0000\u0000\u0000\u091c\u091a\u0001\u0000\u0000\u0000\u091d\u091f"+
		"\u0003\u01e0\u00f0\u0000\u091e\u091d\u0001\u0000\u0000\u0000\u091f\u0920"+
		"\u0001\u0000\u0000\u0000\u0920\u091e\u0001\u0000\u0000\u0000\u0920\u0921"+
		"\u0001\u0000\u0000\u0000\u0921\u01df\u0001\u0000\u0000\u0000\u0922\u0926"+
		"\u0003\u01e6\u00f3\u0000\u0923\u0926\u0003\u01e2\u00f1\u0000\u0924\u0926"+
		"\u0003\u01e4\u00f2\u0000\u0925\u0922\u0001\u0000\u0000\u0000\u0925\u0923"+
		"\u0001\u0000\u0000\u0000\u0925\u0924\u0001\u0000\u0000\u0000\u0926\u01e1"+
		"\u0001\u0000\u0000\u0000\u0927\u0928\u0003\u01e6\u00f3\u0000\u0928\u0929"+
		"\u0003\u0238\u011c\u0000\u0929\u01e3\u0001\u0000\u0000\u0000\u092a\u092b"+
		"\u0003\u01e6\u00f3\u0000\u092b\u092c\u0005\u0012\u0000\u0000\u092c\u01e5"+
		"\u0001\u0000\u0000\u0000\u092d\u0931\u0003\u01e8\u00f4\u0000\u092e\u0931"+
		"\u0003\u0212\u0109\u0000\u092f\u0931\u0003\u0242\u0121\u0000\u0930\u092d"+
		"\u0001\u0000\u0000\u0000\u0930\u092e\u0001\u0000\u0000\u0000\u0930\u092f"+
		"\u0001\u0000\u0000\u0000\u0931\u01e7\u0001\u0000\u0000\u0000\u0932\u0935"+
		"\u0003\u01ea\u00f5\u0000\u0933\u0935\u0003\u01fe\u00ff\u0000\u0934\u0932"+
		"\u0001\u0000\u0000\u0000\u0934\u0933\u0001\u0000\u0000\u0000\u0935\u01e9"+
		"\u0001\u0000\u0000\u0000\u0936\u0937\u0005\f\u0000\u0000\u0937\u0938\u0003"+
		"\u01ec\u00f6\u0000\u0938\u0939\u0005\u0016\u0000\u0000\u0939\u01eb\u0001"+
		"\u0000\u0000\u0000\u093a\u093c\u0003\u01ee\u00f7\u0000\u093b\u093a\u0001"+
		"\u0000\u0000\u0000\u093b\u093c\u0001\u0000\u0000\u0000\u093c\u093e\u0001"+
		"\u0000\u0000\u0000\u093d\u093f\u0003\u01f0\u00f8\u0000\u093e\u093d\u0001"+
		"\u0000\u0000\u0000\u093e\u093f\u0001\u0000\u0000\u0000\u093f\u0941\u0001"+
		"\u0000\u0000\u0000\u0940\u0942\u0003\u01f4\u00fa\u0000\u0941\u0940\u0001"+
		"\u0000\u0000\u0000\u0941\u0942\u0001\u0000\u0000\u0000\u0942\u01ed\u0001"+
		"\u0000\u0000\u0000\u0943\u0945\u0005\u00f3\u0000\u0000\u0944\u0943\u0001"+
		"\u0000\u0000\u0000\u0944\u0945\u0001\u0000\u0000\u0000\u0945\u0946\u0001"+
		"\u0000\u0000\u0000\u0946\u0947\u0003\u0096K\u0000\u0947\u01ef\u0001\u0000"+
		"\u0000\u0000\u0948\u0949\u0003\u01f2\u00f9\u0000\u0949\u094a\u0003\u022c"+
		"\u0116\u0000\u094a\u01f1\u0001\u0000\u0000\u0000\u094b\u094c\u0007\f\u0000"+
		"\u0000\u094c\u01f3\u0001\u0000\u0000\u0000\u094d\u0950\u0003\u01f6\u00fb"+
		"\u0000\u094e\u0950\u0003\u01f8\u00fc\u0000\u094f\u094d\u0001\u0000\u0000"+
		"\u0000\u094f\u094e\u0001\u0000\u0000\u0000\u0950\u01f5\u0001\u0000\u0000"+
		"\u0000\u0951\u0952\u0005\u0115\u0000\u0000\u0952\u0953\u0003\u03a4\u01d2"+
		"\u0000\u0953\u01f7\u0001\u0000\u0000\u0000\u0954\u0955\u0005\n\u0000\u0000"+
		"\u0955\u0956\u0003\u01fa\u00fd\u0000\u0956\u0957\u0005\u0014\u0000\u0000"+
		"\u0957\u01f9\u0001\u0000\u0000\u0000\u0958\u095d\u0003\u01fc\u00fe\u0000"+
		"\u0959\u095a\u0005\u0005\u0000\u0000\u095a\u095c\u0003\u01fc\u00fe\u0000"+
		"\u095b\u0959\u0001\u0000\u0000\u0000\u095c\u095f\u0001\u0000\u0000\u0000"+
		"\u095d\u095b\u0001\u0000\u0000\u0000\u095d\u095e\u0001\u0000\u0000\u0000"+
		"\u095e\u01fb\u0001\u0000\u0000\u0000\u095f\u095d\u0001\u0000\u0000\u0000"+
		"\u0960\u0961\u0003\u0088D\u0000\u0961\u0962\u0005\u0004\u0000\u0000\u0962"+
		"\u0963\u0003\u03a4\u01d2\u0000\u0963\u01fd\u0001\u0000\u0000\u0000\u0964"+
		"\u0967\u0003\u0200\u0100\u0000\u0965\u0967\u0003\u0210\u0108\u0000\u0966"+
		"\u0964\u0001\u0000\u0000\u0000\u0966\u0965\u0001\u0000\u0000\u0000\u0967"+
		"\u01ff\u0001\u0000\u0000\u0000\u0968\u0970\u0003\u0202\u0101\u0000\u0969"+
		"\u0970\u0003\u0204\u0102\u0000\u096a\u0970\u0003\u0206\u0103\u0000\u096b"+
		"\u0970\u0003\u0208\u0104\u0000\u096c\u0970\u0003\u020a\u0105\u0000\u096d"+
		"\u0970\u0003\u020c\u0106\u0000\u096e\u0970\u0003\u020e\u0107\u0000\u096f"+
		"\u0968\u0001\u0000\u0000\u0000\u096f\u0969\u0001\u0000\u0000\u0000\u096f"+
		"\u096a\u0001\u0000\u0000\u0000\u096f\u096b\u0001\u0000\u0000\u0000\u096f"+
		"\u096c\u0001\u0000\u0000\u0000\u096f\u096d\u0001\u0000\u0000\u0000\u096f"+
		"\u096e\u0001\u0000\u0000\u0000\u0970\u0201\u0001\u0000\u0000\u0000\u0971"+
		"\u0972\u0005\r\u0000\u0000\u0972\u0973\u0005\u000e\u0000\u0000\u0973\u0974"+
		"\u0005\u000b\u0000\u0000\u0974\u0975\u0003\u01ec\u00f6\u0000\u0975\u0976"+
		"\u0005\u0015\u0000\u0000\u0976\u0977\u0005\u000e\u0000\u0000\u0977\u0203"+
		"\u0001\u0000\u0000\u0000\u0978\u0979\u0005\u0019\u0000\u0000\u0979\u097a"+
		"\u0005\u000b\u0000\u0000\u097a\u097b\u0003\u01ec\u00f6\u0000\u097b\u097c"+
		"\u0005\u0015\u0000\u0000\u097c\u097d\u0005\u0019\u0000\u0000\u097d\u0205"+
		"\u0001\u0000\u0000\u0000\u097e\u097f\u0005\u000e\u0000\u0000\u097f\u0980"+
		"\u0005\u000b\u0000\u0000\u0980\u0981\u0003\u01ec\u00f6\u0000\u0981\u0982"+
		"\u0005\u0015\u0000\u0000\u0982\u0983\u0005\u0135\u0000\u0000\u0983\u0207"+
		"\u0001\u0000\u0000\u0000\u0984\u0985\u0005\r\u0000\u0000\u0985\u0986\u0005"+
		"\u0019\u0000\u0000\u0986\u0987\u0005\u000b\u0000\u0000\u0987\u0988\u0003"+
		"\u01ec\u00f6\u0000\u0988\u0989\u0005\u0015\u0000\u0000\u0989\u098a\u0005"+
		"\u0019\u0000\u0000\u098a\u0209\u0001\u0000\u0000\u0000\u098b\u098c\u0005"+
		"\u0019\u0000\u0000\u098c\u098d\u0005\u000b\u0000\u0000\u098d\u098e\u0003"+
		"\u01ec\u00f6\u0000\u098e\u098f\u0005\u0015\u0000\u0000\u098f\u0990\u0005"+
		"\u0138\u0000\u0000\u0990\u020b\u0001\u0000\u0000\u0000\u0991\u0992\u0005"+
		"\r\u0000\u0000\u0992\u0993\u0005\u000e\u0000\u0000\u0993\u0994\u0005\u000b"+
		"\u0000\u0000\u0994\u0995\u0003\u01ec\u00f6\u0000\u0995\u0996\u0005\u0015"+
		"\u0000\u0000\u0996\u0997\u0005\u0135\u0000\u0000\u0997\u020d\u0001\u0000"+
		"\u0000\u0000\u0998\u0999\u0005\u000e\u0000\u0000\u0999\u099a\u0005\u000b"+
		"\u0000\u0000\u099a\u099b\u0003\u01ec\u00f6\u0000\u099b\u099c\u0005\u0015"+
		"\u0000\u0000\u099c\u099d\u0005\u000e\u0000\u0000\u099d\u020f\u0001\u0000"+
		"\u0000\u0000\u099e\u099f\u0005\r\u0000\u0000\u099f\u09a8\u0005\u000e\u0000"+
		"\u0000\u09a0\u09a8\u0005\u0019\u0000\u0000\u09a1\u09a8\u0005\u0135\u0000"+
		"\u0000\u09a2\u09a3\u0005\r\u0000\u0000\u09a3\u09a8\u0005\u0019\u0000\u0000"+
		"\u09a4\u09a8\u0005\u0138\u0000\u0000\u09a5\u09a8\u0005\u012f\u0000\u0000"+
		"\u09a6\u09a8\u0005\u000e\u0000\u0000\u09a7\u099e\u0001\u0000\u0000\u0000"+
		"\u09a7\u09a0\u0001\u0000\u0000\u0000\u09a7\u09a1\u0001\u0000\u0000\u0000"+
		"\u09a7\u09a2\u0001\u0000\u0000\u0000\u09a7\u09a4\u0001\u0000\u0000\u0000"+
		"\u09a7\u09a5\u0001\u0000\u0000\u0000\u09a7\u09a6\u0001\u0000\u0000\u0000"+
		"\u09a8\u0211\u0001\u0000\u0000\u0000\u09a9\u09ab\u0005\f\u0000\u0000\u09aa"+
		"\u09ac\u0003\u0214\u010a\u0000\u09ab\u09aa\u0001\u0000\u0000\u0000\u09ab"+
		"\u09ac\u0001\u0000\u0000\u0000\u09ac\u09ae\u0001\u0000\u0000\u0000\u09ad"+
		"\u09af\u0003\u01be\u00df\u0000\u09ae\u09ad\u0001\u0000\u0000\u0000\u09ae"+
		"\u09af\u0001\u0000\u0000\u0000\u09af\u09b0\u0001\u0000\u0000\u0000\u09b0"+
		"\u09b2\u0003\u01d8\u00ec\u0000\u09b1\u09b3\u0003\u0216\u010b\u0000\u09b2"+
		"\u09b1\u0001\u0000\u0000\u0000\u09b2\u09b3\u0001\u0000\u0000\u0000\u09b3"+
		"\u09b4\u0001\u0000\u0000\u0000\u09b4\u09b5\u0005\u0016\u0000\u0000\u09b5"+
		"\u0213\u0001\u0000\u0000\u0000\u09b6\u09b7\u0003\u009aM\u0000\u09b7\u09b8"+
		"\u0005\u0007\u0000\u0000\u09b8\u0215\u0001\u0000\u0000\u0000\u09b9\u09ba"+
		"\u0005\u0115\u0000\u0000\u09ba\u09bb\u0003\u03a4\u01d2\u0000\u09bb\u0217"+
		"\u0001\u0000\u0000\u0000\u09bc\u09bd\u0003\u021a\u010d\u0000\u09bd\u0219"+
		"\u0001\u0000\u0000\u0000\u09be\u09c3\u0003\u021c\u010e\u0000\u09bf\u09c0"+
		"\u0005\u0005\u0000\u0000\u09c0\u09c2\u0003\u021c\u010e\u0000\u09c1\u09bf"+
		"\u0001\u0000\u0000\u0000\u09c2\u09c5\u0001\u0000\u0000\u0000\u09c3\u09c1"+
		"\u0001\u0000\u0000\u0000\u09c3\u09c4\u0001\u0000\u0000\u0000\u09c4\u021b"+
		"\u0001\u0000\u0000\u0000\u09c5\u09c3\u0001\u0000\u0000\u0000\u09c6\u09cc"+
		"\u0003\u021e\u010f\u0000\u09c7\u09c8\u0003\u0220\u0110\u0000\u09c8\u09c9"+
		"\u0003\u021e\u010f\u0000\u09c9\u09cb\u0001\u0000\u0000\u0000\u09ca\u09c7"+
		"\u0001\u0000\u0000\u0000\u09cb\u09ce\u0001\u0000\u0000\u0000\u09cc\u09ca"+
		"\u0001\u0000\u0000\u0000\u09cc\u09cd\u0001\u0000\u0000\u0000\u09cd\u021d"+
		"\u0001\u0000\u0000\u0000\u09ce\u09cc\u0001\u0000\u0000\u0000\u09cf\u09d1"+
		"\u0005\f\u0000\u0000\u09d0\u09d2\u0003\u0228\u0114\u0000\u09d1\u09d0\u0001"+
		"\u0000\u0000\u0000\u09d1\u09d2\u0001\u0000\u0000\u0000\u09d2\u09d3\u0001"+
		"\u0000\u0000\u0000\u09d3\u09d4\u0005\u0016\u0000\u0000\u09d4\u021f\u0001"+
		"\u0000\u0000\u0000\u09d5\u09d9\u0003\u0222\u0111\u0000\u09d6\u09d9\u0003"+
		"\u0224\u0112\u0000\u09d7\u09d9\u0003\u0226\u0113\u0000\u09d8\u09d5\u0001"+
		"\u0000\u0000\u0000\u09d8\u09d6\u0001\u0000\u0000\u0000\u09d8\u09d7\u0001"+
		"\u0000\u0000\u0000\u09d9\u0221\u0001\u0000\u0000\u0000\u09da\u09db\u0005"+
		"\r\u0000\u0000\u09db\u09dc\u0005\u000e\u0000\u0000\u09dc\u09de\u0005\u000b"+
		"\u0000\u0000\u09dd\u09df\u0003\u0228\u0114\u0000\u09de\u09dd\u0001\u0000"+
		"\u0000\u0000\u09de\u09df\u0001\u0000\u0000\u0000\u09df\u09e0\u0001\u0000"+
		"\u0000\u0000\u09e0\u09e1\u0005\u0015\u0000\u0000\u09e1\u09e2\u0005\u000e"+
		"\u0000\u0000\u09e2\u0223\u0001\u0000\u0000\u0000\u09e3\u09e4\u0005\u000e"+
		"\u0000\u0000\u09e4\u09e6\u0005\u000b\u0000\u0000\u09e5\u09e7\u0003\u0228"+
		"\u0114\u0000\u09e6\u09e5\u0001\u0000\u0000\u0000\u09e6\u09e7\u0001\u0000"+
		"\u0000\u0000\u09e7\u09e8\u0001\u0000\u0000\u0000\u09e8\u09e9\u0005\u0015"+
		"\u0000\u0000\u09e9\u09ea\u0005\u0135\u0000\u0000\u09ea\u0225\u0001\u0000"+
		"\u0000\u0000\u09eb\u09ec\u0005\u0019\u0000\u0000\u09ec\u09ee\u0005\u000b"+
		"\u0000\u0000\u09ed\u09ef\u0003\u0228\u0114\u0000\u09ee\u09ed\u0001\u0000"+
		"\u0000\u0000\u09ee\u09ef\u0001\u0000\u0000\u0000\u09ef\u09f0\u0001\u0000"+
		"\u0000\u0000\u09f0\u09f1\u0005\u0015\u0000\u0000\u09f1\u09f2\u0005\u0019"+
		"\u0000\u0000\u09f2\u0227\u0001\u0000\u0000\u0000\u09f3\u09f4\u0003\u01ee"+
		"\u00f7\u0000\u09f4\u09f5\u0003\u022a\u0115\u0000\u09f5\u09f9\u0001\u0000"+
		"\u0000\u0000\u09f6\u09f9\u0003\u01ee\u00f7\u0000\u09f7\u09f9\u0003\u022a"+
		"\u0115\u0000\u09f8\u09f3\u0001\u0000\u0000\u0000\u09f8\u09f6\u0001\u0000"+
		"\u0000\u0000\u09f8\u09f7\u0001\u0000\u0000\u0000\u09f9\u0229\u0001\u0000"+
		"\u0000\u0000\u09fa\u09fb\u0003\u01f2\u00f9\u0000\u09fb\u09fc\u0003\u0114"+
		"\u008a\u0000\u09fc\u0a03\u0001\u0000\u0000\u0000\u09fd\u09fe\u0003\u01f2"+
		"\u00f9\u0000\u09fe\u09ff\u0003\u0114\u008a\u0000\u09ff\u0a00\u0003\u01f8"+
		"\u00fc\u0000\u0a00\u0a03\u0001\u0000\u0000\u0000\u0a01\u0a03\u0003\u01f8"+
		"\u00fc\u0000\u0a02\u09fa\u0001\u0000\u0000\u0000\u0a02\u09fd\u0001\u0000"+
		"\u0000\u0000\u0a02\u0a01\u0001\u0000\u0000\u0000\u0a03\u022b\u0001\u0000"+
		"\u0000\u0000\u0a04\u0a09\u0003\u022e\u0117\u0000\u0a05\u0a06\u0005\u001b"+
		"\u0000\u0000\u0a06\u0a08\u0003\u022e\u0117\u0000\u0a07\u0a05\u0001\u0000"+
		"\u0000\u0000\u0a08\u0a0b\u0001\u0000\u0000\u0000\u0a09\u0a07\u0001\u0000"+
		"\u0000\u0000\u0a09\u0a0a\u0001\u0000\u0000\u0000\u0a0a\u022d\u0001\u0000"+
		"\u0000\u0000\u0a0b\u0a09\u0001\u0000\u0000\u0000\u0a0c\u0a11\u0003\u0230"+
		"\u0118\u0000\u0a0d\u0a0e\u0005\u0001\u0000\u0000\u0a0e\u0a10\u0003\u0230"+
		"\u0118\u0000\u0a0f\u0a0d\u0001\u0000\u0000\u0000\u0a10\u0a13\u0001\u0000"+
		"\u0000\u0000\u0a11\u0a0f\u0001\u0000\u0000\u0000\u0a11\u0a12\u0001\u0000"+
		"\u0000\u0000\u0a12\u022f\u0001\u0000\u0000\u0000\u0a13\u0a11\u0001\u0000"+
		"\u0000\u0000\u0a14\u0a16\u0005\b\u0000\u0000\u0a15\u0a14\u0001\u0000\u0000"+
		"\u0000\u0a15\u0a16\u0001\u0000\u0000\u0000\u0a16\u0a17\u0001\u0000\u0000"+
		"\u0000\u0a17\u0a18\u0003\u0232\u0119\u0000\u0a18\u0231\u0001\u0000\u0000"+
		"\u0000\u0a19\u0a1d\u0003\u0084B\u0000\u0a1a\u0a1d\u0003\u0234\u011a\u0000"+
		"\u0a1b\u0a1d\u0003\u0236\u011b\u0000\u0a1c\u0a19\u0001\u0000\u0000\u0000"+
		"\u0a1c\u0a1a\u0001\u0000\u0000\u0000\u0a1c\u0a1b\u0001\u0000\u0000\u0000"+
		"\u0a1d\u0233\u0001\u0000\u0000\u0000\u0a1e\u0a1f\u0005\u000f\u0000\u0000"+
		"\u0a1f\u0235\u0001\u0000\u0000\u0000\u0a20\u0a21\u0005\f\u0000\u0000\u0a21"+
		"\u0a22\u0003\u022c\u0116\u0000\u0a22\u0a23\u0005\u0016\u0000\u0000\u0a23"+
		"\u0237\u0001\u0000\u0000\u0000\u0a24\u0a29\u0005\u0002\u0000\u0000\u0a25"+
		"\u0a29\u0005\u0011\u0000\u0000\u0a26\u0a29\u0003\u023a\u011d\u0000\u0a27"+
		"\u0a29\u0003\u023c\u011e\u0000\u0a28\u0a24\u0001\u0000\u0000\u0000\u0a28"+
		"\u0a25\u0001\u0000\u0000\u0000\u0a28\u0a26\u0001\u0000\u0000\u0000\u0a28"+
		"\u0a27\u0001\u0000\u0000\u0000\u0a29\u0239\u0001\u0000\u0000\u0000\u0a2a"+
		"\u0a2b\u0005\n\u0000\u0000\u0a2b\u0a2c\u0005\u0148\u0000\u0000\u0a2c\u0a2d"+
		"\u0005\u0014\u0000\u0000\u0a2d\u023b\u0001\u0000\u0000\u0000\u0a2e\u0a30"+
		"\u0005\n\u0000\u0000\u0a2f\u0a31\u0003\u023e\u011f\u0000\u0a30\u0a2f\u0001"+
		"\u0000\u0000\u0000\u0a30\u0a31\u0001\u0000\u0000\u0000\u0a31\u0a32\u0001"+
		"\u0000\u0000\u0000\u0a32\u0a34\u0005\u0005\u0000\u0000\u0a33\u0a35\u0003"+
		"\u0240\u0120\u0000\u0a34\u0a33\u0001\u0000\u0000\u0000\u0a34\u0a35\u0001"+
		"\u0000\u0000\u0000\u0a35\u0a36\u0001\u0000\u0000\u0000\u0a36\u0a37\u0005"+
		"\u0014\u0000\u0000\u0a37\u023d\u0001\u0000\u0000\u0000\u0a38\u0a39\u0005"+
		"\u0148\u0000\u0000\u0a39\u023f\u0001\u0000\u0000\u0000\u0a3a\u0a3b\u0005"+
		"\u0148\u0000\u0000\u0a3b\u0241\u0001\u0000\u0000\u0000\u0a3c\u0a44\u0003"+
		"\u0244\u0122\u0000\u0a3d\u0a44\u0003\u0246\u0123\u0000\u0a3e\u0a44\u0003"+
		"\u0248\u0124\u0000\u0a3f\u0a44\u0003\u024a\u0125\u0000\u0a40\u0a44\u0003"+
		"\u024c\u0126\u0000\u0a41\u0a44\u0003\u024e\u0127\u0000\u0a42\u0a44\u0003"+
		"\u0250\u0128\u0000\u0a43\u0a3c\u0001\u0000\u0000\u0000\u0a43\u0a3d\u0001"+
		"\u0000\u0000\u0000\u0a43\u0a3e\u0001\u0000\u0000\u0000\u0a43\u0a3f\u0001"+
		"\u0000\u0000\u0000\u0a43\u0a40\u0001\u0000\u0000\u0000\u0a43\u0a41\u0001"+
		"\u0000\u0000\u0000\u0a43\u0a42\u0001\u0000\u0000\u0000\u0a44\u0243\u0001"+
		"\u0000\u0000\u0000\u0a45\u0a46\u0005\u0130\u0000\u0000\u0a46\u0a47\u0003"+
		"\u0252\u0129\u0000\u0a47\u0a48\u0005\u0018\u0000\u0000\u0a48\u0a49\u0005"+
		"\u000e\u0000\u0000\u0a49\u0245\u0001\u0000\u0000\u0000\u0a4a\u0a4b\u0005"+
		"\u0139\u0000\u0000\u0a4b\u0a4c\u0003\u0252\u0129\u0000\u0a4c\u0a4d\u0005"+
		"\u0018\u0000\u0000\u0a4d\u0a4e\u0005\u0019\u0000\u0000\u0a4e\u0247\u0001"+
		"\u0000\u0000\u0000\u0a4f\u0a50\u0005\u0133\u0000\u0000\u0a50\u0a51\u0003"+
		"\u0252\u0129\u0000\u0a51\u0a52\u0005\u0136\u0000\u0000\u0a52\u0249\u0001"+
		"\u0000\u0000\u0000\u0a53\u0a54\u0005\u0131\u0000\u0000\u0a54\u0a55\u0003"+
		"\u0252\u0129\u0000\u0a55\u0a56\u0005\u0018\u0000\u0000\u0a56\u0a57\u0005"+
		"\u0019\u0000\u0000\u0a57\u024b\u0001\u0000\u0000\u0000\u0a58\u0a59\u0005"+
		"\u0139\u0000\u0000\u0a59\u0a5a\u0003\u0252\u0129\u0000\u0a5a\u0a5b\u0005"+
		"\u0137\u0000\u0000\u0a5b\u024d\u0001\u0000\u0000\u0000\u0a5c\u0a5d\u0005"+
		"\u0130\u0000\u0000\u0a5d\u0a5e\u0003\u0252\u0129\u0000\u0a5e\u0a5f\u0005"+
		"\u0136\u0000\u0000\u0a5f\u024f\u0001\u0000\u0000\u0000\u0a60\u0a61\u0005"+
		"\u0133\u0000\u0000\u0a61\u0a62\u0003\u0252\u0129\u0000\u0a62\u0a63\u0005"+
		"\u0018\u0000\u0000\u0a63\u0a64\u0005\u000e\u0000\u0000\u0a64\u0251\u0001"+
		"\u0000\u0000\u0000\u0a65\u0a69\u0003\u0258\u012c\u0000\u0a66\u0a69\u0003"+
		"\u0254\u012a\u0000\u0a67\u0a69\u0003\u0256\u012b\u0000\u0a68\u0a65\u0001"+
		"\u0000\u0000\u0000\u0a68\u0a66\u0001\u0000\u0000\u0000\u0a68\u0a67\u0001"+
		"\u0000\u0000\u0000\u0a69\u0253\u0001\u0000\u0000\u0000\u0a6a\u0a6b\u0003"+
		"\u0258\u012c\u0000\u0a6b\u0a6c\u0005\u001b\u0000\u0000\u0a6c\u0a71\u0003"+
		"\u0258\u012c\u0000\u0a6d\u0a6e\u0005\u001b\u0000\u0000\u0a6e\u0a70\u0003"+
		"\u0258\u012c\u0000\u0a6f\u0a6d\u0001\u0000\u0000\u0000\u0a70\u0a73\u0001"+
		"\u0000\u0000\u0000\u0a71\u0a6f\u0001\u0000\u0000\u0000\u0a71\u0a72\u0001"+
		"\u0000\u0000\u0000\u0a72\u0255\u0001\u0000\u0000\u0000\u0a73\u0a71\u0001"+
		"\u0000\u0000\u0000\u0a74\u0a75\u0003\u0258\u012c\u0000\u0a75\u0a76\u0005"+
		"\u012a\u0000\u0000\u0a76\u0a7b\u0003\u0258\u012c\u0000\u0a77\u0a78\u0005"+
		"\u012a\u0000\u0000\u0a78\u0a7a\u0003\u0258\u012c\u0000\u0a79\u0a77\u0001"+
		"\u0000\u0000\u0000\u0a7a\u0a7d\u0001\u0000\u0000\u0000\u0a7b\u0a79\u0001"+
		"\u0000\u0000\u0000\u0a7b\u0a7c\u0001\u0000\u0000\u0000\u0a7c\u0257\u0001"+
		"\u0000\u0000\u0000\u0a7d\u0a7b\u0001\u0000\u0000\u0000\u0a7e\u0a80\u0003"+
		"\u025a\u012d\u0000\u0a7f\u0a7e\u0001\u0000\u0000\u0000\u0a80\u0a81\u0001"+
		"\u0000\u0000\u0000\u0a81\u0a7f\u0001\u0000\u0000\u0000\u0a81\u0a82\u0001"+
		"\u0000\u0000\u0000\u0a82\u0259\u0001\u0000\u0000\u0000\u0a83\u0a88\u0003"+
		"\u025c\u012e\u0000\u0a84\u0a85\u0005\u0001\u0000\u0000\u0a85\u0a87\u0003"+
		"\u025c\u012e\u0000\u0a86\u0a84\u0001\u0000\u0000\u0000\u0a87\u0a8a\u0001"+
		"\u0000\u0000\u0000\u0a88\u0a86\u0001\u0000\u0000\u0000\u0a88\u0a89\u0001"+
		"\u0000\u0000\u0000\u0a89\u025b\u0001\u0000\u0000\u0000\u0a8a\u0a88\u0001"+
		"\u0000\u0000\u0000\u0a8b\u0a8f\u0003\u0262\u0131\u0000\u0a8c\u0a8f\u0003"+
		"\u025e\u012f\u0000\u0a8d\u0a8f\u0003\u0260\u0130\u0000\u0a8e\u0a8b\u0001"+
		"\u0000\u0000\u0000\u0a8e\u0a8c\u0001\u0000\u0000\u0000\u0a8e\u0a8d\u0001"+
		"\u0000\u0000\u0000\u0a8f\u025d\u0001\u0000\u0000\u0000\u0a90\u0a91\u0003"+
		"\u0262\u0131\u0000\u0a91\u0a92\u0003\u0238\u011c\u0000\u0a92\u025f\u0001"+
		"\u0000\u0000\u0000\u0a93\u0a94\u0003\u0262\u0131\u0000\u0a94\u0a95\u0005"+
		"\u0012\u0000\u0000\u0a95\u0261\u0001\u0000\u0000\u0000\u0a96\u0a99\u0003"+
		"\u0264\u0132\u0000\u0a97\u0a99\u0003\u0274\u013a\u0000\u0a98\u0a96\u0001"+
		"\u0000\u0000\u0000\u0a98\u0a97\u0001\u0000\u0000\u0000\u0a99\u0263\u0001"+
		"\u0000\u0000\u0000\u0a9a\u0aa2\u0003\u0266\u0133\u0000\u0a9b\u0aa2\u0003"+
		"\u0268\u0134\u0000\u0a9c\u0aa2\u0003\u026a\u0135\u0000\u0a9d\u0aa2\u0003"+
		"\u026c\u0136\u0000\u0a9e\u0aa2\u0003\u026e\u0137\u0000\u0a9f\u0aa2\u0003"+
		"\u0270\u0138\u0000\u0aa0\u0aa2\u0003\u0272\u0139\u0000\u0aa1\u0a9a\u0001"+
		"\u0000\u0000\u0000\u0aa1\u0a9b\u0001\u0000\u0000\u0000\u0aa1\u0a9c\u0001"+
		"\u0000\u0000\u0000\u0aa1\u0a9d\u0001\u0000\u0000\u0000\u0aa1\u0a9e\u0001"+
		"\u0000\u0000\u0000\u0aa1\u0a9f\u0001\u0000\u0000\u0000\u0aa1\u0aa0\u0001"+
		"\u0000\u0000\u0000\u0aa2\u0265\u0001\u0000\u0000\u0000\u0aa3\u0aa4\u0005"+
		"\r\u0000\u0000\u0aa4\u0aa5\u0003\u0274\u013a\u0000\u0aa5\u0267\u0001\u0000"+
		"\u0000\u0000\u0aa6\u0aa7\u0005\u0019\u0000\u0000\u0aa7\u0aa8\u0003\u0274"+
		"\u013a\u0000\u0aa8\u0269\u0001\u0000\u0000\u0000\u0aa9\u0aaa\u0003\u0274"+
		"\u013a\u0000\u0aaa\u0aab\u0005\t\u0000\u0000\u0aab\u026b\u0001\u0000\u0000"+
		"\u0000\u0aac\u0aad\u0005\r\u0000\u0000\u0aad\u0aae\u0005\u0019\u0000\u0000"+
		"\u0aae\u0aaf\u0003\u0274\u013a\u0000\u0aaf\u026d\u0001\u0000\u0000\u0000"+
		"\u0ab0\u0ab1\u0005\u0019\u0000\u0000\u0ab1\u0ab2\u0003\u0274\u013a\u0000"+
		"\u0ab2\u0ab3\u0005\t\u0000\u0000\u0ab3\u026f\u0001\u0000\u0000\u0000\u0ab4"+
		"\u0ab5\u0005\r\u0000\u0000\u0ab5\u0ab6\u0003\u0274\u013a\u0000\u0ab6\u0ab7"+
		"\u0005\t\u0000\u0000\u0ab7\u0271\u0001\u0000\u0000\u0000\u0ab8\u0ab9\u0005"+
		"\u000e\u0000\u0000\u0ab9\u0aba\u0003\u0274\u013a\u0000\u0aba\u0273\u0001"+
		"\u0000\u0000\u0000\u0abb\u0abe\u0003\u0278\u013c\u0000\u0abc\u0abe\u0003"+
		"\u0276\u013b\u0000\u0abd\u0abb\u0001\u0000\u0000\u0000\u0abd\u0abc\u0001"+
		"\u0000\u0000\u0000\u0abe\u0275\u0001\u0000\u0000\u0000\u0abf\u0ac0\u0005"+
		"\b\u0000\u0000\u0ac0\u0ac1\u0003\u0278\u013c\u0000\u0ac1\u0277\u0001\u0000"+
		"\u0000\u0000\u0ac2\u0ac8\u0003\u0084B\u0000\u0ac3\u0ac4\u0005\f\u0000"+
		"\u0000\u0ac4\u0ac5\u0003\u0252\u0129\u0000\u0ac5\u0ac6\u0005\u0016\u0000"+
		"\u0000\u0ac6\u0ac8\u0001\u0000\u0000\u0000\u0ac7\u0ac2\u0001\u0000\u0000"+
		"\u0000\u0ac7\u0ac3\u0001\u0000\u0000\u0000\u0ac8\u0279\u0001\u0000\u0000"+
		"\u0000\u0ac9\u0aca\u0005\u0115\u0000\u0000\u0aca\u0acb\u0003\u03a4\u01d2"+
		"\u0000\u0acb\u027b\u0001\u0000\u0000\u0000\u0acc\u0acd\u0005\u011a\u0000"+
		"\u0000\u0acd\u0ace\u0003\u027e\u013f\u0000\u0ace\u027d\u0001\u0000\u0000"+
		"\u0000\u0acf\u0ad4\u0003\u0280\u0140\u0000\u0ad0\u0ad1\u0005\u0005\u0000"+
		"\u0000\u0ad1\u0ad3\u0003\u0280\u0140\u0000\u0ad2\u0ad0\u0001\u0000\u0000"+
		"\u0000\u0ad3\u0ad6\u0001\u0000\u0000\u0000\u0ad4\u0ad2\u0001\u0000\u0000"+
		"\u0000\u0ad4\u0ad5\u0001\u0000\u0000\u0000\u0ad5\u027f\u0001\u0000\u0000"+
		"\u0000\u0ad6\u0ad4\u0001\u0000\u0000\u0000\u0ad7\u0ad9\u0003\u0282\u0141"+
		"\u0000\u0ad8\u0ada\u0003\u0284\u0142\u0000\u0ad9\u0ad8\u0001\u0000\u0000"+
		"\u0000\u0ad9\u0ada\u0001\u0000\u0000\u0000\u0ada\u0281\u0001\u0000\u0000"+
		"\u0000\u0adb\u0adc\u0003\u008aE\u0000\u0adc\u0283\u0001\u0000\u0000\u0000"+
		"\u0add\u0ade\u0005$\u0000\u0000\u0ade\u0adf\u0003\u00a0P\u0000\u0adf\u0285"+
		"\u0001\u0000\u0000\u0000\u0ae0\u0ae1\u0005x\u0000\u0000\u0ae1\u0ae2\u0005"+
		"4\u0000\u0000\u0ae2\u0ae3\u0003\u0288\u0144\u0000\u0ae3\u0287\u0001\u0000"+
		"\u0000\u0000\u0ae4\u0ae7\u0003\u028a\u0145\u0000\u0ae5\u0ae6\u0005\u0005"+
		"\u0000\u0000\u0ae6\u0ae8\u0003\u028a\u0145\u0000\u0ae7\u0ae5\u0001\u0000"+
		"\u0000\u0000\u0ae7\u0ae8\u0001\u0000\u0000\u0000\u0ae8\u0aeb\u0001\u0000"+
		"\u0000\u0000\u0ae9\u0aeb\u0003\u028c\u0146\u0000\u0aea\u0ae4\u0001\u0000"+
		"\u0000\u0000\u0aea\u0ae9\u0001\u0000\u0000\u0000\u0aeb\u0289\u0001\u0000"+
		"\u0000\u0000\u0aec\u0aed\u0003\u0196\u00cb\u0000\u0aed\u028b\u0001\u0000"+
		"\u0000\u0000\u0aee\u0aef\u0005\f\u0000\u0000\u0aef\u0af0\u0005\u0016\u0000"+
		"\u0000\u0af0\u028d\u0001\u0000\u0000\u0000\u0af1\u0af2\u0005\u00c3\u0000"+
		"\u0000\u0af2\u0af3\u00054\u0000\u0000\u0af3\u0af4\u0003\u0298\u014c\u0000"+
		"\u0af4\u028f\u0001\u0000\u0000\u0000\u0af5\u0af6\u0005H\u0000\u0000\u0af6"+
		"\u0af7\u0005\f\u0000\u0000\u0af7\u0af8\u0005\u0002\u0000\u0000\u0af8\u0b0c"+
		"\u0005\u0016\u0000\u0000\u0af9\u0afa\u0003\u0292\u0149\u0000\u0afa\u0afc"+
		"\u0005\f\u0000\u0000\u0afb\u0afd\u0003\u0294\u014a\u0000\u0afc\u0afb\u0001"+
		"\u0000\u0000\u0000\u0afc\u0afd\u0001\u0000\u0000\u0000\u0afd\u0afe\u0001"+
		"\u0000\u0000\u0000\u0afe\u0aff\u0003\u03a4\u01d2\u0000\u0aff\u0b00\u0005"+
		"\u0016\u0000\u0000\u0b00\u0b0c\u0001\u0000\u0000\u0000\u0b01\u0b02\u0003"+
		"\u0296\u014b\u0000\u0b02\u0b04\u0005\f\u0000\u0000\u0b03\u0b05\u0003\u0294"+
		"\u014a\u0000\u0b04\u0b03\u0001\u0000\u0000\u0000\u0b04\u0b05\u0001\u0000"+
		"\u0000\u0000\u0b05\u0b06\u0001\u0000\u0000\u0000\u0b06\u0b07\u0003\u03a4"+
		"\u01d2\u0000\u0b07\u0b08\u0005\u0005\u0000\u0000\u0b08\u0b09\u0003\u03a4"+
		"\u01d2\u0000\u0b09\u0b0a\u0005\u0016\u0000\u0000\u0b0a\u0b0c\u0001\u0000"+
		"\u0000\u0000\u0b0b\u0af5\u0001\u0000\u0000\u0000\u0b0b\u0af9\u0001\u0000"+
		"\u0000\u0000\u0b0b\u0b01\u0001\u0000\u0000\u0000\u0b0c\u0291\u0001\u0000"+
		"\u0000\u0000\u0b0d\u0b0e\u0007\r\u0000\u0000\u0b0e\u0293\u0001\u0000\u0000"+
		"\u0000\u0b0f\u0b10\u0007\u000e\u0000\u0000\u0b10\u0295\u0001\u0000\u0000"+
		"\u0000\u0b11\u0b12\u0007\u000f\u0000\u0000\u0b12\u0297\u0001\u0000\u0000"+
		"\u0000\u0b13\u0b18\u0003\u029a\u014d\u0000\u0b14\u0b15\u0005\u0005\u0000"+
		"\u0000\u0b15\u0b17\u0003\u029a\u014d\u0000\u0b16\u0b14\u0001\u0000\u0000"+
		"\u0000\u0b17\u0b1a\u0001\u0000\u0000\u0000\u0b18\u0b16\u0001\u0000\u0000"+
		"\u0000\u0b18\u0b19\u0001\u0000\u0000\u0000\u0b19\u0299\u0001\u0000\u0000"+
		"\u0000\u0b1a\u0b18\u0001\u0000\u0000\u0000\u0b1b\u0b1d\u0003\u029c\u014e"+
		"\u0000\u0b1c\u0b1e\u0003\u029e\u014f\u0000\u0b1d\u0b1c\u0001\u0000\u0000"+
		"\u0000\u0b1d\u0b1e\u0001\u0000\u0000\u0000\u0b1e\u0b20\u0001\u0000\u0000"+
		"\u0000\u0b1f\u0b21\u0003\u02a0\u0150\u0000\u0b20\u0b1f\u0001\u0000\u0000"+
		"\u0000\u0b20\u0b21\u0001\u0000\u0000\u0000\u0b21\u029b\u0001\u0000\u0000"+
		"\u0000\u0b22\u0b23\u0003\u03a4\u01d2\u0000\u0b23\u029d\u0001\u0000\u0000"+
		"\u0000\u0b24\u0b25\u0007\u0010\u0000\u0000\u0b25\u029f\u0001\u0000\u0000"+
		"\u0000\u0b26\u0b27\u0005\u00ba\u0000\u0000\u0b27\u0b2b\u0005m\u0000\u0000"+
		"\u0b28\u0b29\u0005\u00ba\u0000\u0000\u0b29\u0b2b\u0005\u009a\u0000\u0000"+
		"\u0b2a\u0b26\u0001\u0000\u0000\u0000\u0b2a\u0b28\u0001\u0000\u0000\u0000"+
		"\u0b2b\u02a1\u0001\u0000\u0000\u0000\u0b2c\u0b2d\u0005\u009f\u0000\u0000"+
		"\u0b2d\u0b2e\u0003\u039e\u01cf\u0000\u0b2e\u02a3\u0001\u0000\u0000\u0000"+
		"\u0b2f\u0b30\u0003\u02a6\u0153\u0000\u0b30\u0b31\u0003\u039e\u01cf\u0000"+
		"\u0b31\u02a5\u0001\u0000\u0000\u0000\u0b32\u0b33\u0007\u0011\u0000\u0000"+
		"\u0b33\u02a7\u0001\u0000\u0000\u0000\u0b34\u0b35\u0005\n\u0000\u0000\u0b35"+
		"\u0b36\u0003\u02aa\u0155\u0000\u0b36\u0b37\u0005\u0014\u0000\u0000\u0b37"+
		"\u02a9\u0001\u0000\u0000\u0000\u0b38\u0b39\u0003\u02ac\u0156\u0000\u0b39"+
		"\u02ab\u0001\u0000\u0000\u0000\u0b3a\u0b3f\u0003\u02ae\u0157\u0000\u0b3b"+
		"\u0b3c\u0005\u0005\u0000\u0000\u0b3c\u0b3e\u0003\u02ae\u0157\u0000\u0b3d"+
		"\u0b3b\u0001\u0000\u0000\u0000\u0b3e\u0b41\u0001\u0000\u0000\u0000\u0b3f"+
		"\u0b3d\u0001\u0000\u0000\u0000\u0b3f\u0b40\u0001\u0000\u0000\u0000\u0b40"+
		"\u02ad\u0001\u0000\u0000\u0000\u0b41\u0b3f\u0001\u0000\u0000\u0000\u0b42"+
		"\u0b45\u0003\u02b0\u0158\u0000\u0b43\u0b45\u0003\u02be\u015f\u0000\u0b44"+
		"\u0b42\u0001\u0000\u0000\u0000\u0b44\u0b43\u0001\u0000\u0000\u0000\u0b45"+
		"\u02af\u0001\u0000\u0000\u0000\u0b46\u0b4a\u0003\u02b2\u0159\u0000\u0b47"+
		"\u0b48\u0005\u0125\u0000\u0000\u0b48\u0b4a\u0003\u02b4\u015a\u0000\u0b49"+
		"\u0b46\u0001\u0000\u0000\u0000\u0b49\u0b47\u0001\u0000\u0000\u0000\u0b4a"+
		"\u02b1\u0001\u0000\u0000\u0000\u0b4b\u0b4d\u0005\f\u0000\u0000\u0b4c\u0b4e"+
		"\u0003\u02b6\u015b\u0000\u0b4d\u0b4c\u0001\u0000\u0000\u0000\u0b4d\u0b4e"+
		"\u0001\u0000\u0000\u0000\u0b4e\u0b50\u0001\u0000\u0000\u0000\u0b4f\u0b51"+
		"\u0003\u02b8\u015c\u0000\u0b50\u0b4f\u0001\u0000\u0000\u0000\u0b50\u0b51"+
		"\u0001\u0000\u0000\u0000\u0b51\u0b52\u0001\u0000\u0000\u0000\u0b52\u0b53"+
		"\u0005\u0016\u0000\u0000\u0b53\u02b3\u0001\u0000\u0000\u0000\u0b54\u0b56"+
		"\u0005\u00fe\u0000\u0000\u0b55\u0b54\u0001\u0000\u0000\u0000\u0b55\u0b56"+
		"\u0001\u0000\u0000\u0000\u0b56\u0b57\u0001\u0000\u0000\u0000\u0b57\u0b59"+
		"\u0003\u02b6\u015b\u0000\u0b58\u0b5a\u0003\u02b8\u015c\u0000\u0b59\u0b58"+
		"\u0001\u0000\u0000\u0000\u0b59\u0b5a\u0001\u0000\u0000\u0000\u0b5a\u0b5d"+
		"\u0001\u0000\u0000\u0000\u0b5b\u0b5d\u0003\u02b8\u015c\u0000\u0b5c\u0b55"+
		"\u0001\u0000\u0000\u0000\u0b5c\u0b5b\u0001\u0000\u0000\u0000\u0b5d\u02b5"+
		"\u0001\u0000\u0000\u0000\u0b5e\u0b5f\u0003|>\u0000\u0b5f\u02b7\u0001\u0000"+
		"\u0000\u0000\u0b60\u0b66\u0003\u02ba\u015d\u0000\u0b61\u0b66\u0003\u02bc"+
		"\u015e\u0000\u0b62\u0b63\u0003\u02ba\u015d\u0000\u0b63\u0b64\u0003\u02bc"+
		"\u015e\u0000\u0b64\u0b66\u0001\u0000\u0000\u0000\u0b65\u0b60\u0001\u0000"+
		"\u0000\u0000\u0b65\u0b61\u0001\u0000\u0000\u0000\u0b65\u0b62\u0001\u0000"+
		"\u0000\u0000\u0b66\u02b9\u0001\u0000\u0000\u0000\u0b67\u0b68\u0003\u02fe"+
		"\u017f\u0000\u0b68\u02bb\u0001\u0000\u0000\u0000\u0b69\u0b6a\u0003\u0300"+
		"\u0180\u0000\u0b6a\u02bd\u0001\u0000\u0000\u0000\u0b6b\u0b72\u0003\u02c0"+
		"\u0160\u0000\u0b6c\u0b6e\u0003\u02ea\u0175\u0000\u0b6d\u0b6c\u0001\u0000"+
		"\u0000\u0000\u0b6d\u0b6e\u0001\u0000\u0000\u0000\u0b6e\u0b6f\u0001\u0000"+
		"\u0000\u0000\u0b6f\u0b70\u0005\u0123\u0000\u0000\u0b70\u0b72\u0003\u02c2"+
		"\u0161\u0000\u0b71\u0b6b\u0001\u0000\u0000\u0000\u0b71\u0b6d\u0001\u0000"+
		"\u0000\u0000\u0b72\u02bf\u0001\u0000\u0000\u0000\u0b73\u0b76\u0003\u02cc"+
		"\u0166\u0000\u0b74\u0b76\u0003\u02dc\u016e\u0000\u0b75\u0b73\u0001\u0000"+
		"\u0000\u0000\u0b75\u0b74\u0001\u0000\u0000\u0000\u0b76\u02c1\u0001\u0000"+
		"\u0000\u0000\u0b77\u0b79\u0005\u00fe\u0000\u0000\u0b78\u0b77\u0001\u0000"+
		"\u0000\u0000\u0b78\u0b79\u0001\u0000\u0000\u0000\u0b79\u0b7a\u0001\u0000"+
		"\u0000\u0000\u0b7a\u0b7e\u0003\u02c4\u0162\u0000\u0b7b\u0b7c\u0003\u02c6"+
		"\u0163\u0000\u0b7c\u0b7d\u0003\u02ec\u0176\u0000\u0b7d\u0b7f\u0001\u0000"+
		"\u0000\u0000\u0b7e\u0b7b\u0001\u0000\u0000\u0000\u0b7e\u0b7f\u0001\u0000"+
		"\u0000\u0000\u0b7f\u0b84\u0001\u0000\u0000\u0000\u0b80\u0b81\u0003\u02c6"+
		"\u0163\u0000\u0b81\u0b82\u0003\u02ec\u0176\u0000\u0b82\u0b84\u0001\u0000"+
		"\u0000\u0000\u0b83\u0b78\u0001\u0000\u0000\u0000\u0b83\u0b80\u0001\u0000"+
		"\u0000\u0000\u0b84\u02c3\u0001\u0000\u0000\u0000\u0b85\u0b86\u0003|>\u0000"+
		"\u0b86\u02c5\u0001\u0000\u0000\u0000\u0b87\u0b8d\u0003\u02c8\u0164\u0000"+
		"\u0b88\u0b8d\u0003\u02ca\u0165\u0000\u0b89\u0b8a\u0003\u02c8\u0164\u0000"+
		"\u0b8a\u0b8b\u0003\u02ca\u0165\u0000\u0b8b\u0b8d\u0001\u0000\u0000\u0000"+
		"\u0b8c\u0b87\u0001\u0000\u0000\u0000\u0b8c\u0b88\u0001\u0000\u0000\u0000"+
		"\u0b8c\u0b89\u0001\u0000\u0000\u0000\u0b8d\u02c7\u0001\u0000\u0000\u0000"+
		"\u0b8e\u0b8f\u0003\u02fe\u017f\u0000\u0b8f\u02c9\u0001\u0000\u0000\u0000"+
		"\u0b90\u0b91\u0003\u0300\u0180\u0000\u0b91\u02cb\u0001\u0000\u0000\u0000"+
		"\u0b92\u0b96\u0003\u02ce\u0167\u0000\u0b93\u0b96\u0003\u02d0\u0168\u0000"+
		"\u0b94\u0b96\u0003\u02d2\u0169\u0000\u0b95\u0b92\u0001\u0000\u0000\u0000"+
		"\u0b95\u0b93\u0001\u0000\u0000\u0000\u0b95\u0b94\u0001\u0000\u0000\u0000"+
		"\u0b96\u02cd\u0001\u0000\u0000\u0000\u0b97\u0b98\u0003\u02e6\u0173\u0000"+
		"\u0b98\u0b99\u0003\u02d4\u016a\u0000\u0b99\u0b9a\u0003\u02e8\u0174\u0000"+
		"\u0b9a\u02cf\u0001\u0000\u0000\u0000\u0b9b\u0b9c\u0003\u02e8\u0174\u0000"+
		"\u0b9c\u0b9d\u0003\u02d6\u016b\u0000\u0b9d\u0b9e\u0003\u02e6\u0173\u0000"+
		"\u0b9e\u02d1\u0001\u0000\u0000\u0000\u0b9f\u0ba0\u0003\u02e6\u0173\u0000"+
		"\u0ba0\u0ba1\u0003\u02d8\u016c\u0000\u0ba1\u0ba2\u0003\u02e8\u0174\u0000"+
		"\u0ba2\u02d3\u0001\u0000\u0000\u0000\u0ba3\u0ba4\u0005\u000e\u0000\u0000"+
		"\u0ba4\u0ba5\u0005\u000b\u0000\u0000\u0ba5\u0ba6\u0003\u02da\u016d\u0000"+
		"\u0ba6\u0ba7\u0005\u0015\u0000\u0000\u0ba7\u0ba8\u0005\u0135\u0000\u0000"+
		"\u0ba8\u02d5\u0001\u0000\u0000\u0000\u0ba9\u0baa\u0005\r\u0000\u0000\u0baa"+
		"\u0bab\u0005\u000e\u0000\u0000\u0bab\u0bac\u0005\u000b\u0000\u0000\u0bac"+
		"\u0bad\u0003\u02da\u016d\u0000\u0bad\u0bae\u0005\u0015\u0000\u0000\u0bae"+
		"\u0baf\u0005\u000e\u0000\u0000\u0baf\u02d7\u0001\u0000\u0000\u0000\u0bb0"+
		"\u0bb1\u0005\u0019\u0000\u0000\u0bb1\u0bb2\u0005\u000b\u0000\u0000\u0bb2"+
		"\u0bb3\u0003\u02da\u016d\u0000\u0bb3\u0bb4\u0005\u0015\u0000\u0000\u0bb4"+
		"\u0bb5\u0005\u0019\u0000\u0000\u0bb5\u02d9\u0001\u0000\u0000\u0000\u0bb6"+
		"\u0bb8\u0003\u02c4\u0162\u0000\u0bb7\u0bb6\u0001\u0000\u0000\u0000\u0bb7"+
		"\u0bb8\u0001\u0000\u0000\u0000\u0bb8\u0bba\u0001\u0000\u0000\u0000\u0bb9"+
		"\u0bbb\u0003\u02c6\u0163\u0000\u0bba\u0bb9\u0001\u0000\u0000\u0000\u0bba"+
		"\u0bbb\u0001\u0000\u0000\u0000\u0bbb\u02db\u0001\u0000\u0000\u0000\u0bbc"+
		"\u0bc0\u0003\u02de\u016f\u0000\u0bbd\u0bc0\u0003\u02e0\u0170\u0000\u0bbe"+
		"\u0bc0\u0003\u02e2\u0171\u0000\u0bbf\u0bbc\u0001\u0000\u0000\u0000\u0bbf"+
		"\u0bbd\u0001\u0000\u0000\u0000\u0bbf\u0bbe\u0001\u0000\u0000\u0000\u0bc0"+
		"\u02dd\u0001\u0000\u0000\u0000\u0bc1\u0bc2\u0003\u02e6\u0173\u0000\u0bc2"+
		"\u0bc3\u0005\u0135\u0000\u0000\u0bc3\u0bc4\u0003\u02e8\u0174\u0000\u0bc4"+
		"\u02df\u0001\u0000\u0000\u0000\u0bc5\u0bc6\u0003\u02e8\u0174\u0000\u0bc6"+
		"\u0bc7\u0005\r\u0000\u0000\u0bc7\u0bc8\u0005\u000e\u0000\u0000\u0bc8\u0bc9"+
		"\u0003\u02e6\u0173\u0000\u0bc9\u02e1\u0001\u0000\u0000\u0000\u0bca\u0bcb"+
		"\u0003\u02e6\u0173\u0000\u0bcb\u0bcc\u0005\u0019\u0000\u0000\u0bcc\u0bcd"+
		"\u0003\u02e8\u0174\u0000\u0bcd\u02e3\u0001\u0000\u0000\u0000\u0bce\u0bd1"+
		"\u0003\u02e6\u0173\u0000\u0bcf\u0bd1\u0003\u02e8\u0174\u0000\u0bd0\u0bce"+
		"\u0001\u0000\u0000\u0000\u0bd0\u0bcf\u0001\u0000\u0000\u0000\u0bd1\u02e5"+
		"\u0001\u0000\u0000\u0000\u0bd2\u0bd3\u0005\f\u0000\u0000\u0bd3\u0bd4\u0003"+
		"\u02fa\u017d\u0000\u0bd4\u0bd5\u0005\u0016\u0000\u0000\u0bd5\u0bdc\u0001"+
		"\u0000\u0000\u0000\u0bd6\u0bd8\u0005\f\u0000\u0000\u0bd7\u0bd9\u0003\u02b8"+
		"\u015c\u0000\u0bd8\u0bd7\u0001\u0000\u0000\u0000\u0bd8\u0bd9\u0001\u0000"+
		"\u0000\u0000\u0bd9\u0bda\u0001\u0000\u0000\u0000\u0bda\u0bdc\u0005\u0016"+
		"\u0000\u0000\u0bdb\u0bd2\u0001\u0000\u0000\u0000\u0bdb\u0bd6\u0001\u0000"+
		"\u0000\u0000\u0bdc\u02e7\u0001\u0000\u0000\u0000\u0bdd\u0bde\u0005\f\u0000"+
		"\u0000\u0bde\u0bdf\u0003\u02fc\u017e\u0000\u0bdf\u0be0\u0005\u0016\u0000"+
		"\u0000\u0be0\u0be7\u0001\u0000\u0000\u0000\u0be1\u0be3\u0005\f\u0000\u0000"+
		"\u0be2\u0be4\u0003\u02b8\u015c\u0000\u0be3\u0be2\u0001\u0000\u0000\u0000"+
		"\u0be3\u0be4\u0001\u0000\u0000\u0000\u0be4\u0be5\u0001\u0000\u0000\u0000"+
		"\u0be5\u0be7\u0005\u0016\u0000\u0000\u0be6\u0bdd\u0001\u0000\u0000\u0000"+
		"\u0be6\u0be1\u0001\u0000\u0000\u0000\u0be7\u02e9\u0001\u0000\u0000\u0000"+
		"\u0be8\u0be9\u0007\u0012\u0000\u0000\u0be9\u02eb\u0001\u0000\u0000\u0000"+
		"\u0bea\u0beb\u0005C\u0000\u0000\u0beb\u0bec\u0003\u02ee\u0177\u0000\u0bec"+
		"\u02ed\u0001\u0000\u0000\u0000\u0bed\u0bf2\u0003\u02f0\u0178\u0000\u0bee"+
		"\u0bf2\u0003\u02f2\u0179\u0000\u0bef\u0bf2\u0003\u02f4\u017a\u0000\u0bf0"+
		"\u0bf2\u0003\u02dc\u016e\u0000\u0bf1\u0bed\u0001\u0000\u0000\u0000\u0bf1"+
		"\u0bee\u0001\u0000\u0000\u0000\u0bf1\u0bef\u0001\u0000\u0000\u0000\u0bf1"+
		"\u0bf0\u0001\u0000\u0000\u0000\u0bf2\u02ef\u0001\u0000\u0000\u0000\u0bf3"+
		"\u0bf4\u0005\f\u0000\u0000\u0bf4\u0bf5\u0003\u02fa\u017d\u0000\u0bf5\u0bf6"+
		"\u0003\u02f6\u017b\u0000\u0bf6\u0bf7\u0003\u02fc\u017e\u0000\u0bf7\u0bf8"+
		"\u0005\u0016\u0000\u0000\u0bf8\u02f1\u0001\u0000\u0000\u0000\u0bf9\u0bfa"+
		"\u0005\f\u0000\u0000\u0bfa\u0bfb\u0003\u02fc\u017e\u0000\u0bfb\u0bfc\u0005"+
		"\r\u0000\u0000\u0bfc\u0bfd\u0005\u000e\u0000\u0000\u0bfd\u0bfe\u0003\u02fa"+
		"\u017d\u0000\u0bfe\u0bff\u0005\u0016\u0000\u0000\u0bff\u02f3\u0001\u0000"+
		"\u0000\u0000\u0c00\u0c01\u0005\f\u0000\u0000\u0c01\u0c02\u0003\u02fa\u017d"+
		"\u0000\u0c02\u0c03\u0003\u02f8\u017c\u0000\u0c03\u0c04\u0003\u02fc\u017e"+
		"\u0000\u0c04\u0c05\u0005\u0016\u0000\u0000\u0c05\u02f5\u0001\u0000\u0000"+
		"\u0000\u0c06\u0c07\u0007\u0013\u0000\u0000\u0c07\u02f7\u0001\u0000\u0000"+
		"\u0000\u0c08\u0c09\u0007\u0014\u0000\u0000\u0c09\u02f9\u0001\u0000\u0000"+
		"\u0000\u0c0a\u0c0b\u0003|>\u0000\u0c0b\u02fb\u0001\u0000\u0000\u0000\u0c0c"+
		"\u0c0d\u0003|>\u0000\u0c0d\u02fd\u0001\u0000\u0000\u0000\u0c0e\u0c0f\u0005"+
		"\u0097\u0000\u0000\u0c0f\u0c16\u0003\u0084B\u0000\u0c10\u0c11\u0005\u0099"+
		"\u0000\u0000\u0c11\u0c16\u0003\u0114\u008a\u0000\u0c12\u0c13\u0003\u01f2"+
		"\u00f9\u0000\u0c13\u0c14\u0003\u0114\u008a\u0000\u0c14\u0c16\u0001\u0000"+
		"\u0000\u0000\u0c15\u0c0e\u0001\u0000\u0000\u0000\u0c15\u0c10\u0001\u0000"+
		"\u0000\u0000\u0c15\u0c12\u0001\u0000\u0000\u0000\u0c16\u02ff\u0001\u0000"+
		"\u0000\u0000\u0c17\u0c19\u0005\n\u0000\u0000\u0c18\u0c1a\u0003\u0302\u0181"+
		"\u0000\u0c19\u0c18\u0001\u0000\u0000\u0000\u0c19\u0c1a\u0001\u0000\u0000"+
		"\u0000\u0c1a\u0c1b\u0001\u0000\u0000\u0000\u0c1b\u0c1c\u0005\u0014\u0000"+
		"\u0000\u0c1c\u0301\u0001\u0000\u0000\u0000\u0c1d\u0c22\u0003\u0304\u0182"+
		"\u0000\u0c1e\u0c1f\u0005\u0005\u0000\u0000\u0c1f\u0c21\u0003\u0304\u0182"+
		"\u0000\u0c20\u0c1e\u0001\u0000\u0000\u0000\u0c21\u0c24\u0001\u0000\u0000"+
		"\u0000\u0c22\u0c20\u0001\u0000\u0000\u0000\u0c22\u0c23\u0001\u0000\u0000"+
		"\u0000\u0c23\u0303\u0001\u0000\u0000\u0000\u0c24\u0c22\u0001\u0000\u0000"+
		"\u0000\u0c25\u0c27\u0003\u0088D\u0000\u0c26\u0c28\u0003\u030c\u0186\u0000"+
		"\u0c27\u0c26\u0001\u0000\u0000\u0000\u0c27\u0c28\u0001\u0000\u0000\u0000"+
		"\u0c28\u0c29\u0001\u0000\u0000\u0000\u0c29\u0c2a\u0003\u0306\u0183\u0000"+
		"\u0c2a\u0305\u0001\u0000\u0000\u0000\u0c2b\u0c2c\u0003\u030a\u0185\u0000"+
		"\u0c2c\u0307\u0001\u0000\u0000\u0000\u0c2d\u0c2f\u0005.\u0000\u0000\u0c2e"+
		"\u0c2d\u0001\u0000\u0000\u0000\u0c2e\u0c2f\u0001\u0000\u0000\u0000\u0c2f"+
		"\u0c30\u0001\u0000\u0000\u0000\u0c30\u0c31\u0005\u00f0\u0000\u0000\u0c31"+
		"\u0c32\u0003\u035c\u01ae\u0000\u0c32\u0309\u0001\u0000\u0000\u0000\u0c33"+
		"\u0c34\u0006\u0185\uffff\uffff\u0000\u0c34\u0c70\u0003\u030e\u0187\u0000"+
		"\u0c35\u0c70\u0003\u0360\u01b0\u0000\u0c36\u0c37\u0003\u0358\u01ac\u0000"+
		"\u0c37\u0c38\u0005\r\u0000\u0000\u0c38\u0c39\u0003\u030a\u0185\u0000\u0c39"+
		"\u0c3e\u0005\t\u0000\u0000\u0c3a\u0c3b\u0005\u000b\u0000\u0000\u0c3b\u0c3c"+
		"\u0003\u0318\u018c\u0000\u0c3c\u0c3d\u0005\u0015\u0000\u0000\u0c3d\u0c3f"+
		"\u0001\u0000\u0000\u0000\u0c3e\u0c3a\u0001\u0000\u0000\u0000\u0c3e\u0c3f"+
		"\u0001\u0000\u0000\u0000\u0c3f\u0c41\u0001\u0000\u0000\u0000\u0c40\u0c42"+
		"\u0003\u0362\u01b1\u0000\u0c41\u0c40\u0001\u0000\u0000\u0000\u0c41\u0c42"+
		"\u0001\u0000\u0000\u0000\u0c42\u0c70\u0001\u0000\u0000\u0000\u0c43\u0c45"+
		"\u0005\"\u0000\u0000\u0c44\u0c43\u0001\u0000\u0000\u0000\u0c44\u0c45\u0001"+
		"\u0000\u0000\u0000\u0c45\u0c46\u0001\u0000\u0000\u0000\u0c46\u0c48\u0005"+
		"\u00d4\u0000\u0000\u0c47\u0c49\u0003\u0362\u01b1\u0000\u0c48\u0c47\u0001"+
		"\u0000\u0000\u0000\u0c48\u0c49\u0001\u0000\u0000\u0000\u0c49\u0c70\u0001"+
		"\u0000\u0000\u0000\u0c4a\u0c4c\u0005\u00d4\u0000\u0000\u0c4b\u0c4a\u0001"+
		"\u0000\u0000\u0000\u0c4b\u0c4c\u0001\u0000\u0000\u0000\u0c4c\u0c4d\u0001"+
		"\u0000\u0000\u0000\u0c4d\u0c4f\u0003\u035c\u01ae\u0000\u0c4e\u0c50\u0003"+
		"\u0362\u01b1\u0000\u0c4f\u0c4e\u0001\u0000\u0000\u0000\u0c4f\u0c50\u0001"+
		"\u0000\u0000\u0000\u0c50\u0c70\u0001\u0000\u0000\u0000\u0c51\u0c53\u0005"+
		"\"\u0000\u0000\u0c52\u0c54\u0005\u010f\u0000\u0000\u0c53\u0c52\u0001\u0000"+
		"\u0000\u0000\u0c53\u0c54\u0001\u0000\u0000\u0000\u0c54\u0c56\u0001\u0000"+
		"\u0000\u0000\u0c55\u0c57\u0003\u0362\u01b1\u0000\u0c56\u0c55\u0001\u0000"+
		"\u0000\u0000\u0c56\u0c57\u0001\u0000\u0000\u0000\u0c57\u0c70\u0001\u0000"+
		"\u0000\u0000\u0c58\u0c5a\u0005\"\u0000\u0000\u0c59\u0c58\u0001\u0000\u0000"+
		"\u0000\u0c59\u0c5a\u0001\u0000\u0000\u0000\u0c5a\u0c5b\u0001\u0000\u0000"+
		"\u0000\u0c5b\u0c5c\u0005\u00cf\u0000\u0000\u0c5c\u0c5e\u0005\u010f\u0000"+
		"\u0000\u0c5d\u0c5f\u0003\u0362\u01b1\u0000\u0c5e\u0c5d\u0001\u0000\u0000"+
		"\u0000\u0c5e\u0c5f\u0001\u0000\u0000\u0000\u0c5f\u0c70\u0001\u0000\u0000"+
		"\u0000\u0c60\u0c62\u0005\"\u0000\u0000\u0c61\u0c63\u0005\u010f\u0000\u0000"+
		"\u0c62\u0c61\u0001\u0000\u0000\u0000\u0c62\u0c63\u0001\u0000\u0000\u0000"+
		"\u0c63\u0c64\u0001\u0000\u0000\u0000\u0c64\u0c65\u0005\r\u0000\u0000\u0c65"+
		"\u0c6a\u0003\u030a\u0185\u0000\u0c66\u0c67\u0005\u001b\u0000\u0000\u0c67"+
		"\u0c69\u0003\u030a\u0185\u0000\u0c68\u0c66\u0001\u0000\u0000\u0000\u0c69"+
		"\u0c6c\u0001\u0000\u0000\u0000\u0c6a\u0c68\u0001\u0000\u0000\u0000\u0c6a"+
		"\u0c6b\u0001\u0000\u0000\u0000\u0c6b\u0c6d\u0001\u0000\u0000\u0000\u0c6c"+
		"\u0c6a\u0001\u0000\u0000\u0000\u0c6d\u0c6e\u0005\t\u0000\u0000\u0c6e\u0c70"+
		"\u0001\u0000\u0000\u0000\u0c6f\u0c33\u0001\u0000\u0000\u0000\u0c6f\u0c35"+
		"\u0001\u0000\u0000\u0000\u0c6f\u0c36\u0001\u0000\u0000\u0000\u0c6f\u0c44"+
		"\u0001\u0000\u0000\u0000\u0c6f\u0c4b\u0001\u0000\u0000\u0000\u0c6f\u0c51"+
		"\u0001\u0000\u0000\u0000\u0c6f\u0c59\u0001\u0000\u0000\u0000\u0c6f\u0c60"+
		"\u0001\u0000\u0000\u0000\u0c70\u0c85\u0001\u0000\u0000\u0000\u0c71\u0c72"+
		"\n\u0007\u0000\u0000\u0c72\u0c77\u0003\u0358\u01ac\u0000\u0c73\u0c74\u0005"+
		"\u000b\u0000\u0000\u0c74\u0c75\u0003\u0318\u018c\u0000\u0c75\u0c76\u0005"+
		"\u0015\u0000\u0000\u0c76\u0c78\u0001\u0000\u0000\u0000\u0c77\u0c73\u0001"+
		"\u0000\u0000\u0000\u0c77\u0c78\u0001\u0000\u0000\u0000\u0c78\u0c7a\u0001"+
		"\u0000\u0000\u0000\u0c79\u0c7b\u0003\u0362\u01b1\u0000\u0c7a\u0c79\u0001"+
		"\u0000\u0000\u0000\u0c7a\u0c7b\u0001\u0000\u0000\u0000\u0c7b\u0c84\u0001"+
		"\u0000\u0000\u0000\u0c7c\u0c7f\n\u0001\u0000\u0000\u0c7d\u0c7e\u0005\u001b"+
		"\u0000\u0000\u0c7e\u0c80\u0003\u030a\u0185\u0000\u0c7f\u0c7d\u0001\u0000"+
		"\u0000\u0000\u0c80\u0c81\u0001\u0000\u0000\u0000\u0c81\u0c7f\u0001\u0000"+
		"\u0000\u0000\u0c81\u0c82\u0001\u0000\u0000\u0000\u0c82\u0c84\u0001\u0000"+
		"\u0000\u0000\u0c83\u0c71\u0001\u0000\u0000\u0000\u0c83\u0c7c\u0001\u0000"+
		"\u0000\u0000\u0c84\u0c87\u0001\u0000\u0000\u0000\u0c85\u0c83\u0001\u0000"+
		"\u0000\u0000\u0c85\u0c86\u0001\u0000\u0000\u0000\u0c86\u030b\u0001\u0000"+
		"\u0000\u0000\u0c87\u0c85\u0001\u0000\u0000\u0000\u0c88\u0c89\u0007\u0015"+
		"\u0000\u0000\u0c89\u030d\u0001\u0000\u0000\u0000\u0c8a\u0c91\u0003\u0310"+
		"\u0188\u0000\u0c8b\u0c91\u0003\u0312\u0189\u0000\u0c8c\u0c91\u0003\u0314"+
		"\u018a\u0000\u0c8d\u0c91\u0003\u031c\u018e\u0000\u0c8e\u0c91\u0003\u0330"+
		"\u0198\u0000\u0c8f\u0c91\u0003\u0342\u01a1\u0000\u0c90\u0c8a\u0001\u0000"+
		"\u0000\u0000\u0c90\u0c8b\u0001\u0000\u0000\u0000\u0c90\u0c8c\u0001\u0000"+
		"\u0000\u0000\u0c90\u0c8d\u0001\u0000\u0000\u0000\u0c90\u0c8e\u0001\u0000"+
		"\u0000\u0000\u0c90\u0c8f\u0001\u0000\u0000\u0000\u0c91\u030f\u0001\u0000"+
		"\u0000\u0000\u0c92\u0c94\u0007\u0016\u0000\u0000\u0c93\u0c95\u0003\u0362"+
		"\u01b1\u0000\u0c94\u0c93\u0001\u0000\u0000\u0000\u0c94\u0c95\u0001\u0000"+
		"\u0000\u0000\u0c95\u0311\u0001\u0000\u0000\u0000\u0c96\u0c9b\u0007\u0017"+
		"\u0000\u0000\u0c97\u0c98\u0005\f\u0000\u0000\u0c98\u0c99\u0003\u0318\u018c"+
		"\u0000\u0c99\u0c9a\u0005\u0016\u0000\u0000\u0c9a\u0c9c\u0001\u0000\u0000"+
		"\u0000\u0c9b\u0c97\u0001\u0000\u0000\u0000\u0c9b\u0c9c\u0001\u0000\u0000"+
		"\u0000\u0c9c\u0c9e\u0001\u0000\u0000\u0000\u0c9d\u0c9f\u0003\u0362\u01b1"+
		"\u0000\u0c9e\u0c9d\u0001\u0000\u0000\u0000\u0c9e\u0c9f\u0001\u0000\u0000"+
		"\u0000\u0c9f\u0313\u0001\u0000\u0000\u0000\u0ca0\u0caa\u00056\u0000\u0000"+
		"\u0ca1\u0ca5\u0005\f\u0000\u0000\u0ca2\u0ca3\u0003\u0316\u018b\u0000\u0ca3"+
		"\u0ca4\u0005\u0005\u0000\u0000\u0ca4\u0ca6\u0001\u0000\u0000\u0000\u0ca5"+
		"\u0ca2\u0001\u0000\u0000\u0000\u0ca5\u0ca6\u0001\u0000\u0000\u0000\u0ca6"+
		"\u0ca7\u0001\u0000\u0000\u0000\u0ca7\u0ca8\u0003\u0318\u018c\u0000\u0ca8"+
		"\u0ca9\u0005\u0016\u0000\u0000\u0ca9\u0cab\u0001\u0000\u0000\u0000\u0caa"+
		"\u0ca1\u0001\u0000\u0000\u0000\u0caa\u0cab\u0001\u0000\u0000\u0000\u0cab"+
		"\u0cad\u0001\u0000\u0000\u0000\u0cac\u0cae\u0003\u0362\u01b1\u0000\u0cad"+
		"\u0cac\u0001\u0000\u0000\u0000\u0cad\u0cae\u0001\u0000\u0000\u0000\u0cae"+
		"\u0cc4\u0001\u0000\u0000\u0000\u0caf\u0cb4\u0005-\u0000\u0000\u0cb0\u0cb1"+
		"\u0005\f\u0000\u0000\u0cb1\u0cb2\u0003\u031a\u018d\u0000\u0cb2\u0cb3\u0005"+
		"\u0016\u0000\u0000\u0cb3\u0cb5\u0001\u0000\u0000\u0000\u0cb4\u0cb0\u0001"+
		"\u0000\u0000\u0000\u0cb4\u0cb5\u0001\u0000\u0000\u0000\u0cb5\u0cb7\u0001"+
		"\u0000\u0000\u0000\u0cb6\u0cb8\u0003\u0362\u01b1\u0000\u0cb7\u0cb6\u0001"+
		"\u0000\u0000\u0000\u0cb7\u0cb8\u0001\u0000\u0000\u0000\u0cb8\u0cc4\u0001"+
		"\u0000\u0000\u0000\u0cb9\u0cbe\u0005\u0110\u0000\u0000\u0cba\u0cbb\u0005"+
		"\f\u0000\u0000\u0cbb\u0cbc\u0003\u0318\u018c\u0000\u0cbc\u0cbd\u0005\u0016"+
		"\u0000\u0000\u0cbd\u0cbf\u0001\u0000\u0000\u0000\u0cbe\u0cba\u0001\u0000"+
		"\u0000\u0000\u0cbe\u0cbf\u0001\u0000\u0000\u0000\u0cbf\u0cc1\u0001\u0000"+
		"\u0000\u0000\u0cc0\u0cc2\u0003\u0362\u01b1\u0000\u0cc1\u0cc0\u0001\u0000"+
		"\u0000\u0000\u0cc1\u0cc2\u0001\u0000\u0000\u0000\u0cc2\u0cc4\u0001\u0000"+
		"\u0000\u0000\u0cc3\u0ca0\u0001\u0000\u0000\u0000\u0cc3\u0caf\u0001\u0000"+
		"\u0000\u0000\u0cc3\u0cb9\u0001\u0000\u0000\u0000\u0cc4\u0315\u0001\u0000"+
		"\u0000\u0000\u0cc5\u0cc6\u0005\u0148\u0000\u0000\u0cc6\u0317\u0001\u0000"+
		"\u0000\u0000\u0cc7\u0cc8\u0005\u0148\u0000\u0000\u0cc8\u0319\u0001\u0000"+
		"\u0000\u0000\u0cc9\u0cca\u0005\u0148\u0000\u0000\u0cca\u031b\u0001\u0000"+
		"\u0000\u0000\u0ccb\u0cce\u0003\u031e\u018f\u0000\u0ccc\u0cce\u0003\u032e"+
		"\u0197\u0000\u0ccd\u0ccb\u0001\u0000\u0000\u0000\u0ccd\u0ccc\u0001\u0000"+
		"\u0000\u0000\u0cce\u031d\u0001\u0000\u0000\u0000\u0ccf\u0cd2\u0003\u0320"+
		"\u0190\u0000\u0cd0\u0cd2\u0003\u0328\u0194\u0000\u0cd1\u0ccf\u0001\u0000"+
		"\u0000\u0000\u0cd1\u0cd0\u0001\u0000\u0000\u0000\u0cd2\u031f\u0001\u0000"+
		"\u0000\u0000\u0cd3\u0cd6\u0003\u0322\u0191\u0000\u0cd4\u0cd6\u0003\u0324"+
		"\u0192\u0000\u0cd5\u0cd3\u0001\u0000\u0000\u0000\u0cd5\u0cd4\u0001\u0000"+
		"\u0000\u0000\u0cd6\u0321\u0001\u0000\u0000\u0000\u0cd7\u0cd9\u0005\u0087"+
		"\u0000\u0000\u0cd8\u0cda\u0003\u0362\u01b1\u0000\u0cd9\u0cd8\u0001\u0000"+
		"\u0000\u0000\u0cd9\u0cda\u0001\u0000\u0000\u0000\u0cda\u0d06\u0001\u0000"+
		"\u0000\u0000\u0cdb\u0cdd\u0005\u0088\u0000\u0000\u0cdc\u0cde\u0003\u0362"+
		"\u01b1\u0000\u0cdd\u0cdc\u0001\u0000\u0000\u0000\u0cdd\u0cde\u0001\u0000"+
		"\u0000\u0000\u0cde\u0d06\u0001\u0000\u0000\u0000\u0cdf\u0ce1\u0005\u0089"+
		"\u0000\u0000\u0ce0\u0ce2\u0003\u0362\u01b1\u0000\u0ce1\u0ce0\u0001\u0000"+
		"\u0000\u0000\u0ce1\u0ce2\u0001\u0000\u0000\u0000\u0ce2\u0d06\u0001\u0000"+
		"\u0000\u0000\u0ce3\u0ce5\u0005\u008a\u0000\u0000\u0ce4\u0ce6\u0003\u0362"+
		"\u01b1\u0000\u0ce5\u0ce4\u0001\u0000\u0000\u0000\u0ce5\u0ce6\u0001\u0000"+
		"\u0000\u0000\u0ce6\u0d06\u0001\u0000\u0000\u0000\u0ce7\u0ce9\u0005\u008b"+
		"\u0000\u0000\u0ce8\u0cea\u0003\u0362\u01b1\u0000\u0ce9\u0ce8\u0001\u0000"+
		"\u0000\u0000\u0ce9\u0cea\u0001\u0000\u0000\u0000\u0cea\u0d06\u0001\u0000"+
		"\u0000\u0000\u0ceb\u0ced\u0005\u008c\u0000\u0000\u0cec\u0cee\u0003\u0362"+
		"\u01b1\u0000\u0ced\u0cec\u0001\u0000\u0000\u0000\u0ced\u0cee\u0001\u0000"+
		"\u0000\u0000\u0cee\u0d06\u0001\u0000\u0000\u0000\u0cef\u0cf1\u0005\u00e8"+
		"\u0000\u0000\u0cf0\u0cf2\u0003\u0362\u01b1\u0000\u0cf1\u0cf0\u0001\u0000"+
		"\u0000\u0000\u0cf1\u0cf2\u0001\u0000\u0000\u0000\u0cf2\u0d06\u0001\u0000"+
		"\u0000\u0000\u0cf3\u0cf8\u0005\u0086\u0000\u0000\u0cf4\u0cf5\u0005\f\u0000"+
		"\u0000\u0cf5\u0cf6\u0003\u032a\u0195\u0000\u0cf6\u0cf7\u0005\u0016\u0000"+
		"\u0000\u0cf7\u0cf9\u0001\u0000\u0000\u0000\u0cf8\u0cf4\u0001\u0000\u0000"+
		"\u0000\u0cf8\u0cf9\u0001\u0000\u0000\u0000\u0cf9\u0cfb\u0001\u0000\u0000"+
		"\u0000\u0cfa\u0cfc\u0003\u0362\u01b1\u0000\u0cfb\u0cfa\u0001\u0000\u0000"+
		"\u0000\u0cfb\u0cfc\u0001\u0000\u0000\u0000\u0cfc\u0d06\u0001\u0000\u0000"+
		"\u0000\u0cfd\u0d06\u0005,\u0000\u0000\u0cfe\u0d00\u0005\u00e3\u0000\u0000"+
		"\u0cff\u0cfe\u0001\u0000\u0000\u0000\u0cff\u0d00\u0001\u0000\u0000\u0000"+
		"\u0d00\u0d01\u0001\u0000\u0000\u0000\u0d01\u0d03\u0003\u0326\u0193\u0000"+
		"\u0d02\u0d04\u0003\u0362\u01b1\u0000\u0d03\u0d02\u0001\u0000\u0000\u0000"+
		"\u0d03\u0d04\u0001\u0000\u0000\u0000\u0d04\u0d06\u0001\u0000\u0000\u0000"+
		"\u0d05\u0cd7\u0001\u0000\u0000\u0000\u0d05\u0cdb\u0001\u0000\u0000\u0000"+
		"\u0d05\u0cdf\u0001\u0000\u0000\u0000\u0d05\u0ce3\u0001\u0000\u0000\u0000"+
		"\u0d05\u0ce7\u0001\u0000\u0000\u0000\u0d05\u0ceb\u0001\u0000\u0000\u0000"+
		"\u0d05\u0cef\u0001\u0000\u0000\u0000\u0d05\u0cf3\u0001\u0000\u0000\u0000"+
		"\u0d05\u0cfd\u0001\u0000\u0000\u0000\u0d05\u0cff\u0001\u0000\u0000\u0000"+
		"\u0d06\u0323\u0001\u0000\u0000\u0000\u0d07\u0d09\u0005\u0107\u0000\u0000"+
		"\u0d08\u0d0a\u0003\u0362\u01b1\u0000\u0d09\u0d08\u0001\u0000\u0000\u0000"+
		"\u0d09\u0d0a\u0001\u0000\u0000\u0000\u0d0a\u0d37\u0001\u0000\u0000\u0000"+
		"\u0d0b\u0d0d\u0005\u0103\u0000\u0000\u0d0c\u0d0e\u0003\u0362\u01b1\u0000"+
		"\u0d0d\u0d0c\u0001\u0000\u0000\u0000\u0d0d\u0d0e\u0001\u0000\u0000\u0000"+
		"\u0d0e\u0d37\u0001\u0000\u0000\u0000\u0d0f\u0d11\u0005\u0105\u0000\u0000"+
		"\u0d10\u0d12\u0003\u0362\u01b1\u0000\u0d11\u0d10\u0001\u0000\u0000\u0000"+
		"\u0d11\u0d12\u0001\u0000\u0000\u0000\u0d12\u0d37\u0001\u0000\u0000\u0000"+
		"\u0d13\u0d15\u0005\u0106\u0000\u0000\u0d14\u0d16\u0003\u0362\u01b1\u0000"+
		"\u0d15\u0d14\u0001\u0000\u0000\u0000\u0d15\u0d16\u0001\u0000\u0000\u0000"+
		"\u0d16\u0d37\u0001\u0000\u0000\u0000\u0d17\u0d19\u0005\u0102\u0000\u0000"+
		"\u0d18\u0d1a\u0003\u0362\u01b1\u0000\u0d19\u0d18\u0001\u0000\u0000\u0000"+
		"\u0d19\u0d1a\u0001\u0000\u0000\u0000\u0d1a\u0d37\u0001\u0000\u0000\u0000"+
		"\u0d1b\u0d1d\u0005\u0104\u0000\u0000\u0d1c\u0d1e\u0003\u0362\u01b1\u0000"+
		"\u0d1d\u0d1c\u0001\u0000\u0000\u0000\u0d1d\u0d1e\u0001\u0000\u0000\u0000"+
		"\u0d1e\u0d37\u0001\u0000\u0000\u0000\u0d1f\u0d21\u0005\u010e\u0000\u0000"+
		"\u0d20\u0d22\u0003\u0362\u01b1\u0000\u0d21\u0d20\u0001\u0000\u0000\u0000"+
		"\u0d21\u0d22\u0001\u0000\u0000\u0000\u0d22\u0d37\u0001\u0000\u0000\u0000"+
		"\u0d23\u0d28\u0005\u0101\u0000\u0000\u0d24\u0d25\u0005\f\u0000\u0000\u0d25"+
		"\u0d26\u0003\u032a\u0195\u0000\u0d26\u0d27\u0005\u0016\u0000\u0000\u0d27"+
		"\u0d29\u0001\u0000\u0000\u0000\u0d28\u0d24\u0001\u0000\u0000\u0000\u0d28"+
		"\u0d29\u0001\u0000\u0000\u0000\u0d29\u0d2b\u0001\u0000\u0000\u0000\u0d2a"+
		"\u0d2c\u0003\u0362\u01b1\u0000\u0d2b\u0d2a\u0001\u0000\u0000\u0000\u0d2b"+
		"\u0d2c\u0001\u0000\u0000\u0000\u0d2c\u0d37\u0001\u0000\u0000\u0000\u0d2d"+
		"\u0d2f\u0005\u0100\u0000\u0000\u0d2e\u0d30\u0003\u0362\u01b1\u0000\u0d2f"+
		"\u0d2e\u0001\u0000\u0000\u0000\u0d2f\u0d30\u0001\u0000\u0000\u0000\u0d30"+
		"\u0d37\u0001\u0000\u0000\u0000\u0d31\u0d32\u0005\u010b\u0000\u0000\u0d32"+
		"\u0d34\u0003\u0326\u0193\u0000\u0d33\u0d35\u0003\u0362\u01b1\u0000\u0d34"+
		"\u0d33\u0001\u0000\u0000\u0000\u0d34\u0d35\u0001\u0000\u0000\u0000\u0d35"+
		"\u0d37\u0001\u0000\u0000\u0000\u0d36\u0d07\u0001\u0000\u0000\u0000\u0d36"+
		"\u0d0b\u0001\u0000\u0000\u0000\u0d36\u0d0f\u0001\u0000\u0000\u0000\u0d36"+
		"\u0d13\u0001\u0000\u0000\u0000\u0d36\u0d17\u0001\u0000\u0000\u0000\u0d36"+
		"\u0d1b\u0001\u0000\u0000\u0000\u0d36\u0d1f\u0001\u0000\u0000\u0000\u0d36"+
		"\u0d23\u0001\u0000\u0000\u0000\u0d36\u0d2d\u0001\u0000\u0000\u0000\u0d36"+
		"\u0d31\u0001\u0000\u0000\u0000\u0d37\u0325\u0001\u0000\u0000\u0000\u0d38"+
		"\u0d3a\u0005\u008e\u0000\u0000\u0d39\u0d3b\u0003\u0362\u01b1\u0000\u0d3a"+
		"\u0d39\u0001\u0000\u0000\u0000\u0d3a\u0d3b\u0001\u0000\u0000\u0000\u0d3b"+
		"\u0d65\u0001\u0000\u0000\u0000\u0d3c\u0d3e\u0005\u008f\u0000\u0000\u0d3d"+
		"\u0d3f\u0003\u0362\u01b1\u0000\u0d3e\u0d3d\u0001\u0000\u0000\u0000\u0d3e"+
		"\u0d3f\u0001\u0000\u0000\u0000\u0d3f\u0d65\u0001\u0000\u0000\u0000\u0d40"+
		"\u0d42\u0005\u0090\u0000\u0000\u0d41\u0d43\u0003\u0362\u01b1\u0000\u0d42"+
		"\u0d41\u0001\u0000\u0000\u0000\u0d42\u0d43\u0001\u0000\u0000\u0000\u0d43"+
		"\u0d65\u0001\u0000\u0000\u0000\u0d44\u0d46\u0005\u0091\u0000\u0000\u0d45"+
		"\u0d47\u0003\u0362\u01b1\u0000\u0d46\u0d45\u0001\u0000\u0000\u0000\u0d46"+
		"\u0d47\u0001\u0000\u0000\u0000\u0d47\u0d65\u0001\u0000\u0000\u0000\u0d48"+
		"\u0d4a\u0005\u0092\u0000\u0000\u0d49\u0d4b\u0003\u0362\u01b1\u0000\u0d4a"+
		"\u0d49\u0001\u0000\u0000\u0000\u0d4a\u0d4b\u0001\u0000\u0000\u0000\u0d4b"+
		"\u0d65\u0001\u0000\u0000\u0000\u0d4c\u0d4e\u0005\u0093\u0000\u0000\u0d4d"+
		"\u0d4f\u0003\u0362\u01b1\u0000\u0d4e\u0d4d\u0001\u0000\u0000\u0000\u0d4e"+
		"\u0d4f\u0001\u0000\u0000\u0000\u0d4f\u0d65\u0001\u0000\u0000\u0000\u0d50"+
		"\u0d51\u0005\u00e7\u0000\u0000\u0d51\u0d53\u0005\u008d\u0000\u0000\u0d52"+
		"\u0d54\u0003\u0362\u01b1\u0000\u0d53\u0d52\u0001\u0000\u0000\u0000\u0d53"+
		"\u0d54\u0001\u0000\u0000\u0000\u0d54\u0d65\u0001\u0000\u0000\u0000\u0d55"+
		"\u0d5a\u0005\u008d\u0000\u0000\u0d56\u0d57\u0005\f\u0000\u0000\u0d57\u0d58"+
		"\u0003\u032a\u0195\u0000\u0d58\u0d59\u0005\u0016\u0000\u0000\u0d59\u0d5b"+
		"\u0001\u0000\u0000\u0000\u0d5a\u0d56\u0001\u0000\u0000\u0000\u0d5a\u0d5b"+
		"\u0001\u0000\u0000\u0000\u0d5b\u0d5d\u0001\u0000\u0000\u0000\u0d5c\u0d5e"+
		"\u0003\u0362\u01b1\u0000\u0d5d\u0d5c\u0001\u0000\u0000\u0000\u0d5d\u0d5e"+
		"\u0001\u0000\u0000\u0000\u0d5e\u0d65\u0001\u0000\u0000\u0000\u0d5f\u0d60"+
		"\u0005+\u0000\u0000\u0d60\u0d62\u0005\u008d\u0000\u0000\u0d61\u0d63\u0003"+
		"\u0362\u01b1\u0000\u0d62\u0d61\u0001\u0000\u0000\u0000\u0d62\u0d63\u0001"+
		"\u0000\u0000\u0000\u0d63\u0d65\u0001\u0000\u0000\u0000\u0d64\u0d38\u0001"+
		"\u0000\u0000\u0000\u0d64\u0d3c\u0001\u0000\u0000\u0000\u0d64\u0d40\u0001"+
		"\u0000\u0000\u0000\u0d64\u0d44\u0001\u0000\u0000\u0000\u0d64\u0d48\u0001"+
		"\u0000\u0000\u0000\u0d64\u0d4c\u0001\u0000\u0000\u0000\u0d64\u0d50\u0001"+
		"\u0000\u0000\u0000\u0d64\u0d55\u0001\u0000\u0000\u0000\u0d64\u0d5f\u0001"+
		"\u0000\u0000\u0000\u0d65\u0327\u0001\u0000\u0000\u0000\u0d66\u0d71\u0007"+
		"\u0018\u0000\u0000\u0d67\u0d68\u0005\f\u0000\u0000\u0d68\u0d6b\u0003\u032a"+
		"\u0195\u0000\u0d69\u0d6a\u0005\u0005\u0000\u0000\u0d6a\u0d6c\u0003\u032c"+
		"\u0196\u0000\u0d6b\u0d69\u0001\u0000\u0000\u0000\u0d6b\u0d6c\u0001\u0000"+
		"\u0000\u0000\u0d6c\u0d6d\u0001\u0000\u0000\u0000\u0d6d\u0d6f\u0005\u0016"+
		"\u0000\u0000\u0d6e\u0d70\u0003\u0362\u01b1\u0000\u0d6f\u0d6e\u0001\u0000"+
		"\u0000\u0000\u0d6f\u0d70\u0001\u0000\u0000\u0000\u0d70\u0d72\u0001\u0000"+
		"\u0000\u0000\u0d71\u0d67\u0001\u0000\u0000\u0000\u0d71\u0d72\u0001\u0000"+
		"\u0000\u0000\u0d72\u0329\u0001\u0000\u0000\u0000\u0d73\u0d74\u0005\u0148"+
		"\u0000\u0000\u0d74\u032b\u0001\u0000\u0000\u0000\u0d75\u0d76\u0005\u0148"+
		"\u0000\u0000\u0d76\u032d\u0001\u0000\u0000\u0000\u0d77\u0d79\u0005p\u0000"+
		"\u0000\u0d78\u0d7a\u0003\u0362\u01b1\u0000\u0d79\u0d78\u0001\u0000\u0000"+
		"\u0000\u0d79\u0d7a\u0001\u0000\u0000\u0000\u0d7a\u0da5\u0001\u0000\u0000"+
		"\u0000\u0d7b\u0d7d\u0005r\u0000\u0000\u0d7c\u0d7e\u0003\u0362\u01b1\u0000"+
		"\u0d7d\u0d7c\u0001\u0000\u0000\u0000\u0d7d\u0d7e\u0001\u0000\u0000\u0000"+
		"\u0d7e\u0da5\u0001\u0000\u0000\u0000\u0d7f\u0d81\u0005s\u0000\u0000\u0d80"+
		"\u0d82\u0003\u0362\u01b1\u0000\u0d81\u0d80\u0001\u0000\u0000\u0000\u0d81"+
		"\u0d82\u0001\u0000\u0000\u0000\u0d82\u0da5\u0001\u0000\u0000\u0000\u0d83"+
		"\u0d85\u0005o\u0000\u0000\u0d84\u0d86\u0003\u0362\u01b1\u0000\u0d85\u0d84"+
		"\u0001\u0000\u0000\u0000\u0d85\u0d86\u0001\u0000\u0000\u0000\u0d86\u0da5"+
		"\u0001\u0000\u0000\u0000\u0d87\u0d89\u0005q\u0000\u0000\u0d88\u0d8a\u0003"+
		"\u0362\u01b1\u0000\u0d89\u0d88\u0001\u0000\u0000\u0000\u0d89\u0d8a\u0001"+
		"\u0000\u0000\u0000\u0d8a\u0da5\u0001\u0000\u0000\u0000\u0d8b\u0d94\u0005"+
		"n\u0000\u0000\u0d8c\u0d8d\u0005\f\u0000\u0000\u0d8d\u0d90\u0003\u032a"+
		"\u0195\u0000\u0d8e\u0d8f\u0005\u0005\u0000\u0000\u0d8f\u0d91\u0003\u032c"+
		"\u0196\u0000\u0d90\u0d8e\u0001\u0000\u0000\u0000\u0d90\u0d91\u0001\u0000"+
		"\u0000\u0000\u0d91\u0d92\u0001\u0000\u0000\u0000\u0d92\u0d93\u0005\u0016"+
		"\u0000\u0000\u0d93\u0d95\u0001\u0000\u0000\u0000\u0d94\u0d8c\u0001\u0000"+
		"\u0000\u0000\u0d94\u0d95\u0001\u0000\u0000\u0000\u0d95\u0d97\u0001\u0000"+
		"\u0000\u0000\u0d96\u0d98\u0003\u0362\u01b1\u0000\u0d97\u0d96\u0001\u0000"+
		"\u0000\u0000\u0d97\u0d98\u0001\u0000\u0000\u0000\u0d98\u0da5\u0001\u0000"+
		"\u0000\u0000\u0d99\u0d9b\u0005\u00d3\u0000\u0000\u0d9a\u0d9c\u0003\u0362"+
		"\u01b1\u0000\u0d9b\u0d9a\u0001\u0000\u0000\u0000\u0d9b\u0d9c\u0001\u0000"+
		"\u0000\u0000\u0d9c\u0da5\u0001\u0000\u0000\u0000\u0d9d\u0d9f\u0005^\u0000"+
		"\u0000\u0d9e\u0da0\u0005\u00ce\u0000\u0000\u0d9f\u0d9e\u0001\u0000\u0000"+
		"\u0000\u0d9f\u0da0\u0001\u0000\u0000\u0000\u0da0\u0da2\u0001\u0000\u0000"+
		"\u0000\u0da1\u0da3\u0003\u0362\u01b1\u0000\u0da2\u0da1\u0001\u0000\u0000"+
		"\u0000\u0da2\u0da3\u0001\u0000\u0000\u0000\u0da3\u0da5\u0001\u0000\u0000"+
		"\u0000\u0da4\u0d77\u0001\u0000\u0000\u0000\u0da4\u0d7b\u0001\u0000\u0000"+
		"\u0000\u0da4\u0d7f\u0001\u0000\u0000\u0000\u0da4\u0d83\u0001\u0000\u0000"+
		"\u0000\u0da4\u0d87\u0001\u0000\u0000\u0000\u0da4\u0d8b\u0001\u0000\u0000"+
		"\u0000\u0da4\u0d99\u0001\u0000\u0000\u0000\u0da4\u0d9d\u0001\u0000\u0000"+
		"\u0000\u0da5\u032f\u0001\u0000\u0000\u0000\u0da6\u0da9\u0003\u0332\u0199"+
		"\u0000\u0da7\u0da9\u0003\u0334\u019a\u0000\u0da8\u0da6\u0001\u0000\u0000"+
		"\u0000\u0da8\u0da7\u0001\u0000\u0000\u0000\u0da9\u0331\u0001\u0000\u0000"+
		"\u0000\u0daa\u0db0\u0003\u0336\u019b\u0000\u0dab\u0db0\u0003\u0338\u019c"+
		"\u0000\u0dac\u0db0\u0003\u033a\u019d\u0000\u0dad\u0db0\u0003\u033c\u019e"+
		"\u0000\u0dae\u0db0\u0003\u033e\u019f\u0000\u0daf\u0daa\u0001\u0000\u0000"+
		"\u0000\u0daf\u0dab\u0001\u0000\u0000\u0000\u0daf\u0dac\u0001\u0000\u0000"+
		"\u0000\u0daf\u0dad\u0001\u0000\u0000\u0000\u0daf\u0dae\u0001\u0000\u0000"+
		"\u0000\u0db0\u0333\u0001\u0000\u0000\u0000\u0db1\u0db2\u0003\u0340\u01a0"+
		"\u0000\u0db2\u0335\u0001\u0000\u0000\u0000\u0db3\u0db4\u0005\u011c\u0000"+
		"\u0000\u0db4\u0db6\u0005R\u0000\u0000\u0db5\u0db7\u0003\u0362\u01b1\u0000"+
		"\u0db6\u0db5\u0001\u0000\u0000\u0000\u0db6\u0db7\u0001\u0000\u0000\u0000"+
		"\u0db7\u0dbf\u0001\u0000\u0000\u0000\u0db8\u0db9\u0005\u00f6\u0000\u0000"+
		"\u0db9\u0dba\u0005\u0116\u0000\u0000\u0dba\u0dbc\u0005\u00f7\u0000\u0000"+
		"\u0dbb\u0dbd\u0003\u0362\u01b1\u0000\u0dbc\u0dbb\u0001\u0000\u0000\u0000"+
		"\u0dbc\u0dbd\u0001\u0000\u0000\u0000\u0dbd\u0dbf\u0001\u0000\u0000\u0000"+
		"\u0dbe\u0db3\u0001\u0000\u0000\u0000\u0dbe\u0db8\u0001\u0000\u0000\u0000"+
		"\u0dbf\u0337\u0001\u0000\u0000\u0000\u0dc0\u0dc1\u0005\u00a2\u0000\u0000"+
		"\u0dc1\u0dc3\u0005R\u0000\u0000\u0dc2\u0dc4\u0003\u0362\u01b1\u0000\u0dc3"+
		"\u0dc2\u0001\u0000\u0000\u0000\u0dc3\u0dc4\u0001\u0000\u0000\u0000\u0dc4"+
		"\u0dce\u0001\u0000\u0000\u0000\u0dc5\u0dc8\u0005\u00f6\u0000\u0000\u0dc6"+
		"\u0dc7\u0005\u0117\u0000\u0000\u0dc7\u0dc9\u0005\u00f7\u0000\u0000\u0dc8"+
		"\u0dc6\u0001\u0000\u0000\u0000\u0dc8\u0dc9\u0001\u0000\u0000\u0000\u0dc9"+
		"\u0dcb\u0001\u0000\u0000\u0000\u0dca\u0dcc\u0003\u0362\u01b1\u0000\u0dcb"+
		"\u0dca\u0001\u0000\u0000\u0000\u0dcb\u0dcc\u0001\u0000\u0000\u0000\u0dcc"+
		"\u0dce\u0001\u0000\u0000\u0000\u0dcd\u0dc0\u0001\u0000\u0000\u0000\u0dcd"+
		"\u0dc5\u0001\u0000\u0000\u0000\u0dce\u0339\u0001\u0000\u0000\u0000\u0dcf"+
		"\u0dd1\u0005Q\u0000\u0000\u0dd0\u0dd2\u0003\u0362\u01b1\u0000\u0dd1\u0dd0"+
		"\u0001\u0000\u0000\u0000\u0dd1\u0dd2\u0001\u0000\u0000\u0000\u0dd2\u033b"+
		"\u0001\u0000\u0000\u0000\u0dd3\u0dd4\u0005\u011c\u0000\u0000\u0dd4\u0dd6"+
		"\u0005\u00f5\u0000\u0000\u0dd5\u0dd7\u0003\u0362\u01b1\u0000\u0dd6\u0dd5"+
		"\u0001\u0000\u0000\u0000\u0dd6\u0dd7\u0001\u0000\u0000\u0000\u0dd7\u0ddf"+
		"\u0001\u0000\u0000\u0000\u0dd8\u0dd9\u0005\u00f5\u0000\u0000\u0dd9\u0dda"+
		"\u0005\u0116\u0000\u0000\u0dda\u0ddc\u0005\u00f7\u0000\u0000\u0ddb\u0ddd"+
		"\u0003\u0362\u01b1\u0000\u0ddc\u0ddb\u0001\u0000\u0000\u0000\u0ddc\u0ddd"+
		"\u0001\u0000\u0000\u0000\u0ddd\u0ddf\u0001\u0000\u0000\u0000\u0dde\u0dd3"+
		"\u0001\u0000\u0000\u0000\u0dde\u0dd8\u0001\u0000\u0000\u0000\u0ddf\u033d"+
		"\u0001\u0000\u0000\u0000\u0de0\u0de1\u0005\u00a2\u0000\u0000\u0de1\u0de3"+
		"\u0005\u00f5\u0000\u0000\u0de2\u0de4\u0003\u0362\u01b1\u0000\u0de3\u0de2"+
		"\u0001\u0000\u0000\u0000\u0de3\u0de4\u0001\u0000\u0000\u0000\u0de4\u0dec"+
		"\u0001\u0000\u0000\u0000\u0de5\u0de6\u0005\u00f5\u0000\u0000\u0de6\u0de7"+
		"\u0005\u0117\u0000\u0000\u0de7\u0de9\u0005\u00f7\u0000\u0000\u0de8\u0dea"+
		"\u0003\u0362\u01b1\u0000\u0de9\u0de8\u0001\u0000\u0000\u0000\u0de9\u0dea"+
		"\u0001\u0000\u0000\u0000\u0dea\u0dec\u0001\u0000\u0000\u0000\u0deb\u0de0"+
		"\u0001\u0000\u0000\u0000\u0deb\u0de5\u0001\u0000\u0000\u0000\u0dec\u033f"+
		"\u0001\u0000\u0000\u0000\u0ded\u0def\u0005`\u0000\u0000\u0dee\u0df0\u0003"+
		"\u0362\u01b1\u0000\u0def\u0dee\u0001\u0000\u0000\u0000\u0def\u0df0\u0001"+
		"\u0000\u0000\u0000\u0df0\u0341\u0001\u0000\u0000\u0000\u0df1\u0df6\u0003"+
		"\u0344\u01a2\u0000\u0df2\u0df6\u0003\u034a\u01a5\u0000\u0df3\u0df6\u0003"+
		"\u034c\u01a6\u0000\u0df4\u0df6\u0003\u0352\u01a9\u0000\u0df5\u0df1\u0001"+
		"\u0000\u0000\u0000\u0df5\u0df2\u0001\u0000\u0000\u0000\u0df5\u0df3\u0001"+
		"\u0000\u0000\u0000\u0df5\u0df4\u0001\u0000\u0000\u0000\u0df6\u0343\u0001"+
		"\u0000\u0000\u0000\u0df7\u0dfa\u0003\u0348\u01a4\u0000\u0df8\u0dfa\u0003"+
		"\u0346\u01a3\u0000\u0df9\u0df7\u0001\u0000\u0000\u0000\u0df9\u0df8\u0001"+
		"\u0000\u0000\u0000\u0dfa\u0345\u0001\u0000\u0000\u0000\u0dfb\u0dfd\u0005"+
		"\u00cf\u0000\u0000\u0dfc\u0dfb\u0001\u0000\u0000\u0000\u0dfc\u0dfd\u0001"+
		"\u0000\u0000\u0000\u0dfd\u0dfe\u0001\u0000\u0000\u0000\u0dfe\u0dff\u0005"+
		"w\u0000\u0000\u0dff\u0e01\u0003\u02a8\u0154\u0000\u0e00\u0e02\u0003\u0362"+
		"\u01b1\u0000\u0e01\u0e00\u0001\u0000\u0000\u0000\u0e01\u0e02\u0001\u0000"+
		"\u0000\u0000\u0e02\u0347\u0001\u0000\u0000\u0000\u0e03\u0e05\u0005\"\u0000"+
		"\u0000\u0e04\u0e06\u0005\u00cf\u0000\u0000\u0e05\u0e04\u0001\u0000\u0000"+
		"\u0000\u0e05\u0e06\u0001\u0000\u0000\u0000\u0e06\u0e07\u0001\u0000\u0000"+
		"\u0000\u0e07\u0e09\u0005w\u0000\u0000\u0e08\u0e0a\u0003\u0362\u01b1\u0000"+
		"\u0e09\u0e08\u0001\u0000\u0000\u0000\u0e09\u0e0a\u0001\u0000\u0000\u0000"+
		"\u0e0a\u0349\u0001\u0000\u0000\u0000\u0e0b\u0e0d\u0003\u0308\u0184\u0000"+
		"\u0e0c\u0e0e\u0003\u0362\u01b1\u0000\u0e0d\u0e0c\u0001\u0000\u0000\u0000"+
		"\u0e0d\u0e0e\u0001\u0000\u0000\u0000\u0e0e\u034b\u0001\u0000\u0000\u0000"+
		"\u0e0f\u0e12\u0003\u0350\u01a8\u0000\u0e10\u0e12\u0003\u034e\u01a7\u0000"+
		"\u0e11\u0e0f\u0001\u0000\u0000\u0000\u0e11\u0e10\u0001\u0000\u0000\u0000"+
		"\u0e12\u034d\u0001\u0000\u0000\u0000\u0e13\u0e15\u0003\u02b0\u0158\u0000"+
		"\u0e14\u0e16\u0003\u0362\u01b1\u0000\u0e15\u0e14\u0001\u0000\u0000\u0000"+
		"\u0e15\u0e16\u0001\u0000\u0000\u0000\u0e16\u034f\u0001\u0000\u0000\u0000"+
		"\u0e17\u0e19\u0005\"\u0000\u0000\u0e18\u0e17\u0001\u0000\u0000\u0000\u0e18"+
		"\u0e19\u0001\u0000\u0000\u0000\u0e19\u0e1a\u0001\u0000\u0000\u0000\u0e1a"+
		"\u0e1c\u0005\u0125\u0000\u0000\u0e1b\u0e1d\u0003\u0362\u01b1\u0000\u0e1c"+
		"\u0e1b\u0001\u0000\u0000\u0000\u0e1c\u0e1d\u0001\u0000\u0000\u0000\u0e1d"+
		"\u0351\u0001\u0000\u0000\u0000\u0e1e\u0e21\u0003\u0356\u01ab\u0000\u0e1f"+
		"\u0e21\u0003\u0354\u01aa\u0000\u0e20\u0e1e\u0001\u0000\u0000\u0000\u0e20"+
		"\u0e1f\u0001\u0000\u0000\u0000\u0e21\u0353\u0001\u0000\u0000\u0000\u0e22"+
		"\u0e24\u0003\u02be\u015f\u0000\u0e23\u0e25\u0003\u0362\u01b1\u0000\u0e24"+
		"\u0e23\u0001\u0000\u0000\u0000\u0e24\u0e25\u0001\u0000\u0000\u0000\u0e25"+
		"\u0355\u0001\u0000\u0000\u0000\u0e26\u0e28\u0005\"\u0000\u0000\u0e27\u0e26"+
		"\u0001\u0000\u0000\u0000\u0e27\u0e28\u0001\u0000\u0000\u0000\u0e28\u0e29"+
		"\u0001\u0000\u0000\u0000\u0e29\u0e2b\u0005\u0123\u0000\u0000\u0e2a\u0e2c"+
		"\u0003\u0362\u01b1\u0000\u0e2b\u0e2a\u0001\u0000\u0000\u0000\u0e2b\u0e2c"+
		"\u0001\u0000\u0000\u0000\u0e2c\u0357\u0001\u0000\u0000\u0000\u0e2d\u0e2f"+
		"\u0005x\u0000\u0000\u0e2e\u0e2d\u0001\u0000\u0000\u0000\u0e2e\u0e2f\u0001"+
		"\u0000\u0000\u0000\u0e2f\u0e30\u0001\u0000\u0000\u0000\u0e30\u0e31\u0003"+
		"\u035a\u01ad\u0000\u0e31\u0359\u0001\u0000\u0000\u0000\u0e32\u0e33\u0007"+
		"\u0019\u0000\u0000\u0e33\u035b\u0001\u0000\u0000\u0000\u0e34\u0e36\u0005"+
		"\n\u0000\u0000\u0e35\u0e37\u0003\u035e\u01af\u0000\u0e36\u0e35\u0001\u0000"+
		"\u0000\u0000\u0e36\u0e37\u0001\u0000\u0000\u0000\u0e37\u0e38\u0001\u0000"+
		"\u0000\u0000\u0e38\u0e39\u0005\u0014\u0000\u0000\u0e39\u035d\u0001\u0000"+
		"\u0000\u0000\u0e3a\u0e3f\u0003\u0364\u01b2\u0000\u0e3b\u0e3c\u0005\u0005"+
		"\u0000\u0000\u0e3c\u0e3e\u0003\u0364\u01b2\u0000\u0e3d\u0e3b\u0001\u0000"+
		"\u0000\u0000\u0e3e\u0e41\u0001\u0000\u0000\u0000\u0e3f\u0e3d\u0001\u0000"+
		"\u0000\u0000\u0e3f\u0e40\u0001\u0000\u0000\u0000\u0e40\u035f\u0001\u0000"+
		"\u0000\u0000\u0e41\u0e3f\u0001\u0000\u0000\u0000\u0e42\u0e44\u0005\u00c8"+
		"\u0000\u0000\u0e43\u0e45\u0003\u0362\u01b1\u0000\u0e44\u0e43\u0001\u0000"+
		"\u0000\u0000\u0e44\u0e45\u0001\u0000\u0000\u0000\u0e45\u0361\u0001\u0000"+
		"\u0000\u0000\u0e46\u0e47\u0005\u00b7\u0000\u0000\u0e47\u0e48\u0005\u00b8"+
		"\u0000\u0000\u0e48\u0363\u0001\u0000\u0000\u0000\u0e49\u0e4b\u0003\u008a"+
		"E\u0000\u0e4a\u0e4c\u0003\u030c\u0186\u0000\u0e4b\u0e4a\u0001\u0000\u0000"+
		"\u0000\u0e4b\u0e4c\u0001\u0000\u0000\u0000\u0e4c\u0e4d\u0001\u0000\u0000"+
		"\u0000\u0e4d\u0e4e\u0003\u030a\u0185\u0000\u0e4e\u0365\u0001\u0000\u0000"+
		"\u0000\u0e4f\u0e53\u0003\u0368\u01b4\u0000\u0e50\u0e53\u0003\u036c\u01b6"+
		"\u0000\u0e51\u0e53\u0003\u038a\u01c5\u0000\u0e52\u0e4f\u0001\u0000\u0000"+
		"\u0000\u0e52\u0e50\u0001\u0000\u0000\u0000\u0e52\u0e51\u0001\u0000\u0000"+
		"\u0000\u0e53\u0367\u0001\u0000\u0000\u0000\u0e54\u0e59\u0005\u0018\u0000"+
		"\u0000\u0e55\u0e56\u0003\u0370\u01b8\u0000\u0e56\u0e57\u0003t:\u0000\u0e57"+
		"\u0e59\u0001\u0000\u0000\u0000\u0e58\u0e54\u0001\u0000\u0000\u0000\u0e58"+
		"\u0e55\u0001\u0000\u0000\u0000\u0e59\u0369\u0001\u0000\u0000\u0000\u0e5a"+
		"\u0e5b\u0003\u0370\u01b8\u0000\u0e5b\u0e5c\u0003t:\u0000\u0e5c\u036b\u0001"+
		"\u0000\u0000\u0000\u0e5d\u0e62\u0003\u036e\u01b7\u0000\u0e5e\u0e5f\u0003"+
		"\u0372\u01b9\u0000\u0e5f\u0e60\u0003t:\u0000\u0e60\u0e62\u0001\u0000\u0000"+
		"\u0000\u0e61\u0e5d\u0001\u0000\u0000\u0000\u0e61\u0e5e\u0001\u0000\u0000"+
		"\u0000\u0e62\u036d\u0001\u0000\u0000\u0000\u0e63\u0e64\u0007\u001a\u0000"+
		"\u0000\u0e64\u036f\u0001\u0000\u0000\u0000\u0e65\u0e67\u0005\u0018\u0000"+
		"\u0000\u0e66\u0e68\u0003\u0374\u01ba\u0000\u0e67\u0e66\u0001\u0000\u0000"+
		"\u0000\u0e67\u0e68\u0001\u0000\u0000\u0000\u0e68\u0371\u0001\u0000\u0000"+
		"\u0000\u0e69\u0e75\u0005\u012d\u0000\u0000\u0e6a\u0e6b\u0005\u0018\u0000"+
		"\u0000\u0e6b\u0e6d\u0005\u012d\u0000\u0000\u0e6c\u0e6a\u0001\u0000\u0000"+
		"\u0000\u0e6d\u0e70\u0001\u0000\u0000\u0000\u0e6e\u0e6c\u0001\u0000\u0000"+
		"\u0000\u0e6e\u0e6f\u0001\u0000\u0000\u0000\u0e6f\u0e71\u0001\u0000\u0000"+
		"\u0000\u0e70\u0e6e\u0001\u0000\u0000\u0000\u0e71\u0e73\u0005\u0018\u0000"+
		"\u0000\u0e72\u0e74\u0003\u0374\u01ba\u0000\u0e73\u0e72\u0001\u0000\u0000"+
		"\u0000\u0e73\u0e74\u0001\u0000\u0000\u0000\u0e74\u0e76\u0001\u0000\u0000"+
		"\u0000\u0e75\u0e6e\u0001\u0000\u0000\u0000\u0e75\u0e76\u0001\u0000\u0000"+
		"\u0000\u0e76\u0373\u0001\u0000\u0000\u0000\u0e77\u0e78\u0003r9\u0000\u0e78"+
		"\u0e79\u0005\u0018\u0000\u0000\u0e79\u0e7b\u0001\u0000\u0000\u0000\u0e7a"+
		"\u0e77\u0001\u0000\u0000\u0000\u0e7b\u0e7c\u0001\u0000\u0000\u0000\u0e7c"+
		"\u0e7a\u0001\u0000\u0000\u0000\u0e7c\u0e7d\u0001\u0000\u0000\u0000\u0e7d"+
		"\u0375\u0001\u0000\u0000\u0000\u0e7e\u0e7f\u0003\u0388\u01c4\u0000\u0e7f"+
		"\u0e80\u0003v;\u0000\u0e80\u0e85\u0001\u0000\u0000\u0000\u0e81\u0e85\u0003"+
		"x<\u0000\u0e82\u0e85\u0003\u037a\u01bd\u0000\u0e83\u0e85\u0003\u038a\u01c5"+
		"\u0000\u0e84\u0e7e\u0001\u0000\u0000\u0000\u0e84\u0e81\u0001\u0000\u0000"+
		"\u0000\u0e84\u0e82\u0001\u0000\u0000\u0000\u0e84\u0e83\u0001\u0000\u0000"+
		"\u0000\u0e85\u0377\u0001\u0000\u0000\u0000\u0e86\u0e88\u0003\u0388\u01c4"+
		"\u0000\u0e87\u0e86\u0001\u0000\u0000\u0000\u0e87\u0e88\u0001\u0000\u0000"+
		"\u0000\u0e88\u0e89\u0001\u0000\u0000\u0000\u0e89\u0e8a\u0003v;\u0000\u0e8a"+
		"\u0379\u0001\u0000\u0000\u0000\u0e8b\u0e8c\u0007\u001b\u0000\u0000\u0e8c"+
		"\u037b\u0001\u0000\u0000\u0000\u0e8d\u0e90\u0003\u037e\u01bf\u0000\u0e8e"+
		"\u0e90\u0003\u038a\u01c5\u0000\u0e8f\u0e8d\u0001\u0000\u0000\u0000\u0e8f"+
		"\u0e8e\u0001\u0000\u0000\u0000\u0e90\u037d\u0001\u0000\u0000\u0000\u0e91"+
		"\u0e93\u0003\u0388\u01c4\u0000\u0e92\u0e91\u0001\u0000\u0000\u0000\u0e92"+
		"\u0e93\u0001\u0000\u0000\u0000\u0e93\u0e94\u0001\u0000\u0000\u0000\u0e94"+
		"\u0e95\u0003z=\u0000\u0e95\u037f\u0001\u0000\u0000\u0000\u0e96\u0e97\u0003"+
		"\u0388\u01c4\u0000\u0e97\u0e98\u0003~?\u0000\u0e98\u0e9c\u0001\u0000\u0000"+
		"\u0000\u0e99\u0e9c\u0003\u0080@\u0000\u0e9a\u0e9c\u0003\u038a\u01c5\u0000"+
		"\u0e9b\u0e96\u0001\u0000\u0000\u0000\u0e9b\u0e99\u0001\u0000\u0000\u0000"+
		"\u0e9b\u0e9a\u0001\u0000\u0000\u0000\u0e9c\u0381\u0001\u0000\u0000\u0000"+
		"\u0e9d\u0e9f\u0003\u0388\u01c4\u0000\u0e9e\u0e9d\u0001\u0000\u0000\u0000"+
		"\u0e9e\u0e9f\u0001\u0000\u0000\u0000\u0e9f\u0ea0\u0001\u0000\u0000\u0000"+
		"\u0ea0\u0ea1\u0003~?\u0000\u0ea1\u0383\u0001\u0000\u0000\u0000\u0ea2\u0ea5"+
		"\u0003\u0386\u01c3\u0000\u0ea3\u0ea5\u0003\u038a\u01c5\u0000\u0ea4\u0ea2"+
		"\u0001\u0000\u0000\u0000\u0ea4\u0ea3\u0001\u0000\u0000\u0000\u0ea5\u0385"+
		"\u0001\u0000\u0000\u0000\u0ea6\u0ea8\u0003\u0388\u01c4\u0000\u0ea7\u0ea6"+
		"\u0001\u0000\u0000\u0000\u0ea7\u0ea8\u0001\u0000\u0000\u0000\u0ea8\u0ea9"+
		"\u0001\u0000\u0000\u0000\u0ea9\u0eaa\u0003\u0082A\u0000\u0eaa\u0387\u0001"+
		"\u0000\u0000\u0000\u0eab\u0ead\u0003\u0366\u01b3\u0000\u0eac\u0eae\u0005"+
		"\u0018\u0000\u0000\u0ead\u0eac\u0001\u0000\u0000\u0000\u0ead\u0eae\u0001"+
		"\u0000\u0000\u0000\u0eae\u0eb4\u0001\u0000\u0000\u0000\u0eaf\u0eb0\u0003"+
		"n7\u0000\u0eb0\u0eb1\u0005\u0010\u0000\u0000\u0eb1\u0eb3\u0001\u0000\u0000"+
		"\u0000\u0eb2\u0eaf\u0001\u0000\u0000\u0000\u0eb3\u0eb6\u0001\u0000\u0000"+
		"\u0000\u0eb4\u0eb2\u0001\u0000\u0000\u0000\u0eb4\u0eb5\u0001\u0000\u0000"+
		"\u0000\u0eb5\u0ebf\u0001\u0000\u0000\u0000\u0eb6\u0eb4\u0001\u0000\u0000"+
		"\u0000\u0eb7\u0eb8\u0003n7\u0000\u0eb8\u0eb9\u0005\u0010\u0000\u0000\u0eb9"+
		"\u0ebb\u0001\u0000\u0000\u0000\u0eba\u0eb7\u0001\u0000\u0000\u0000\u0ebb"+
		"\u0ebc\u0001\u0000\u0000\u0000\u0ebc\u0eba\u0001\u0000\u0000\u0000\u0ebc"+
		"\u0ebd\u0001\u0000\u0000\u0000\u0ebd\u0ebf\u0001\u0000\u0000\u0000\u0ebe"+
		"\u0eab\u0001\u0000\u0000\u0000\u0ebe\u0eba\u0001\u0000\u0000\u0000\u0ebf"+
		"\u0389\u0001\u0000\u0000\u0000\u0ec0\u0ec1\u0003\u019c\u00ce\u0000\u0ec1"+
		"\u038b\u0001\u0000\u0000\u0000\u0ec2\u0ec3\u0005\u0080\u0000\u0000\u0ec3"+
		"\u038d\u0001\u0000\u0000\u0000\u0ec4\u0ec5\u0003\u0390\u01c8\u0000\u0ec5"+
		"\u0ec6\u0003\u03a4\u01d2\u0000\u0ec6\u038f\u0001\u0000\u0000\u0000\u0ec7"+
		"\u0ec8\u0007\u001c\u0000\u0000\u0ec8\u0391\u0001\u0000\u0000\u0000\u0ec9"+
		"\u0ecb\u0005\u0095\u0000\u0000\u0eca\u0ecc\u0005\u00b7\u0000\u0000\u0ecb"+
		"\u0eca\u0001\u0000\u0000\u0000\u0ecb\u0ecc\u0001\u0000\u0000\u0000\u0ecc"+
		"\u0ecd\u0001\u0000\u0000\u0000\u0ecd\u0ece\u0005\u00b8\u0000\u0000\u0ece"+
		"\u0393\u0001\u0000\u0000\u0000\u0ecf\u0ed1\u0005\u0095\u0000\u0000\u0ed0"+
		"\u0ed2\u0005\u00b7\u0000\u0000\u0ed1\u0ed0\u0001\u0000\u0000\u0000\u0ed1"+
		"\u0ed2\u0001\u0000\u0000\u0000\u0ed2\u0ed4\u0001\u0000\u0000\u0000\u0ed3"+
		"\u0ed5\u0003\u03f0\u01f8\u0000\u0ed4\u0ed3\u0001\u0000\u0000\u0000\u0ed4"+
		"\u0ed5\u0001\u0000\u0000\u0000\u0ed5\u0ed6\u0001\u0000\u0000\u0000\u0ed6"+
		"\u0ed7\u0005\u00b6\u0000\u0000\u0ed7\u0395\u0001\u0000\u0000\u0000\u0ed8"+
		"\u0eda\u0005\u0095\u0000\u0000\u0ed9\u0edb\u0005\u00b7\u0000\u0000\u0eda"+
		"\u0ed9\u0001\u0000\u0000\u0000\u0eda\u0edb\u0001\u0000\u0000\u0000\u0edb"+
		"\u0edc\u0001\u0000\u0000\u0000\u0edc\u0edd\u0005\\\u0000\u0000\u0edd\u0397"+
		"\u0001\u0000\u0000\u0000\u0ede\u0ee0\u0005\u0095\u0000\u0000\u0edf\u0ee1"+
		"\u0005\u00b7\u0000\u0000\u0ee0\u0edf\u0001\u0000\u0000\u0000\u0ee0\u0ee1"+
		"\u0001\u0000\u0000\u0000\u0ee1\u0ee2\u0001\u0000\u0000\u0000\u0ee2\u0ee5"+
		"\u0005\u0098\u0000\u0000\u0ee3\u0ee5\u0005\u0004\u0000\u0000\u0ee4\u0ede"+
		"\u0001\u0000\u0000\u0000\u0ee4\u0ee3\u0001\u0000\u0000\u0000\u0ee5\u0ee6"+
		"\u0001\u0000\u0000\u0000\u0ee6\u0ee7\u0003\u022c\u0116\u0000\u0ee7\u0399"+
		"\u0001\u0000\u0000\u0000\u0ee8\u0eea\u0005\u0095\u0000\u0000\u0ee9\u0eeb"+
		"\u0005\u00b7\u0000\u0000\u0eea\u0ee9\u0001\u0000\u0000\u0000\u0eea\u0eeb"+
		"\u0001\u0000\u0000\u0000\u0eeb\u0eec\u0001\u0000\u0000\u0000\u0eec\u0eed"+
		"\u0007\u001d\u0000\u0000\u0eed\u0eee\u0005\u00bc\u0000\u0000\u0eee\u0eef"+
		"\u0003\u0198\u00cc\u0000\u0eef\u039b\u0001\u0000\u0000\u0000\u0ef0\u0ef3"+
		"\u0003\u03fa\u01fd\u0000\u0ef1\u0ef3\u0003\u03a0\u01d0\u0000\u0ef2\u0ef0"+
		"\u0001\u0000\u0000\u0000\u0ef2\u0ef1\u0001\u0000\u0000\u0000\u0ef3\u039d"+
		"\u0001\u0000\u0000\u0000\u0ef4\u0ef7\u0003F#\u0000\u0ef5\u0ef7\u0003\u019c"+
		"\u00ce\u0000\u0ef6\u0ef4\u0001\u0000\u0000\u0000\u0ef6\u0ef5\u0001\u0000"+
		"\u0000\u0000\u0ef7\u039f\u0001\u0000\u0000\u0000\u0ef8\u0efb\u0003\u019c"+
		"\u00ce\u0000\u0ef9\u0efb\u0003\u03a2\u01d1\u0000\u0efa\u0ef8\u0001\u0000"+
		"\u0000\u0000\u0efa\u0ef9\u0001\u0000\u0000\u0000\u0efb\u03a1\u0001\u0000"+
		"\u0000\u0000\u0efc\u0efd\u0005P\u0000\u0000\u0efd\u03a3\u0001\u0000\u0000"+
		"\u0000\u0efe\u0eff\u0006\u01d2\uffff\uffff\u0000\u0eff\u0f00\u0005\u00b7"+
		"\u0000\u0000\u0f00\u0f03\u0003\u03a4\u01d2\u0005\u0f01\u0f03\u0003\u03a6"+
		"\u01d3\u0000\u0f02\u0efe\u0001\u0000\u0000\u0000\u0f02\u0f01\u0001\u0000"+
		"\u0000\u0000\u0f03\u0f0f\u0001\u0000\u0000\u0000\u0f04\u0f05\n\u0004\u0000"+
		"\u0000\u0f05\u0f06\u0005!\u0000\u0000\u0f06\u0f0e\u0003\u03a4\u01d2\u0005"+
		"\u0f07\u0f08\n\u0003\u0000\u0000\u0f08\u0f09\u0005\u0119\u0000\u0000\u0f09"+
		"\u0f0e\u0003\u03a4\u01d2\u0004\u0f0a\u0f0b\n\u0002\u0000\u0000\u0f0b\u0f0c"+
		"\u0005\u00c2\u0000\u0000\u0f0c\u0f0e\u0003\u03a4\u01d2\u0003\u0f0d\u0f04"+
		"\u0001\u0000\u0000\u0000\u0f0d\u0f07\u0001\u0000\u0000\u0000\u0f0d\u0f0a"+
		"\u0001\u0000\u0000\u0000\u0f0e\u0f11\u0001\u0000\u0000\u0000\u0f0f\u0f0d"+
		"\u0001\u0000\u0000\u0000\u0f0f\u0f10\u0001\u0000\u0000\u0000\u0f10\u03a5"+
		"\u0001\u0000\u0000\u0000\u0f11\u0f0f\u0001\u0000\u0000\u0000\u0f12\u0f13"+
		"\u0006\u01d3\uffff\uffff\u0000\u0f13\u0f25\u0005h\u0000\u0000\u0f14\u0f15"+
		"\u0005\n\u0000\u0000\u0f15\u0f16\u0003\u01a6\u00d3\u0000\u0f16\u0f17\u0005"+
		"\u0014\u0000\u0000\u0f17\u0f26\u0001\u0000\u0000\u0000\u0f18\u0f19\u0005"+
		"\f\u0000\u0000\u0f19\u0f1a\u0003\u01a6\u00d3\u0000\u0f1a\u0f1b\u0005\u0016"+
		"\u0000\u0000\u0f1b\u0f26\u0001\u0000\u0000\u0000\u0f1c\u0f1d\u0005\n\u0000"+
		"\u0000\u0f1d\u0f1e\u0003\u014e\u00a7\u0000\u0f1e\u0f1f\u0005\u0014\u0000"+
		"\u0000\u0f1f\u0f26\u0001\u0000\u0000\u0000\u0f20\u0f21\u0005\f\u0000\u0000"+
		"\u0f21\u0f22\u0003\u014e\u00a7\u0000\u0f22\u0f23\u0005\u0016\u0000\u0000"+
		"\u0f23\u0f26\u0001\u0000\u0000\u0000\u0f24\u0f26\u0003@ \u0000\u0f25\u0f14"+
		"\u0001\u0000\u0000\u0000\u0f25\u0f18\u0001\u0000\u0000\u0000\u0f25\u0f1c"+
		"\u0001\u0000\u0000\u0000\u0f25\u0f20\u0001\u0000\u0000\u0000\u0f25\u0f24"+
		"\u0001\u0000\u0000\u0000\u0f26\u0f5f\u0001\u0000\u0000\u0000\u0f27\u0f28"+
		"\u0003\u0198\u00cc\u0000\u0f28\u0f29\u0003\u0396\u01cb\u0000\u0f29\u0f5f"+
		"\u0001\u0000\u0000\u0000\u0f2a\u0f2b\u0003\u0198\u00cc\u0000\u0f2b\u0f2c"+
		"\u0003\u0398\u01cc\u0000\u0f2c\u0f5f\u0001\u0000\u0000\u0000\u0f2d\u0f2e"+
		"\u0003\u0198\u00cc\u0000\u0f2e\u0f2f\u0003\u039a\u01cd\u0000\u0f2f\u0f5f"+
		"\u0001\u0000\u0000\u0000\u0f30\u0f31\u0005 \u0000\u0000\u0f31\u0f32\u0005"+
		"\f\u0000\u0000\u0f32\u0f35\u0003\u0198\u00cc\u0000\u0f33\u0f34\u0005\u0005"+
		"\u0000\u0000\u0f34\u0f36\u0003\u0198\u00cc\u0000\u0f35\u0f33\u0001\u0000"+
		"\u0000\u0000\u0f36\u0f37\u0001\u0000\u0000\u0000\u0f37\u0f35\u0001\u0000"+
		"\u0000\u0000\u0f37\u0f38\u0001\u0000\u0000\u0000\u0f38\u0f39\u0001\u0000"+
		"\u0000\u0000\u0f39\u0f3a\u0005\u0016\u0000\u0000\u0f3a\u0f5f\u0001\u0000"+
		"\u0000\u0000\u0f3b\u0f3c\u0005\u00dd\u0000\u0000\u0f3c\u0f3d\u0005\f\u0000"+
		"\u0000\u0f3d\u0f40\u0003\u0198\u00cc\u0000\u0f3e\u0f3f\u0005\u0005\u0000"+
		"\u0000\u0f3f\u0f41\u0003\u0198\u00cc\u0000\u0f40\u0f3e\u0001\u0000\u0000"+
		"\u0000\u0f41\u0f42\u0001\u0000\u0000\u0000\u0f42\u0f40\u0001\u0000\u0000"+
		"\u0000\u0f42\u0f43\u0001\u0000\u0000\u0000\u0f43\u0f44\u0001\u0000\u0000"+
		"\u0000\u0f44\u0f45\u0005\u0016\u0000\u0000\u0f45\u0f5f\u0001\u0000\u0000"+
		"\u0000\u0f46\u0f47\u0005\u00d0\u0000\u0000\u0f47\u0f48\u0005\f\u0000\u0000"+
		"\u0f48\u0f49\u0003\u0198\u00cc\u0000\u0f49\u0f4a\u0005\u0005\u0000\u0000"+
		"\u0f4a\u0f4b\u0003\u0088D\u0000\u0f4b\u0f4c\u0005\u0016\u0000\u0000\u0f4c"+
		"\u0f5f\u0001\u0000\u0000\u0000\u0f4d\u0f4f\u0005\u00cf\u0000\u0000\u0f4e"+
		"\u0f4d\u0001\u0000\u0000\u0000\u0f4e\u0f4f\u0001\u0000\u0000\u0000\u0f4f"+
		"\u0f50\u0001\u0000\u0000\u0000\u0f50\u0f51\u0005w\u0000\u0000\u0f51\u0f5f"+
		"\u0003\u00c6c\u0000\u0f52\u0f54\u0005.\u0000\u0000\u0f53\u0f52\u0001\u0000"+
		"\u0000\u0000\u0f53\u0f54\u0001\u0000\u0000\u0000\u0f54\u0f55\u0001\u0000"+
		"\u0000\u0000\u0f55\u0f56\u0005\u00f0\u0000\u0000\u0f56\u0f5f\u0003\u00cc"+
		"f\u0000\u0f57\u0f58\u0005\u009d\u0000\u0000\u0f58\u0f59\u0003\u0156\u00ab"+
		"\u0000\u0f59\u0f5a\u0005\u0084\u0000\u0000\u0f5a\u0f5b\u0003\u03a4\u01d2"+
		"\u0000\u0f5b\u0f5c\u0005f\u0000\u0000\u0f5c\u0f5f\u0001\u0000\u0000\u0000"+
		"\u0f5d\u0f5f\u0003\u03a8\u01d4\u0000\u0f5e\u0f12\u0001\u0000\u0000\u0000"+
		"\u0f5e\u0f27\u0001\u0000\u0000\u0000\u0f5e\u0f2a\u0001\u0000\u0000\u0000"+
		"\u0f5e\u0f2d\u0001\u0000\u0000\u0000\u0f5e\u0f30\u0001\u0000\u0000\u0000"+
		"\u0f5e\u0f3b\u0001\u0000\u0000\u0000\u0f5e\u0f46\u0001\u0000\u0000\u0000"+
		"\u0f5e\u0f4e\u0001\u0000\u0000\u0000\u0f5e\u0f53\u0001\u0000\u0000\u0000"+
		"\u0f5e\u0f57\u0001\u0000\u0000\u0000\u0f5e\u0f5d\u0001\u0000\u0000\u0000"+
		"\u0f5f\u0f70\u0001\u0000\u0000\u0000\u0f60\u0f61\n\u000e\u0000\u0000\u0f61"+
		"\u0f62\u0003\u0390\u01c8\u0000\u0f62\u0f63\u0003\u03a6\u01d3\u000f\u0f63"+
		"\u0f6f\u0001\u0000\u0000\u0000\u0f64\u0f65\n\u000f\u0000\u0000\u0f65\u0f67"+
		"\u0005\u0095\u0000\u0000\u0f66\u0f68\u0005\u00b7\u0000\u0000\u0f67\u0f66"+
		"\u0001\u0000\u0000\u0000\u0f67\u0f68\u0001\u0000\u0000\u0000\u0f68\u0f69"+
		"\u0001\u0000\u0000\u0000\u0f69\u0f6f\u0003\u03aa\u01d5\u0000\u0f6a\u0f6b"+
		"\n\f\u0000\u0000\u0f6b\u0f6f\u0003\u0392\u01c9\u0000\u0f6c\u0f6d\n\u000b"+
		"\u0000\u0000\u0f6d\u0f6f\u0003\u0394\u01ca\u0000\u0f6e\u0f60\u0001\u0000"+
		"\u0000\u0000\u0f6e\u0f64\u0001\u0000\u0000\u0000\u0f6e\u0f6a\u0001\u0000"+
		"\u0000\u0000\u0f6e\u0f6c\u0001\u0000\u0000\u0000\u0f6f\u0f72\u0001\u0000"+
		"\u0000\u0000\u0f70\u0f6e\u0001\u0000\u0000\u0000\u0f70\u0f71\u0001\u0000"+
		"\u0000\u0000\u0f71\u03a7\u0001\u0000\u0000\u0000\u0f72\u0f70\u0001\u0000"+
		"\u0000\u0000\u0f73\u0f74\u0006\u01d4\uffff\uffff\u0000\u0f74\u0f75\u0005"+
		"\f\u0000\u0000\u0f75\u0f76\u0003\u03a4\u01d2\u0000\u0f76\u0f77\u0005\u0016"+
		"\u0000\u0000\u0f77\u0f83\u0001\u0000\u0000\u0000\u0f78\u0f83\u0003\u03fa"+
		"\u01fd\u0000\u0f79\u0f7a\u0003\u03ac\u01d6\u0000\u0f7a\u0f7b\u0003\u03a8"+
		"\u01d4\b\u0f7b\u0f83\u0001\u0000\u0000\u0000\u0f7c\u0f83\u0003\u03ae\u01d7"+
		"\u0000\u0f7d\u0f83\u0003\u03ec\u01f6\u0000\u0f7e\u0f7f\u0005\u010f\u0000"+
		"\u0000\u0f7f\u0f83\u0003@ \u0000\u0f80\u0f83\u0003\u03a0\u01d0\u0000\u0f81"+
		"\u0f83\u0003\u008eG\u0000\u0f82\u0f73\u0001\u0000\u0000\u0000\u0f82\u0f78"+
		"\u0001\u0000\u0000\u0000\u0f82\u0f79\u0001\u0000\u0000\u0000\u0f82\u0f7c"+
		"\u0001\u0000\u0000\u0000\u0f82\u0f7d\u0001\u0000\u0000\u0000\u0f82\u0f7e"+
		"\u0001\u0000\u0000\u0000\u0f82\u0f80\u0001\u0000\u0000\u0000\u0f82\u0f81"+
		"\u0001\u0000\u0000\u0000\u0f83\u0f92\u0001\u0000\u0000\u0000\u0f84\u0f85"+
		"\n\n\u0000\u0000\u0f85\u0f86\u0005\u012b\u0000\u0000\u0f86\u0f91\u0003"+
		"\u03a8\u01d4\u000b\u0f87\u0f88\n\u0004\u0000\u0000\u0f88\u0f89\u0007\u001e"+
		"\u0000\u0000\u0f89\u0f91\u0003\u03a8\u01d4\u0005\u0f8a\u0f8b\n\u0003\u0000"+
		"\u0000\u0f8b\u0f8c\u0007\u001f\u0000\u0000\u0f8c\u0f91\u0003\u03a8\u01d4"+
		"\u0004\u0f8d\u0f8e\n\u000b\u0000\u0000\u0f8e\u0f8f\u0005\u0010\u0000\u0000"+
		"\u0f8f\u0f91\u0003\u0088D\u0000\u0f90\u0f84\u0001\u0000\u0000\u0000\u0f90"+
		"\u0f87\u0001\u0000\u0000\u0000\u0f90\u0f8a\u0001\u0000\u0000\u0000\u0f90"+
		"\u0f8d\u0001\u0000\u0000\u0000\u0f91\u0f94\u0001\u0000\u0000\u0000\u0f92"+
		"\u0f90\u0001\u0000\u0000\u0000\u0f92\u0f93\u0001\u0000\u0000\u0000\u0f93"+
		"\u03a9\u0001\u0000\u0000\u0000\u0f94\u0f92\u0001\u0000\u0000\u0000\u0f95"+
		"\u0f96\u0007\u0005\u0000\u0000\u0f96\u03ab\u0001\u0000\u0000\u0000\u0f97"+
		"\u0f98\u0007 \u0000\u0000\u0f98\u03ad\u0001\u0000\u0000\u0000\u0f99\u0fa3"+
		"\u0003\u03b0\u01d8\u0000\u0f9a\u0fa3\u0003\u0290\u0148\u0000\u0f9b\u0fa3"+
		"\u0003\u03be\u01df\u0000\u0f9c\u0fa3\u0003\u03c8\u01e4\u0000\u0f9d\u0fa3"+
		"\u0003\u03ca\u01e5\u0000\u0f9e\u0fa3\u0003\u03cc\u01e6\u0000\u0f9f\u0fa3"+
		"\u0003\u03e4\u01f2\u0000\u0fa0\u0fa3\u0003\u03bc\u01de\u0000\u0fa1\u0fa3"+
		"\u0003\u03ba\u01dd\u0000\u0fa2\u0f99\u0001\u0000\u0000\u0000\u0fa2\u0f9a"+
		"\u0001\u0000\u0000\u0000\u0fa2\u0f9b\u0001\u0000\u0000\u0000\u0fa2\u0f9c"+
		"\u0001\u0000\u0000\u0000\u0fa2\u0f9d\u0001\u0000\u0000\u0000\u0fa2\u0f9e"+
		"\u0001\u0000\u0000\u0000\u0fa2\u0f9f\u0001\u0000\u0000\u0000\u0fa2\u0fa0"+
		"\u0001\u0000\u0000\u0000\u0fa2\u0fa1\u0001\u0000\u0000\u0000\u0fa3\u03af"+
		"\u0001\u0000\u0000\u0000\u0fa4\u0fa5\u0003\u03b6\u01db\u0000\u0fa5\u0fa6"+
		"\u0005\f\u0000\u0000\u0fa6\u0fa7\u0003\u03b2\u01d9\u0000\u0fa7\u0fa8\u0005"+
		"\u0016\u0000\u0000\u0fa8\u0fb1\u0001\u0000\u0000\u0000\u0fa9\u0faa\u0003"+
		"\u03b8\u01dc\u0000\u0faa\u0fab\u0005\f\u0000\u0000\u0fab\u0fac\u0003\u03b2"+
		"\u01d9\u0000\u0fac\u0fad\u0005\u0005\u0000\u0000\u0fad\u0fae\u0003\u03b2"+
		"\u01d9\u0000\u0fae\u0faf\u0005\u0016\u0000\u0000\u0faf\u0fb1\u0001\u0000"+
		"\u0000\u0000\u0fb0\u0fa4\u0001\u0000\u0000\u0000\u0fb0\u0fa9\u0001\u0000"+
		"\u0000\u0000\u0fb1\u03b1\u0001\u0000\u0000\u0000\u0fb2\u0fb8\u0003\u03fa"+
		"\u01fd\u0000\u0fb3\u0fb8\u0003\u008eG\u0000\u0fb4\u0fb8\u0003\u03b4\u01da"+
		"\u0000\u0fb5\u0fb8\u0003\u03ae\u01d7\u0000\u0fb6\u0fb8\u0003\u03a4\u01d2"+
		"\u0000\u0fb7\u0fb2\u0001\u0000\u0000\u0000\u0fb7\u0fb3\u0001\u0000\u0000"+
		"\u0000\u0fb7\u0fb4\u0001\u0000\u0000\u0000\u0fb7\u0fb5\u0001\u0000\u0000"+
		"\u0000\u0fb7\u0fb6\u0001\u0000\u0000\u0000\u0fb8\u03b3\u0001\u0000\u0000"+
		"\u0000\u0fb9\u0fba\u0003\u008eG\u0000\u0fba\u0fbb\u0005\u0010\u0000\u0000"+
		"\u0fbb\u0fbc\u0003\u0088D\u0000\u0fbc\u03b5\u0001\u0000\u0000\u0000\u0fbd"+
		"\u0fbe\u0007!\u0000\u0000\u0fbe\u03b7\u0001\u0000\u0000\u0000\u0fbf\u0fc0"+
		"\u0007\"\u0000\u0000\u0fc0\u03b9\u0001\u0000\u0000\u0000\u0fc1\u0fc2\u0007"+
		"#\u0000\u0000\u0fc2\u0fc3\u0005\f\u0000\u0000\u0fc3\u0fc4\u0003\u03a8"+
		"\u01d4\u0000\u0fc4\u0fc5\u0005\u0005\u0000\u0000\u0fc5\u0fc6\u0003\u03a8"+
		"\u01d4\u0000\u0fc6\u0fc7\u0005\u0016\u0000\u0000\u0fc7\u0fee\u0001\u0000"+
		"\u0000\u0000\u0fc8\u0fc9\u0007$\u0000\u0000\u0fc9\u0fca\u0005\f\u0000"+
		"\u0000\u0fca\u0fcb\u0003\u03a8\u01d4\u0000\u0fcb\u0fcc\u0005\u0016\u0000"+
		"\u0000\u0fcc\u0fee\u0001\u0000\u0000\u0000\u0fcd\u0fce\u0005\u00fc\u0000"+
		"\u0000\u0fce\u0fd6\u0005\f\u0000\u0000\u0fcf\u0fd1\u0003\u03ee\u01f7\u0000"+
		"\u0fd0\u0fcf\u0001\u0000\u0000\u0000\u0fd0\u0fd1\u0001\u0000\u0000\u0000"+
		"\u0fd1\u0fd3\u0001\u0000\u0000\u0000\u0fd2\u0fd4\u0003\u03a8\u01d4\u0000"+
		"\u0fd3\u0fd2\u0001\u0000\u0000\u0000\u0fd3\u0fd4\u0001\u0000\u0000\u0000"+
		"\u0fd4\u0fd5\u0001\u0000\u0000\u0000\u0fd5\u0fd7\u0005v\u0000\u0000\u0fd6"+
		"\u0fd0\u0001\u0000\u0000\u0000\u0fd6\u0fd7\u0001\u0000\u0000\u0000\u0fd7"+
		"\u0fd8\u0001\u0000\u0000\u0000\u0fd8\u0fd9\u0003\u03a8\u01d4\u0000\u0fd9"+
		"\u0fda\u0005\u0016\u0000\u0000\u0fda\u0fee\u0001\u0000\u0000\u0000\u0fdb"+
		"\u0fdc\u0007%\u0000\u0000\u0fdc\u0fdd\u0005\f\u0000\u0000\u0fdd\u0fe0"+
		"\u0003\u03a8\u01d4\u0000\u0fde\u0fdf\u0005\u0005\u0000\u0000\u0fdf\u0fe1"+
		"\u0003\u03a8\u01d4\u0000\u0fe0\u0fde\u0001\u0000\u0000\u0000\u0fe0\u0fe1"+
		"\u0001\u0000\u0000\u0000\u0fe1\u0fe2\u0001\u0000\u0000\u0000\u0fe2\u0fe3"+
		"\u0005\u0016\u0000\u0000\u0fe3\u0fee\u0001\u0000\u0000\u0000\u0fe4\u0fe5"+
		"\u0005\u00b5\u0000\u0000\u0fe5\u0fe6\u0005\f\u0000\u0000\u0fe6\u0fe9\u0003"+
		"\u03a8\u01d4\u0000\u0fe7\u0fe8\u0005\u0005\u0000\u0000\u0fe8\u0fea\u0003"+
		"\u03f0\u01f8\u0000\u0fe9\u0fe7\u0001\u0000\u0000\u0000\u0fe9\u0fea\u0001"+
		"\u0000\u0000\u0000\u0fea\u0feb\u0001\u0000\u0000\u0000\u0feb\u0fec\u0005"+
		"\u0016\u0000\u0000\u0fec\u0fee\u0001\u0000\u0000\u0000\u0fed\u0fc1\u0001"+
		"\u0000\u0000\u0000\u0fed\u0fc8\u0001\u0000\u0000\u0000\u0fed\u0fcd\u0001"+
		"\u0000\u0000\u0000\u0fed\u0fdb\u0001\u0000\u0000\u0000\u0fed\u0fe4\u0001"+
		"\u0000\u0000\u0000\u0fee\u03bb\u0001\u0000\u0000\u0000\u0fef\u0ff0\u0005"+
		"\u00fc\u0000\u0000\u0ff0\u0ff1\u0005\f\u0000\u0000\u0ff1\u0ff2\u0003\u03a8"+
		"\u01d4\u0000\u0ff2\u0ff3\u0005\u0005\u0000\u0000\u0ff3\u0ff4\u0003\u03a8"+
		"\u01d4\u0000\u0ff4\u0ff5\u0005\u0016\u0000\u0000\u0ff5\u0ffc\u0001\u0000"+
		"\u0000\u0000\u0ff6\u0ff7\u0005d\u0000\u0000\u0ff7\u0ff8\u0005\f\u0000"+
		"\u0000\u0ff8\u0ff9\u0003\u03a8\u01d4\u0000\u0ff9\u0ffa\u0005\u0016\u0000"+
		"\u0000\u0ffa\u0ffc\u0001\u0000\u0000\u0000\u0ffb\u0fef\u0001\u0000\u0000"+
		"\u0000\u0ffb\u0ff6\u0001\u0000\u0000\u0000\u0ffc\u03bd\u0001\u0000\u0000"+
		"\u0000\u0ffd\u0ffe\u0005\u00b9\u0000\u0000\u0ffe\u0fff\u0005\f\u0000\u0000"+
		"\u0fff\u1000\u0003\u03a4\u01d2\u0000\u1000\u1001\u0005\u0005\u0000\u0000"+
		"\u1001\u1002\u0003\u03a4\u01d2\u0000\u1002\u1003\u0005\u0016\u0000\u0000"+
		"\u1003\u1027\u0001\u0000\u0000\u0000\u1004\u1005\u0005@\u0000\u0000\u1005"+
		"\u1006\u0005\f\u0000\u0000\u1006\u1009\u0003\u03a4\u01d2\u0000\u1007\u1008"+
		"\u0005\u0005\u0000\u0000\u1008\u100a\u0003\u03a4\u01d2\u0000\u1009\u1007"+
		"\u0001\u0000\u0000\u0000\u100a\u100b\u0001\u0000\u0000\u0000\u100b\u1009"+
		"\u0001\u0000\u0000\u0000\u100b\u100c\u0001\u0000\u0000\u0000\u100c\u100d"+
		"\u0001\u0000\u0000\u0000\u100d\u100e\u0005\u0016\u0000\u0000\u100e\u1027"+
		"\u0001\u0000\u0000\u0000\u100f\u1010\u00058\u0000\u0000\u1010\u1012\u0003"+
		"\u03a8\u01d4\u0000\u1011\u1013\u0003\u03c0\u01e0\u0000\u1012\u1011\u0001"+
		"\u0000\u0000\u0000\u1013\u1014\u0001\u0000\u0000\u0000\u1014\u1012\u0001"+
		"\u0000\u0000\u0000\u1014\u1015\u0001\u0000\u0000\u0000\u1015\u1017\u0001"+
		"\u0000\u0000\u0000\u1016\u1018\u0003\u03c4\u01e2\u0000\u1017\u1016\u0001"+
		"\u0000\u0000\u0000\u1017\u1018\u0001\u0000\u0000\u0000\u1018\u1019\u0001"+
		"\u0000\u0000\u0000\u1019\u101a\u0005f\u0000\u0000\u101a\u1027\u0001\u0000"+
		"\u0000\u0000\u101b\u101d\u00058\u0000\u0000\u101c\u101e\u0003\u03c2\u01e1"+
		"\u0000\u101d\u101c\u0001\u0000\u0000\u0000\u101e\u101f\u0001\u0000\u0000"+
		"\u0000\u101f\u101d\u0001\u0000\u0000\u0000\u101f\u1020\u0001\u0000\u0000"+
		"\u0000\u1020\u1022\u0001\u0000\u0000\u0000\u1021\u1023\u0003\u03c4\u01e2"+
		"\u0000\u1022\u1021\u0001\u0000\u0000\u0000\u1022\u1023\u0001\u0000\u0000"+
		"\u0000\u1023\u1024\u0001\u0000\u0000\u0000\u1024\u1025\u0005f\u0000\u0000"+
		"\u1025\u1027\u0001\u0000\u0000\u0000\u1026\u0ffd\u0001\u0000\u0000\u0000"+
		"\u1026\u1004\u0001\u0000\u0000\u0000\u1026\u100f\u0001\u0000\u0000\u0000"+
		"\u1026\u101b\u0001\u0000\u0000\u0000\u1027\u03bf\u0001\u0000\u0000\u0000"+
		"\u1028\u1029\u0005\u0114\u0000\u0000\u1029\u102e\u0003\u03c6\u01e3\u0000"+
		"\u102a\u102b\u0005\u0005\u0000\u0000\u102b\u102d\u0003\u03c6\u01e3\u0000"+
		"\u102c\u102a\u0001\u0000\u0000\u0000\u102d\u1030\u0001\u0000\u0000\u0000"+
		"\u102e\u102c\u0001\u0000\u0000\u0000\u102e\u102f\u0001\u0000\u0000\u0000"+
		"\u102f\u1031\u0001\u0000\u0000\u0000\u1030\u102e\u0001\u0000\u0000\u0000"+
		"\u1031\u1032\u0005\u00f4\u0000\u0000\u1032\u1033\u0003\u03a4\u01d2\u0000"+
		"\u1033\u03c1\u0001\u0000\u0000\u0000\u1034\u1035\u0005\u0114\u0000\u0000"+
		"\u1035\u1036\u0003\u03a4\u01d2\u0000\u1036\u1037\u0005\u00f4\u0000\u0000"+
		"\u1037\u1038\u0003\u03a4\u01d2\u0000\u1038\u03c3\u0001\u0000\u0000\u0000"+
		"\u1039\u103a\u0005e\u0000\u0000\u103a\u103b\u0003\u03a4\u01d2\u0000\u103b"+
		"\u03c5\u0001\u0000\u0000\u0000\u103c\u1043\u0003\u03a8\u01d4\u0000\u103d"+
		"\u1043\u0003\u038e\u01c7\u0000\u103e\u1043\u0003\u0392\u01c9\u0000\u103f"+
		"\u1043\u0003\u0396\u01cb\u0000\u1040\u1043\u0003\u0398\u01cc\u0000\u1041"+
		"\u1043\u0003\u039a\u01cd\u0000\u1042\u103c\u0001\u0000\u0000\u0000\u1042"+
		"\u103d\u0001\u0000\u0000\u0000\u1042\u103e\u0001\u0000\u0000\u0000\u1042"+
		"\u103f\u0001\u0000\u0000\u0000\u1042\u1040\u0001\u0000\u0000\u0000\u1042"+
		"\u1041\u0001\u0000\u0000\u0000\u1043\u03c7\u0001\u0000\u0000\u0000\u1044"+
		"\u1045\u00059\u0000\u0000\u1045\u1046\u0005\f\u0000\u0000\u1046\u1047"+
		"\u0003\u03a4\u01d2\u0000\u1047\u1048\u0005$\u0000\u0000\u1048\u1049\u0003"+
		"\u030a\u0185\u0000\u1049\u104a\u0005\u0016\u0000\u0000\u104a\u03c9\u0001"+
		"\u0000\u0000\u0000\u104b\u104c\u0005c\u0000\u0000\u104c\u104d\u0005\f"+
		"\u0000\u0000\u104d\u104e\u0003\u008eG\u0000\u104e\u104f\u0005\u0016\u0000"+
		"\u0000\u104f\u03cb\u0001\u0000\u0000\u0000\u1050\u1056\u0003\u03ce\u01e7"+
		"\u0000\u1051\u1056\u0003\u03d0\u01e8\u0000\u1052\u1056\u0003\u03d4\u01ea"+
		"\u0000\u1053\u1056\u0003\u03d2\u01e9\u0000\u1054\u1056\u0003\u03d6\u01eb"+
		"\u0000\u1055\u1050\u0001\u0000\u0000\u0000\u1055\u1051\u0001\u0000\u0000"+
		"\u0000\u1055\u1052\u0001\u0000\u0000\u0000\u1055\u1053\u0001\u0000\u0000"+
		"\u0000\u1055\u1054\u0001\u0000\u0000\u0000\u1056\u03cd\u0001\u0000\u0000"+
		"\u0000\u1057\u105f\u0005J\u0000\u0000\u1058\u1059\u0005Q\u0000\u0000\u1059"+
		"\u105b\u0005\f\u0000\u0000\u105a\u105c\u0003\u03d8\u01ec\u0000\u105b\u105a"+
		"\u0001\u0000\u0000\u0000\u105b\u105c\u0001\u0000\u0000\u0000\u105c\u105d"+
		"\u0001\u0000\u0000\u0000\u105d\u105f\u0005\u0016\u0000\u0000\u105e\u1057"+
		"\u0001\u0000\u0000\u0000\u105e\u1058\u0001\u0000\u0000\u0000\u105f\u03cf"+
		"\u0001\u0000\u0000\u0000\u1060\u1068\u0005N\u0000\u0000\u1061\u1062\u0005"+
		"\u011e\u0000\u0000\u1062\u1064\u0005\f\u0000\u0000\u1063\u1065\u0003\u03da"+
		"\u01ed\u0000\u1064\u1063\u0001\u0000\u0000\u0000\u1064\u1065\u0001\u0000"+
		"\u0000\u0000\u1065\u1066\u0001\u0000\u0000\u0000\u1066\u1068\u0005\u0016"+
		"\u0000\u0000\u1067\u1060\u0001\u0000\u0000\u0000\u1067\u1061\u0001\u0000"+
		"\u0000\u0000\u1068\u03d1\u0001\u0000\u0000\u0000\u1069\u106f\u0005\u00a4"+
		"\u0000\u0000\u106a\u106c\u0005\f\u0000\u0000\u106b\u106d\u0003\u03da\u01ed"+
		"\u0000\u106c\u106b\u0001\u0000\u0000\u0000\u106c\u106d\u0001\u0000\u0000"+
		"\u0000\u106d\u106e\u0001\u0000\u0000\u0000\u106e\u1070\u0005\u0016\u0000"+
		"\u0000\u106f\u106a\u0001\u0000\u0000\u0000\u106f\u1070\u0001\u0000\u0000"+
		"\u0000\u1070\u03d3\u0001\u0000\u0000\u0000\u1071\u1079\u0005O\u0000\u0000"+
		"\u1072\u1073\u0005\u011d\u0000\u0000\u1073\u1075\u0005\f\u0000\u0000\u1074"+
		"\u1076\u0003\u03dc\u01ee\u0000\u1075\u1074\u0001\u0000\u0000\u0000\u1075"+
		"\u1076\u0001\u0000\u0000\u0000\u1076\u1077\u0001\u0000\u0000\u0000\u1077"+
		"\u1079\u0005\u0016\u0000\u0000\u1078\u1071\u0001\u0000\u0000\u0000\u1078"+
		"\u1072\u0001\u0000\u0000\u0000\u1079\u03d5\u0001\u0000\u0000\u0000\u107a"+
		"\u1082\u0005\u00a5\u0000\u0000\u107b\u107c\u0005\u00a3\u0000\u0000\u107c"+
		"\u107e\u0005\f\u0000\u0000\u107d\u107f\u0003\u03dc\u01ee\u0000\u107e\u107d"+
		"\u0001\u0000\u0000\u0000\u107e\u107f\u0001\u0000\u0000\u0000\u107f\u1080"+
		"\u0001\u0000\u0000\u0000\u1080\u1082\u0005\u0016\u0000\u0000\u1081\u107a"+
		"\u0001\u0000\u0000\u0000\u1081\u107b\u0001\u0000\u0000\u0000\u1082\u03d7"+
		"\u0001\u0000\u0000\u0000\u1083\u1086\u0003\u03de\u01ef\u0000\u1084\u1086"+
		"\u0003\u03f4\u01fa\u0000\u1085\u1083\u0001\u0000\u0000\u0000\u1085\u1084"+
		"\u0001\u0000\u0000\u0000\u1086\u03d9\u0001\u0000\u0000\u0000\u1087\u108a"+
		"\u0003\u03e0\u01f0\u0000\u1088\u108a\u0003\u03f4\u01fa\u0000\u1089\u1087"+
		"\u0001\u0000\u0000\u0000\u1089\u1088\u0001\u0000\u0000\u0000\u108a\u03db"+
		"\u0001\u0000\u0000\u0000\u108b\u108e\u0003\u03e2\u01f1\u0000\u108c\u108e"+
		"\u0003\u03f4\u01fa\u0000\u108d\u108b\u0001\u0000\u0000\u0000\u108d\u108c"+
		"\u0001\u0000\u0000\u0000\u108e\u03dd\u0001\u0000\u0000\u0000\u108f\u1090"+
		"\u0003V+\u0000\u1090\u03df\u0001\u0000\u0000\u0000\u1091\u1092\u0003V"+
		"+\u0000\u1092\u03e1\u0001\u0000\u0000\u0000\u1093\u1094\u0003V+\u0000"+
		"\u1094\u03e3\u0001\u0000\u0000\u0000\u1095\u1096\u0005a\u0000\u0000\u1096"+
		"\u1097\u0005\f\u0000\u0000\u1097\u1098\u0003\u03a8\u01d4\u0000\u1098\u1099"+
		"\u0005\u0005\u0000\u0000\u1099\u109a\u0003\u03a8\u01d4\u0000\u109a\u109b"+
		"\u0005\u0016\u0000\u0000\u109b\u10a2\u0001\u0000\u0000\u0000\u109c\u109d"+
		"\u0005`\u0000\u0000\u109d\u109e\u0005\f\u0000\u0000\u109e\u109f\u0003"+
		"\u03e6\u01f3\u0000\u109f\u10a0\u0005\u0016\u0000\u0000\u10a0\u10a2\u0001"+
		"\u0000\u0000\u0000\u10a1\u1095\u0001\u0000\u0000\u0000\u10a1\u109c\u0001"+
		"\u0000\u0000\u0000\u10a2\u03e5\u0001\u0000\u0000\u0000\u10a3\u10a6\u0003"+
		"\u03e8\u01f4\u0000\u10a4\u10a6\u0003\u03f4\u01fa\u0000\u10a5\u10a3\u0001"+
		"\u0000\u0000\u0000\u10a5\u10a4\u0001\u0000\u0000\u0000\u10a6\u03e7\u0001"+
		"\u0000\u0000\u0000\u10a7\u10a8\u0003V+\u0000\u10a8\u03e9\u0001\u0000\u0000"+
		"\u0000\u10a9\u10aa\u0003\u0086C\u0000\u10aa\u10ac\u0005\f\u0000\u0000"+
		"\u10ab\u10ad\u0003\u018e\u00c7\u0000\u10ac\u10ab\u0001\u0000\u0000\u0000"+
		"\u10ac\u10ad\u0001\u0000\u0000\u0000\u10ad\u10ae\u0001\u0000\u0000\u0000"+
		"\u10ae\u10af\u0005\u0016\u0000\u0000\u10af\u03eb\u0001\u0000\u0000\u0000"+
		"\u10b0\u10b4\u0003\u03f2\u01f9\u0000\u10b1\u10b4\u0003\u03f4\u01fa\u0000"+
		"\u10b2\u10b4\u0003\u03f8\u01fc\u0000\u10b3\u10b0\u0001\u0000\u0000\u0000"+
		"\u10b3\u10b1\u0001\u0000\u0000\u0000\u10b3\u10b2\u0001\u0000\u0000\u0000"+
		"\u10b4\u03ed\u0001\u0000\u0000\u0000\u10b5\u10b6\u0007&\u0000\u0000\u10b6"+
		"\u03ef\u0001\u0000\u0000\u0000\u10b7\u10b8\u0007\'\u0000\u0000\u10b8\u03f1"+
		"\u0001\u0000\u0000\u0000\u10b9\u10bb\u0003\u0358\u01ac\u0000\u10ba\u10b9"+
		"\u0001\u0000\u0000\u0000\u10ba\u10bb\u0001\u0000\u0000\u0000\u10bb\u10bc"+
		"\u0001\u0000\u0000\u0000\u10bc\u10c5\u0005\u000b\u0000\u0000\u10bd\u10c2"+
		"\u0003\u03a4\u01d2\u0000\u10be\u10bf\u0005\u0005\u0000\u0000\u10bf\u10c1"+
		"\u0003\u03a4\u01d2\u0000\u10c0\u10be\u0001\u0000\u0000\u0000\u10c1\u10c4"+
		"\u0001\u0000\u0000\u0000\u10c2\u10c0\u0001\u0000\u0000\u0000\u10c2\u10c3"+
		"\u0001\u0000\u0000\u0000\u10c3\u10c6\u0001\u0000\u0000\u0000\u10c4\u10c2"+
		"\u0001\u0000\u0000\u0000\u10c5\u10bd\u0001\u0000\u0000\u0000\u10c5\u10c6"+
		"\u0001\u0000\u0000\u0000\u10c6\u10c7\u0001\u0000\u0000\u0000\u10c7\u10c8"+
		"\u0005\u0015\u0000\u0000\u10c8\u03f3\u0001\u0000\u0000\u0000\u10c9\u10cb"+
		"\u0005\u00d4\u0000\u0000\u10ca\u10c9\u0001\u0000\u0000\u0000\u10ca\u10cb"+
		"\u0001\u0000\u0000\u0000\u10cb\u10cc\u0001\u0000\u0000\u0000\u10cc\u10d5"+
		"\u0005\n\u0000\u0000\u10cd\u10d2\u0003\u03f6\u01fb\u0000\u10ce\u10cf\u0005"+
		"\u0005\u0000\u0000\u10cf\u10d1\u0003\u03f6\u01fb\u0000\u10d0\u10ce\u0001"+
		"\u0000\u0000\u0000\u10d1\u10d4\u0001\u0000\u0000\u0000\u10d2\u10d0\u0001"+
		"\u0000\u0000\u0000\u10d2\u10d3\u0001\u0000\u0000\u0000\u10d3\u10d6\u0001"+
		"\u0000\u0000\u0000\u10d4\u10d2\u0001\u0000\u0000\u0000\u10d5\u10cd\u0001"+
		"\u0000\u0000\u0000\u10d5\u10d6\u0001\u0000\u0000\u0000\u10d6\u10d7\u0001"+
		"\u0000\u0000\u0000\u10d7\u10d8\u0005\u0014\u0000\u0000\u10d8\u03f5\u0001"+
		"\u0000\u0000\u0000\u10d9\u10da\u0003\u008aE\u0000\u10da\u10db\u0005\u0004"+
		"\u0000\u0000\u10db\u10dc\u0003\u03a4\u01d2\u0000\u10dc\u03f7\u0001\u0000"+
		"\u0000\u0000\u10dd\u10de\u0005\u00c8\u0000\u0000\u10de\u10df\u0005\u000b"+
		"\u0000\u0000\u10df\u10e7\u0003\u03a8\u01d4\u0000\u10e0\u10e1\u0005\u0005"+
		"\u0000\u0000\u10e1\u10e2\u0003\u03a8\u01d4\u0000\u10e2\u10e3\u0005\u0005"+
		"\u0000\u0000\u10e3\u10e4\u0003\u03a8\u01d4\u0000\u10e4\u10e6\u0001\u0000"+
		"\u0000\u0000\u10e5\u10e0\u0001\u0000\u0000\u0000\u10e6\u10e9\u0001\u0000"+
		"\u0000\u0000\u10e7\u10e5\u0001\u0000\u0000\u0000\u10e7\u10e8\u0001\u0000"+
		"\u0000\u0000\u10e8\u10ea\u0001\u0000\u0000\u0000\u10e9\u10e7\u0001\u0000"+
		"\u0000\u0000\u10ea\u10eb\u0005\u0015\u0000\u0000\u10eb\u03f9\u0001\u0000"+
		"\u0000\u0000\u10ec\u10ef\u0003D\"\u0000\u10ed\u10ef\u0003\u03fc\u01fe"+
		"\u0000\u10ee\u10ec\u0001\u0000\u0000\u0000\u10ee\u10ed\u0001\u0000\u0000"+
		"\u0000\u10ef\u03fb\u0001\u0000\u0000\u0000\u10f0\u10f4\u0003\u00a2Q\u0000"+
		"\u10f1\u10f4\u0003\u03fe\u01ff\u0000\u10f2\u10f4\u0003\u0400\u0200\u0000"+
		"\u10f3\u10f0\u0001\u0000\u0000\u0000\u10f3\u10f1\u0001\u0000\u0000\u0000"+
		"\u10f3\u10f2\u0001\u0000\u0000\u0000\u10f4\u03fd\u0001\u0000\u0000\u0000"+
		"\u10f5\u10f7\u0003\u0358\u01ac\u0000\u10f6\u10f5\u0001\u0000\u0000\u0000"+
		"\u10f6\u10f7\u0001\u0000\u0000\u0000\u10f7\u10f8\u0001\u0000\u0000\u0000"+
		"\u10f8\u1101\u0005\u000b\u0000\u0000\u10f9\u10fe\u0003\u03fc\u01fe\u0000"+
		"\u10fa\u10fb\u0005\u0005\u0000\u0000\u10fb\u10fd\u0003\u03fc\u01fe\u0000"+
		"\u10fc\u10fa\u0001\u0000\u0000\u0000\u10fd\u1100\u0001\u0000\u0000\u0000"+
		"\u10fe\u10fc\u0001\u0000\u0000\u0000\u10fe\u10ff\u0001\u0000\u0000\u0000"+
		"\u10ff\u1102\u0001\u0000\u0000\u0000\u1100\u10fe\u0001\u0000\u0000\u0000"+
		"\u1101\u10f9\u0001\u0000\u0000\u0000\u1101\u1102\u0001\u0000\u0000\u0000"+
		"\u1102\u1103\u0001\u0000\u0000\u0000\u1103\u1104\u0005\u0015\u0000\u0000"+
		"\u1104\u03ff\u0001\u0000\u0000\u0000\u1105\u1107\u0005\u00d4\u0000\u0000"+
		"\u1106\u1105\u0001\u0000\u0000\u0000\u1106\u1107\u0001\u0000\u0000\u0000"+
		"\u1107\u1108\u0001\u0000\u0000\u0000\u1108\u1111\u0005\n\u0000\u0000\u1109"+
		"\u110e\u0003\u0402\u0201\u0000\u110a\u110b\u0005\u0005\u0000\u0000\u110b"+
		"\u110d\u0003\u0402\u0201\u0000\u110c\u110a\u0001\u0000\u0000\u0000\u110d"+
		"\u1110\u0001\u0000\u0000\u0000\u110e\u110c\u0001\u0000\u0000\u0000\u110e"+
		"\u110f\u0001\u0000\u0000\u0000\u110f\u1112\u0001\u0000\u0000\u0000\u1110"+
		"\u110e\u0001\u0000\u0000\u0000\u1111\u1109\u0001\u0000\u0000\u0000\u1111"+
		"\u1112\u0001\u0000\u0000\u0000\u1112\u1113\u0001\u0000\u0000\u0000\u1113"+
		"\u1114\u0005\u0014\u0000\u0000\u1114\u0401\u0001\u0000\u0000\u0000\u1115"+
		"\u1116\u0003\u008eG\u0000\u1116\u1117\u0005\u0004\u0000\u0000\u1117\u1118"+
		"\u0003\u03fc\u01fe\u0000\u1118\u0403\u0001\u0000\u0000\u0000\u1119\u111a"+
		"\u0007(\u0000\u0000\u111a\u0405\u0001\u0000\u0000\u0000\u01f8\u0408\u040e"+
		"\u0411\u0415\u041a\u041e\u0423\u0425\u0429\u042c\u0430\u0438\u043e\u044c"+
		"\u044f\u0456\u0463\u046a\u046d\u0472\u0478\u047b\u0483\u048a\u048f\u0495"+
		"\u04b3\u04c4\u04cc\u04d4\u04d9\u04e1\u050d\u051b\u0524\u0528\u0534\u053e"+
		"\u0546\u054c\u0550\u0555\u055d\u0561\u056f\u0577\u057d\u0582\u0585\u058c"+
		"\u0591\u0597\u059d\u05a1\u05a6\u05ad\u05b0\u05b8\u05bf\u05c2\u05ce\u05d1"+
		"\u05db\u05e5\u05f0\u05f5\u05f9\u0601\u0608\u0610\u0616\u061c\u0621\u0624"+
		"\u0629\u062c\u062f\u0633\u0636\u063a\u063e\u0641\u0644\u0647\u0653\u0658"+
		"\u065e\u0665\u066a\u066e\u0674\u0679\u067c\u0682\u0686\u068c\u0694\u0698"+
		"\u069d\u06a4\u06a8\u06ad\u06b1\u06b5\u06bb\u06c8\u06ce\u06da\u06e7\u06f2"+
		"\u06f7\u0702\u070c\u071e\u0723\u0727\u072b\u072f\u0731\u0737\u073c\u0743"+
		"\u0753\u0757\u075c\u0760\u0767\u076b\u077c\u0781\u0788\u0792\u079a\u079f"+
		"\u07ad\u07b0\u07b4\u07b7\u07bb\u07be\u07c4\u07c8\u07cb\u07cf\u07d6\u07db"+
		"\u07e2\u07e6\u07ea\u07ed\u07f0\u07f3\u07f6\u07f9\u07fb\u0802\u0807\u0813"+
		"\u081a\u0824\u0827\u082e\u0831\u0837\u0840\u0846\u084a\u0851\u0866\u0870"+
		"\u0875\u0879\u087c\u0880\u0883\u0887\u0891\u0894\u0898\u089b\u08a2\u08a6"+
		"\u08a9\u08b8\u08bc\u08c3\u08c7\u08ca\u08d0\u08d3\u08d6\u08de\u08e3\u08e6"+
		"\u08eb\u08ee\u08f3\u08f6\u08fb\u08fe\u0907\u0910\u091a\u0920\u0925\u0930"+
		"\u0934\u093b\u093e\u0941\u0944\u094f\u095d\u0966\u096f\u09a7\u09ab\u09ae"+
		"\u09b2\u09c3\u09cc\u09d1\u09d8\u09de\u09e6\u09ee\u09f8\u0a02\u0a09\u0a11"+
		"\u0a15\u0a1c\u0a28\u0a30\u0a34\u0a43\u0a68\u0a71\u0a7b\u0a81\u0a88\u0a8e"+
		"\u0a98\u0aa1\u0abd\u0ac7\u0ad4\u0ad9\u0ae7\u0aea\u0afc\u0b04\u0b0b\u0b18"+
		"\u0b1d\u0b20\u0b2a\u0b3f\u0b44\u0b49\u0b4d\u0b50\u0b55\u0b59\u0b5c\u0b65"+
		"\u0b6d\u0b71\u0b75\u0b78\u0b7e\u0b83\u0b8c\u0b95\u0bb7\u0bba\u0bbf\u0bd0"+
		"\u0bd8\u0bdb\u0be3\u0be6\u0bf1\u0c15\u0c19\u0c22\u0c27\u0c2e\u0c3e\u0c41"+
		"\u0c44\u0c48\u0c4b\u0c4f\u0c53\u0c56\u0c59\u0c5e\u0c62\u0c6a\u0c6f\u0c77"+
		"\u0c7a\u0c81\u0c83\u0c85\u0c90\u0c94\u0c9b\u0c9e\u0ca5\u0caa\u0cad\u0cb4"+
		"\u0cb7\u0cbe\u0cc1\u0cc3\u0ccd\u0cd1\u0cd5\u0cd9\u0cdd\u0ce1\u0ce5\u0ce9"+
		"\u0ced\u0cf1\u0cf8\u0cfb\u0cff\u0d03\u0d05\u0d09\u0d0d\u0d11\u0d15\u0d19"+
		"\u0d1d\u0d21\u0d28\u0d2b\u0d2f\u0d34\u0d36\u0d3a\u0d3e\u0d42\u0d46\u0d4a"+
		"\u0d4e\u0d53\u0d5a\u0d5d\u0d62\u0d64\u0d6b\u0d6f\u0d71\u0d79\u0d7d\u0d81"+
		"\u0d85\u0d89\u0d90\u0d94\u0d97\u0d9b\u0d9f\u0da2\u0da4\u0da8\u0daf\u0db6"+
		"\u0dbc\u0dbe\u0dc3\u0dc8\u0dcb\u0dcd\u0dd1\u0dd6\u0ddc\u0dde\u0de3\u0de9"+
		"\u0deb\u0def\u0df5\u0df9\u0dfc\u0e01\u0e05\u0e09\u0e0d\u0e11\u0e15\u0e18"+
		"\u0e1c\u0e20\u0e24\u0e27\u0e2b\u0e2e\u0e36\u0e3f\u0e44\u0e4b\u0e52\u0e58"+
		"\u0e61\u0e67\u0e6e\u0e73\u0e75\u0e7c\u0e84\u0e87\u0e8f\u0e92\u0e9b\u0e9e"+
		"\u0ea4\u0ea7\u0ead\u0eb4\u0ebc\u0ebe\u0ecb\u0ed1\u0ed4\u0eda\u0ee0\u0ee4"+
		"\u0eea\u0ef2\u0ef6\u0efa\u0f02\u0f0d\u0f0f\u0f25\u0f37\u0f42\u0f4e\u0f53"+
		"\u0f5e\u0f67\u0f6e\u0f70\u0f82\u0f90\u0f92\u0fa2\u0fb0\u0fb7\u0fd0\u0fd3"+
		"\u0fd6\u0fe0\u0fe9\u0fed\u0ffb\u100b\u1014\u1017\u101f\u1022\u1026\u102e"+
		"\u1042\u1055\u105b\u105e\u1064\u1067\u106c\u106f\u1075\u1078\u107e\u1081"+
		"\u1085\u1089\u108d\u10a1\u10a5\u10ac\u10b3\u10ba\u10c2\u10c5\u10ca\u10d2"+
		"\u10d5\u10e7\u10ee\u10f3\u10f6\u10fe\u1101\u1106\u110e\u1111";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}