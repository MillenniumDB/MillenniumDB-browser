// Generated from src/grammar/mql/MQLParser.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';
import MQLParserListener from './MQLParserListener.js';
const serializedATN = [4,1,106,862,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,1,0,1,0,1,0,1,0,1,0,1,
0,1,0,3,0,160,8,0,1,1,1,1,3,1,164,8,1,1,1,3,1,167,8,1,1,1,3,1,170,8,1,1,
1,1,1,1,2,5,2,175,8,2,10,2,12,2,178,9,2,1,3,1,3,1,3,3,3,183,8,3,1,4,1,4,
1,4,1,4,5,4,189,8,4,10,4,12,4,192,9,4,1,5,1,5,1,5,1,5,5,5,198,8,5,10,5,12,
5,201,9,5,1,6,1,6,3,6,205,8,6,1,6,5,6,208,8,6,10,6,12,6,211,9,6,1,6,3,6,
214,8,6,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,3,8,225,8,8,1,8,1,8,1,8,1,8,
1,8,1,8,3,8,233,8,8,1,8,1,8,1,8,3,8,238,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
1,10,1,10,1,10,1,10,5,10,251,8,10,10,10,12,10,254,9,10,3,10,256,8,10,1,10,
1,10,1,11,1,11,1,11,1,11,3,11,264,8,11,1,12,1,12,1,12,1,12,1,12,3,12,271,
8,12,1,13,1,13,5,13,275,8,13,10,13,12,13,278,9,13,1,13,1,13,1,14,1,14,1,
14,3,14,285,8,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,5,17,296,8,
17,10,17,12,17,299,9,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,
1,20,1,20,5,20,313,8,20,10,20,12,20,316,9,20,1,21,1,21,1,21,1,21,1,21,5,
21,323,8,21,10,21,12,21,326,9,21,1,22,1,22,3,22,330,8,22,1,22,1,22,1,22,
5,22,335,8,22,10,22,12,22,338,9,22,1,22,3,22,341,8,22,1,22,1,22,3,22,345,
8,22,1,22,1,22,3,22,349,8,22,3,22,351,8,22,1,23,1,23,1,23,1,23,3,23,357,
8,23,1,23,1,23,3,23,361,8,23,1,24,1,24,1,24,1,24,1,24,5,24,368,8,24,10,24,
12,24,371,9,24,3,24,373,8,24,1,25,1,25,3,25,377,8,25,1,26,1,26,1,26,5,26,
382,8,26,10,26,12,26,385,9,26,1,27,1,27,3,27,389,8,27,1,27,1,27,3,27,393,
8,27,3,27,395,8,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,3,30,405,8,30,
1,30,1,30,1,30,1,30,3,30,411,8,30,1,30,1,30,3,30,415,8,30,1,30,1,30,1,30,
3,30,420,8,30,1,30,1,30,3,30,424,8,30,1,30,3,30,427,8,30,1,30,1,30,3,30,
431,8,30,1,30,1,30,1,30,3,30,436,8,30,1,31,1,31,1,31,1,32,1,32,1,33,1,33,
3,33,445,8,33,1,33,3,33,448,8,33,1,33,1,33,1,33,1,33,3,33,454,8,33,1,33,
1,33,3,33,458,8,33,1,33,1,33,1,33,3,33,463,8,33,1,33,1,33,3,33,467,8,33,
1,33,1,33,3,33,471,8,33,1,33,1,33,3,33,475,8,33,3,33,477,8,33,1,34,1,34,
3,34,481,8,34,1,35,1,35,5,35,485,8,35,10,35,12,35,488,9,35,1,36,1,36,1,36,
1,36,1,36,1,37,1,37,1,37,5,37,498,8,37,10,37,12,37,501,9,37,1,38,1,38,1,
38,3,38,506,8,38,1,38,1,38,5,38,510,8,38,10,38,12,38,513,9,38,1,39,1,39,
1,39,3,39,518,8,39,1,39,3,39,521,8,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
3,39,530,8,39,1,39,3,39,533,8,39,1,39,1,39,1,39,1,39,1,39,3,39,540,8,39,
1,40,1,40,1,40,5,40,545,8,40,10,40,12,40,548,9,40,1,41,1,41,1,41,5,41,553,
8,41,10,41,12,41,556,9,41,1,42,3,42,559,8,42,1,42,1,42,3,42,563,8,42,1,42,
3,42,566,8,42,1,42,1,42,1,42,1,42,3,42,572,8,42,3,42,574,8,42,1,43,1,43,
1,43,1,43,1,43,1,43,1,43,1,43,3,43,584,8,43,1,44,1,44,3,44,588,8,44,1,44,
3,44,591,8,44,1,44,1,44,1,44,3,44,596,8,44,1,44,3,44,599,8,44,3,44,601,8,
44,1,45,1,45,3,45,605,8,45,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,3,47,
615,8,47,1,48,1,48,1,48,3,48,620,8,48,1,48,1,48,1,48,1,48,1,48,3,48,627,
8,48,1,48,3,48,630,8,48,1,49,1,49,3,49,634,8,49,1,49,3,49,637,8,49,1,49,
3,49,640,8,49,1,49,1,49,1,50,1,50,3,50,646,8,50,1,50,5,50,649,8,50,10,50,
12,50,652,9,50,1,50,3,50,655,8,50,1,50,1,50,1,51,1,51,1,51,1,51,5,51,663,
8,51,10,51,12,51,666,9,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,3,52,675,8,
52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,686,8,52,1,52,1,52,
5,52,690,8,52,10,52,12,52,693,9,52,1,52,1,52,1,52,1,52,3,52,699,8,52,1,53,
1,53,1,53,1,54,1,54,3,54,706,8,54,1,55,1,55,1,56,3,56,711,8,56,1,56,1,56,
1,57,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,3,58,724,8,58,1,59,1,59,1,59,
5,59,729,8,59,10,59,12,59,732,9,59,1,60,1,60,1,60,5,60,737,8,60,10,60,12,
60,740,9,60,1,61,1,61,1,61,3,61,745,8,61,1,61,1,61,1,61,3,61,750,8,61,1,
61,1,61,3,61,754,8,61,1,62,1,62,1,62,5,62,759,8,62,10,62,12,62,762,9,62,
1,63,1,63,1,63,5,63,767,8,63,10,63,12,63,770,9,63,1,64,1,64,1,64,1,64,1,
64,1,64,1,64,3,64,779,8,64,1,65,1,65,3,65,783,8,65,1,65,1,65,1,65,1,65,1,
65,1,65,1,65,3,65,792,8,65,1,66,1,66,1,66,1,66,1,66,1,66,3,66,800,8,66,1,
67,1,67,1,67,1,67,1,67,1,67,1,67,3,67,809,8,67,1,67,1,67,1,68,1,68,1,68,
1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,824,8,68,1,68,1,68,1,69,1,69,
1,69,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,71,1,71,1,
71,1,71,1,71,1,71,1,71,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,73,1,73,1,74,
1,74,1,75,1,75,1,75,0,0,76,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,
124,126,128,130,132,134,136,138,140,142,144,146,148,150,0,15,4,0,23,23,34,
34,47,47,49,49,3,0,5,5,40,41,59,59,2,0,7,7,17,17,2,0,3,3,6,6,4,0,1,1,55,
55,62,62,64,64,2,0,71,71,75,75,1,0,73,74,1,0,81,86,2,0,29,29,61,61,1,0,94,
95,1,0,77,79,2,0,88,88,91,92,2,0,39,39,48,48,5,0,9,9,26,26,30,30,52,52,60,
60,3,0,1,28,30,60,62,67,921,0,159,1,0,0,0,2,161,1,0,0,0,4,176,1,0,0,0,6,
182,1,0,0,0,8,184,1,0,0,0,10,193,1,0,0,0,12,202,1,0,0,0,14,217,1,0,0,0,16,
237,1,0,0,0,18,239,1,0,0,0,20,246,1,0,0,0,22,259,1,0,0,0,24,265,1,0,0,0,
26,272,1,0,0,0,28,281,1,0,0,0,30,286,1,0,0,0,32,289,1,0,0,0,34,292,1,0,0,
0,36,300,1,0,0,0,38,304,1,0,0,0,40,307,1,0,0,0,42,317,1,0,0,0,44,350,1,0,
0,0,46,352,1,0,0,0,48,362,1,0,0,0,50,374,1,0,0,0,52,378,1,0,0,0,54,394,1,
0,0,0,56,396,1,0,0,0,58,399,1,0,0,0,60,435,1,0,0,0,62,437,1,0,0,0,64,440,
1,0,0,0,66,476,1,0,0,0,68,478,1,0,0,0,70,482,1,0,0,0,72,489,1,0,0,0,74,494,
1,0,0,0,76,502,1,0,0,0,78,539,1,0,0,0,80,541,1,0,0,0,82,549,1,0,0,0,84,573,
1,0,0,0,86,583,1,0,0,0,88,600,1,0,0,0,90,604,1,0,0,0,92,606,1,0,0,0,94,614,
1,0,0,0,96,629,1,0,0,0,98,631,1,0,0,0,100,643,1,0,0,0,102,658,1,0,0,0,104,
698,1,0,0,0,106,700,1,0,0,0,108,705,1,0,0,0,110,707,1,0,0,0,112,710,1,0,
0,0,114,714,1,0,0,0,116,723,1,0,0,0,118,725,1,0,0,0,120,733,1,0,0,0,122,
753,1,0,0,0,124,755,1,0,0,0,126,763,1,0,0,0,128,778,1,0,0,0,130,791,1,0,
0,0,132,799,1,0,0,0,134,801,1,0,0,0,136,812,1,0,0,0,138,827,1,0,0,0,140,
834,1,0,0,0,142,841,1,0,0,0,144,848,1,0,0,0,146,855,1,0,0,0,148,857,1,0,
0,0,150,859,1,0,0,0,152,160,3,2,1,0,153,160,3,26,13,0,154,160,3,8,4,0,155,
160,3,18,9,0,156,157,3,24,12,0,157,158,5,0,0,1,158,160,1,0,0,0,159,152,1,
0,0,0,159,153,1,0,0,0,159,154,1,0,0,0,159,155,1,0,0,0,159,156,1,0,0,0,160,
1,1,0,0,0,161,163,3,4,2,0,162,164,3,38,19,0,163,162,1,0,0,0,163,164,1,0,
0,0,164,166,1,0,0,0,165,167,3,40,20,0,166,165,1,0,0,0,166,167,1,0,0,0,167,
169,1,0,0,0,168,170,3,42,21,0,169,168,1,0,0,0,169,170,1,0,0,0,170,171,1,
0,0,0,171,172,3,44,22,0,172,3,1,0,0,0,173,175,3,6,3,0,174,173,1,0,0,0,175,
178,1,0,0,0,176,174,1,0,0,0,176,177,1,0,0,0,177,5,1,0,0,0,178,176,1,0,0,
0,179,183,3,30,15,0,180,183,3,46,23,0,181,183,3,32,16,0,182,179,1,0,0,0,
182,180,1,0,0,0,182,181,1,0,0,0,183,7,1,0,0,0,184,185,5,25,0,0,185,190,3,
10,5,0,186,187,5,102,0,0,187,189,3,10,5,0,188,186,1,0,0,0,189,192,1,0,0,
0,190,188,1,0,0,0,190,191,1,0,0,0,191,9,1,0,0,0,192,190,1,0,0,0,193,199,
3,12,6,0,194,195,3,16,8,0,195,196,3,12,6,0,196,198,1,0,0,0,197,194,1,0,0,
0,198,201,1,0,0,0,199,197,1,0,0,0,199,200,1,0,0,0,200,11,1,0,0,0,201,199,
1,0,0,0,202,204,5,96,0,0,203,205,3,14,7,0,204,203,1,0,0,0,204,205,1,0,0,
0,205,209,1,0,0,0,206,208,5,73,0,0,207,206,1,0,0,0,208,211,1,0,0,0,209,207,
1,0,0,0,209,210,1,0,0,0,210,213,1,0,0,0,211,209,1,0,0,0,212,214,3,102,51,
0,213,212,1,0,0,0,213,214,1,0,0,0,214,215,1,0,0,0,215,216,5,97,0,0,216,13,
1,0,0,0,217,218,3,108,54,0,218,15,1,0,0,0,219,220,5,85,0,0,220,221,5,95,
0,0,221,222,5,100,0,0,222,224,5,73,0,0,223,225,3,102,51,0,224,223,1,0,0,
0,224,225,1,0,0,0,225,226,1,0,0,0,226,227,5,101,0,0,227,238,5,95,0,0,228,
229,5,95,0,0,229,230,5,100,0,0,230,232,5,73,0,0,231,233,3,102,51,0,232,231,
1,0,0,0,232,233,1,0,0,0,233,234,1,0,0,0,234,235,5,101,0,0,235,236,5,95,0,
0,236,238,5,86,0,0,237,219,1,0,0,0,237,228,1,0,0,0,238,17,1,0,0,0,239,240,
5,14,0,0,240,241,3,108,54,0,241,242,5,24,0,0,242,243,5,76,0,0,243,244,5,
65,0,0,244,245,3,20,10,0,245,19,1,0,0,0,246,255,5,98,0,0,247,252,3,22,11,
0,248,249,5,102,0,0,249,251,3,22,11,0,250,248,1,0,0,0,251,254,1,0,0,0,252,
250,1,0,0,0,252,253,1,0,0,0,253,256,1,0,0,0,254,252,1,0,0,0,255,247,1,0,
0,0,255,256,1,0,0,0,256,257,1,0,0,0,257,258,5,99,0,0,258,21,1,0,0,0,259,
263,5,76,0,0,260,261,5,87,0,0,261,264,3,116,58,0,262,264,3,110,55,0,263,
260,1,0,0,0,263,262,1,0,0,0,264,23,1,0,0,0,265,270,5,54,0,0,266,271,1,0,
0,0,267,268,3,108,54,0,268,269,5,24,0,0,269,271,1,0,0,0,270,266,1,0,0,0,
270,267,1,0,0,0,271,25,1,0,0,0,272,276,5,16,0,0,273,275,3,28,14,0,274,273,
1,0,0,0,275,278,1,0,0,0,276,274,1,0,0,0,276,277,1,0,0,0,277,279,1,0,0,0,
278,276,1,0,0,0,279,280,3,94,47,0,280,27,1,0,0,0,281,284,7,0,0,0,282,283,
5,37,0,0,283,285,5,77,0,0,284,282,1,0,0,0,284,285,1,0,0,0,285,29,1,0,0,0,
286,287,5,39,0,0,287,288,3,70,35,0,288,31,1,0,0,0,289,290,5,36,0,0,290,291,
3,34,17,0,291,33,1,0,0,0,292,297,3,36,18,0,293,294,5,102,0,0,294,296,3,36,
18,0,295,293,1,0,0,0,296,299,1,0,0,0,297,295,1,0,0,0,297,298,1,0,0,0,298,
35,1,0,0,0,299,297,1,0,0,0,300,301,5,75,0,0,301,302,5,87,0,0,302,303,3,118,
59,0,303,37,1,0,0,0,304,305,5,66,0,0,305,306,3,118,59,0,306,39,1,0,0,0,307,
308,5,31,0,0,308,309,5,8,0,0,309,314,3,68,34,0,310,311,5,102,0,0,311,313,
3,68,34,0,312,310,1,0,0,0,313,316,1,0,0,0,314,312,1,0,0,0,314,315,1,0,0,
0,315,41,1,0,0,0,316,314,1,0,0,0,317,318,5,45,0,0,318,319,5,8,0,0,319,324,
3,66,33,0,320,321,5,102,0,0,321,323,3,66,33,0,322,320,1,0,0,0,323,326,1,
0,0,0,324,322,1,0,0,0,324,325,1,0,0,0,325,43,1,0,0,0,326,324,1,0,0,0,327,
329,5,58,0,0,328,330,5,19,0,0,329,328,1,0,0,0,329,330,1,0,0,0,330,331,1,
0,0,0,331,336,3,60,30,0,332,333,5,102,0,0,333,335,3,60,30,0,334,332,1,0,
0,0,335,338,1,0,0,0,336,334,1,0,0,0,336,337,1,0,0,0,337,340,1,0,0,0,338,
336,1,0,0,0,339,341,3,54,27,0,340,339,1,0,0,0,340,341,1,0,0,0,341,351,1,
0,0,0,342,344,5,58,0,0,343,345,5,19,0,0,344,343,1,0,0,0,344,345,1,0,0,0,
345,346,1,0,0,0,346,348,5,91,0,0,347,349,3,54,27,0,348,347,1,0,0,0,348,349,
1,0,0,0,349,351,1,0,0,0,350,327,1,0,0,0,350,342,1,0,0,0,351,45,1,0,0,0,352,
353,5,10,0,0,353,354,3,108,54,0,354,356,5,96,0,0,355,357,3,52,26,0,356,355,
1,0,0,0,356,357,1,0,0,0,357,358,1,0,0,0,358,360,5,97,0,0,359,361,3,48,24,
0,360,359,1,0,0,0,360,361,1,0,0,0,361,47,1,0,0,0,362,372,5,67,0,0,363,373,
5,91,0,0,364,369,3,50,25,0,365,366,5,102,0,0,366,368,3,50,25,0,367,365,1,
0,0,0,368,371,1,0,0,0,369,367,1,0,0,0,369,370,1,0,0,0,370,373,1,0,0,0,371,
369,1,0,0,0,372,363,1,0,0,0,372,364,1,0,0,0,373,49,1,0,0,0,374,376,5,75,
0,0,375,377,3,62,31,0,376,375,1,0,0,0,376,377,1,0,0,0,377,51,1,0,0,0,378,
383,3,118,59,0,379,380,5,102,0,0,380,382,3,118,59,0,381,379,1,0,0,0,382,
385,1,0,0,0,383,381,1,0,0,0,383,384,1,0,0,0,384,53,1,0,0,0,385,383,1,0,0,
0,386,388,3,56,28,0,387,389,3,58,29,0,388,387,1,0,0,0,388,389,1,0,0,0,389,
395,1,0,0,0,390,392,3,58,29,0,391,393,3,56,28,0,392,391,1,0,0,0,392,393,
1,0,0,0,393,395,1,0,0,0,394,386,1,0,0,0,394,390,1,0,0,0,395,55,1,0,0,0,396,
397,5,37,0,0,397,398,5,77,0,0,398,57,1,0,0,0,399,400,5,43,0,0,400,401,5,
77,0,0,401,59,1,0,0,0,402,404,5,75,0,0,403,405,5,72,0,0,404,403,1,0,0,0,
404,405,1,0,0,0,405,436,1,0,0,0,406,407,3,64,32,0,407,408,5,96,0,0,408,410,
5,75,0,0,409,411,5,72,0,0,410,409,1,0,0,0,410,411,1,0,0,0,411,412,1,0,0,
0,412,414,5,97,0,0,413,415,3,62,31,0,414,413,1,0,0,0,414,415,1,0,0,0,415,
436,1,0,0,0,416,417,5,13,0,0,417,419,5,96,0,0,418,420,5,19,0,0,419,418,1,
0,0,0,419,420,1,0,0,0,420,426,1,0,0,0,421,423,5,75,0,0,422,424,5,72,0,0,
423,422,1,0,0,0,423,424,1,0,0,0,424,427,1,0,0,0,425,427,5,91,0,0,426,421,
1,0,0,0,426,425,1,0,0,0,427,428,1,0,0,0,428,430,5,97,0,0,429,431,3,62,31,
0,430,429,1,0,0,0,430,431,1,0,0,0,431,436,1,0,0,0,432,433,3,118,59,0,433,
434,3,62,31,0,434,436,1,0,0,0,435,402,1,0,0,0,435,406,1,0,0,0,435,416,1,
0,0,0,435,432,1,0,0,0,436,61,1,0,0,0,437,438,5,4,0,0,438,439,5,75,0,0,439,
63,1,0,0,0,440,441,7,1,0,0,441,65,1,0,0,0,442,444,5,75,0,0,443,445,5,72,
0,0,444,443,1,0,0,0,444,445,1,0,0,0,445,447,1,0,0,0,446,448,7,2,0,0,447,
446,1,0,0,0,447,448,1,0,0,0,448,477,1,0,0,0,449,450,3,64,32,0,450,451,5,
96,0,0,451,453,5,75,0,0,452,454,5,72,0,0,453,452,1,0,0,0,453,454,1,0,0,0,
454,455,1,0,0,0,455,457,5,97,0,0,456,458,7,2,0,0,457,456,1,0,0,0,457,458,
1,0,0,0,458,477,1,0,0,0,459,460,5,13,0,0,460,462,5,96,0,0,461,463,5,19,0,
0,462,461,1,0,0,0,462,463,1,0,0,0,463,464,1,0,0,0,464,466,5,75,0,0,465,467,
5,72,0,0,466,465,1,0,0,0,466,467,1,0,0,0,467,468,1,0,0,0,468,470,5,97,0,
0,469,471,7,2,0,0,470,469,1,0,0,0,470,471,1,0,0,0,471,477,1,0,0,0,472,474,
3,118,59,0,473,475,7,2,0,0,474,473,1,0,0,0,474,475,1,0,0,0,475,477,1,0,0,
0,476,442,1,0,0,0,476,449,1,0,0,0,476,459,1,0,0,0,476,472,1,0,0,0,477,67,
1,0,0,0,478,480,5,75,0,0,479,481,5,72,0,0,480,479,1,0,0,0,480,481,1,0,0,
0,481,69,1,0,0,0,482,486,3,74,37,0,483,485,3,72,36,0,484,483,1,0,0,0,485,
488,1,0,0,0,486,484,1,0,0,0,486,487,1,0,0,0,487,71,1,0,0,0,488,486,1,0,0,
0,489,490,5,44,0,0,490,491,5,98,0,0,491,492,3,70,35,0,492,493,5,99,0,0,493,
73,1,0,0,0,494,499,3,76,38,0,495,496,5,102,0,0,496,498,3,76,38,0,497,495,
1,0,0,0,498,501,1,0,0,0,499,497,1,0,0,0,499,500,1,0,0,0,500,75,1,0,0,0,501,
499,1,0,0,0,502,511,3,90,45,0,503,506,3,96,48,0,504,506,3,78,39,0,505,503,
1,0,0,0,505,504,1,0,0,0,506,507,1,0,0,0,507,508,3,90,45,0,508,510,1,0,0,
0,509,505,1,0,0,0,510,513,1,0,0,0,511,509,1,0,0,0,511,512,1,0,0,0,512,77,
1,0,0,0,513,511,1,0,0,0,514,515,5,81,0,0,515,517,5,100,0,0,516,518,3,88,
44,0,517,516,1,0,0,0,517,518,1,0,0,0,518,520,1,0,0,0,519,521,5,75,0,0,520,
519,1,0,0,0,520,521,1,0,0,0,521,522,1,0,0,0,522,523,3,80,40,0,523,524,5,
101,0,0,524,525,5,87,0,0,525,540,1,0,0,0,526,527,5,87,0,0,527,529,5,100,
0,0,528,530,3,88,44,0,529,528,1,0,0,0,529,530,1,0,0,0,530,532,1,0,0,0,531,
533,5,75,0,0,532,531,1,0,0,0,532,533,1,0,0,0,533,534,1,0,0,0,534,535,3,80,
40,0,535,536,5,101,0,0,536,537,5,87,0,0,537,538,5,86,0,0,538,540,1,0,0,0,
539,514,1,0,0,0,539,526,1,0,0,0,540,79,1,0,0,0,541,546,3,82,41,0,542,543,
5,89,0,0,543,545,3,82,41,0,544,542,1,0,0,0,545,548,1,0,0,0,546,544,1,0,0,
0,546,547,1,0,0,0,547,81,1,0,0,0,548,546,1,0,0,0,549,554,3,84,42,0,550,551,
5,88,0,0,551,553,3,84,42,0,552,550,1,0,0,0,553,556,1,0,0,0,554,552,1,0,0,
0,554,555,1,0,0,0,555,83,1,0,0,0,556,554,1,0,0,0,557,559,5,90,0,0,558,557,
1,0,0,0,558,559,1,0,0,0,559,560,1,0,0,0,560,562,5,73,0,0,561,563,3,86,43,
0,562,561,1,0,0,0,562,563,1,0,0,0,563,574,1,0,0,0,564,566,5,90,0,0,565,564,
1,0,0,0,565,566,1,0,0,0,566,567,1,0,0,0,567,568,5,96,0,0,568,569,3,80,40,
0,569,571,5,97,0,0,570,572,3,86,43,0,571,570,1,0,0,0,571,572,1,0,0,0,572,
574,1,0,0,0,573,558,1,0,0,0,573,565,1,0,0,0,574,85,1,0,0,0,575,584,5,91,
0,0,576,584,5,94,0,0,577,584,5,93,0,0,578,579,5,98,0,0,579,580,5,77,0,0,
580,581,5,102,0,0,581,582,5,77,0,0,582,584,5,99,0,0,583,575,1,0,0,0,583,
576,1,0,0,0,583,577,1,0,0,0,583,578,1,0,0,0,584,87,1,0,0,0,585,587,7,3,0,
0,586,588,5,53,0,0,587,586,1,0,0,0,587,588,1,0,0,0,588,590,1,0,0,0,589,591,
7,4,0,0,590,589,1,0,0,0,590,591,1,0,0,0,591,601,1,0,0,0,592,593,5,53,0,0,
593,595,5,77,0,0,594,596,5,32,0,0,595,594,1,0,0,0,595,596,1,0,0,0,596,598,
1,0,0,0,597,599,7,4,0,0,598,597,1,0,0,0,598,599,1,0,0,0,599,601,1,0,0,0,
600,585,1,0,0,0,600,592,1,0,0,0,601,89,1,0,0,0,602,605,3,92,46,0,603,605,
3,100,50,0,604,602,1,0,0,0,604,603,1,0,0,0,605,91,1,0,0,0,606,607,5,96,0,
0,607,608,3,94,47,0,608,609,5,97,0,0,609,93,1,0,0,0,610,615,3,108,54,0,611,
615,5,70,0,0,612,615,5,71,0,0,613,615,3,116,58,0,614,610,1,0,0,0,614,611,
1,0,0,0,614,612,1,0,0,0,614,613,1,0,0,0,615,95,1,0,0,0,616,619,5,85,0,0,
617,618,5,95,0,0,618,620,3,98,49,0,619,617,1,0,0,0,619,620,1,0,0,0,620,621,
1,0,0,0,621,630,5,95,0,0,622,626,5,95,0,0,623,624,3,98,49,0,624,625,5,95,
0,0,625,627,1,0,0,0,626,623,1,0,0,0,626,627,1,0,0,0,627,628,1,0,0,0,628,
630,5,86,0,0,629,616,1,0,0,0,629,622,1,0,0,0,630,97,1,0,0,0,631,633,5,100,
0,0,632,634,7,5,0,0,633,632,1,0,0,0,633,634,1,0,0,0,634,636,1,0,0,0,635,
637,7,6,0,0,636,635,1,0,0,0,636,637,1,0,0,0,637,639,1,0,0,0,638,640,3,102,
51,0,639,638,1,0,0,0,639,640,1,0,0,0,640,641,1,0,0,0,641,642,5,101,0,0,642,
99,1,0,0,0,643,645,5,96,0,0,644,646,5,75,0,0,645,644,1,0,0,0,645,646,1,0,
0,0,646,650,1,0,0,0,647,649,5,73,0,0,648,647,1,0,0,0,649,652,1,0,0,0,650,
648,1,0,0,0,650,651,1,0,0,0,651,654,1,0,0,0,652,650,1,0,0,0,653,655,3,102,
51,0,654,653,1,0,0,0,654,655,1,0,0,0,655,656,1,0,0,0,656,657,5,97,0,0,657,
101,1,0,0,0,658,659,5,98,0,0,659,664,3,104,52,0,660,661,5,102,0,0,661,663,
3,104,52,0,662,660,1,0,0,0,663,666,1,0,0,0,664,662,1,0,0,0,664,665,1,0,0,
0,665,667,1,0,0,0,666,664,1,0,0,0,667,668,5,99,0,0,668,103,1,0,0,0,669,674,
3,108,54,0,670,671,5,103,0,0,671,675,3,116,58,0,672,675,5,68,0,0,673,675,
5,69,0,0,674,670,1,0,0,0,674,672,1,0,0,0,674,673,1,0,0,0,675,699,1,0,0,0,
676,677,3,108,54,0,677,678,5,73,0,0,678,679,5,96,0,0,679,680,5,76,0,0,680,
681,5,97,0,0,681,699,1,0,0,0,682,683,3,108,54,0,683,685,5,28,0,0,684,686,
5,51,0,0,685,684,1,0,0,0,685,686,1,0,0,0,686,687,1,0,0,0,687,691,3,148,74,
0,688,690,3,106,53,0,689,688,1,0,0,0,690,693,1,0,0,0,691,689,1,0,0,0,691,
692,1,0,0,0,692,699,1,0,0,0,693,691,1,0,0,0,694,695,3,108,54,0,695,696,7,
7,0,0,696,697,3,116,58,0,697,699,1,0,0,0,698,669,1,0,0,0,698,676,1,0,0,0,
698,682,1,0,0,0,698,694,1,0,0,0,699,105,1,0,0,0,700,701,5,46,0,0,701,702,
3,148,74,0,702,107,1,0,0,0,703,706,5,80,0,0,704,706,3,150,75,0,705,703,1,
0,0,0,705,704,1,0,0,0,706,109,1,0,0,0,707,708,7,8,0,0,708,111,1,0,0,0,709,
711,7,9,0,0,710,709,1,0,0,0,710,711,1,0,0,0,711,712,1,0,0,0,712,713,7,10,
0,0,713,113,1,0,0,0,714,715,3,108,54,0,715,716,5,96,0,0,716,717,5,76,0,0,
717,718,5,97,0,0,718,115,1,0,0,0,719,724,3,112,56,0,720,724,5,76,0,0,721,
724,3,110,55,0,722,724,3,114,57,0,723,719,1,0,0,0,723,720,1,0,0,0,723,721,
1,0,0,0,723,722,1,0,0,0,724,117,1,0,0,0,725,730,3,120,60,0,726,727,5,46,
0,0,727,729,3,120,60,0,728,726,1,0,0,0,729,732,1,0,0,0,730,728,1,0,0,0,730,
731,1,0,0,0,731,119,1,0,0,0,732,730,1,0,0,0,733,738,3,122,61,0,734,735,5,
2,0,0,735,737,3,122,61,0,736,734,1,0,0,0,737,740,1,0,0,0,738,736,1,0,0,0,
738,739,1,0,0,0,739,121,1,0,0,0,740,738,1,0,0,0,741,744,3,124,62,0,742,743,
7,7,0,0,743,745,3,124,62,0,744,742,1,0,0,0,744,745,1,0,0,0,745,754,1,0,0,
0,746,747,3,124,62,0,747,749,5,28,0,0,748,750,5,51,0,0,749,748,1,0,0,0,749,
750,1,0,0,0,750,751,1,0,0,0,751,752,3,148,74,0,752,754,1,0,0,0,753,741,1,
0,0,0,753,746,1,0,0,0,754,123,1,0,0,0,755,760,3,126,63,0,756,757,7,9,0,0,
757,759,3,126,63,0,758,756,1,0,0,0,759,762,1,0,0,0,760,758,1,0,0,0,760,761,
1,0,0,0,761,125,1,0,0,0,762,760,1,0,0,0,763,768,3,128,64,0,764,765,7,11,
0,0,765,767,3,128,64,0,766,764,1,0,0,0,767,770,1,0,0,0,768,766,1,0,0,0,768,
769,1,0,0,0,769,127,1,0,0,0,770,768,1,0,0,0,771,772,5,51,0,0,772,779,3,128,
64,0,773,779,3,130,65,0,774,775,5,94,0,0,775,779,3,128,64,0,776,777,5,95,
0,0,777,779,3,128,64,0,778,771,1,0,0,0,778,773,1,0,0,0,778,774,1,0,0,0,778,
776,1,0,0,0,779,129,1,0,0,0,780,782,5,75,0,0,781,783,5,72,0,0,782,781,1,
0,0,0,782,783,1,0,0,0,783,792,1,0,0,0,784,792,3,116,58,0,785,792,3,94,47,
0,786,787,5,96,0,0,787,788,3,118,59,0,788,789,5,97,0,0,789,792,1,0,0,0,790,
792,3,132,66,0,791,780,1,0,0,0,791,784,1,0,0,0,791,785,1,0,0,0,791,786,1,
0,0,0,791,790,1,0,0,0,792,131,1,0,0,0,793,800,3,134,67,0,794,800,3,136,68,
0,795,800,3,138,69,0,796,800,3,140,70,0,797,800,3,142,71,0,798,800,3,144,
72,0,799,793,1,0,0,0,799,794,1,0,0,0,799,795,1,0,0,0,799,796,1,0,0,0,799,
797,1,0,0,0,799,798,1,0,0,0,800,133,1,0,0,0,801,802,5,57,0,0,802,803,5,96,
0,0,803,804,3,118,59,0,804,805,5,102,0,0,805,808,3,118,59,0,806,807,5,102,
0,0,807,809,3,118,59,0,808,806,1,0,0,0,808,809,1,0,0,0,809,810,1,0,0,0,810,
811,5,97,0,0,811,135,1,0,0,0,812,813,5,56,0,0,813,814,5,96,0,0,814,815,5,
76,0,0,815,816,5,102,0,0,816,817,5,76,0,0,817,818,5,102,0,0,818,819,3,146,
73,0,819,820,5,102,0,0,820,823,5,75,0,0,821,822,5,102,0,0,822,824,5,75,0,
0,823,821,1,0,0,0,823,824,1,0,0,0,824,825,1,0,0,0,825,826,5,97,0,0,826,137,
1,0,0,0,827,828,5,12,0,0,828,829,5,96,0,0,829,830,3,118,59,0,830,831,5,102,
0,0,831,832,3,118,59,0,832,833,5,97,0,0,833,139,1,0,0,0,834,835,5,11,0,0,
835,836,5,96,0,0,836,837,3,118,59,0,837,838,5,102,0,0,838,839,3,118,59,0,
839,840,5,97,0,0,840,141,1,0,0,0,841,842,5,38,0,0,842,843,5,96,0,0,843,844,
3,118,59,0,844,845,5,102,0,0,845,846,3,118,59,0,846,847,5,97,0,0,847,143,
1,0,0,0,848,849,5,21,0,0,849,850,5,96,0,0,850,851,3,118,59,0,851,852,5,102,
0,0,852,853,3,118,59,0,853,854,5,97,0,0,854,145,1,0,0,0,855,856,7,12,0,0,
856,147,1,0,0,0,857,858,7,13,0,0,858,149,1,0,0,0,859,860,7,14,0,0,860,151,
1,0,0,0,110,159,163,166,169,176,182,190,199,204,209,213,224,232,237,252,
255,263,270,276,284,297,314,324,329,336,340,344,348,350,356,360,369,372,
376,383,388,392,394,404,410,414,419,423,426,430,435,444,447,453,457,462,
466,470,474,476,480,486,499,505,511,517,520,529,532,539,546,554,558,562,
565,571,573,583,587,590,595,598,600,604,614,619,626,629,633,636,639,645,
650,654,664,674,685,691,698,705,710,723,730,738,744,749,753,760,768,778,
782,791,799,808,823];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class MQLParser extends antlr4.Parser {

    static grammarFileName = "MQLParser.g4";
    static literalNames = [ null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, "'false'", null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, "'true'", 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, "'<='", "'>='", "'=='", "'!='", 
                            "'<'", "'>'", "'='", "'/'", "'|'", "'^'", "'*'", 
                            "'%'", "'?'", "'+'", "'-'", "'('", "')'", "'{'", 
                            "'}'", "'['", "']'", "','", "':'" ];
    static symbolicNames = [ null, "K_ACYCLIC", "K_AND", "K_ANY", "K_AS", 
                             "K_AVG", "K_ALL", "K_ASC", "K_BY", "K_BOOL", 
                             "K_CALL", "K_COSINE_DISTANCE", "K_COSINE_SIMILARITY", 
                             "K_COUNT", "K_CREATE", "K_DELETE", "K_DESCRIBE", 
                             "K_DESC", "K_DIMENSIONS", "K_DISTINCT", "K_EDGE", 
                             "K_EUCLIDEAN_DISTANCE", "K_FROM", "K_INCOMING", 
                             "K_INDEX", "K_INSERT", "K_INTEGER", "K_INTO", 
                             "K_IS", "K_FALSE", "K_FLOAT", "K_GROUP", "K_GROUPS", 
                             "K_IDENTITY", "K_LABELS", "K_LABEL", "K_LET", 
                             "K_LIMIT", "K_MANHATTAN_DISTANCE", "K_MATCH", 
                             "K_MAX", "K_MIN", "K_OBJECTS", "K_OFFSET", 
                             "K_OPTIONAL", "K_ORDER", "K_OR", "K_OUTGOING", 
                             "K_PREFIX", "K_PROPERTIES", "K_PROPERTY", "K_NOT", 
                             "K_NULL", "K_SHORTEST", "K_SHOW", "K_SIMPLE", 
                             "K_TEXT_SEARCH", "K_REGEX", "K_RETURN", "K_SUM", 
                             "K_STRING", "K_TRUE", "K_TRAILS", "K_VALUES", 
                             "K_WALKS", "K_WITH", "K_WHERE", "K_YIELD", 
                             "TRUE_PROP", "FALSE_PROP", "ANON_ID", "EDGE_ID", 
                             "KEY", "TYPE", "TYPE_VAR", "VARIABLE", "STRING", 
                             "UNSIGNED_INTEGER", "UNSIGNED_FLOAT", "UNSIGNED_SCIENTIFIC_NOTATION", 
                             "NAME", "LEQ", "GEQ", "EQ", "NEQ", "LT", "GT", 
                             "SINGLE_EQ", "PATH_SEQUENCE", "PATH_ALTERNATIVE", 
                             "PATH_NEGATION", "STAR", "PERCENT", "QUESTION_MARK", 
                             "PLUS", "MINUS", "L_PAR", "R_PAR", "LCURLY_BRACKET", 
                             "RCURLY_BRACKET", "LSQUARE_BRACKET", "RSQUARE_BRACKET", 
                             "COMMA", "COLON", "WHITE_SPACE", "SINGLE_LINE_COMMENT", 
                             "UNRECOGNIZED" ];
    static ruleNames = [ "root", "matchQuery", "primitiveStatementList", 
                         "primitiveStatement", "insertPatterns", "insertLinearPattern", 
                         "insertPlainNode", "insertPlainNodeInside", "insertPlainEdge", 
                         "createIndexQuery", "createIndexOptions", "createIndexOption", 
                         "showQuery", "describeQuery", "describeFlag", "matchStatement", 
                         "letStatement", "letDefinitionList", "letDefinition", 
                         "whereStatement", "groupByStatement", "orderByStatement", 
                         "returnStatement", "callStatement", "yieldStatement", 
                         "yieldItem", "callArguments", "limitOffsetClauses", 
                         "limitClause", "offsetClause", "returnItem", "alias", 
                         "aggregateFunc", "orderByItem", "groupByItem", 
                         "graphPattern", "optionalPattern", "basicPattern", 
                         "linearPattern", "path", "pathAlternatives", "pathSequence", 
                         "pathAtom", "pathSuffix", "pathType", "node", "fixedNode", 
                         "fixedNodeInside", "edge", "edgeInside", "varNode", 
                         "properties", "property", "conditionalOrType", 
                         "identifier", "boolValue", "numericValue", "datatypeValue", 
                         "value", "conditionalOrExpr", "conditionalAndExpr", 
                         "comparisonExpr", "additiveExpr", "multiplicativeExpr", 
                         "unaryExpr", "atomicExpr", "function", "regex", 
                         "textSearch", "cosineSimilarity", "cosineDistance", 
                         "manhattanDistance", "euclideanDistance", "textSearchIndexMode", 
                         "exprTypename", "keyword" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = MQLParser.ruleNames;
        this.literalNames = MQLParser.literalNames;
        this.symbolicNames = MQLParser.symbolicNames;
    }



	root() {
	    let localctx = new RootContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, MQLParser.RULE_root);
	    try {
	        this.state = 159;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 10:
	        case 31:
	        case 36:
	        case 39:
	        case 45:
	        case 58:
	        case 66:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 152;
	            this.matchQuery();
	            break;
	        case 16:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 153;
	            this.describeQuery();
	            break;
	        case 25:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 154;
	            this.insertPatterns();
	            break;
	        case 14:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 155;
	            this.createIndexQuery();
	            break;
	        case 54:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 156;
	            this.showQuery();
	            this.state = 157;
	            this.match(MQLParser.EOF);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	matchQuery() {
	    let localctx = new MatchQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, MQLParser.RULE_matchQuery);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 161;
	        this.primitiveStatementList();
	        this.state = 163;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===66) {
	            this.state = 162;
	            this.whereStatement();
	        }

	        this.state = 166;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===31) {
	            this.state = 165;
	            this.groupByStatement();
	        }

	        this.state = 169;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===45) {
	            this.state = 168;
	            this.orderByStatement();
	        }

	        this.state = 171;
	        this.returnStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveStatementList() {
	    let localctx = new PrimitiveStatementListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, MQLParser.RULE_primitiveStatementList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 176;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 10)) & ~0x1f) === 0 && ((1 << (_la - 10)) & 603979777) !== 0)) {
	            this.state = 173;
	            this.primitiveStatement();
	            this.state = 178;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveStatement() {
	    let localctx = new PrimitiveStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, MQLParser.RULE_primitiveStatement);
	    try {
	        this.state = 182;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 39:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 179;
	            this.matchStatement();
	            break;
	        case 10:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 180;
	            this.callStatement();
	            break;
	        case 36:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 181;
	            this.letStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertPatterns() {
	    let localctx = new InsertPatternsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, MQLParser.RULE_insertPatterns);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 184;
	        this.match(MQLParser.K_INSERT);
	        this.state = 185;
	        this.insertLinearPattern();
	        this.state = 190;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===102) {
	            this.state = 186;
	            this.match(MQLParser.COMMA);
	            this.state = 187;
	            this.insertLinearPattern();
	            this.state = 192;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertLinearPattern() {
	    let localctx = new InsertLinearPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, MQLParser.RULE_insertLinearPattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 193;
	        this.insertPlainNode();
	        this.state = 199;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===85 || _la===95) {
	            this.state = 194;
	            this.insertPlainEdge();
	            this.state = 195;
	            this.insertPlainNode();
	            this.state = 201;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertPlainNode() {
	    let localctx = new InsertPlainNodeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, MQLParser.RULE_insertPlainNode);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 202;
	        this.match(MQLParser.L_PAR);
	        this.state = 204;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3758096382) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 3758096383) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 65551) !== 0)) {
	            this.state = 203;
	            this.insertPlainNodeInside();
	        }

	        this.state = 209;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===73) {
	            this.state = 206;
	            this.match(MQLParser.TYPE);
	            this.state = 211;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 213;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===98) {
	            this.state = 212;
	            this.properties();
	        }

	        this.state = 215;
	        this.match(MQLParser.R_PAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertPlainNodeInside() {
	    let localctx = new InsertPlainNodeInsideContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, MQLParser.RULE_insertPlainNodeInside);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 217;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertPlainEdge() {
	    let localctx = new InsertPlainEdgeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, MQLParser.RULE_insertPlainEdge);
	    var _la = 0;
	    try {
	        this.state = 237;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 85:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 219;
	            this.match(MQLParser.LT);
	            this.state = 220;
	            this.match(MQLParser.MINUS);
	            this.state = 221;
	            this.match(MQLParser.LSQUARE_BRACKET);
	            this.state = 222;
	            this.match(MQLParser.TYPE);
	            this.state = 224;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===98) {
	                this.state = 223;
	                this.properties();
	            }

	            this.state = 226;
	            this.match(MQLParser.RSQUARE_BRACKET);
	            this.state = 227;
	            this.match(MQLParser.MINUS);
	            break;
	        case 95:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 228;
	            this.match(MQLParser.MINUS);
	            this.state = 229;
	            this.match(MQLParser.LSQUARE_BRACKET);
	            this.state = 230;
	            this.match(MQLParser.TYPE);
	            this.state = 232;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===98) {
	                this.state = 231;
	                this.properties();
	            }

	            this.state = 234;
	            this.match(MQLParser.RSQUARE_BRACKET);
	            this.state = 235;
	            this.match(MQLParser.MINUS);
	            this.state = 236;
	            this.match(MQLParser.GT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createIndexQuery() {
	    let localctx = new CreateIndexQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, MQLParser.RULE_createIndexQuery);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 239;
	        this.match(MQLParser.K_CREATE);
	        this.state = 240;
	        this.identifier();
	        this.state = 241;
	        this.match(MQLParser.K_INDEX);
	        this.state = 242;
	        this.match(MQLParser.STRING);
	        this.state = 243;
	        this.match(MQLParser.K_WITH);
	        this.state = 244;
	        this.createIndexOptions();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createIndexOptions() {
	    let localctx = new CreateIndexOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, MQLParser.RULE_createIndexOptions);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 246;
	        this.match(MQLParser.LCURLY_BRACKET);
	        this.state = 255;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===76) {
	            this.state = 247;
	            this.createIndexOption();
	            this.state = 252;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===102) {
	                this.state = 248;
	                this.match(MQLParser.COMMA);
	                this.state = 249;
	                this.createIndexOption();
	                this.state = 254;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 257;
	        this.match(MQLParser.RCURLY_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createIndexOption() {
	    let localctx = new CreateIndexOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, MQLParser.RULE_createIndexOption);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 259;
	        this.match(MQLParser.STRING);
	        this.state = 263;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 87:
	            this.state = 260;
	            this.match(MQLParser.SINGLE_EQ);
	            this.state = 261;
	            this.value();
	            break;
	        case 29:
	        case 61:
	            this.state = 262;
	            this.boolValue();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showQuery() {
	    let localctx = new ShowQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, MQLParser.RULE_showQuery);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 265;
	        this.match(MQLParser.K_SHOW);
	        this.state = 270;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case -1:
	            break;
	        case 1:
	        case 2:
	        case 3:
	        case 4:
	        case 5:
	        case 6:
	        case 7:
	        case 8:
	        case 9:
	        case 10:
	        case 11:
	        case 12:
	        case 13:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 18:
	        case 19:
	        case 20:
	        case 21:
	        case 22:
	        case 23:
	        case 24:
	        case 25:
	        case 26:
	        case 27:
	        case 28:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 80:
	            this.state = 267;
	            this.identifier();
	            this.state = 268;
	            this.match(MQLParser.K_INDEX);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describeQuery() {
	    let localctx = new DescribeQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, MQLParser.RULE_describeQuery);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 272;
	        this.match(MQLParser.K_DESCRIBE);
	        this.state = 276;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,18,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 273;
	                this.describeFlag(); 
	            }
	            this.state = 278;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,18,this._ctx);
	        }

	        this.state = 279;
	        this.fixedNodeInside();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describeFlag() {
	    let localctx = new DescribeFlagContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, MQLParser.RULE_describeFlag);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 281;
	        _la = this._input.LA(1);
	        if(!(((((_la - 23)) & ~0x1f) === 0 && ((1 << (_la - 23)) & 83888129) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 284;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
	        if(la_===1) {
	            this.state = 282;
	            this.match(MQLParser.K_LIMIT);
	            this.state = 283;
	            this.match(MQLParser.UNSIGNED_INTEGER);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	matchStatement() {
	    let localctx = new MatchStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, MQLParser.RULE_matchStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 286;
	        this.match(MQLParser.K_MATCH);
	        this.state = 287;
	        this.graphPattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	letStatement() {
	    let localctx = new LetStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, MQLParser.RULE_letStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 289;
	        this.match(MQLParser.K_LET);
	        this.state = 290;
	        this.letDefinitionList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	letDefinitionList() {
	    let localctx = new LetDefinitionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, MQLParser.RULE_letDefinitionList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 292;
	        this.letDefinition();
	        this.state = 297;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===102) {
	            this.state = 293;
	            this.match(MQLParser.COMMA);
	            this.state = 294;
	            this.letDefinition();
	            this.state = 299;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	letDefinition() {
	    let localctx = new LetDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, MQLParser.RULE_letDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 300;
	        this.match(MQLParser.VARIABLE);
	        this.state = 301;
	        this.match(MQLParser.SINGLE_EQ);
	        this.state = 302;
	        this.conditionalOrExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whereStatement() {
	    let localctx = new WhereStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, MQLParser.RULE_whereStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 304;
	        this.match(MQLParser.K_WHERE);
	        this.state = 305;
	        this.conditionalOrExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupByStatement() {
	    let localctx = new GroupByStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, MQLParser.RULE_groupByStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 307;
	        this.match(MQLParser.K_GROUP);
	        this.state = 308;
	        this.match(MQLParser.K_BY);
	        this.state = 309;
	        this.groupByItem();
	        this.state = 314;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===102) {
	            this.state = 310;
	            this.match(MQLParser.COMMA);
	            this.state = 311;
	            this.groupByItem();
	            this.state = 316;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderByStatement() {
	    let localctx = new OrderByStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, MQLParser.RULE_orderByStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 317;
	        this.match(MQLParser.K_ORDER);
	        this.state = 318;
	        this.match(MQLParser.K_BY);
	        this.state = 319;
	        this.orderByItem();
	        this.state = 324;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===102) {
	            this.state = 320;
	            this.match(MQLParser.COMMA);
	            this.state = 321;
	            this.orderByItem();
	            this.state = 326;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStatement() {
	    let localctx = new ReturnStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, MQLParser.RULE_returnStatement);
	    var _la = 0;
	    try {
	        this.state = 350;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ReturnListContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 327;
	            this.match(MQLParser.K_RETURN);
	            this.state = 329;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
	            if(la_===1) {
	                this.state = 328;
	                this.match(MQLParser.K_DISTINCT);

	            }
	            this.state = 331;
	            this.returnItem();
	            this.state = 336;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===102) {
	                this.state = 332;
	                this.match(MQLParser.COMMA);
	                this.state = 333;
	                this.returnItem();
	                this.state = 338;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 340;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===37 || _la===43) {
	                this.state = 339;
	                this.limitOffsetClauses();
	            }

	            break;

	        case 2:
	            localctx = new ReturnAllContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 342;
	            this.match(MQLParser.K_RETURN);
	            this.state = 344;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===19) {
	                this.state = 343;
	                this.match(MQLParser.K_DISTINCT);
	            }

	            this.state = 346;
	            this.match(MQLParser.STAR);
	            this.state = 348;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===37 || _la===43) {
	                this.state = 347;
	                this.limitOffsetClauses();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callStatement() {
	    let localctx = new CallStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, MQLParser.RULE_callStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 352;
	        this.match(MQLParser.K_CALL);
	        this.state = 353;
	        this.identifier();
	        this.state = 354;
	        this.match(MQLParser.L_PAR);
	        this.state = 356;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 1)) & ~0x1f) === 0 && ((1 << (_la - 1)) & 4294967295) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 4294967295) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 3758160999) !== 0)) {
	            this.state = 355;
	            this.callArguments();
	        }

	        this.state = 358;
	        this.match(MQLParser.R_PAR);
	        this.state = 360;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===67) {
	            this.state = 359;
	            this.yieldStatement();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yieldStatement() {
	    let localctx = new YieldStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, MQLParser.RULE_yieldStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 362;
	        this.match(MQLParser.K_YIELD);
	        this.state = 372;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 91:
	            this.state = 363;
	            this.match(MQLParser.STAR);
	            break;
	        case 75:
	            this.state = 364;
	            this.yieldItem();
	            this.state = 369;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===102) {
	                this.state = 365;
	                this.match(MQLParser.COMMA);
	                this.state = 366;
	                this.yieldItem();
	                this.state = 371;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yieldItem() {
	    let localctx = new YieldItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, MQLParser.RULE_yieldItem);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 374;
	        this.match(MQLParser.VARIABLE);
	        this.state = 376;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===4) {
	            this.state = 375;
	            this.alias();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callArguments() {
	    let localctx = new CallArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, MQLParser.RULE_callArguments);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 378;
	        this.conditionalOrExpr();
	        this.state = 383;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===102) {
	            this.state = 379;
	            this.match(MQLParser.COMMA);
	            this.state = 380;
	            this.conditionalOrExpr();
	            this.state = 385;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limitOffsetClauses() {
	    let localctx = new LimitOffsetClausesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, MQLParser.RULE_limitOffsetClauses);
	    var _la = 0;
	    try {
	        this.state = 394;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 37:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 386;
	            this.limitClause();
	            this.state = 388;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===43) {
	                this.state = 387;
	                this.offsetClause();
	            }

	            break;
	        case 43:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 390;
	            this.offsetClause();
	            this.state = 392;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===37) {
	                this.state = 391;
	                this.limitClause();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limitClause() {
	    let localctx = new LimitClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, MQLParser.RULE_limitClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 396;
	        this.match(MQLParser.K_LIMIT);
	        this.state = 397;
	        this.match(MQLParser.UNSIGNED_INTEGER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	offsetClause() {
	    let localctx = new OffsetClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, MQLParser.RULE_offsetClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 399;
	        this.match(MQLParser.K_OFFSET);
	        this.state = 400;
	        this.match(MQLParser.UNSIGNED_INTEGER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnItem() {
	    let localctx = new ReturnItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, MQLParser.RULE_returnItem);
	    var _la = 0;
	    try {
	        this.state = 435;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ReturnItemVarContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 402;
	            this.match(MQLParser.VARIABLE);
	            this.state = 404;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===72) {
	                this.state = 403;
	                this.match(MQLParser.KEY);
	            }

	            break;

	        case 2:
	            localctx = new ReturnItemAggContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 406;
	            this.aggregateFunc();
	            this.state = 407;
	            this.match(MQLParser.L_PAR);
	            this.state = 408;
	            this.match(MQLParser.VARIABLE);
	            this.state = 410;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===72) {
	                this.state = 409;
	                this.match(MQLParser.KEY);
	            }

	            this.state = 412;
	            this.match(MQLParser.R_PAR);
	            this.state = 414;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===4) {
	                this.state = 413;
	                this.alias();
	            }

	            break;

	        case 3:
	            localctx = new ReturnItemCountContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 416;
	            this.match(MQLParser.K_COUNT);
	            this.state = 417;
	            this.match(MQLParser.L_PAR);
	            this.state = 419;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===19) {
	                this.state = 418;
	                this.match(MQLParser.K_DISTINCT);
	            }

	            this.state = 426;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 75:
	                this.state = 421;
	                this.match(MQLParser.VARIABLE);
	                this.state = 423;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===72) {
	                    this.state = 422;
	                    this.match(MQLParser.KEY);
	                }

	                break;
	            case 91:
	                this.state = 425;
	                this.match(MQLParser.STAR);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 428;
	            this.match(MQLParser.R_PAR);
	            this.state = 430;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===4) {
	                this.state = 429;
	                this.alias();
	            }

	            break;

	        case 4:
	            localctx = new ReturnItemExprContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 432;
	            this.conditionalOrExpr();
	            this.state = 433;
	            this.alias();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alias() {
	    let localctx = new AliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, MQLParser.RULE_alias);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 437;
	        this.match(MQLParser.K_AS);
	        this.state = 438;
	        this.match(MQLParser.VARIABLE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aggregateFunc() {
	    let localctx = new AggregateFuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, MQLParser.RULE_aggregateFunc);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 440;
	        _la = this._input.LA(1);
	        if(!(_la===5 || ((((_la - 40)) & ~0x1f) === 0 && ((1 << (_la - 40)) & 524291) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderByItem() {
	    let localctx = new OrderByItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, MQLParser.RULE_orderByItem);
	    var _la = 0;
	    try {
	        this.state = 476;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new OrderByItemVarContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 442;
	            this.match(MQLParser.VARIABLE);
	            this.state = 444;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===72) {
	                this.state = 443;
	                this.match(MQLParser.KEY);
	            }

	            this.state = 447;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===7 || _la===17) {
	                this.state = 446;
	                _la = this._input.LA(1);
	                if(!(_la===7 || _la===17)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            break;

	        case 2:
	            localctx = new OrderByItemAggContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 449;
	            this.aggregateFunc();
	            this.state = 450;
	            this.match(MQLParser.L_PAR);
	            this.state = 451;
	            this.match(MQLParser.VARIABLE);
	            this.state = 453;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===72) {
	                this.state = 452;
	                this.match(MQLParser.KEY);
	            }

	            this.state = 455;
	            this.match(MQLParser.R_PAR);
	            this.state = 457;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===7 || _la===17) {
	                this.state = 456;
	                _la = this._input.LA(1);
	                if(!(_la===7 || _la===17)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            break;

	        case 3:
	            localctx = new OrderByItemCountContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 459;
	            this.match(MQLParser.K_COUNT);
	            this.state = 460;
	            this.match(MQLParser.L_PAR);
	            this.state = 462;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===19) {
	                this.state = 461;
	                this.match(MQLParser.K_DISTINCT);
	            }

	            this.state = 464;
	            this.match(MQLParser.VARIABLE);
	            this.state = 466;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===72) {
	                this.state = 465;
	                this.match(MQLParser.KEY);
	            }

	            this.state = 468;
	            this.match(MQLParser.R_PAR);
	            this.state = 470;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===7 || _la===17) {
	                this.state = 469;
	                _la = this._input.LA(1);
	                if(!(_la===7 || _la===17)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            break;

	        case 4:
	            localctx = new OrderByItemExprContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 472;
	            this.conditionalOrExpr();
	            this.state = 474;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===7 || _la===17) {
	                this.state = 473;
	                _la = this._input.LA(1);
	                if(!(_la===7 || _la===17)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupByItem() {
	    let localctx = new GroupByItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, MQLParser.RULE_groupByItem);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 478;
	        this.match(MQLParser.VARIABLE);
	        this.state = 480;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===72) {
	            this.state = 479;
	            this.match(MQLParser.KEY);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphPattern() {
	    let localctx = new GraphPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, MQLParser.RULE_graphPattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 482;
	        this.basicPattern();
	        this.state = 486;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===44) {
	            this.state = 483;
	            this.optionalPattern();
	            this.state = 488;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionalPattern() {
	    let localctx = new OptionalPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, MQLParser.RULE_optionalPattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 489;
	        this.match(MQLParser.K_OPTIONAL);
	        this.state = 490;
	        this.match(MQLParser.LCURLY_BRACKET);
	        this.state = 491;
	        this.graphPattern();
	        this.state = 492;
	        this.match(MQLParser.RCURLY_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	basicPattern() {
	    let localctx = new BasicPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, MQLParser.RULE_basicPattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 494;
	        this.linearPattern();
	        this.state = 499;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===102) {
	            this.state = 495;
	            this.match(MQLParser.COMMA);
	            this.state = 496;
	            this.linearPattern();
	            this.state = 501;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	linearPattern() {
	    let localctx = new LinearPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, MQLParser.RULE_linearPattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 502;
	        this.node();
	        this.state = 511;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 81)) & ~0x1f) === 0 && ((1 << (_la - 81)) & 16465) !== 0)) {
	            this.state = 505;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 85:
	            case 95:
	                this.state = 503;
	                this.edge();
	                break;
	            case 81:
	            case 87:
	                this.state = 504;
	                this.path();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 507;
	            this.node();
	            this.state = 513;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	path() {
	    let localctx = new PathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, MQLParser.RULE_path);
	    var _la = 0;
	    try {
	        this.state = 539;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 81:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 514;
	            this.match(MQLParser.LEQ);
	            this.state = 515;
	            this.match(MQLParser.LSQUARE_BRACKET);
	            this.state = 517;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===3 || _la===6 || _la===53) {
	                this.state = 516;
	                this.pathType();
	            }

	            this.state = 520;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===75) {
	                this.state = 519;
	                this.match(MQLParser.VARIABLE);
	            }

	            this.state = 522;
	            this.pathAlternatives();
	            this.state = 523;
	            this.match(MQLParser.RSQUARE_BRACKET);
	            this.state = 524;
	            this.match(MQLParser.SINGLE_EQ);
	            break;
	        case 87:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 526;
	            this.match(MQLParser.SINGLE_EQ);
	            this.state = 527;
	            this.match(MQLParser.LSQUARE_BRACKET);
	            this.state = 529;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===3 || _la===6 || _la===53) {
	                this.state = 528;
	                this.pathType();
	            }

	            this.state = 532;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===75) {
	                this.state = 531;
	                this.match(MQLParser.VARIABLE);
	            }

	            this.state = 534;
	            this.pathAlternatives();
	            this.state = 535;
	            this.match(MQLParser.RSQUARE_BRACKET);
	            this.state = 536;
	            this.match(MQLParser.SINGLE_EQ);
	            this.state = 537;
	            this.match(MQLParser.GT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathAlternatives() {
	    let localctx = new PathAlternativesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, MQLParser.RULE_pathAlternatives);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 541;
	        this.pathSequence();
	        this.state = 546;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===89) {
	            this.state = 542;
	            this.match(MQLParser.PATH_ALTERNATIVE);
	            this.state = 543;
	            this.pathSequence();
	            this.state = 548;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathSequence() {
	    let localctx = new PathSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, MQLParser.RULE_pathSequence);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 549;
	        this.pathAtom();
	        this.state = 554;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===88) {
	            this.state = 550;
	            this.match(MQLParser.PATH_SEQUENCE);
	            this.state = 551;
	            this.pathAtom();
	            this.state = 556;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathAtom() {
	    let localctx = new PathAtomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, MQLParser.RULE_pathAtom);
	    var _la = 0;
	    try {
	        this.state = 573;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new PathAtomSimpleContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 558;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 557;
	                this.match(MQLParser.PATH_NEGATION);
	            }

	            this.state = 560;
	            this.match(MQLParser.TYPE);
	            this.state = 562;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 91)) & ~0x1f) === 0 && ((1 << (_la - 91)) & 141) !== 0)) {
	                this.state = 561;
	                this.pathSuffix();
	            }

	            break;

	        case 2:
	            localctx = new PathAtomAlternativesContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 565;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 564;
	                this.match(MQLParser.PATH_NEGATION);
	            }

	            this.state = 567;
	            this.match(MQLParser.L_PAR);
	            this.state = 568;
	            this.pathAlternatives();
	            this.state = 569;
	            this.match(MQLParser.R_PAR);
	            this.state = 571;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 91)) & ~0x1f) === 0 && ((1 << (_la - 91)) & 141) !== 0)) {
	                this.state = 570;
	                this.pathSuffix();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathSuffix() {
	    let localctx = new PathSuffixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, MQLParser.RULE_pathSuffix);
	    try {
	        this.state = 583;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 91:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 575;
	            localctx.op = this.match(MQLParser.STAR);
	            break;
	        case 94:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 576;
	            localctx.op = this.match(MQLParser.PLUS);
	            break;
	        case 93:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 577;
	            localctx.op = this.match(MQLParser.QUESTION_MARK);
	            break;
	        case 98:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 578;
	            this.match(MQLParser.LCURLY_BRACKET);
	            this.state = 579;
	            localctx.min = this.match(MQLParser.UNSIGNED_INTEGER);
	            this.state = 580;
	            this.match(MQLParser.COMMA);
	            this.state = 581;
	            localctx.max = this.match(MQLParser.UNSIGNED_INTEGER);
	            this.state = 582;
	            this.match(MQLParser.RCURLY_BRACKET);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathType() {
	    let localctx = new PathTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, MQLParser.RULE_pathType);
	    var _la = 0;
	    try {
	        this.state = 600;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	        case 6:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 585;
	            _la = this._input.LA(1);
	            if(!(_la===3 || _la===6)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 587;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===53) {
	                this.state = 586;
	                this.match(MQLParser.K_SHORTEST);
	            }

	            this.state = 590;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1 || ((((_la - 55)) & ~0x1f) === 0 && ((1 << (_la - 55)) & 641) !== 0)) {
	                this.state = 589;
	                _la = this._input.LA(1);
	                if(!(_la===1 || ((((_la - 55)) & ~0x1f) === 0 && ((1 << (_la - 55)) & 641) !== 0))) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            break;
	        case 53:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 592;
	            this.match(MQLParser.K_SHORTEST);
	            this.state = 593;
	            this.match(MQLParser.UNSIGNED_INTEGER);
	            this.state = 595;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===32) {
	                this.state = 594;
	                this.match(MQLParser.K_GROUPS);
	            }

	            this.state = 598;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1 || ((((_la - 55)) & ~0x1f) === 0 && ((1 << (_la - 55)) & 641) !== 0)) {
	                this.state = 597;
	                _la = this._input.LA(1);
	                if(!(_la===1 || ((((_la - 55)) & ~0x1f) === 0 && ((1 << (_la - 55)) & 641) !== 0))) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	node() {
	    let localctx = new NodeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, MQLParser.RULE_node);
	    try {
	        this.state = 604;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 602;
	            this.fixedNode();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 603;
	            this.varNode();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fixedNode() {
	    let localctx = new FixedNodeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, MQLParser.RULE_fixedNode);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 606;
	        this.match(MQLParser.L_PAR);
	        this.state = 607;
	        this.fixedNodeInside();
	        this.state = 608;
	        this.match(MQLParser.R_PAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fixedNodeInside() {
	    let localctx = new FixedNodeInsideContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, MQLParser.RULE_fixedNodeInside);
	    try {
	        this.state = 614;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 610;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 611;
	            this.match(MQLParser.ANON_ID);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 612;
	            this.match(MQLParser.EDGE_ID);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 613;
	            this.value();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edge() {
	    let localctx = new EdgeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, MQLParser.RULE_edge);
	    var _la = 0;
	    try {
	        this.state = 629;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 85:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 616;
	            this.match(MQLParser.LT);
	            this.state = 619;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
	            if(la_===1) {
	                this.state = 617;
	                this.match(MQLParser.MINUS);
	                this.state = 618;
	                this.edgeInside();

	            }
	            this.state = 621;
	            this.match(MQLParser.MINUS);
	            break;
	        case 95:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 622;
	            this.match(MQLParser.MINUS);
	            this.state = 626;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===100) {
	                this.state = 623;
	                this.edgeInside();
	                this.state = 624;
	                this.match(MQLParser.MINUS);
	            }

	            this.state = 628;
	            this.match(MQLParser.GT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeInside() {
	    let localctx = new EdgeInsideContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, MQLParser.RULE_edgeInside);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 631;
	        this.match(MQLParser.LSQUARE_BRACKET);
	        this.state = 633;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===71 || _la===75) {
	            this.state = 632;
	            _la = this._input.LA(1);
	            if(!(_la===71 || _la===75)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 636;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===73 || _la===74) {
	            this.state = 635;
	            _la = this._input.LA(1);
	            if(!(_la===73 || _la===74)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 639;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===98) {
	            this.state = 638;
	            this.properties();
	        }

	        this.state = 641;
	        this.match(MQLParser.RSQUARE_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varNode() {
	    let localctx = new VarNodeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, MQLParser.RULE_varNode);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 643;
	        this.match(MQLParser.L_PAR);
	        this.state = 645;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===75) {
	            this.state = 644;
	            this.match(MQLParser.VARIABLE);
	        }

	        this.state = 650;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===73) {
	            this.state = 647;
	            this.match(MQLParser.TYPE);
	            this.state = 652;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 654;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===98) {
	            this.state = 653;
	            this.properties();
	        }

	        this.state = 656;
	        this.match(MQLParser.R_PAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	properties() {
	    let localctx = new PropertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, MQLParser.RULE_properties);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 658;
	        this.match(MQLParser.LCURLY_BRACKET);
	        this.state = 659;
	        this.property();
	        this.state = 664;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===102) {
	            this.state = 660;
	            this.match(MQLParser.COMMA);
	            this.state = 661;
	            this.property();
	            this.state = 666;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 667;
	        this.match(MQLParser.RCURLY_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	property() {
	    let localctx = new PropertyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, MQLParser.RULE_property);
	    var _la = 0;
	    try {
	        this.state = 698;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new Property1Context(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 669;
	            this.identifier();
	            this.state = 674;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 103:
	                this.state = 670;
	                this.match(MQLParser.COLON);
	                this.state = 671;
	                this.value();
	                break;
	            case 68:
	                this.state = 672;
	                this.match(MQLParser.TRUE_PROP);
	                break;
	            case 69:
	                this.state = 673;
	                this.match(MQLParser.FALSE_PROP);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 2:
	            localctx = new Property2Context(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 676;
	            this.identifier();
	            this.state = 677;
	            this.match(MQLParser.TYPE);
	            this.state = 678;
	            this.match(MQLParser.L_PAR);
	            this.state = 679;
	            this.match(MQLParser.STRING);
	            this.state = 680;
	            this.match(MQLParser.R_PAR);
	            break;

	        case 3:
	            localctx = new Property3Context(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 682;
	            this.identifier();
	            this.state = 683;
	            this.match(MQLParser.K_IS);
	            this.state = 685;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===51) {
	                this.state = 684;
	                this.match(MQLParser.K_NOT);
	            }

	            this.state = 687;
	            this.exprTypename();
	            this.state = 691;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===46) {
	                this.state = 688;
	                this.conditionalOrType();
	                this.state = 693;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 4:
	            localctx = new Property4Context(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 694;
	            this.identifier();

	            this.state = 695;
	            localctx.op = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 81)) & ~0x1f) === 0 && ((1 << (_la - 81)) & 63) !== 0))) {
	                localctx.op = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 696;
	            this.value();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionalOrType() {
	    let localctx = new ConditionalOrTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, MQLParser.RULE_conditionalOrType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 700;
	        this.match(MQLParser.K_OR);
	        this.state = 701;
	        this.exprTypename();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, MQLParser.RULE_identifier);
	    try {
	        this.state = 705;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 80:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 703;
	            this.match(MQLParser.NAME);
	            break;
	        case 1:
	        case 2:
	        case 3:
	        case 4:
	        case 5:
	        case 6:
	        case 7:
	        case 8:
	        case 9:
	        case 10:
	        case 11:
	        case 12:
	        case 13:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 18:
	        case 19:
	        case 20:
	        case 21:
	        case 22:
	        case 23:
	        case 24:
	        case 25:
	        case 26:
	        case 27:
	        case 28:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 704;
	            this.keyword();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	boolValue() {
	    let localctx = new BoolValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, MQLParser.RULE_boolValue);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 707;
	        _la = this._input.LA(1);
	        if(!(_la===29 || _la===61)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericValue() {
	    let localctx = new NumericValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, MQLParser.RULE_numericValue);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 710;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===94 || _la===95) {
	            this.state = 709;
	            _la = this._input.LA(1);
	            if(!(_la===94 || _la===95)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 712;
	        _la = this._input.LA(1);
	        if(!(((((_la - 77)) & ~0x1f) === 0 && ((1 << (_la - 77)) & 7) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	datatypeValue() {
	    let localctx = new DatatypeValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, MQLParser.RULE_datatypeValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 714;
	        this.identifier();
	        this.state = 715;
	        this.match(MQLParser.L_PAR);
	        this.state = 716;
	        this.match(MQLParser.STRING);
	        this.state = 717;
	        this.match(MQLParser.R_PAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	value() {
	    let localctx = new ValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, MQLParser.RULE_value);
	    try {
	        this.state = 723;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 77:
	        case 78:
	        case 79:
	        case 94:
	        case 95:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 719;
	            this.numericValue();
	            break;
	        case 76:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 720;
	            this.match(MQLParser.STRING);
	            break;
	        case 29:
	        case 61:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 721;
	            this.boolValue();
	            break;
	        case 1:
	        case 2:
	        case 3:
	        case 4:
	        case 5:
	        case 6:
	        case 7:
	        case 8:
	        case 9:
	        case 10:
	        case 11:
	        case 12:
	        case 13:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 18:
	        case 19:
	        case 20:
	        case 21:
	        case 22:
	        case 23:
	        case 24:
	        case 25:
	        case 26:
	        case 27:
	        case 28:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 80:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 722;
	            this.datatypeValue();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionalOrExpr() {
	    let localctx = new ConditionalOrExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, MQLParser.RULE_conditionalOrExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 725;
	        this.conditionalAndExpr();
	        this.state = 730;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===46) {
	            this.state = 726;
	            this.match(MQLParser.K_OR);
	            this.state = 727;
	            this.conditionalAndExpr();
	            this.state = 732;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionalAndExpr() {
	    let localctx = new ConditionalAndExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, MQLParser.RULE_conditionalAndExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 733;
	        this.comparisonExpr();
	        this.state = 738;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===2) {
	            this.state = 734;
	            this.match(MQLParser.K_AND);
	            this.state = 735;
	            this.comparisonExpr();
	            this.state = 740;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comparisonExpr() {
	    let localctx = new ComparisonExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, MQLParser.RULE_comparisonExpr);
	    var _la = 0;
	    try {
	        this.state = 753;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ComparisonExprOpContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 741;
	            this.additiveExpr();
	            this.state = 744;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 81)) & ~0x1f) === 0 && ((1 << (_la - 81)) & 63) !== 0)) {
	                this.state = 742;
	                localctx.op = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(((((_la - 81)) & ~0x1f) === 0 && ((1 << (_la - 81)) & 63) !== 0))) {
	                    localctx.op = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 743;
	                this.additiveExpr();
	            }

	            break;

	        case 2:
	            localctx = new ComparisonExprIsContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 746;
	            this.additiveExpr();
	            this.state = 747;
	            this.match(MQLParser.K_IS);
	            this.state = 749;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===51) {
	                this.state = 748;
	                this.match(MQLParser.K_NOT);
	            }

	            this.state = 751;
	            this.exprTypename();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	additiveExpr() {
	    let localctx = new AdditiveExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, MQLParser.RULE_additiveExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 755;
	        this.multiplicativeExpr();
	        this.state = 760;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===94 || _la===95) {
	            this.state = 756;
	            localctx._tset1390 = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===94 || _la===95)) {
	                localctx._tset1390 = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            localctx.op.push(localctx._tset1390);
	            this.state = 757;
	            this.multiplicativeExpr();
	            this.state = 762;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiplicativeExpr() {
	    let localctx = new MultiplicativeExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, MQLParser.RULE_multiplicativeExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 763;
	        this.unaryExpr();
	        this.state = 768;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 88)) & ~0x1f) === 0 && ((1 << (_la - 88)) & 25) !== 0)) {
	            this.state = 764;
	            localctx._tset1409 = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 88)) & ~0x1f) === 0 && ((1 << (_la - 88)) & 25) !== 0))) {
	                localctx._tset1409 = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            localctx.op.push(localctx._tset1409);
	            this.state = 765;
	            this.unaryExpr();
	            this.state = 770;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryExpr() {
	    let localctx = new UnaryExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, MQLParser.RULE_unaryExpr);
	    try {
	        this.state = 778;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 771;
	            this.match(MQLParser.K_NOT);
	            this.state = 772;
	            this.unaryExpr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 773;
	            this.atomicExpr();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 774;
	            this.match(MQLParser.PLUS);
	            this.state = 775;
	            this.unaryExpr();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 776;
	            this.match(MQLParser.MINUS);
	            this.state = 777;
	            this.unaryExpr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atomicExpr() {
	    let localctx = new AtomicExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, MQLParser.RULE_atomicExpr);
	    var _la = 0;
	    try {
	        this.state = 791;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ExprVarContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 780;
	            this.match(MQLParser.VARIABLE);
	            this.state = 782;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===72) {
	                this.state = 781;
	                this.match(MQLParser.KEY);
	            }

	            break;

	        case 2:
	            localctx = new ExprValueContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 784;
	            this.value();
	            break;

	        case 3:
	            localctx = new ExprFixedNodeInsideContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 785;
	            this.fixedNodeInside();
	            break;

	        case 4:
	            localctx = new ExprParenthesisContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 786;
	            this.match(MQLParser.L_PAR);
	            this.state = 787;
	            this.conditionalOrExpr();
	            this.state = 788;
	            this.match(MQLParser.R_PAR);
	            break;

	        case 5:
	            localctx = new ExprFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 790;
	            this.function_();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_() {
	    let localctx = new FunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, MQLParser.RULE_function);
	    try {
	        this.state = 799;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 57:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 793;
	            this.regex();
	            break;
	        case 56:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 794;
	            this.textSearch();
	            break;
	        case 12:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 795;
	            this.cosineSimilarity();
	            break;
	        case 11:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 796;
	            this.cosineDistance();
	            break;
	        case 38:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 797;
	            this.manhattanDistance();
	            break;
	        case 21:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 798;
	            this.euclideanDistance();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	regex() {
	    let localctx = new RegexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, MQLParser.RULE_regex);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 801;
	        this.match(MQLParser.K_REGEX);
	        this.state = 802;
	        this.match(MQLParser.L_PAR);
	        this.state = 803;
	        this.conditionalOrExpr();
	        this.state = 804;
	        this.match(MQLParser.COMMA);
	        this.state = 805;
	        this.conditionalOrExpr();
	        this.state = 808;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===102) {
	            this.state = 806;
	            this.match(MQLParser.COMMA);
	            this.state = 807;
	            this.conditionalOrExpr();
	        }

	        this.state = 810;
	        this.match(MQLParser.R_PAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	textSearch() {
	    let localctx = new TextSearchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, MQLParser.RULE_textSearch);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 812;
	        this.match(MQLParser.K_TEXT_SEARCH);
	        this.state = 813;
	        this.match(MQLParser.L_PAR);
	        this.state = 814;
	        this.match(MQLParser.STRING);
	        this.state = 815;
	        this.match(MQLParser.COMMA);
	        this.state = 816;
	        this.match(MQLParser.STRING);
	        this.state = 817;
	        this.match(MQLParser.COMMA);
	        this.state = 818;
	        this.textSearchIndexMode();
	        this.state = 819;
	        this.match(MQLParser.COMMA);
	        this.state = 820;
	        this.match(MQLParser.VARIABLE);
	        this.state = 823;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===102) {
	            this.state = 821;
	            this.match(MQLParser.COMMA);
	            this.state = 822;
	            this.match(MQLParser.VARIABLE);
	        }

	        this.state = 825;
	        this.match(MQLParser.R_PAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cosineSimilarity() {
	    let localctx = new CosineSimilarityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, MQLParser.RULE_cosineSimilarity);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 827;
	        this.match(MQLParser.K_COSINE_SIMILARITY);
	        this.state = 828;
	        this.match(MQLParser.L_PAR);
	        this.state = 829;
	        this.conditionalOrExpr();
	        this.state = 830;
	        this.match(MQLParser.COMMA);
	        this.state = 831;
	        this.conditionalOrExpr();
	        this.state = 832;
	        this.match(MQLParser.R_PAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cosineDistance() {
	    let localctx = new CosineDistanceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, MQLParser.RULE_cosineDistance);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 834;
	        this.match(MQLParser.K_COSINE_DISTANCE);
	        this.state = 835;
	        this.match(MQLParser.L_PAR);
	        this.state = 836;
	        this.conditionalOrExpr();
	        this.state = 837;
	        this.match(MQLParser.COMMA);
	        this.state = 838;
	        this.conditionalOrExpr();
	        this.state = 839;
	        this.match(MQLParser.R_PAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	manhattanDistance() {
	    let localctx = new ManhattanDistanceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, MQLParser.RULE_manhattanDistance);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 841;
	        this.match(MQLParser.K_MANHATTAN_DISTANCE);
	        this.state = 842;
	        this.match(MQLParser.L_PAR);
	        this.state = 843;
	        this.conditionalOrExpr();
	        this.state = 844;
	        this.match(MQLParser.COMMA);
	        this.state = 845;
	        this.conditionalOrExpr();
	        this.state = 846;
	        this.match(MQLParser.R_PAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	euclideanDistance() {
	    let localctx = new EuclideanDistanceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, MQLParser.RULE_euclideanDistance);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 848;
	        this.match(MQLParser.K_EUCLIDEAN_DISTANCE);
	        this.state = 849;
	        this.match(MQLParser.L_PAR);
	        this.state = 850;
	        this.conditionalOrExpr();
	        this.state = 851;
	        this.match(MQLParser.COMMA);
	        this.state = 852;
	        this.conditionalOrExpr();
	        this.state = 853;
	        this.match(MQLParser.R_PAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	textSearchIndexMode() {
	    let localctx = new TextSearchIndexModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, MQLParser.RULE_textSearchIndexMode);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 855;
	        _la = this._input.LA(1);
	        if(!(_la===39 || _la===48)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exprTypename() {
	    let localctx = new ExprTypenameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, MQLParser.RULE_exprTypename);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 857;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 1140851200) !== 0) || _la===52 || _la===60)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword() {
	    let localctx = new KeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, MQLParser.RULE_keyword);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 859;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 3758096382) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 3758096383) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 15) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

MQLParser.EOF = antlr4.Token.EOF;
MQLParser.K_ACYCLIC = 1;
MQLParser.K_AND = 2;
MQLParser.K_ANY = 3;
MQLParser.K_AS = 4;
MQLParser.K_AVG = 5;
MQLParser.K_ALL = 6;
MQLParser.K_ASC = 7;
MQLParser.K_BY = 8;
MQLParser.K_BOOL = 9;
MQLParser.K_CALL = 10;
MQLParser.K_COSINE_DISTANCE = 11;
MQLParser.K_COSINE_SIMILARITY = 12;
MQLParser.K_COUNT = 13;
MQLParser.K_CREATE = 14;
MQLParser.K_DELETE = 15;
MQLParser.K_DESCRIBE = 16;
MQLParser.K_DESC = 17;
MQLParser.K_DIMENSIONS = 18;
MQLParser.K_DISTINCT = 19;
MQLParser.K_EDGE = 20;
MQLParser.K_EUCLIDEAN_DISTANCE = 21;
MQLParser.K_FROM = 22;
MQLParser.K_INCOMING = 23;
MQLParser.K_INDEX = 24;
MQLParser.K_INSERT = 25;
MQLParser.K_INTEGER = 26;
MQLParser.K_INTO = 27;
MQLParser.K_IS = 28;
MQLParser.K_FALSE = 29;
MQLParser.K_FLOAT = 30;
MQLParser.K_GROUP = 31;
MQLParser.K_GROUPS = 32;
MQLParser.K_IDENTITY = 33;
MQLParser.K_LABELS = 34;
MQLParser.K_LABEL = 35;
MQLParser.K_LET = 36;
MQLParser.K_LIMIT = 37;
MQLParser.K_MANHATTAN_DISTANCE = 38;
MQLParser.K_MATCH = 39;
MQLParser.K_MAX = 40;
MQLParser.K_MIN = 41;
MQLParser.K_OBJECTS = 42;
MQLParser.K_OFFSET = 43;
MQLParser.K_OPTIONAL = 44;
MQLParser.K_ORDER = 45;
MQLParser.K_OR = 46;
MQLParser.K_OUTGOING = 47;
MQLParser.K_PREFIX = 48;
MQLParser.K_PROPERTIES = 49;
MQLParser.K_PROPERTY = 50;
MQLParser.K_NOT = 51;
MQLParser.K_NULL = 52;
MQLParser.K_SHORTEST = 53;
MQLParser.K_SHOW = 54;
MQLParser.K_SIMPLE = 55;
MQLParser.K_TEXT_SEARCH = 56;
MQLParser.K_REGEX = 57;
MQLParser.K_RETURN = 58;
MQLParser.K_SUM = 59;
MQLParser.K_STRING = 60;
MQLParser.K_TRUE = 61;
MQLParser.K_TRAILS = 62;
MQLParser.K_VALUES = 63;
MQLParser.K_WALKS = 64;
MQLParser.K_WITH = 65;
MQLParser.K_WHERE = 66;
MQLParser.K_YIELD = 67;
MQLParser.TRUE_PROP = 68;
MQLParser.FALSE_PROP = 69;
MQLParser.ANON_ID = 70;
MQLParser.EDGE_ID = 71;
MQLParser.KEY = 72;
MQLParser.TYPE = 73;
MQLParser.TYPE_VAR = 74;
MQLParser.VARIABLE = 75;
MQLParser.STRING = 76;
MQLParser.UNSIGNED_INTEGER = 77;
MQLParser.UNSIGNED_FLOAT = 78;
MQLParser.UNSIGNED_SCIENTIFIC_NOTATION = 79;
MQLParser.NAME = 80;
MQLParser.LEQ = 81;
MQLParser.GEQ = 82;
MQLParser.EQ = 83;
MQLParser.NEQ = 84;
MQLParser.LT = 85;
MQLParser.GT = 86;
MQLParser.SINGLE_EQ = 87;
MQLParser.PATH_SEQUENCE = 88;
MQLParser.PATH_ALTERNATIVE = 89;
MQLParser.PATH_NEGATION = 90;
MQLParser.STAR = 91;
MQLParser.PERCENT = 92;
MQLParser.QUESTION_MARK = 93;
MQLParser.PLUS = 94;
MQLParser.MINUS = 95;
MQLParser.L_PAR = 96;
MQLParser.R_PAR = 97;
MQLParser.LCURLY_BRACKET = 98;
MQLParser.RCURLY_BRACKET = 99;
MQLParser.LSQUARE_BRACKET = 100;
MQLParser.RSQUARE_BRACKET = 101;
MQLParser.COMMA = 102;
MQLParser.COLON = 103;
MQLParser.WHITE_SPACE = 104;
MQLParser.SINGLE_LINE_COMMENT = 105;
MQLParser.UNRECOGNIZED = 106;

MQLParser.RULE_root = 0;
MQLParser.RULE_matchQuery = 1;
MQLParser.RULE_primitiveStatementList = 2;
MQLParser.RULE_primitiveStatement = 3;
MQLParser.RULE_insertPatterns = 4;
MQLParser.RULE_insertLinearPattern = 5;
MQLParser.RULE_insertPlainNode = 6;
MQLParser.RULE_insertPlainNodeInside = 7;
MQLParser.RULE_insertPlainEdge = 8;
MQLParser.RULE_createIndexQuery = 9;
MQLParser.RULE_createIndexOptions = 10;
MQLParser.RULE_createIndexOption = 11;
MQLParser.RULE_showQuery = 12;
MQLParser.RULE_describeQuery = 13;
MQLParser.RULE_describeFlag = 14;
MQLParser.RULE_matchStatement = 15;
MQLParser.RULE_letStatement = 16;
MQLParser.RULE_letDefinitionList = 17;
MQLParser.RULE_letDefinition = 18;
MQLParser.RULE_whereStatement = 19;
MQLParser.RULE_groupByStatement = 20;
MQLParser.RULE_orderByStatement = 21;
MQLParser.RULE_returnStatement = 22;
MQLParser.RULE_callStatement = 23;
MQLParser.RULE_yieldStatement = 24;
MQLParser.RULE_yieldItem = 25;
MQLParser.RULE_callArguments = 26;
MQLParser.RULE_limitOffsetClauses = 27;
MQLParser.RULE_limitClause = 28;
MQLParser.RULE_offsetClause = 29;
MQLParser.RULE_returnItem = 30;
MQLParser.RULE_alias = 31;
MQLParser.RULE_aggregateFunc = 32;
MQLParser.RULE_orderByItem = 33;
MQLParser.RULE_groupByItem = 34;
MQLParser.RULE_graphPattern = 35;
MQLParser.RULE_optionalPattern = 36;
MQLParser.RULE_basicPattern = 37;
MQLParser.RULE_linearPattern = 38;
MQLParser.RULE_path = 39;
MQLParser.RULE_pathAlternatives = 40;
MQLParser.RULE_pathSequence = 41;
MQLParser.RULE_pathAtom = 42;
MQLParser.RULE_pathSuffix = 43;
MQLParser.RULE_pathType = 44;
MQLParser.RULE_node = 45;
MQLParser.RULE_fixedNode = 46;
MQLParser.RULE_fixedNodeInside = 47;
MQLParser.RULE_edge = 48;
MQLParser.RULE_edgeInside = 49;
MQLParser.RULE_varNode = 50;
MQLParser.RULE_properties = 51;
MQLParser.RULE_property = 52;
MQLParser.RULE_conditionalOrType = 53;
MQLParser.RULE_identifier = 54;
MQLParser.RULE_boolValue = 55;
MQLParser.RULE_numericValue = 56;
MQLParser.RULE_datatypeValue = 57;
MQLParser.RULE_value = 58;
MQLParser.RULE_conditionalOrExpr = 59;
MQLParser.RULE_conditionalAndExpr = 60;
MQLParser.RULE_comparisonExpr = 61;
MQLParser.RULE_additiveExpr = 62;
MQLParser.RULE_multiplicativeExpr = 63;
MQLParser.RULE_unaryExpr = 64;
MQLParser.RULE_atomicExpr = 65;
MQLParser.RULE_function = 66;
MQLParser.RULE_regex = 67;
MQLParser.RULE_textSearch = 68;
MQLParser.RULE_cosineSimilarity = 69;
MQLParser.RULE_cosineDistance = 70;
MQLParser.RULE_manhattanDistance = 71;
MQLParser.RULE_euclideanDistance = 72;
MQLParser.RULE_textSearchIndexMode = 73;
MQLParser.RULE_exprTypename = 74;
MQLParser.RULE_keyword = 75;

class RootContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_root;
    }

	matchQuery() {
	    return this.getTypedRuleContext(MatchQueryContext,0);
	};

	describeQuery() {
	    return this.getTypedRuleContext(DescribeQueryContext,0);
	};

	insertPatterns() {
	    return this.getTypedRuleContext(InsertPatternsContext,0);
	};

	createIndexQuery() {
	    return this.getTypedRuleContext(CreateIndexQueryContext,0);
	};

	showQuery() {
	    return this.getTypedRuleContext(ShowQueryContext,0);
	};

	EOF() {
	    return this.getToken(MQLParser.EOF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterRoot(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitRoot(this);
		}
	}


}



class MatchQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_matchQuery;
    }

	primitiveStatementList() {
	    return this.getTypedRuleContext(PrimitiveStatementListContext,0);
	};

	returnStatement() {
	    return this.getTypedRuleContext(ReturnStatementContext,0);
	};

	whereStatement() {
	    return this.getTypedRuleContext(WhereStatementContext,0);
	};

	groupByStatement() {
	    return this.getTypedRuleContext(GroupByStatementContext,0);
	};

	orderByStatement() {
	    return this.getTypedRuleContext(OrderByStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterMatchQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitMatchQuery(this);
		}
	}


}



class PrimitiveStatementListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_primitiveStatementList;
    }

	primitiveStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrimitiveStatementContext);
	    } else {
	        return this.getTypedRuleContext(PrimitiveStatementContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterPrimitiveStatementList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitPrimitiveStatementList(this);
		}
	}


}



class PrimitiveStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_primitiveStatement;
    }

	matchStatement() {
	    return this.getTypedRuleContext(MatchStatementContext,0);
	};

	callStatement() {
	    return this.getTypedRuleContext(CallStatementContext,0);
	};

	letStatement() {
	    return this.getTypedRuleContext(LetStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterPrimitiveStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitPrimitiveStatement(this);
		}
	}


}



class InsertPatternsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_insertPatterns;
    }

	K_INSERT() {
	    return this.getToken(MQLParser.K_INSERT, 0);
	};

	insertLinearPattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InsertLinearPatternContext);
	    } else {
	        return this.getTypedRuleContext(InsertLinearPatternContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQLParser.COMMA);
	    } else {
	        return this.getToken(MQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterInsertPatterns(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitInsertPatterns(this);
		}
	}


}



class InsertLinearPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_insertLinearPattern;
    }

	insertPlainNode = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InsertPlainNodeContext);
	    } else {
	        return this.getTypedRuleContext(InsertPlainNodeContext,i);
	    }
	};

	insertPlainEdge = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InsertPlainEdgeContext);
	    } else {
	        return this.getTypedRuleContext(InsertPlainEdgeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterInsertLinearPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitInsertLinearPattern(this);
		}
	}


}



class InsertPlainNodeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_insertPlainNode;
    }

	L_PAR() {
	    return this.getToken(MQLParser.L_PAR, 0);
	};

	R_PAR() {
	    return this.getToken(MQLParser.R_PAR, 0);
	};

	insertPlainNodeInside() {
	    return this.getTypedRuleContext(InsertPlainNodeInsideContext,0);
	};

	TYPE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQLParser.TYPE);
	    } else {
	        return this.getToken(MQLParser.TYPE, i);
	    }
	};


	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterInsertPlainNode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitInsertPlainNode(this);
		}
	}


}



class InsertPlainNodeInsideContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_insertPlainNodeInside;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterInsertPlainNodeInside(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitInsertPlainNodeInside(this);
		}
	}


}



class InsertPlainEdgeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_insertPlainEdge;
    }

	LT() {
	    return this.getToken(MQLParser.LT, 0);
	};

	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQLParser.MINUS);
	    } else {
	        return this.getToken(MQLParser.MINUS, i);
	    }
	};


	LSQUARE_BRACKET() {
	    return this.getToken(MQLParser.LSQUARE_BRACKET, 0);
	};

	TYPE() {
	    return this.getToken(MQLParser.TYPE, 0);
	};

	RSQUARE_BRACKET() {
	    return this.getToken(MQLParser.RSQUARE_BRACKET, 0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	GT() {
	    return this.getToken(MQLParser.GT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterInsertPlainEdge(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitInsertPlainEdge(this);
		}
	}


}



class CreateIndexQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_createIndexQuery;
    }

	K_CREATE() {
	    return this.getToken(MQLParser.K_CREATE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	K_INDEX() {
	    return this.getToken(MQLParser.K_INDEX, 0);
	};

	STRING() {
	    return this.getToken(MQLParser.STRING, 0);
	};

	K_WITH() {
	    return this.getToken(MQLParser.K_WITH, 0);
	};

	createIndexOptions() {
	    return this.getTypedRuleContext(CreateIndexOptionsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterCreateIndexQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitCreateIndexQuery(this);
		}
	}


}



class CreateIndexOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_createIndexOptions;
    }

	LCURLY_BRACKET() {
	    return this.getToken(MQLParser.LCURLY_BRACKET, 0);
	};

	RCURLY_BRACKET() {
	    return this.getToken(MQLParser.RCURLY_BRACKET, 0);
	};

	createIndexOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CreateIndexOptionContext);
	    } else {
	        return this.getTypedRuleContext(CreateIndexOptionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQLParser.COMMA);
	    } else {
	        return this.getToken(MQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterCreateIndexOptions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitCreateIndexOptions(this);
		}
	}


}



class CreateIndexOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_createIndexOption;
    }

	STRING() {
	    return this.getToken(MQLParser.STRING, 0);
	};

	SINGLE_EQ() {
	    return this.getToken(MQLParser.SINGLE_EQ, 0);
	};

	value() {
	    return this.getTypedRuleContext(ValueContext,0);
	};

	boolValue() {
	    return this.getTypedRuleContext(BoolValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterCreateIndexOption(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitCreateIndexOption(this);
		}
	}


}



class ShowQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_showQuery;
    }

	K_SHOW() {
	    return this.getToken(MQLParser.K_SHOW, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	K_INDEX() {
	    return this.getToken(MQLParser.K_INDEX, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterShowQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitShowQuery(this);
		}
	}


}



class DescribeQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_describeQuery;
    }

	K_DESCRIBE() {
	    return this.getToken(MQLParser.K_DESCRIBE, 0);
	};

	fixedNodeInside() {
	    return this.getTypedRuleContext(FixedNodeInsideContext,0);
	};

	describeFlag = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DescribeFlagContext);
	    } else {
	        return this.getTypedRuleContext(DescribeFlagContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterDescribeQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitDescribeQuery(this);
		}
	}


}



class DescribeFlagContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_describeFlag;
    }

	K_LABELS() {
	    return this.getToken(MQLParser.K_LABELS, 0);
	};

	K_PROPERTIES() {
	    return this.getToken(MQLParser.K_PROPERTIES, 0);
	};

	K_OUTGOING() {
	    return this.getToken(MQLParser.K_OUTGOING, 0);
	};

	K_INCOMING() {
	    return this.getToken(MQLParser.K_INCOMING, 0);
	};

	K_LIMIT() {
	    return this.getToken(MQLParser.K_LIMIT, 0);
	};

	UNSIGNED_INTEGER() {
	    return this.getToken(MQLParser.UNSIGNED_INTEGER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterDescribeFlag(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitDescribeFlag(this);
		}
	}


}



class MatchStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_matchStatement;
    }

	K_MATCH() {
	    return this.getToken(MQLParser.K_MATCH, 0);
	};

	graphPattern() {
	    return this.getTypedRuleContext(GraphPatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterMatchStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitMatchStatement(this);
		}
	}


}



class LetStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_letStatement;
    }

	K_LET() {
	    return this.getToken(MQLParser.K_LET, 0);
	};

	letDefinitionList() {
	    return this.getTypedRuleContext(LetDefinitionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterLetStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitLetStatement(this);
		}
	}


}



class LetDefinitionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_letDefinitionList;
    }

	letDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LetDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(LetDefinitionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQLParser.COMMA);
	    } else {
	        return this.getToken(MQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterLetDefinitionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitLetDefinitionList(this);
		}
	}


}



class LetDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_letDefinition;
    }

	VARIABLE() {
	    return this.getToken(MQLParser.VARIABLE, 0);
	};

	SINGLE_EQ() {
	    return this.getToken(MQLParser.SINGLE_EQ, 0);
	};

	conditionalOrExpr() {
	    return this.getTypedRuleContext(ConditionalOrExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterLetDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitLetDefinition(this);
		}
	}


}



class WhereStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_whereStatement;
    }

	K_WHERE() {
	    return this.getToken(MQLParser.K_WHERE, 0);
	};

	conditionalOrExpr() {
	    return this.getTypedRuleContext(ConditionalOrExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterWhereStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitWhereStatement(this);
		}
	}


}



class GroupByStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_groupByStatement;
    }

	K_GROUP() {
	    return this.getToken(MQLParser.K_GROUP, 0);
	};

	K_BY() {
	    return this.getToken(MQLParser.K_BY, 0);
	};

	groupByItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GroupByItemContext);
	    } else {
	        return this.getTypedRuleContext(GroupByItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQLParser.COMMA);
	    } else {
	        return this.getToken(MQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterGroupByStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitGroupByStatement(this);
		}
	}


}



class OrderByStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_orderByStatement;
    }

	K_ORDER() {
	    return this.getToken(MQLParser.K_ORDER, 0);
	};

	K_BY() {
	    return this.getToken(MQLParser.K_BY, 0);
	};

	orderByItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OrderByItemContext);
	    } else {
	        return this.getTypedRuleContext(OrderByItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQLParser.COMMA);
	    } else {
	        return this.getToken(MQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterOrderByStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitOrderByStatement(this);
		}
	}


}



class ReturnStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_returnStatement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ReturnAllContext extends ReturnStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	K_RETURN() {
	    return this.getToken(MQLParser.K_RETURN, 0);
	};

	STAR() {
	    return this.getToken(MQLParser.STAR, 0);
	};

	K_DISTINCT() {
	    return this.getToken(MQLParser.K_DISTINCT, 0);
	};

	limitOffsetClauses() {
	    return this.getTypedRuleContext(LimitOffsetClausesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterReturnAll(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitReturnAll(this);
		}
	}


}

MQLParser.ReturnAllContext = ReturnAllContext;

class ReturnListContext extends ReturnStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	K_RETURN() {
	    return this.getToken(MQLParser.K_RETURN, 0);
	};

	returnItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReturnItemContext);
	    } else {
	        return this.getTypedRuleContext(ReturnItemContext,i);
	    }
	};

	K_DISTINCT() {
	    return this.getToken(MQLParser.K_DISTINCT, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQLParser.COMMA);
	    } else {
	        return this.getToken(MQLParser.COMMA, i);
	    }
	};


	limitOffsetClauses() {
	    return this.getTypedRuleContext(LimitOffsetClausesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterReturnList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitReturnList(this);
		}
	}


}

MQLParser.ReturnListContext = ReturnListContext;

class CallStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_callStatement;
    }

	K_CALL() {
	    return this.getToken(MQLParser.K_CALL, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	L_PAR() {
	    return this.getToken(MQLParser.L_PAR, 0);
	};

	R_PAR() {
	    return this.getToken(MQLParser.R_PAR, 0);
	};

	callArguments() {
	    return this.getTypedRuleContext(CallArgumentsContext,0);
	};

	yieldStatement() {
	    return this.getTypedRuleContext(YieldStatementContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterCallStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitCallStatement(this);
		}
	}


}



class YieldStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_yieldStatement;
    }

	K_YIELD() {
	    return this.getToken(MQLParser.K_YIELD, 0);
	};

	STAR() {
	    return this.getToken(MQLParser.STAR, 0);
	};

	yieldItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(YieldItemContext);
	    } else {
	        return this.getTypedRuleContext(YieldItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQLParser.COMMA);
	    } else {
	        return this.getToken(MQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterYieldStatement(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitYieldStatement(this);
		}
	}


}



class YieldItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_yieldItem;
    }

	VARIABLE() {
	    return this.getToken(MQLParser.VARIABLE, 0);
	};

	alias() {
	    return this.getTypedRuleContext(AliasContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterYieldItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitYieldItem(this);
		}
	}


}



class CallArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_callArguments;
    }

	conditionalOrExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionalOrExprContext);
	    } else {
	        return this.getTypedRuleContext(ConditionalOrExprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQLParser.COMMA);
	    } else {
	        return this.getToken(MQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterCallArguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitCallArguments(this);
		}
	}


}



class LimitOffsetClausesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_limitOffsetClauses;
    }

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	offsetClause() {
	    return this.getTypedRuleContext(OffsetClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterLimitOffsetClauses(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitLimitOffsetClauses(this);
		}
	}


}



class LimitClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_limitClause;
    }

	K_LIMIT() {
	    return this.getToken(MQLParser.K_LIMIT, 0);
	};

	UNSIGNED_INTEGER() {
	    return this.getToken(MQLParser.UNSIGNED_INTEGER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterLimitClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitLimitClause(this);
		}
	}


}



class OffsetClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_offsetClause;
    }

	K_OFFSET() {
	    return this.getToken(MQLParser.K_OFFSET, 0);
	};

	UNSIGNED_INTEGER() {
	    return this.getToken(MQLParser.UNSIGNED_INTEGER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterOffsetClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitOffsetClause(this);
		}
	}


}



class ReturnItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_returnItem;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ReturnItemExprContext extends ReturnItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	conditionalOrExpr() {
	    return this.getTypedRuleContext(ConditionalOrExprContext,0);
	};

	alias() {
	    return this.getTypedRuleContext(AliasContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterReturnItemExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitReturnItemExpr(this);
		}
	}


}

MQLParser.ReturnItemExprContext = ReturnItemExprContext;

class ReturnItemVarContext extends ReturnItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	VARIABLE() {
	    return this.getToken(MQLParser.VARIABLE, 0);
	};

	KEY() {
	    return this.getToken(MQLParser.KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterReturnItemVar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitReturnItemVar(this);
		}
	}


}

MQLParser.ReturnItemVarContext = ReturnItemVarContext;

class ReturnItemAggContext extends ReturnItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	aggregateFunc() {
	    return this.getTypedRuleContext(AggregateFuncContext,0);
	};

	L_PAR() {
	    return this.getToken(MQLParser.L_PAR, 0);
	};

	VARIABLE() {
	    return this.getToken(MQLParser.VARIABLE, 0);
	};

	R_PAR() {
	    return this.getToken(MQLParser.R_PAR, 0);
	};

	KEY() {
	    return this.getToken(MQLParser.KEY, 0);
	};

	alias() {
	    return this.getTypedRuleContext(AliasContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterReturnItemAgg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitReturnItemAgg(this);
		}
	}


}

MQLParser.ReturnItemAggContext = ReturnItemAggContext;

class ReturnItemCountContext extends ReturnItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	K_COUNT() {
	    return this.getToken(MQLParser.K_COUNT, 0);
	};

	L_PAR() {
	    return this.getToken(MQLParser.L_PAR, 0);
	};

	R_PAR() {
	    return this.getToken(MQLParser.R_PAR, 0);
	};

	VARIABLE() {
	    return this.getToken(MQLParser.VARIABLE, 0);
	};

	STAR() {
	    return this.getToken(MQLParser.STAR, 0);
	};

	K_DISTINCT() {
	    return this.getToken(MQLParser.K_DISTINCT, 0);
	};

	alias() {
	    return this.getTypedRuleContext(AliasContext,0);
	};

	KEY() {
	    return this.getToken(MQLParser.KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterReturnItemCount(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitReturnItemCount(this);
		}
	}


}

MQLParser.ReturnItemCountContext = ReturnItemCountContext;

class AliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_alias;
    }

	K_AS() {
	    return this.getToken(MQLParser.K_AS, 0);
	};

	VARIABLE() {
	    return this.getToken(MQLParser.VARIABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitAlias(this);
		}
	}


}



class AggregateFuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_aggregateFunc;
    }

	K_SUM() {
	    return this.getToken(MQLParser.K_SUM, 0);
	};

	K_MAX() {
	    return this.getToken(MQLParser.K_MAX, 0);
	};

	K_MIN() {
	    return this.getToken(MQLParser.K_MIN, 0);
	};

	K_AVG() {
	    return this.getToken(MQLParser.K_AVG, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterAggregateFunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitAggregateFunc(this);
		}
	}


}



class OrderByItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_orderByItem;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class OrderByItemCountContext extends OrderByItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	K_COUNT() {
	    return this.getToken(MQLParser.K_COUNT, 0);
	};

	L_PAR() {
	    return this.getToken(MQLParser.L_PAR, 0);
	};

	VARIABLE() {
	    return this.getToken(MQLParser.VARIABLE, 0);
	};

	R_PAR() {
	    return this.getToken(MQLParser.R_PAR, 0);
	};

	K_DISTINCT() {
	    return this.getToken(MQLParser.K_DISTINCT, 0);
	};

	KEY() {
	    return this.getToken(MQLParser.KEY, 0);
	};

	K_ASC() {
	    return this.getToken(MQLParser.K_ASC, 0);
	};

	K_DESC() {
	    return this.getToken(MQLParser.K_DESC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterOrderByItemCount(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitOrderByItemCount(this);
		}
	}


}

MQLParser.OrderByItemCountContext = OrderByItemCountContext;

class OrderByItemExprContext extends OrderByItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	conditionalOrExpr() {
	    return this.getTypedRuleContext(ConditionalOrExprContext,0);
	};

	K_ASC() {
	    return this.getToken(MQLParser.K_ASC, 0);
	};

	K_DESC() {
	    return this.getToken(MQLParser.K_DESC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterOrderByItemExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitOrderByItemExpr(this);
		}
	}


}

MQLParser.OrderByItemExprContext = OrderByItemExprContext;

class OrderByItemVarContext extends OrderByItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	VARIABLE() {
	    return this.getToken(MQLParser.VARIABLE, 0);
	};

	KEY() {
	    return this.getToken(MQLParser.KEY, 0);
	};

	K_ASC() {
	    return this.getToken(MQLParser.K_ASC, 0);
	};

	K_DESC() {
	    return this.getToken(MQLParser.K_DESC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterOrderByItemVar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitOrderByItemVar(this);
		}
	}


}

MQLParser.OrderByItemVarContext = OrderByItemVarContext;

class OrderByItemAggContext extends OrderByItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	aggregateFunc() {
	    return this.getTypedRuleContext(AggregateFuncContext,0);
	};

	L_PAR() {
	    return this.getToken(MQLParser.L_PAR, 0);
	};

	VARIABLE() {
	    return this.getToken(MQLParser.VARIABLE, 0);
	};

	R_PAR() {
	    return this.getToken(MQLParser.R_PAR, 0);
	};

	KEY() {
	    return this.getToken(MQLParser.KEY, 0);
	};

	K_ASC() {
	    return this.getToken(MQLParser.K_ASC, 0);
	};

	K_DESC() {
	    return this.getToken(MQLParser.K_DESC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterOrderByItemAgg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitOrderByItemAgg(this);
		}
	}


}

MQLParser.OrderByItemAggContext = OrderByItemAggContext;

class GroupByItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_groupByItem;
    }

	VARIABLE() {
	    return this.getToken(MQLParser.VARIABLE, 0);
	};

	KEY() {
	    return this.getToken(MQLParser.KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterGroupByItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitGroupByItem(this);
		}
	}


}



class GraphPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_graphPattern;
    }

	basicPattern() {
	    return this.getTypedRuleContext(BasicPatternContext,0);
	};

	optionalPattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OptionalPatternContext);
	    } else {
	        return this.getTypedRuleContext(OptionalPatternContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterGraphPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitGraphPattern(this);
		}
	}


}



class OptionalPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_optionalPattern;
    }

	K_OPTIONAL() {
	    return this.getToken(MQLParser.K_OPTIONAL, 0);
	};

	LCURLY_BRACKET() {
	    return this.getToken(MQLParser.LCURLY_BRACKET, 0);
	};

	graphPattern() {
	    return this.getTypedRuleContext(GraphPatternContext,0);
	};

	RCURLY_BRACKET() {
	    return this.getToken(MQLParser.RCURLY_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterOptionalPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitOptionalPattern(this);
		}
	}


}



class BasicPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_basicPattern;
    }

	linearPattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LinearPatternContext);
	    } else {
	        return this.getTypedRuleContext(LinearPatternContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQLParser.COMMA);
	    } else {
	        return this.getToken(MQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterBasicPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitBasicPattern(this);
		}
	}


}



class LinearPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_linearPattern;
    }

	node = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NodeContext);
	    } else {
	        return this.getTypedRuleContext(NodeContext,i);
	    }
	};

	edge = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EdgeContext);
	    } else {
	        return this.getTypedRuleContext(EdgeContext,i);
	    }
	};

	path = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathContext);
	    } else {
	        return this.getTypedRuleContext(PathContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterLinearPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitLinearPattern(this);
		}
	}


}



class PathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_path;
    }

	LEQ() {
	    return this.getToken(MQLParser.LEQ, 0);
	};

	LSQUARE_BRACKET() {
	    return this.getToken(MQLParser.LSQUARE_BRACKET, 0);
	};

	pathAlternatives() {
	    return this.getTypedRuleContext(PathAlternativesContext,0);
	};

	RSQUARE_BRACKET() {
	    return this.getToken(MQLParser.RSQUARE_BRACKET, 0);
	};

	SINGLE_EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQLParser.SINGLE_EQ);
	    } else {
	        return this.getToken(MQLParser.SINGLE_EQ, i);
	    }
	};


	pathType() {
	    return this.getTypedRuleContext(PathTypeContext,0);
	};

	VARIABLE() {
	    return this.getToken(MQLParser.VARIABLE, 0);
	};

	GT() {
	    return this.getToken(MQLParser.GT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitPath(this);
		}
	}


}



class PathAlternativesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_pathAlternatives;
    }

	pathSequence = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathSequenceContext);
	    } else {
	        return this.getTypedRuleContext(PathSequenceContext,i);
	    }
	};

	PATH_ALTERNATIVE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQLParser.PATH_ALTERNATIVE);
	    } else {
	        return this.getToken(MQLParser.PATH_ALTERNATIVE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterPathAlternatives(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitPathAlternatives(this);
		}
	}


}



class PathSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_pathSequence;
    }

	pathAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathAtomContext);
	    } else {
	        return this.getTypedRuleContext(PathAtomContext,i);
	    }
	};

	PATH_SEQUENCE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQLParser.PATH_SEQUENCE);
	    } else {
	        return this.getToken(MQLParser.PATH_SEQUENCE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterPathSequence(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitPathSequence(this);
		}
	}


}



class PathAtomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_pathAtom;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PathAtomAlternativesContext extends PathAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	L_PAR() {
	    return this.getToken(MQLParser.L_PAR, 0);
	};

	pathAlternatives() {
	    return this.getTypedRuleContext(PathAlternativesContext,0);
	};

	R_PAR() {
	    return this.getToken(MQLParser.R_PAR, 0);
	};

	PATH_NEGATION() {
	    return this.getToken(MQLParser.PATH_NEGATION, 0);
	};

	pathSuffix() {
	    return this.getTypedRuleContext(PathSuffixContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterPathAtomAlternatives(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitPathAtomAlternatives(this);
		}
	}


}

MQLParser.PathAtomAlternativesContext = PathAtomAlternativesContext;

class PathAtomSimpleContext extends PathAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TYPE() {
	    return this.getToken(MQLParser.TYPE, 0);
	};

	PATH_NEGATION() {
	    return this.getToken(MQLParser.PATH_NEGATION, 0);
	};

	pathSuffix() {
	    return this.getTypedRuleContext(PathSuffixContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterPathAtomSimple(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitPathAtomSimple(this);
		}
	}


}

MQLParser.PathAtomSimpleContext = PathAtomSimpleContext;

class PathSuffixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_pathSuffix;
        this.op = null;
        this.min = null;
        this.max = null;
    }

	STAR() {
	    return this.getToken(MQLParser.STAR, 0);
	};

	PLUS() {
	    return this.getToken(MQLParser.PLUS, 0);
	};

	QUESTION_MARK() {
	    return this.getToken(MQLParser.QUESTION_MARK, 0);
	};

	LCURLY_BRACKET() {
	    return this.getToken(MQLParser.LCURLY_BRACKET, 0);
	};

	COMMA() {
	    return this.getToken(MQLParser.COMMA, 0);
	};

	RCURLY_BRACKET() {
	    return this.getToken(MQLParser.RCURLY_BRACKET, 0);
	};

	UNSIGNED_INTEGER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQLParser.UNSIGNED_INTEGER);
	    } else {
	        return this.getToken(MQLParser.UNSIGNED_INTEGER, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterPathSuffix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitPathSuffix(this);
		}
	}


}



class PathTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_pathType;
    }

	K_ANY() {
	    return this.getToken(MQLParser.K_ANY, 0);
	};

	K_ALL() {
	    return this.getToken(MQLParser.K_ALL, 0);
	};

	K_SHORTEST() {
	    return this.getToken(MQLParser.K_SHORTEST, 0);
	};

	K_WALKS() {
	    return this.getToken(MQLParser.K_WALKS, 0);
	};

	K_SIMPLE() {
	    return this.getToken(MQLParser.K_SIMPLE, 0);
	};

	K_ACYCLIC() {
	    return this.getToken(MQLParser.K_ACYCLIC, 0);
	};

	K_TRAILS() {
	    return this.getToken(MQLParser.K_TRAILS, 0);
	};

	UNSIGNED_INTEGER() {
	    return this.getToken(MQLParser.UNSIGNED_INTEGER, 0);
	};

	K_GROUPS() {
	    return this.getToken(MQLParser.K_GROUPS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterPathType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitPathType(this);
		}
	}


}



class NodeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_node;
    }

	fixedNode() {
	    return this.getTypedRuleContext(FixedNodeContext,0);
	};

	varNode() {
	    return this.getTypedRuleContext(VarNodeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterNode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitNode(this);
		}
	}


}



class FixedNodeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_fixedNode;
    }

	L_PAR() {
	    return this.getToken(MQLParser.L_PAR, 0);
	};

	fixedNodeInside() {
	    return this.getTypedRuleContext(FixedNodeInsideContext,0);
	};

	R_PAR() {
	    return this.getToken(MQLParser.R_PAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterFixedNode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitFixedNode(this);
		}
	}


}



class FixedNodeInsideContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_fixedNodeInside;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ANON_ID() {
	    return this.getToken(MQLParser.ANON_ID, 0);
	};

	EDGE_ID() {
	    return this.getToken(MQLParser.EDGE_ID, 0);
	};

	value() {
	    return this.getTypedRuleContext(ValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterFixedNodeInside(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitFixedNodeInside(this);
		}
	}


}



class EdgeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_edge;
    }

	LT() {
	    return this.getToken(MQLParser.LT, 0);
	};

	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQLParser.MINUS);
	    } else {
	        return this.getToken(MQLParser.MINUS, i);
	    }
	};


	edgeInside() {
	    return this.getTypedRuleContext(EdgeInsideContext,0);
	};

	GT() {
	    return this.getToken(MQLParser.GT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterEdge(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitEdge(this);
		}
	}


}



class EdgeInsideContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_edgeInside;
    }

	LSQUARE_BRACKET() {
	    return this.getToken(MQLParser.LSQUARE_BRACKET, 0);
	};

	RSQUARE_BRACKET() {
	    return this.getToken(MQLParser.RSQUARE_BRACKET, 0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	VARIABLE() {
	    return this.getToken(MQLParser.VARIABLE, 0);
	};

	EDGE_ID() {
	    return this.getToken(MQLParser.EDGE_ID, 0);
	};

	TYPE() {
	    return this.getToken(MQLParser.TYPE, 0);
	};

	TYPE_VAR() {
	    return this.getToken(MQLParser.TYPE_VAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterEdgeInside(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitEdgeInside(this);
		}
	}


}



class VarNodeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_varNode;
    }

	L_PAR() {
	    return this.getToken(MQLParser.L_PAR, 0);
	};

	R_PAR() {
	    return this.getToken(MQLParser.R_PAR, 0);
	};

	VARIABLE() {
	    return this.getToken(MQLParser.VARIABLE, 0);
	};

	TYPE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQLParser.TYPE);
	    } else {
	        return this.getToken(MQLParser.TYPE, i);
	    }
	};


	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterVarNode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitVarNode(this);
		}
	}


}



class PropertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_properties;
    }

	LCURLY_BRACKET() {
	    return this.getToken(MQLParser.LCURLY_BRACKET, 0);
	};

	property = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PropertyContext);
	    } else {
	        return this.getTypedRuleContext(PropertyContext,i);
	    }
	};

	RCURLY_BRACKET() {
	    return this.getToken(MQLParser.RCURLY_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQLParser.COMMA);
	    } else {
	        return this.getToken(MQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterProperties(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitProperties(this);
		}
	}


}



class PropertyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_property;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class Property2Context extends PropertyContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	TYPE() {
	    return this.getToken(MQLParser.TYPE, 0);
	};

	L_PAR() {
	    return this.getToken(MQLParser.L_PAR, 0);
	};

	STRING() {
	    return this.getToken(MQLParser.STRING, 0);
	};

	R_PAR() {
	    return this.getToken(MQLParser.R_PAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterProperty2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitProperty2(this);
		}
	}


}

MQLParser.Property2Context = Property2Context;

class Property1Context extends PropertyContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	COLON() {
	    return this.getToken(MQLParser.COLON, 0);
	};

	value() {
	    return this.getTypedRuleContext(ValueContext,0);
	};

	TRUE_PROP() {
	    return this.getToken(MQLParser.TRUE_PROP, 0);
	};

	FALSE_PROP() {
	    return this.getToken(MQLParser.FALSE_PROP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterProperty1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitProperty1(this);
		}
	}


}

MQLParser.Property1Context = Property1Context;

class Property4Context extends PropertyContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null;;
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	value() {
	    return this.getTypedRuleContext(ValueContext,0);
	};

	EQ() {
	    return this.getToken(MQLParser.EQ, 0);
	};

	NEQ() {
	    return this.getToken(MQLParser.NEQ, 0);
	};

	LT() {
	    return this.getToken(MQLParser.LT, 0);
	};

	GT() {
	    return this.getToken(MQLParser.GT, 0);
	};

	LEQ() {
	    return this.getToken(MQLParser.LEQ, 0);
	};

	GEQ() {
	    return this.getToken(MQLParser.GEQ, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterProperty4(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitProperty4(this);
		}
	}


}

MQLParser.Property4Context = Property4Context;

class Property3Context extends PropertyContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	K_IS() {
	    return this.getToken(MQLParser.K_IS, 0);
	};

	exprTypename() {
	    return this.getTypedRuleContext(ExprTypenameContext,0);
	};

	K_NOT() {
	    return this.getToken(MQLParser.K_NOT, 0);
	};

	conditionalOrType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionalOrTypeContext);
	    } else {
	        return this.getTypedRuleContext(ConditionalOrTypeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterProperty3(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitProperty3(this);
		}
	}


}

MQLParser.Property3Context = Property3Context;

class ConditionalOrTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_conditionalOrType;
    }

	K_OR() {
	    return this.getToken(MQLParser.K_OR, 0);
	};

	exprTypename() {
	    return this.getTypedRuleContext(ExprTypenameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterConditionalOrType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitConditionalOrType(this);
		}
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_identifier;
    }

	NAME() {
	    return this.getToken(MQLParser.NAME, 0);
	};

	keyword() {
	    return this.getTypedRuleContext(KeywordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitIdentifier(this);
		}
	}


}



class BoolValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_boolValue;
    }

	K_TRUE() {
	    return this.getToken(MQLParser.K_TRUE, 0);
	};

	K_FALSE() {
	    return this.getToken(MQLParser.K_FALSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterBoolValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitBoolValue(this);
		}
	}


}



class NumericValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_numericValue;
    }

	UNSIGNED_INTEGER() {
	    return this.getToken(MQLParser.UNSIGNED_INTEGER, 0);
	};

	UNSIGNED_FLOAT() {
	    return this.getToken(MQLParser.UNSIGNED_FLOAT, 0);
	};

	UNSIGNED_SCIENTIFIC_NOTATION() {
	    return this.getToken(MQLParser.UNSIGNED_SCIENTIFIC_NOTATION, 0);
	};

	PLUS() {
	    return this.getToken(MQLParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(MQLParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterNumericValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitNumericValue(this);
		}
	}


}



class DatatypeValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_datatypeValue;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	L_PAR() {
	    return this.getToken(MQLParser.L_PAR, 0);
	};

	STRING() {
	    return this.getToken(MQLParser.STRING, 0);
	};

	R_PAR() {
	    return this.getToken(MQLParser.R_PAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterDatatypeValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitDatatypeValue(this);
		}
	}


}



class ValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_value;
    }

	numericValue() {
	    return this.getTypedRuleContext(NumericValueContext,0);
	};

	STRING() {
	    return this.getToken(MQLParser.STRING, 0);
	};

	boolValue() {
	    return this.getTypedRuleContext(BoolValueContext,0);
	};

	datatypeValue() {
	    return this.getTypedRuleContext(DatatypeValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitValue(this);
		}
	}


}



class ConditionalOrExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_conditionalOrExpr;
    }

	conditionalAndExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionalAndExprContext);
	    } else {
	        return this.getTypedRuleContext(ConditionalAndExprContext,i);
	    }
	};

	K_OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQLParser.K_OR);
	    } else {
	        return this.getToken(MQLParser.K_OR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterConditionalOrExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitConditionalOrExpr(this);
		}
	}


}



class ConditionalAndExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_conditionalAndExpr;
    }

	comparisonExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ComparisonExprContext);
	    } else {
	        return this.getTypedRuleContext(ComparisonExprContext,i);
	    }
	};

	K_AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQLParser.K_AND);
	    } else {
	        return this.getToken(MQLParser.K_AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterConditionalAndExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitConditionalAndExpr(this);
		}
	}


}



class ComparisonExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_comparisonExpr;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ComparisonExprIsContext extends ComparisonExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	additiveExpr() {
	    return this.getTypedRuleContext(AdditiveExprContext,0);
	};

	K_IS() {
	    return this.getToken(MQLParser.K_IS, 0);
	};

	exprTypename() {
	    return this.getTypedRuleContext(ExprTypenameContext,0);
	};

	K_NOT() {
	    return this.getToken(MQLParser.K_NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterComparisonExprIs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitComparisonExprIs(this);
		}
	}


}

MQLParser.ComparisonExprIsContext = ComparisonExprIsContext;

class ComparisonExprOpContext extends ComparisonExprContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null;;
        super.copyFrom(ctx);
    }

	additiveExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AdditiveExprContext);
	    } else {
	        return this.getTypedRuleContext(AdditiveExprContext,i);
	    }
	};

	EQ() {
	    return this.getToken(MQLParser.EQ, 0);
	};

	NEQ() {
	    return this.getToken(MQLParser.NEQ, 0);
	};

	LT() {
	    return this.getToken(MQLParser.LT, 0);
	};

	GT() {
	    return this.getToken(MQLParser.GT, 0);
	};

	LEQ() {
	    return this.getToken(MQLParser.LEQ, 0);
	};

	GEQ() {
	    return this.getToken(MQLParser.GEQ, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterComparisonExprOp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitComparisonExprOp(this);
		}
	}


}

MQLParser.ComparisonExprOpContext = ComparisonExprOpContext;

class AdditiveExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_additiveExpr;
        this.s94 = null;
        this.op = [];
        this.s95 = null;
        this._tset1390 = null;
    }

	multiplicativeExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MultiplicativeExprContext);
	    } else {
	        return this.getTypedRuleContext(MultiplicativeExprContext,i);
	    }
	};

	PLUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQLParser.PLUS);
	    } else {
	        return this.getToken(MQLParser.PLUS, i);
	    }
	};


	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQLParser.MINUS);
	    } else {
	        return this.getToken(MQLParser.MINUS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterAdditiveExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitAdditiveExpr(this);
		}
	}


}



class MultiplicativeExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_multiplicativeExpr;
        this.s91 = null;
        this.op = [];
        this.s88 = null;
        this.s92 = null;
        this._tset1409 = null;
    }

	unaryExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnaryExprContext);
	    } else {
	        return this.getTypedRuleContext(UnaryExprContext,i);
	    }
	};

	STAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQLParser.STAR);
	    } else {
	        return this.getToken(MQLParser.STAR, i);
	    }
	};


	PATH_SEQUENCE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQLParser.PATH_SEQUENCE);
	    } else {
	        return this.getToken(MQLParser.PATH_SEQUENCE, i);
	    }
	};


	PERCENT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQLParser.PERCENT);
	    } else {
	        return this.getToken(MQLParser.PERCENT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterMultiplicativeExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitMultiplicativeExpr(this);
		}
	}


}



class UnaryExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_unaryExpr;
    }

	K_NOT() {
	    return this.getToken(MQLParser.K_NOT, 0);
	};

	unaryExpr() {
	    return this.getTypedRuleContext(UnaryExprContext,0);
	};

	atomicExpr() {
	    return this.getTypedRuleContext(AtomicExprContext,0);
	};

	PLUS() {
	    return this.getToken(MQLParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(MQLParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterUnaryExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitUnaryExpr(this);
		}
	}


}



class AtomicExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_atomicExpr;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ExprFunctionContext extends AtomicExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	function_() {
	    return this.getTypedRuleContext(FunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterExprFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitExprFunction(this);
		}
	}


}

MQLParser.ExprFunctionContext = ExprFunctionContext;

class ExprValueContext extends AtomicExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	value() {
	    return this.getTypedRuleContext(ValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterExprValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitExprValue(this);
		}
	}


}

MQLParser.ExprValueContext = ExprValueContext;

class ExprFixedNodeInsideContext extends AtomicExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	fixedNodeInside() {
	    return this.getTypedRuleContext(FixedNodeInsideContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterExprFixedNodeInside(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitExprFixedNodeInside(this);
		}
	}


}

MQLParser.ExprFixedNodeInsideContext = ExprFixedNodeInsideContext;

class ExprVarContext extends AtomicExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	VARIABLE() {
	    return this.getToken(MQLParser.VARIABLE, 0);
	};

	KEY() {
	    return this.getToken(MQLParser.KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterExprVar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitExprVar(this);
		}
	}


}

MQLParser.ExprVarContext = ExprVarContext;

class ExprParenthesisContext extends AtomicExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	L_PAR() {
	    return this.getToken(MQLParser.L_PAR, 0);
	};

	conditionalOrExpr() {
	    return this.getTypedRuleContext(ConditionalOrExprContext,0);
	};

	R_PAR() {
	    return this.getToken(MQLParser.R_PAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterExprParenthesis(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitExprParenthesis(this);
		}
	}


}

MQLParser.ExprParenthesisContext = ExprParenthesisContext;

class FunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_function;
    }

	regex() {
	    return this.getTypedRuleContext(RegexContext,0);
	};

	textSearch() {
	    return this.getTypedRuleContext(TextSearchContext,0);
	};

	cosineSimilarity() {
	    return this.getTypedRuleContext(CosineSimilarityContext,0);
	};

	cosineDistance() {
	    return this.getTypedRuleContext(CosineDistanceContext,0);
	};

	manhattanDistance() {
	    return this.getTypedRuleContext(ManhattanDistanceContext,0);
	};

	euclideanDistance() {
	    return this.getTypedRuleContext(EuclideanDistanceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitFunction(this);
		}
	}


}



class RegexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_regex;
    }

	K_REGEX() {
	    return this.getToken(MQLParser.K_REGEX, 0);
	};

	L_PAR() {
	    return this.getToken(MQLParser.L_PAR, 0);
	};

	conditionalOrExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionalOrExprContext);
	    } else {
	        return this.getTypedRuleContext(ConditionalOrExprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQLParser.COMMA);
	    } else {
	        return this.getToken(MQLParser.COMMA, i);
	    }
	};


	R_PAR() {
	    return this.getToken(MQLParser.R_PAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterRegex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitRegex(this);
		}
	}


}



class TextSearchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_textSearch;
    }

	K_TEXT_SEARCH() {
	    return this.getToken(MQLParser.K_TEXT_SEARCH, 0);
	};

	L_PAR() {
	    return this.getToken(MQLParser.L_PAR, 0);
	};

	STRING = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQLParser.STRING);
	    } else {
	        return this.getToken(MQLParser.STRING, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQLParser.COMMA);
	    } else {
	        return this.getToken(MQLParser.COMMA, i);
	    }
	};


	textSearchIndexMode() {
	    return this.getTypedRuleContext(TextSearchIndexModeContext,0);
	};

	VARIABLE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQLParser.VARIABLE);
	    } else {
	        return this.getToken(MQLParser.VARIABLE, i);
	    }
	};


	R_PAR() {
	    return this.getToken(MQLParser.R_PAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterTextSearch(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitTextSearch(this);
		}
	}


}



class CosineSimilarityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_cosineSimilarity;
    }

	K_COSINE_SIMILARITY() {
	    return this.getToken(MQLParser.K_COSINE_SIMILARITY, 0);
	};

	L_PAR() {
	    return this.getToken(MQLParser.L_PAR, 0);
	};

	conditionalOrExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionalOrExprContext);
	    } else {
	        return this.getTypedRuleContext(ConditionalOrExprContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(MQLParser.COMMA, 0);
	};

	R_PAR() {
	    return this.getToken(MQLParser.R_PAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterCosineSimilarity(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitCosineSimilarity(this);
		}
	}


}



class CosineDistanceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_cosineDistance;
    }

	K_COSINE_DISTANCE() {
	    return this.getToken(MQLParser.K_COSINE_DISTANCE, 0);
	};

	L_PAR() {
	    return this.getToken(MQLParser.L_PAR, 0);
	};

	conditionalOrExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionalOrExprContext);
	    } else {
	        return this.getTypedRuleContext(ConditionalOrExprContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(MQLParser.COMMA, 0);
	};

	R_PAR() {
	    return this.getToken(MQLParser.R_PAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterCosineDistance(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitCosineDistance(this);
		}
	}


}



class ManhattanDistanceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_manhattanDistance;
    }

	K_MANHATTAN_DISTANCE() {
	    return this.getToken(MQLParser.K_MANHATTAN_DISTANCE, 0);
	};

	L_PAR() {
	    return this.getToken(MQLParser.L_PAR, 0);
	};

	conditionalOrExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionalOrExprContext);
	    } else {
	        return this.getTypedRuleContext(ConditionalOrExprContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(MQLParser.COMMA, 0);
	};

	R_PAR() {
	    return this.getToken(MQLParser.R_PAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterManhattanDistance(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitManhattanDistance(this);
		}
	}


}



class EuclideanDistanceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_euclideanDistance;
    }

	K_EUCLIDEAN_DISTANCE() {
	    return this.getToken(MQLParser.K_EUCLIDEAN_DISTANCE, 0);
	};

	L_PAR() {
	    return this.getToken(MQLParser.L_PAR, 0);
	};

	conditionalOrExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionalOrExprContext);
	    } else {
	        return this.getTypedRuleContext(ConditionalOrExprContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(MQLParser.COMMA, 0);
	};

	R_PAR() {
	    return this.getToken(MQLParser.R_PAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterEuclideanDistance(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitEuclideanDistance(this);
		}
	}


}



class TextSearchIndexModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_textSearchIndexMode;
    }

	K_PREFIX() {
	    return this.getToken(MQLParser.K_PREFIX, 0);
	};

	K_MATCH() {
	    return this.getToken(MQLParser.K_MATCH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterTextSearchIndexMode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitTextSearchIndexMode(this);
		}
	}


}



class ExprTypenameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_exprTypename;
    }

	K_NULL() {
	    return this.getToken(MQLParser.K_NULL, 0);
	};

	K_STRING() {
	    return this.getToken(MQLParser.K_STRING, 0);
	};

	K_BOOL() {
	    return this.getToken(MQLParser.K_BOOL, 0);
	};

	K_INTEGER() {
	    return this.getToken(MQLParser.K_INTEGER, 0);
	};

	K_FLOAT() {
	    return this.getToken(MQLParser.K_FLOAT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterExprTypename(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitExprTypename(this);
		}
	}


}



class KeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQLParser.RULE_keyword;
    }

	K_ACYCLIC() {
	    return this.getToken(MQLParser.K_ACYCLIC, 0);
	};

	K_AND() {
	    return this.getToken(MQLParser.K_AND, 0);
	};

	K_ANY() {
	    return this.getToken(MQLParser.K_ANY, 0);
	};

	K_AS() {
	    return this.getToken(MQLParser.K_AS, 0);
	};

	K_AVG() {
	    return this.getToken(MQLParser.K_AVG, 0);
	};

	K_ALL() {
	    return this.getToken(MQLParser.K_ALL, 0);
	};

	K_ASC() {
	    return this.getToken(MQLParser.K_ASC, 0);
	};

	K_BY() {
	    return this.getToken(MQLParser.K_BY, 0);
	};

	K_BOOL() {
	    return this.getToken(MQLParser.K_BOOL, 0);
	};

	K_CALL() {
	    return this.getToken(MQLParser.K_CALL, 0);
	};

	K_COSINE_DISTANCE() {
	    return this.getToken(MQLParser.K_COSINE_DISTANCE, 0);
	};

	K_COSINE_SIMILARITY() {
	    return this.getToken(MQLParser.K_COSINE_SIMILARITY, 0);
	};

	K_COUNT() {
	    return this.getToken(MQLParser.K_COUNT, 0);
	};

	K_CREATE() {
	    return this.getToken(MQLParser.K_CREATE, 0);
	};

	K_DELETE() {
	    return this.getToken(MQLParser.K_DELETE, 0);
	};

	K_DESCRIBE() {
	    return this.getToken(MQLParser.K_DESCRIBE, 0);
	};

	K_DESC() {
	    return this.getToken(MQLParser.K_DESC, 0);
	};

	K_DIMENSIONS() {
	    return this.getToken(MQLParser.K_DIMENSIONS, 0);
	};

	K_DISTINCT() {
	    return this.getToken(MQLParser.K_DISTINCT, 0);
	};

	K_EDGE() {
	    return this.getToken(MQLParser.K_EDGE, 0);
	};

	K_EUCLIDEAN_DISTANCE() {
	    return this.getToken(MQLParser.K_EUCLIDEAN_DISTANCE, 0);
	};

	K_FROM() {
	    return this.getToken(MQLParser.K_FROM, 0);
	};

	K_INCOMING() {
	    return this.getToken(MQLParser.K_INCOMING, 0);
	};

	K_INDEX() {
	    return this.getToken(MQLParser.K_INDEX, 0);
	};

	K_INSERT() {
	    return this.getToken(MQLParser.K_INSERT, 0);
	};

	K_INTEGER() {
	    return this.getToken(MQLParser.K_INTEGER, 0);
	};

	K_INTO() {
	    return this.getToken(MQLParser.K_INTO, 0);
	};

	K_IS() {
	    return this.getToken(MQLParser.K_IS, 0);
	};

	K_FLOAT() {
	    return this.getToken(MQLParser.K_FLOAT, 0);
	};

	K_GROUP() {
	    return this.getToken(MQLParser.K_GROUP, 0);
	};

	K_GROUPS() {
	    return this.getToken(MQLParser.K_GROUPS, 0);
	};

	K_IDENTITY() {
	    return this.getToken(MQLParser.K_IDENTITY, 0);
	};

	K_LABELS() {
	    return this.getToken(MQLParser.K_LABELS, 0);
	};

	K_LABEL() {
	    return this.getToken(MQLParser.K_LABEL, 0);
	};

	K_LET() {
	    return this.getToken(MQLParser.K_LET, 0);
	};

	K_LIMIT() {
	    return this.getToken(MQLParser.K_LIMIT, 0);
	};

	K_MANHATTAN_DISTANCE() {
	    return this.getToken(MQLParser.K_MANHATTAN_DISTANCE, 0);
	};

	K_MATCH() {
	    return this.getToken(MQLParser.K_MATCH, 0);
	};

	K_MAX() {
	    return this.getToken(MQLParser.K_MAX, 0);
	};

	K_MIN() {
	    return this.getToken(MQLParser.K_MIN, 0);
	};

	K_OBJECTS() {
	    return this.getToken(MQLParser.K_OBJECTS, 0);
	};

	K_OFFSET() {
	    return this.getToken(MQLParser.K_OFFSET, 0);
	};

	K_OPTIONAL() {
	    return this.getToken(MQLParser.K_OPTIONAL, 0);
	};

	K_ORDER() {
	    return this.getToken(MQLParser.K_ORDER, 0);
	};

	K_OR() {
	    return this.getToken(MQLParser.K_OR, 0);
	};

	K_OUTGOING() {
	    return this.getToken(MQLParser.K_OUTGOING, 0);
	};

	K_PREFIX() {
	    return this.getToken(MQLParser.K_PREFIX, 0);
	};

	K_PROPERTIES() {
	    return this.getToken(MQLParser.K_PROPERTIES, 0);
	};

	K_PROPERTY() {
	    return this.getToken(MQLParser.K_PROPERTY, 0);
	};

	K_NOT() {
	    return this.getToken(MQLParser.K_NOT, 0);
	};

	K_NULL() {
	    return this.getToken(MQLParser.K_NULL, 0);
	};

	K_SHORTEST() {
	    return this.getToken(MQLParser.K_SHORTEST, 0);
	};

	K_SHOW() {
	    return this.getToken(MQLParser.K_SHOW, 0);
	};

	K_SIMPLE() {
	    return this.getToken(MQLParser.K_SIMPLE, 0);
	};

	K_TEXT_SEARCH() {
	    return this.getToken(MQLParser.K_TEXT_SEARCH, 0);
	};

	K_REGEX() {
	    return this.getToken(MQLParser.K_REGEX, 0);
	};

	K_RETURN() {
	    return this.getToken(MQLParser.K_RETURN, 0);
	};

	K_SUM() {
	    return this.getToken(MQLParser.K_SUM, 0);
	};

	K_STRING() {
	    return this.getToken(MQLParser.K_STRING, 0);
	};

	K_TRAILS() {
	    return this.getToken(MQLParser.K_TRAILS, 0);
	};

	K_VALUES() {
	    return this.getToken(MQLParser.K_VALUES, 0);
	};

	K_WALKS() {
	    return this.getToken(MQLParser.K_WALKS, 0);
	};

	K_WITH() {
	    return this.getToken(MQLParser.K_WITH, 0);
	};

	K_WHERE() {
	    return this.getToken(MQLParser.K_WHERE, 0);
	};

	K_YIELD() {
	    return this.getToken(MQLParser.K_YIELD, 0);
	};

	enterRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.enterKeyword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof MQLParserListener ) {
	        listener.exitKeyword(this);
		}
	}


}




MQLParser.RootContext = RootContext; 
MQLParser.MatchQueryContext = MatchQueryContext; 
MQLParser.PrimitiveStatementListContext = PrimitiveStatementListContext; 
MQLParser.PrimitiveStatementContext = PrimitiveStatementContext; 
MQLParser.InsertPatternsContext = InsertPatternsContext; 
MQLParser.InsertLinearPatternContext = InsertLinearPatternContext; 
MQLParser.InsertPlainNodeContext = InsertPlainNodeContext; 
MQLParser.InsertPlainNodeInsideContext = InsertPlainNodeInsideContext; 
MQLParser.InsertPlainEdgeContext = InsertPlainEdgeContext; 
MQLParser.CreateIndexQueryContext = CreateIndexQueryContext; 
MQLParser.CreateIndexOptionsContext = CreateIndexOptionsContext; 
MQLParser.CreateIndexOptionContext = CreateIndexOptionContext; 
MQLParser.ShowQueryContext = ShowQueryContext; 
MQLParser.DescribeQueryContext = DescribeQueryContext; 
MQLParser.DescribeFlagContext = DescribeFlagContext; 
MQLParser.MatchStatementContext = MatchStatementContext; 
MQLParser.LetStatementContext = LetStatementContext; 
MQLParser.LetDefinitionListContext = LetDefinitionListContext; 
MQLParser.LetDefinitionContext = LetDefinitionContext; 
MQLParser.WhereStatementContext = WhereStatementContext; 
MQLParser.GroupByStatementContext = GroupByStatementContext; 
MQLParser.OrderByStatementContext = OrderByStatementContext; 
MQLParser.ReturnStatementContext = ReturnStatementContext; 
MQLParser.CallStatementContext = CallStatementContext; 
MQLParser.YieldStatementContext = YieldStatementContext; 
MQLParser.YieldItemContext = YieldItemContext; 
MQLParser.CallArgumentsContext = CallArgumentsContext; 
MQLParser.LimitOffsetClausesContext = LimitOffsetClausesContext; 
MQLParser.LimitClauseContext = LimitClauseContext; 
MQLParser.OffsetClauseContext = OffsetClauseContext; 
MQLParser.ReturnItemContext = ReturnItemContext; 
MQLParser.AliasContext = AliasContext; 
MQLParser.AggregateFuncContext = AggregateFuncContext; 
MQLParser.OrderByItemContext = OrderByItemContext; 
MQLParser.GroupByItemContext = GroupByItemContext; 
MQLParser.GraphPatternContext = GraphPatternContext; 
MQLParser.OptionalPatternContext = OptionalPatternContext; 
MQLParser.BasicPatternContext = BasicPatternContext; 
MQLParser.LinearPatternContext = LinearPatternContext; 
MQLParser.PathContext = PathContext; 
MQLParser.PathAlternativesContext = PathAlternativesContext; 
MQLParser.PathSequenceContext = PathSequenceContext; 
MQLParser.PathAtomContext = PathAtomContext; 
MQLParser.PathSuffixContext = PathSuffixContext; 
MQLParser.PathTypeContext = PathTypeContext; 
MQLParser.NodeContext = NodeContext; 
MQLParser.FixedNodeContext = FixedNodeContext; 
MQLParser.FixedNodeInsideContext = FixedNodeInsideContext; 
MQLParser.EdgeContext = EdgeContext; 
MQLParser.EdgeInsideContext = EdgeInsideContext; 
MQLParser.VarNodeContext = VarNodeContext; 
MQLParser.PropertiesContext = PropertiesContext; 
MQLParser.PropertyContext = PropertyContext; 
MQLParser.ConditionalOrTypeContext = ConditionalOrTypeContext; 
MQLParser.IdentifierContext = IdentifierContext; 
MQLParser.BoolValueContext = BoolValueContext; 
MQLParser.NumericValueContext = NumericValueContext; 
MQLParser.DatatypeValueContext = DatatypeValueContext; 
MQLParser.ValueContext = ValueContext; 
MQLParser.ConditionalOrExprContext = ConditionalOrExprContext; 
MQLParser.ConditionalAndExprContext = ConditionalAndExprContext; 
MQLParser.ComparisonExprContext = ComparisonExprContext; 
MQLParser.AdditiveExprContext = AdditiveExprContext; 
MQLParser.MultiplicativeExprContext = MultiplicativeExprContext; 
MQLParser.UnaryExprContext = UnaryExprContext; 
MQLParser.AtomicExprContext = AtomicExprContext; 
MQLParser.FunctionContext = FunctionContext; 
MQLParser.RegexContext = RegexContext; 
MQLParser.TextSearchContext = TextSearchContext; 
MQLParser.CosineSimilarityContext = CosineSimilarityContext; 
MQLParser.CosineDistanceContext = CosineDistanceContext; 
MQLParser.ManhattanDistanceContext = ManhattanDistanceContext; 
MQLParser.EuclideanDistanceContext = EuclideanDistanceContext; 
MQLParser.TextSearchIndexModeContext = TextSearchIndexModeContext; 
MQLParser.ExprTypenameContext = ExprTypenameContext; 
MQLParser.KeywordContext = KeywordContext; 
