// Generated from src/grammar/mql/MQL_Parser.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';
const serializedATN = [4,1,106,861,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,1,0,1,0,1,0,1,0,1,0,3,
0,158,8,0,1,0,1,0,1,1,1,1,3,1,164,8,1,1,1,3,1,167,8,1,1,1,3,1,170,8,1,1,
1,1,1,1,2,4,2,175,8,2,11,2,12,2,176,1,3,1,3,1,3,3,3,182,8,3,1,4,1,4,1,4,
1,4,5,4,188,8,4,10,4,12,4,191,9,4,1,5,1,5,1,5,1,5,5,5,197,8,5,10,5,12,5,
200,9,5,1,6,1,6,3,6,204,8,6,1,6,5,6,207,8,6,10,6,12,6,210,9,6,1,6,3,6,213,
8,6,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,3,8,224,8,8,1,8,1,8,1,8,1,8,1,8,
1,8,3,8,232,8,8,1,8,1,8,1,8,3,8,237,8,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,
1,10,1,10,1,10,5,10,250,8,10,10,10,12,10,253,9,10,3,10,255,8,10,1,10,1,10,
1,11,1,11,1,11,1,11,3,11,263,8,11,1,12,1,12,1,12,1,12,1,12,3,12,270,8,12,
1,13,1,13,5,13,274,8,13,10,13,12,13,277,9,13,1,13,1,13,1,14,1,14,1,14,3,
14,284,8,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,5,17,295,8,17,10,
17,12,17,298,9,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,20,
1,20,5,20,312,8,20,10,20,12,20,315,9,20,1,21,1,21,1,21,1,21,1,21,5,21,322,
8,21,10,21,12,21,325,9,21,1,22,1,22,3,22,329,8,22,1,22,1,22,1,22,5,22,334,
8,22,10,22,12,22,337,9,22,1,22,3,22,340,8,22,1,22,1,22,3,22,344,8,22,1,22,
1,22,3,22,348,8,22,3,22,350,8,22,1,23,1,23,1,23,1,23,3,23,356,8,23,1,23,
1,23,3,23,360,8,23,1,24,1,24,1,24,1,24,1,24,5,24,367,8,24,10,24,12,24,370,
9,24,3,24,372,8,24,1,25,1,25,3,25,376,8,25,1,26,1,26,1,26,5,26,381,8,26,
10,26,12,26,384,9,26,1,27,1,27,3,27,388,8,27,1,27,1,27,3,27,392,8,27,3,27,
394,8,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,3,30,404,8,30,1,30,1,30,
1,30,1,30,3,30,410,8,30,1,30,1,30,3,30,414,8,30,1,30,1,30,1,30,3,30,419,
8,30,1,30,1,30,3,30,423,8,30,1,30,3,30,426,8,30,1,30,1,30,3,30,430,8,30,
1,30,1,30,1,30,3,30,435,8,30,1,31,1,31,1,31,1,32,1,32,1,33,1,33,3,33,444,
8,33,1,33,3,33,447,8,33,1,33,1,33,1,33,1,33,3,33,453,8,33,1,33,1,33,3,33,
457,8,33,1,33,1,33,1,33,3,33,462,8,33,1,33,1,33,3,33,466,8,33,1,33,1,33,
3,33,470,8,33,1,33,1,33,3,33,474,8,33,3,33,476,8,33,1,34,1,34,3,34,480,8,
34,1,35,1,35,5,35,484,8,35,10,35,12,35,487,9,35,1,36,1,36,1,36,1,36,1,36,
1,37,1,37,1,37,5,37,497,8,37,10,37,12,37,500,9,37,1,38,1,38,1,38,3,38,505,
8,38,1,38,1,38,5,38,509,8,38,10,38,12,38,512,9,38,1,39,1,39,1,39,3,39,517,
8,39,1,39,3,39,520,8,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,529,8,39,
1,39,3,39,532,8,39,1,39,1,39,1,39,1,39,1,39,3,39,539,8,39,1,40,1,40,1,40,
5,40,544,8,40,10,40,12,40,547,9,40,1,41,1,41,1,41,5,41,552,8,41,10,41,12,
41,555,9,41,1,42,3,42,558,8,42,1,42,1,42,3,42,562,8,42,1,42,3,42,565,8,42,
1,42,1,42,1,42,1,42,3,42,571,8,42,3,42,573,8,42,1,43,1,43,1,43,1,43,1,43,
1,43,1,43,1,43,3,43,583,8,43,1,44,1,44,3,44,587,8,44,1,44,3,44,590,8,44,
1,44,1,44,1,44,3,44,595,8,44,1,44,3,44,598,8,44,3,44,600,8,44,1,45,1,45,
3,45,604,8,45,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,3,47,614,8,47,1,48,
1,48,1,48,3,48,619,8,48,1,48,1,48,1,48,1,48,1,48,3,48,626,8,48,1,48,3,48,
629,8,48,1,49,1,49,3,49,633,8,49,1,49,3,49,636,8,49,1,49,3,49,639,8,49,1,
49,1,49,1,50,1,50,3,50,645,8,50,1,50,5,50,648,8,50,10,50,12,50,651,9,50,
1,50,3,50,654,8,50,1,50,1,50,1,51,1,51,1,51,1,51,5,51,662,8,51,10,51,12,
51,665,9,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,3,52,674,8,52,1,52,1,52,1,
52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,685,8,52,1,52,1,52,5,52,689,8,52,10,
52,12,52,692,9,52,1,52,1,52,1,52,1,52,3,52,698,8,52,1,53,1,53,1,53,1,54,
1,54,3,54,705,8,54,1,55,1,55,1,56,3,56,710,8,56,1,56,1,56,1,57,1,57,1,57,
1,57,1,57,1,58,1,58,1,58,1,58,3,58,723,8,58,1,59,1,59,1,59,5,59,728,8,59,
10,59,12,59,731,9,59,1,60,1,60,1,60,5,60,736,8,60,10,60,12,60,739,9,60,1,
61,1,61,1,61,3,61,744,8,61,1,61,1,61,1,61,3,61,749,8,61,1,61,1,61,3,61,753,
8,61,1,62,1,62,1,62,5,62,758,8,62,10,62,12,62,761,9,62,1,63,1,63,1,63,5,
63,766,8,63,10,63,12,63,769,9,63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,
778,8,64,1,65,1,65,3,65,782,8,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,
791,8,65,1,66,1,66,1,66,1,66,1,66,1,66,3,66,799,8,66,1,67,1,67,1,67,1,67,
1,67,1,67,1,67,3,67,808,8,67,1,67,1,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
1,68,1,68,1,68,1,68,3,68,823,8,68,1,68,1,68,1,69,1,69,1,69,1,69,1,69,1,69,
1,69,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,1,71,1,
71,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,73,1,73,1,74,1,74,1,75,1,75,1,75,
0,0,76,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,
48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,
96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,
134,136,138,140,142,144,146,148,150,0,15,4,0,23,23,34,34,47,47,49,49,3,0,
5,5,40,41,59,59,2,0,7,7,17,17,2,0,3,3,6,6,4,0,1,1,55,55,62,62,64,64,2,0,
71,71,75,75,1,0,73,74,1,0,81,86,2,0,29,29,61,61,1,0,94,95,1,0,77,79,2,0,
88,88,91,92,2,0,39,39,48,48,5,0,9,9,26,26,30,30,52,52,60,60,3,0,1,28,30,
60,62,67,920,0,157,1,0,0,0,2,161,1,0,0,0,4,174,1,0,0,0,6,181,1,0,0,0,8,183,
1,0,0,0,10,192,1,0,0,0,12,201,1,0,0,0,14,216,1,0,0,0,16,236,1,0,0,0,18,238,
1,0,0,0,20,245,1,0,0,0,22,258,1,0,0,0,24,264,1,0,0,0,26,271,1,0,0,0,28,280,
1,0,0,0,30,285,1,0,0,0,32,288,1,0,0,0,34,291,1,0,0,0,36,299,1,0,0,0,38,303,
1,0,0,0,40,306,1,0,0,0,42,316,1,0,0,0,44,349,1,0,0,0,46,351,1,0,0,0,48,361,
1,0,0,0,50,373,1,0,0,0,52,377,1,0,0,0,54,393,1,0,0,0,56,395,1,0,0,0,58,398,
1,0,0,0,60,434,1,0,0,0,62,436,1,0,0,0,64,439,1,0,0,0,66,475,1,0,0,0,68,477,
1,0,0,0,70,481,1,0,0,0,72,488,1,0,0,0,74,493,1,0,0,0,76,501,1,0,0,0,78,538,
1,0,0,0,80,540,1,0,0,0,82,548,1,0,0,0,84,572,1,0,0,0,86,582,1,0,0,0,88,599,
1,0,0,0,90,603,1,0,0,0,92,605,1,0,0,0,94,613,1,0,0,0,96,628,1,0,0,0,98,630,
1,0,0,0,100,642,1,0,0,0,102,657,1,0,0,0,104,697,1,0,0,0,106,699,1,0,0,0,
108,704,1,0,0,0,110,706,1,0,0,0,112,709,1,0,0,0,114,713,1,0,0,0,116,722,
1,0,0,0,118,724,1,0,0,0,120,732,1,0,0,0,122,752,1,0,0,0,124,754,1,0,0,0,
126,762,1,0,0,0,128,777,1,0,0,0,130,790,1,0,0,0,132,798,1,0,0,0,134,800,
1,0,0,0,136,811,1,0,0,0,138,826,1,0,0,0,140,833,1,0,0,0,142,840,1,0,0,0,
144,847,1,0,0,0,146,854,1,0,0,0,148,856,1,0,0,0,150,858,1,0,0,0,152,158,
3,2,1,0,153,158,3,26,13,0,154,158,3,8,4,0,155,158,3,18,9,0,156,158,3,24,
12,0,157,152,1,0,0,0,157,153,1,0,0,0,157,154,1,0,0,0,157,155,1,0,0,0,157,
156,1,0,0,0,158,159,1,0,0,0,159,160,5,0,0,1,160,1,1,0,0,0,161,163,3,4,2,
0,162,164,3,38,19,0,163,162,1,0,0,0,163,164,1,0,0,0,164,166,1,0,0,0,165,
167,3,40,20,0,166,165,1,0,0,0,166,167,1,0,0,0,167,169,1,0,0,0,168,170,3,
42,21,0,169,168,1,0,0,0,169,170,1,0,0,0,170,171,1,0,0,0,171,172,3,44,22,
0,172,3,1,0,0,0,173,175,3,6,3,0,174,173,1,0,0,0,175,176,1,0,0,0,176,174,
1,0,0,0,176,177,1,0,0,0,177,5,1,0,0,0,178,182,3,30,15,0,179,182,3,46,23,
0,180,182,3,32,16,0,181,178,1,0,0,0,181,179,1,0,0,0,181,180,1,0,0,0,182,
7,1,0,0,0,183,184,5,25,0,0,184,189,3,10,5,0,185,186,5,102,0,0,186,188,3,
10,5,0,187,185,1,0,0,0,188,191,1,0,0,0,189,187,1,0,0,0,189,190,1,0,0,0,190,
9,1,0,0,0,191,189,1,0,0,0,192,198,3,12,6,0,193,194,3,16,8,0,194,195,3,12,
6,0,195,197,1,0,0,0,196,193,1,0,0,0,197,200,1,0,0,0,198,196,1,0,0,0,198,
199,1,0,0,0,199,11,1,0,0,0,200,198,1,0,0,0,201,203,5,96,0,0,202,204,3,14,
7,0,203,202,1,0,0,0,203,204,1,0,0,0,204,208,1,0,0,0,205,207,5,73,0,0,206,
205,1,0,0,0,207,210,1,0,0,0,208,206,1,0,0,0,208,209,1,0,0,0,209,212,1,0,
0,0,210,208,1,0,0,0,211,213,3,102,51,0,212,211,1,0,0,0,212,213,1,0,0,0,213,
214,1,0,0,0,214,215,5,97,0,0,215,13,1,0,0,0,216,217,3,108,54,0,217,15,1,
0,0,0,218,219,5,85,0,0,219,220,5,95,0,0,220,221,5,100,0,0,221,223,5,73,0,
0,222,224,3,102,51,0,223,222,1,0,0,0,223,224,1,0,0,0,224,225,1,0,0,0,225,
226,5,101,0,0,226,237,5,95,0,0,227,228,5,95,0,0,228,229,5,100,0,0,229,231,
5,73,0,0,230,232,3,102,51,0,231,230,1,0,0,0,231,232,1,0,0,0,232,233,1,0,
0,0,233,234,5,101,0,0,234,235,5,95,0,0,235,237,5,86,0,0,236,218,1,0,0,0,
236,227,1,0,0,0,237,17,1,0,0,0,238,239,5,14,0,0,239,240,3,108,54,0,240,241,
5,24,0,0,241,242,5,76,0,0,242,243,5,65,0,0,243,244,3,20,10,0,244,19,1,0,
0,0,245,254,5,98,0,0,246,251,3,22,11,0,247,248,5,102,0,0,248,250,3,22,11,
0,249,247,1,0,0,0,250,253,1,0,0,0,251,249,1,0,0,0,251,252,1,0,0,0,252,255,
1,0,0,0,253,251,1,0,0,0,254,246,1,0,0,0,254,255,1,0,0,0,255,256,1,0,0,0,
256,257,5,99,0,0,257,21,1,0,0,0,258,262,5,76,0,0,259,260,5,87,0,0,260,263,
3,116,58,0,261,263,3,110,55,0,262,259,1,0,0,0,262,261,1,0,0,0,263,23,1,0,
0,0,264,269,5,54,0,0,265,270,1,0,0,0,266,267,3,108,54,0,267,268,5,24,0,0,
268,270,1,0,0,0,269,265,1,0,0,0,269,266,1,0,0,0,270,25,1,0,0,0,271,275,5,
16,0,0,272,274,3,28,14,0,273,272,1,0,0,0,274,277,1,0,0,0,275,273,1,0,0,0,
275,276,1,0,0,0,276,278,1,0,0,0,277,275,1,0,0,0,278,279,3,94,47,0,279,27,
1,0,0,0,280,283,7,0,0,0,281,282,5,37,0,0,282,284,5,77,0,0,283,281,1,0,0,
0,283,284,1,0,0,0,284,29,1,0,0,0,285,286,5,39,0,0,286,287,3,70,35,0,287,
31,1,0,0,0,288,289,5,36,0,0,289,290,3,34,17,0,290,33,1,0,0,0,291,296,3,36,
18,0,292,293,5,102,0,0,293,295,3,36,18,0,294,292,1,0,0,0,295,298,1,0,0,0,
296,294,1,0,0,0,296,297,1,0,0,0,297,35,1,0,0,0,298,296,1,0,0,0,299,300,5,
75,0,0,300,301,5,87,0,0,301,302,3,118,59,0,302,37,1,0,0,0,303,304,5,66,0,
0,304,305,3,118,59,0,305,39,1,0,0,0,306,307,5,31,0,0,307,308,5,8,0,0,308,
313,3,68,34,0,309,310,5,102,0,0,310,312,3,68,34,0,311,309,1,0,0,0,312,315,
1,0,0,0,313,311,1,0,0,0,313,314,1,0,0,0,314,41,1,0,0,0,315,313,1,0,0,0,316,
317,5,45,0,0,317,318,5,8,0,0,318,323,3,66,33,0,319,320,5,102,0,0,320,322,
3,66,33,0,321,319,1,0,0,0,322,325,1,0,0,0,323,321,1,0,0,0,323,324,1,0,0,
0,324,43,1,0,0,0,325,323,1,0,0,0,326,328,5,58,0,0,327,329,5,19,0,0,328,327,
1,0,0,0,328,329,1,0,0,0,329,330,1,0,0,0,330,335,3,60,30,0,331,332,5,102,
0,0,332,334,3,60,30,0,333,331,1,0,0,0,334,337,1,0,0,0,335,333,1,0,0,0,335,
336,1,0,0,0,336,339,1,0,0,0,337,335,1,0,0,0,338,340,3,54,27,0,339,338,1,
0,0,0,339,340,1,0,0,0,340,350,1,0,0,0,341,343,5,58,0,0,342,344,5,19,0,0,
343,342,1,0,0,0,343,344,1,0,0,0,344,345,1,0,0,0,345,347,5,91,0,0,346,348,
3,54,27,0,347,346,1,0,0,0,347,348,1,0,0,0,348,350,1,0,0,0,349,326,1,0,0,
0,349,341,1,0,0,0,350,45,1,0,0,0,351,352,5,10,0,0,352,353,3,108,54,0,353,
355,5,96,0,0,354,356,3,52,26,0,355,354,1,0,0,0,355,356,1,0,0,0,356,357,1,
0,0,0,357,359,5,97,0,0,358,360,3,48,24,0,359,358,1,0,0,0,359,360,1,0,0,0,
360,47,1,0,0,0,361,371,5,67,0,0,362,372,5,91,0,0,363,368,3,50,25,0,364,365,
5,102,0,0,365,367,3,50,25,0,366,364,1,0,0,0,367,370,1,0,0,0,368,366,1,0,
0,0,368,369,1,0,0,0,369,372,1,0,0,0,370,368,1,0,0,0,371,362,1,0,0,0,371,
363,1,0,0,0,372,49,1,0,0,0,373,375,5,75,0,0,374,376,3,62,31,0,375,374,1,
0,0,0,375,376,1,0,0,0,376,51,1,0,0,0,377,382,3,118,59,0,378,379,5,102,0,
0,379,381,3,118,59,0,380,378,1,0,0,0,381,384,1,0,0,0,382,380,1,0,0,0,382,
383,1,0,0,0,383,53,1,0,0,0,384,382,1,0,0,0,385,387,3,56,28,0,386,388,3,58,
29,0,387,386,1,0,0,0,387,388,1,0,0,0,388,394,1,0,0,0,389,391,3,58,29,0,390,
392,3,56,28,0,391,390,1,0,0,0,391,392,1,0,0,0,392,394,1,0,0,0,393,385,1,
0,0,0,393,389,1,0,0,0,394,55,1,0,0,0,395,396,5,37,0,0,396,397,5,77,0,0,397,
57,1,0,0,0,398,399,5,43,0,0,399,400,5,77,0,0,400,59,1,0,0,0,401,403,5,75,
0,0,402,404,5,72,0,0,403,402,1,0,0,0,403,404,1,0,0,0,404,435,1,0,0,0,405,
406,3,64,32,0,406,407,5,96,0,0,407,409,5,75,0,0,408,410,5,72,0,0,409,408,
1,0,0,0,409,410,1,0,0,0,410,411,1,0,0,0,411,413,5,97,0,0,412,414,3,62,31,
0,413,412,1,0,0,0,413,414,1,0,0,0,414,435,1,0,0,0,415,416,5,13,0,0,416,418,
5,96,0,0,417,419,5,19,0,0,418,417,1,0,0,0,418,419,1,0,0,0,419,425,1,0,0,
0,420,422,5,75,0,0,421,423,5,72,0,0,422,421,1,0,0,0,422,423,1,0,0,0,423,
426,1,0,0,0,424,426,5,91,0,0,425,420,1,0,0,0,425,424,1,0,0,0,426,427,1,0,
0,0,427,429,5,97,0,0,428,430,3,62,31,0,429,428,1,0,0,0,429,430,1,0,0,0,430,
435,1,0,0,0,431,432,3,118,59,0,432,433,3,62,31,0,433,435,1,0,0,0,434,401,
1,0,0,0,434,405,1,0,0,0,434,415,1,0,0,0,434,431,1,0,0,0,435,61,1,0,0,0,436,
437,5,4,0,0,437,438,5,75,0,0,438,63,1,0,0,0,439,440,7,1,0,0,440,65,1,0,0,
0,441,443,5,75,0,0,442,444,5,72,0,0,443,442,1,0,0,0,443,444,1,0,0,0,444,
446,1,0,0,0,445,447,7,2,0,0,446,445,1,0,0,0,446,447,1,0,0,0,447,476,1,0,
0,0,448,449,3,64,32,0,449,450,5,96,0,0,450,452,5,75,0,0,451,453,5,72,0,0,
452,451,1,0,0,0,452,453,1,0,0,0,453,454,1,0,0,0,454,456,5,97,0,0,455,457,
7,2,0,0,456,455,1,0,0,0,456,457,1,0,0,0,457,476,1,0,0,0,458,459,5,13,0,0,
459,461,5,96,0,0,460,462,5,19,0,0,461,460,1,0,0,0,461,462,1,0,0,0,462,463,
1,0,0,0,463,465,5,75,0,0,464,466,5,72,0,0,465,464,1,0,0,0,465,466,1,0,0,
0,466,467,1,0,0,0,467,469,5,97,0,0,468,470,7,2,0,0,469,468,1,0,0,0,469,470,
1,0,0,0,470,476,1,0,0,0,471,473,3,118,59,0,472,474,7,2,0,0,473,472,1,0,0,
0,473,474,1,0,0,0,474,476,1,0,0,0,475,441,1,0,0,0,475,448,1,0,0,0,475,458,
1,0,0,0,475,471,1,0,0,0,476,67,1,0,0,0,477,479,5,75,0,0,478,480,5,72,0,0,
479,478,1,0,0,0,479,480,1,0,0,0,480,69,1,0,0,0,481,485,3,74,37,0,482,484,
3,72,36,0,483,482,1,0,0,0,484,487,1,0,0,0,485,483,1,0,0,0,485,486,1,0,0,
0,486,71,1,0,0,0,487,485,1,0,0,0,488,489,5,44,0,0,489,490,5,98,0,0,490,491,
3,70,35,0,491,492,5,99,0,0,492,73,1,0,0,0,493,498,3,76,38,0,494,495,5,102,
0,0,495,497,3,76,38,0,496,494,1,0,0,0,497,500,1,0,0,0,498,496,1,0,0,0,498,
499,1,0,0,0,499,75,1,0,0,0,500,498,1,0,0,0,501,510,3,90,45,0,502,505,3,96,
48,0,503,505,3,78,39,0,504,502,1,0,0,0,504,503,1,0,0,0,505,506,1,0,0,0,506,
507,3,90,45,0,507,509,1,0,0,0,508,504,1,0,0,0,509,512,1,0,0,0,510,508,1,
0,0,0,510,511,1,0,0,0,511,77,1,0,0,0,512,510,1,0,0,0,513,514,5,81,0,0,514,
516,5,100,0,0,515,517,3,88,44,0,516,515,1,0,0,0,516,517,1,0,0,0,517,519,
1,0,0,0,518,520,5,75,0,0,519,518,1,0,0,0,519,520,1,0,0,0,520,521,1,0,0,0,
521,522,3,80,40,0,522,523,5,101,0,0,523,524,5,87,0,0,524,539,1,0,0,0,525,
526,5,87,0,0,526,528,5,100,0,0,527,529,3,88,44,0,528,527,1,0,0,0,528,529,
1,0,0,0,529,531,1,0,0,0,530,532,5,75,0,0,531,530,1,0,0,0,531,532,1,0,0,0,
532,533,1,0,0,0,533,534,3,80,40,0,534,535,5,101,0,0,535,536,5,87,0,0,536,
537,5,86,0,0,537,539,1,0,0,0,538,513,1,0,0,0,538,525,1,0,0,0,539,79,1,0,
0,0,540,545,3,82,41,0,541,542,5,89,0,0,542,544,3,82,41,0,543,541,1,0,0,0,
544,547,1,0,0,0,545,543,1,0,0,0,545,546,1,0,0,0,546,81,1,0,0,0,547,545,1,
0,0,0,548,553,3,84,42,0,549,550,5,88,0,0,550,552,3,84,42,0,551,549,1,0,0,
0,552,555,1,0,0,0,553,551,1,0,0,0,553,554,1,0,0,0,554,83,1,0,0,0,555,553,
1,0,0,0,556,558,5,90,0,0,557,556,1,0,0,0,557,558,1,0,0,0,558,559,1,0,0,0,
559,561,5,73,0,0,560,562,3,86,43,0,561,560,1,0,0,0,561,562,1,0,0,0,562,573,
1,0,0,0,563,565,5,90,0,0,564,563,1,0,0,0,564,565,1,0,0,0,565,566,1,0,0,0,
566,567,5,96,0,0,567,568,3,80,40,0,568,570,5,97,0,0,569,571,3,86,43,0,570,
569,1,0,0,0,570,571,1,0,0,0,571,573,1,0,0,0,572,557,1,0,0,0,572,564,1,0,
0,0,573,85,1,0,0,0,574,583,5,91,0,0,575,583,5,94,0,0,576,583,5,93,0,0,577,
578,5,98,0,0,578,579,5,77,0,0,579,580,5,102,0,0,580,581,5,77,0,0,581,583,
5,99,0,0,582,574,1,0,0,0,582,575,1,0,0,0,582,576,1,0,0,0,582,577,1,0,0,0,
583,87,1,0,0,0,584,586,7,3,0,0,585,587,5,53,0,0,586,585,1,0,0,0,586,587,
1,0,0,0,587,589,1,0,0,0,588,590,7,4,0,0,589,588,1,0,0,0,589,590,1,0,0,0,
590,600,1,0,0,0,591,592,5,53,0,0,592,594,5,77,0,0,593,595,5,32,0,0,594,593,
1,0,0,0,594,595,1,0,0,0,595,597,1,0,0,0,596,598,7,4,0,0,597,596,1,0,0,0,
597,598,1,0,0,0,598,600,1,0,0,0,599,584,1,0,0,0,599,591,1,0,0,0,600,89,1,
0,0,0,601,604,3,92,46,0,602,604,3,100,50,0,603,601,1,0,0,0,603,602,1,0,0,
0,604,91,1,0,0,0,605,606,5,96,0,0,606,607,3,94,47,0,607,608,5,97,0,0,608,
93,1,0,0,0,609,614,3,108,54,0,610,614,5,70,0,0,611,614,5,71,0,0,612,614,
3,116,58,0,613,609,1,0,0,0,613,610,1,0,0,0,613,611,1,0,0,0,613,612,1,0,0,
0,614,95,1,0,0,0,615,618,5,85,0,0,616,617,5,95,0,0,617,619,3,98,49,0,618,
616,1,0,0,0,618,619,1,0,0,0,619,620,1,0,0,0,620,629,5,95,0,0,621,625,5,95,
0,0,622,623,3,98,49,0,623,624,5,95,0,0,624,626,1,0,0,0,625,622,1,0,0,0,625,
626,1,0,0,0,626,627,1,0,0,0,627,629,5,86,0,0,628,615,1,0,0,0,628,621,1,0,
0,0,629,97,1,0,0,0,630,632,5,100,0,0,631,633,7,5,0,0,632,631,1,0,0,0,632,
633,1,0,0,0,633,635,1,0,0,0,634,636,7,6,0,0,635,634,1,0,0,0,635,636,1,0,
0,0,636,638,1,0,0,0,637,639,3,102,51,0,638,637,1,0,0,0,638,639,1,0,0,0,639,
640,1,0,0,0,640,641,5,101,0,0,641,99,1,0,0,0,642,644,5,96,0,0,643,645,5,
75,0,0,644,643,1,0,0,0,644,645,1,0,0,0,645,649,1,0,0,0,646,648,5,73,0,0,
647,646,1,0,0,0,648,651,1,0,0,0,649,647,1,0,0,0,649,650,1,0,0,0,650,653,
1,0,0,0,651,649,1,0,0,0,652,654,3,102,51,0,653,652,1,0,0,0,653,654,1,0,0,
0,654,655,1,0,0,0,655,656,5,97,0,0,656,101,1,0,0,0,657,658,5,98,0,0,658,
663,3,104,52,0,659,660,5,102,0,0,660,662,3,104,52,0,661,659,1,0,0,0,662,
665,1,0,0,0,663,661,1,0,0,0,663,664,1,0,0,0,664,666,1,0,0,0,665,663,1,0,
0,0,666,667,5,99,0,0,667,103,1,0,0,0,668,673,3,108,54,0,669,670,5,103,0,
0,670,674,3,116,58,0,671,674,5,68,0,0,672,674,5,69,0,0,673,669,1,0,0,0,673,
671,1,0,0,0,673,672,1,0,0,0,674,698,1,0,0,0,675,676,3,108,54,0,676,677,5,
73,0,0,677,678,5,96,0,0,678,679,5,76,0,0,679,680,5,97,0,0,680,698,1,0,0,
0,681,682,3,108,54,0,682,684,5,28,0,0,683,685,5,51,0,0,684,683,1,0,0,0,684,
685,1,0,0,0,685,686,1,0,0,0,686,690,3,148,74,0,687,689,3,106,53,0,688,687,
1,0,0,0,689,692,1,0,0,0,690,688,1,0,0,0,690,691,1,0,0,0,691,698,1,0,0,0,
692,690,1,0,0,0,693,694,3,108,54,0,694,695,7,7,0,0,695,696,3,116,58,0,696,
698,1,0,0,0,697,668,1,0,0,0,697,675,1,0,0,0,697,681,1,0,0,0,697,693,1,0,
0,0,698,105,1,0,0,0,699,700,5,46,0,0,700,701,3,148,74,0,701,107,1,0,0,0,
702,705,5,80,0,0,703,705,3,150,75,0,704,702,1,0,0,0,704,703,1,0,0,0,705,
109,1,0,0,0,706,707,7,8,0,0,707,111,1,0,0,0,708,710,7,9,0,0,709,708,1,0,
0,0,709,710,1,0,0,0,710,711,1,0,0,0,711,712,7,10,0,0,712,113,1,0,0,0,713,
714,3,108,54,0,714,715,5,96,0,0,715,716,5,76,0,0,716,717,5,97,0,0,717,115,
1,0,0,0,718,723,3,112,56,0,719,723,5,76,0,0,720,723,3,110,55,0,721,723,3,
114,57,0,722,718,1,0,0,0,722,719,1,0,0,0,722,720,1,0,0,0,722,721,1,0,0,0,
723,117,1,0,0,0,724,729,3,120,60,0,725,726,5,46,0,0,726,728,3,120,60,0,727,
725,1,0,0,0,728,731,1,0,0,0,729,727,1,0,0,0,729,730,1,0,0,0,730,119,1,0,
0,0,731,729,1,0,0,0,732,737,3,122,61,0,733,734,5,2,0,0,734,736,3,122,61,
0,735,733,1,0,0,0,736,739,1,0,0,0,737,735,1,0,0,0,737,738,1,0,0,0,738,121,
1,0,0,0,739,737,1,0,0,0,740,743,3,124,62,0,741,742,7,7,0,0,742,744,3,124,
62,0,743,741,1,0,0,0,743,744,1,0,0,0,744,753,1,0,0,0,745,746,3,124,62,0,
746,748,5,28,0,0,747,749,5,51,0,0,748,747,1,0,0,0,748,749,1,0,0,0,749,750,
1,0,0,0,750,751,3,148,74,0,751,753,1,0,0,0,752,740,1,0,0,0,752,745,1,0,0,
0,753,123,1,0,0,0,754,759,3,126,63,0,755,756,7,9,0,0,756,758,3,126,63,0,
757,755,1,0,0,0,758,761,1,0,0,0,759,757,1,0,0,0,759,760,1,0,0,0,760,125,
1,0,0,0,761,759,1,0,0,0,762,767,3,128,64,0,763,764,7,11,0,0,764,766,3,128,
64,0,765,763,1,0,0,0,766,769,1,0,0,0,767,765,1,0,0,0,767,768,1,0,0,0,768,
127,1,0,0,0,769,767,1,0,0,0,770,771,5,51,0,0,771,778,3,128,64,0,772,778,
3,130,65,0,773,774,5,94,0,0,774,778,3,128,64,0,775,776,5,95,0,0,776,778,
3,128,64,0,777,770,1,0,0,0,777,772,1,0,0,0,777,773,1,0,0,0,777,775,1,0,0,
0,778,129,1,0,0,0,779,781,5,75,0,0,780,782,5,72,0,0,781,780,1,0,0,0,781,
782,1,0,0,0,782,791,1,0,0,0,783,791,3,116,58,0,784,791,3,94,47,0,785,786,
5,96,0,0,786,787,3,118,59,0,787,788,5,97,0,0,788,791,1,0,0,0,789,791,3,132,
66,0,790,779,1,0,0,0,790,783,1,0,0,0,790,784,1,0,0,0,790,785,1,0,0,0,790,
789,1,0,0,0,791,131,1,0,0,0,792,799,3,134,67,0,793,799,3,136,68,0,794,799,
3,138,69,0,795,799,3,140,70,0,796,799,3,142,71,0,797,799,3,144,72,0,798,
792,1,0,0,0,798,793,1,0,0,0,798,794,1,0,0,0,798,795,1,0,0,0,798,796,1,0,
0,0,798,797,1,0,0,0,799,133,1,0,0,0,800,801,5,57,0,0,801,802,5,96,0,0,802,
803,3,118,59,0,803,804,5,102,0,0,804,807,3,118,59,0,805,806,5,102,0,0,806,
808,3,118,59,0,807,805,1,0,0,0,807,808,1,0,0,0,808,809,1,0,0,0,809,810,5,
97,0,0,810,135,1,0,0,0,811,812,5,56,0,0,812,813,5,96,0,0,813,814,5,76,0,
0,814,815,5,102,0,0,815,816,5,76,0,0,816,817,5,102,0,0,817,818,3,146,73,
0,818,819,5,102,0,0,819,822,5,75,0,0,820,821,5,102,0,0,821,823,5,75,0,0,
822,820,1,0,0,0,822,823,1,0,0,0,823,824,1,0,0,0,824,825,5,97,0,0,825,137,
1,0,0,0,826,827,5,12,0,0,827,828,5,96,0,0,828,829,3,118,59,0,829,830,5,102,
0,0,830,831,3,118,59,0,831,832,5,97,0,0,832,139,1,0,0,0,833,834,5,11,0,0,
834,835,5,96,0,0,835,836,3,118,59,0,836,837,5,102,0,0,837,838,3,118,59,0,
838,839,5,97,0,0,839,141,1,0,0,0,840,841,5,38,0,0,841,842,5,96,0,0,842,843,
3,118,59,0,843,844,5,102,0,0,844,845,3,118,59,0,845,846,5,97,0,0,846,143,
1,0,0,0,847,848,5,21,0,0,848,849,5,96,0,0,849,850,3,118,59,0,850,851,5,102,
0,0,851,852,3,118,59,0,852,853,5,97,0,0,853,145,1,0,0,0,854,855,7,12,0,0,
855,147,1,0,0,0,856,857,7,13,0,0,857,149,1,0,0,0,858,859,7,14,0,0,859,151,
1,0,0,0,110,157,163,166,169,176,181,189,198,203,208,212,223,231,236,251,
254,262,269,275,283,296,313,323,328,335,339,343,347,349,355,359,368,371,
375,382,387,391,393,403,409,413,418,422,425,429,434,443,446,452,456,461,
465,469,473,475,479,485,498,504,510,516,519,528,531,538,545,553,557,561,
564,570,572,582,586,589,594,597,599,603,613,618,625,628,632,635,638,644,
649,653,663,673,684,690,697,704,709,722,729,737,743,748,752,759,767,777,
781,790,798,807,822];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class MQL_Parser extends antlr4.Parser {

    static grammarFileName = "MQL_Parser.g4";
    static literalNames = [ null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, "'false'", null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, "'true'", 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, "'<='", "'>='", "'=='", "'!='", 
                            "'<'", "'>'", "'='", "'/'", "'|'", "'^'", "'*'", 
                            "'%'", "'?'", "'+'", "'-'", "'('", "')'", "'{'", 
                            "'}'", "'['", "']'", "','", "':'" ];
    static symbolicNames = [ null, "K_ACYCLIC", "K_AND", "K_ANY", "K_AS", 
                             "K_AVG", "K_ALL", "K_ASC", "K_BY", "K_BOOL", 
                             "K_CALL", "K_COSINE_DISTANCE", "K_COSINE_SIMILARITY", 
                             "K_COUNT", "K_CREATE", "K_DELETE", "K_DESCRIBE", 
                             "K_DESC", "K_DIMENSIONS", "K_DISTINCT", "K_EDGE", 
                             "K_EUCLIDEAN_DISTANCE", "K_FROM", "K_INCOMING", 
                             "K_INDEX", "K_INSERT", "K_INTEGER", "K_INTO", 
                             "K_IS", "K_FALSE", "K_FLOAT", "K_GROUP", "K_GROUPS", 
                             "K_IDENTITY", "K_LABELS", "K_LABEL", "K_LET", 
                             "K_LIMIT", "K_MANHATTAN_DISTANCE", "K_MATCH", 
                             "K_MAX", "K_MIN", "K_OBJECTS", "K_OFFSET", 
                             "K_OPTIONAL", "K_ORDER", "K_OR", "K_OUTGOING", 
                             "K_PREFIX", "K_PROPERTIES", "K_PROPERTY", "K_NOT", 
                             "K_NULL", "K_SHORTEST", "K_SHOW", "K_SIMPLE", 
                             "K_TEXT_SEARCH", "K_REGEX", "K_RETURN", "K_SUM", 
                             "K_STRING", "K_TRUE", "K_TRAILS", "K_VALUES", 
                             "K_WALKS", "K_WITH", "K_WHERE", "K_YIELD", 
                             "TRUE_PROP", "FALSE_PROP", "ANON_ID", "EDGE_ID", 
                             "KEY", "TYPE", "TYPE_VAR", "VARIABLE", "STRING", 
                             "UNSIGNED_INTEGER", "UNSIGNED_FLOAT", "UNSIGNED_SCIENTIFIC_NOTATION", 
                             "NAME", "LEQ", "GEQ", "EQ", "NEQ", "LT", "GT", 
                             "SINGLE_EQ", "PATH_SEQUENCE", "PATH_ALTERNATIVE", 
                             "PATH_NEGATION", "STAR", "PERCENT", "QUESTION_MARK", 
                             "PLUS", "MINUS", "L_PAR", "R_PAR", "LCURLY_BRACKET", 
                             "RCURLY_BRACKET", "LSQUARE_BRACKET", "RSQUARE_BRACKET", 
                             "COMMA", "COLON", "WHITE_SPACE", "SINGLE_LINE_COMMENT", 
                             "UNRECOGNIZED" ];
    static ruleNames = [ "root", "matchQuery", "primitiveStatementList", 
                         "primitiveStatement", "insertPatterns", "insertLinearPattern", 
                         "insertPlainNode", "insertPlainNodeInside", "insertPlainEdge", 
                         "createIndexQuery", "createIndexOptions", "createIndexOption", 
                         "showQuery", "describeQuery", "describeFlag", "matchStatement", 
                         "letStatement", "letDefinitionList", "letDefinition", 
                         "whereStatement", "groupByStatement", "orderByStatement", 
                         "returnStatement", "callStatement", "yieldStatement", 
                         "yieldItem", "callArguments", "limitOffsetClauses", 
                         "limitClause", "offsetClause", "returnItem", "alias", 
                         "aggregateFunc", "orderByItem", "groupByItem", 
                         "graphPattern", "optionalPattern", "basicPattern", 
                         "linearPattern", "path", "pathAlternatives", "pathSequence", 
                         "pathAtom", "pathSuffix", "pathType", "node", "fixedNode", 
                         "fixedNodeInside", "edge", "edgeInside", "varNode", 
                         "properties", "property", "conditionalOrType", 
                         "identifier", "boolValue", "numericValue", "datatypeValue", 
                         "value", "conditionalOrExpr", "conditionalAndExpr", 
                         "comparisonExpr", "additiveExpr", "multiplicativeExpr", 
                         "unaryExpr", "atomicExpr", "function", "regex", 
                         "textSearch", "cosineSimilarity", "cosineDistance", 
                         "manhattanDistance", "euclideanDistance", "textSearchIndexMode", 
                         "exprTypename", "keyword" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = MQL_Parser.ruleNames;
        this.literalNames = MQL_Parser.literalNames;
        this.symbolicNames = MQL_Parser.symbolicNames;
    }



	root() {
	    let localctx = new RootContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, MQL_Parser.RULE_root);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 157;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 10:
	        case 36:
	        case 39:
	            this.state = 152;
	            this.matchQuery();
	            break;
	        case 16:
	            this.state = 153;
	            this.describeQuery();
	            break;
	        case 25:
	            this.state = 154;
	            this.insertPatterns();
	            break;
	        case 14:
	            this.state = 155;
	            this.createIndexQuery();
	            break;
	        case 54:
	            this.state = 156;
	            this.showQuery();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 159;
	        this.match(MQL_Parser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	matchQuery() {
	    let localctx = new MatchQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, MQL_Parser.RULE_matchQuery);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 161;
	        this.primitiveStatementList();
	        this.state = 163;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===66) {
	            this.state = 162;
	            this.whereStatement();
	        }

	        this.state = 166;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===31) {
	            this.state = 165;
	            this.groupByStatement();
	        }

	        this.state = 169;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===45) {
	            this.state = 168;
	            this.orderByStatement();
	        }

	        this.state = 171;
	        this.returnStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveStatementList() {
	    let localctx = new PrimitiveStatementListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, MQL_Parser.RULE_primitiveStatementList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 174; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 173;
	            this.primitiveStatement();
	            this.state = 176; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 10)) & ~0x1f) === 0 && ((1 << (_la - 10)) & 603979777) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primitiveStatement() {
	    let localctx = new PrimitiveStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, MQL_Parser.RULE_primitiveStatement);
	    try {
	        this.state = 181;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 39:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 178;
	            this.matchStatement();
	            break;
	        case 10:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 179;
	            this.callStatement();
	            break;
	        case 36:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 180;
	            this.letStatement();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertPatterns() {
	    let localctx = new InsertPatternsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, MQL_Parser.RULE_insertPatterns);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 183;
	        this.match(MQL_Parser.K_INSERT);
	        this.state = 184;
	        this.insertLinearPattern();
	        this.state = 189;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===102) {
	            this.state = 185;
	            this.match(MQL_Parser.COMMA);
	            this.state = 186;
	            this.insertLinearPattern();
	            this.state = 191;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertLinearPattern() {
	    let localctx = new InsertLinearPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, MQL_Parser.RULE_insertLinearPattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 192;
	        this.insertPlainNode();
	        this.state = 198;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===85 || _la===95) {
	            this.state = 193;
	            this.insertPlainEdge();
	            this.state = 194;
	            this.insertPlainNode();
	            this.state = 200;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertPlainNode() {
	    let localctx = new InsertPlainNodeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, MQL_Parser.RULE_insertPlainNode);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 201;
	        this.match(MQL_Parser.L_PAR);
	        this.state = 203;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3758096382) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 3758096383) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 65551) !== 0)) {
	            this.state = 202;
	            this.insertPlainNodeInside();
	        }

	        this.state = 208;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===73) {
	            this.state = 205;
	            this.match(MQL_Parser.TYPE);
	            this.state = 210;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 212;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===98) {
	            this.state = 211;
	            this.properties();
	        }

	        this.state = 214;
	        this.match(MQL_Parser.R_PAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertPlainNodeInside() {
	    let localctx = new InsertPlainNodeInsideContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, MQL_Parser.RULE_insertPlainNodeInside);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 216;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertPlainEdge() {
	    let localctx = new InsertPlainEdgeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, MQL_Parser.RULE_insertPlainEdge);
	    var _la = 0;
	    try {
	        this.state = 236;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 85:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 218;
	            this.match(MQL_Parser.LT);
	            this.state = 219;
	            this.match(MQL_Parser.MINUS);
	            this.state = 220;
	            this.match(MQL_Parser.LSQUARE_BRACKET);
	            this.state = 221;
	            this.match(MQL_Parser.TYPE);
	            this.state = 223;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===98) {
	                this.state = 222;
	                this.properties();
	            }

	            this.state = 225;
	            this.match(MQL_Parser.RSQUARE_BRACKET);
	            this.state = 226;
	            this.match(MQL_Parser.MINUS);
	            break;
	        case 95:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 227;
	            this.match(MQL_Parser.MINUS);
	            this.state = 228;
	            this.match(MQL_Parser.LSQUARE_BRACKET);
	            this.state = 229;
	            this.match(MQL_Parser.TYPE);
	            this.state = 231;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===98) {
	                this.state = 230;
	                this.properties();
	            }

	            this.state = 233;
	            this.match(MQL_Parser.RSQUARE_BRACKET);
	            this.state = 234;
	            this.match(MQL_Parser.MINUS);
	            this.state = 235;
	            this.match(MQL_Parser.GT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createIndexQuery() {
	    let localctx = new CreateIndexQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, MQL_Parser.RULE_createIndexQuery);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 238;
	        this.match(MQL_Parser.K_CREATE);
	        this.state = 239;
	        this.identifier();
	        this.state = 240;
	        this.match(MQL_Parser.K_INDEX);
	        this.state = 241;
	        this.match(MQL_Parser.STRING);
	        this.state = 242;
	        this.match(MQL_Parser.K_WITH);
	        this.state = 243;
	        this.createIndexOptions();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createIndexOptions() {
	    let localctx = new CreateIndexOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, MQL_Parser.RULE_createIndexOptions);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 245;
	        this.match(MQL_Parser.LCURLY_BRACKET);
	        this.state = 254;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===76) {
	            this.state = 246;
	            this.createIndexOption();
	            this.state = 251;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===102) {
	                this.state = 247;
	                this.match(MQL_Parser.COMMA);
	                this.state = 248;
	                this.createIndexOption();
	                this.state = 253;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 256;
	        this.match(MQL_Parser.RCURLY_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createIndexOption() {
	    let localctx = new CreateIndexOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, MQL_Parser.RULE_createIndexOption);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 258;
	        this.match(MQL_Parser.STRING);
	        this.state = 262;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 87:
	            this.state = 259;
	            this.match(MQL_Parser.SINGLE_EQ);
	            this.state = 260;
	            this.value();
	            break;
	        case 29:
	        case 61:
	            this.state = 261;
	            this.boolValue();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showQuery() {
	    let localctx = new ShowQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, MQL_Parser.RULE_showQuery);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 264;
	        this.match(MQL_Parser.K_SHOW);
	        this.state = 269;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case -1:
	            break;
	        case 1:
	        case 2:
	        case 3:
	        case 4:
	        case 5:
	        case 6:
	        case 7:
	        case 8:
	        case 9:
	        case 10:
	        case 11:
	        case 12:
	        case 13:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 18:
	        case 19:
	        case 20:
	        case 21:
	        case 22:
	        case 23:
	        case 24:
	        case 25:
	        case 26:
	        case 27:
	        case 28:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 80:
	            this.state = 266;
	            this.identifier();
	            this.state = 267;
	            this.match(MQL_Parser.K_INDEX);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describeQuery() {
	    let localctx = new DescribeQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, MQL_Parser.RULE_describeQuery);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 271;
	        this.match(MQL_Parser.K_DESCRIBE);
	        this.state = 275;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,18,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 272;
	                this.describeFlag(); 
	            }
	            this.state = 277;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,18,this._ctx);
	        }

	        this.state = 278;
	        this.fixedNodeInside();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describeFlag() {
	    let localctx = new DescribeFlagContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, MQL_Parser.RULE_describeFlag);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 280;
	        _la = this._input.LA(1);
	        if(!(((((_la - 23)) & ~0x1f) === 0 && ((1 << (_la - 23)) & 83888129) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 283;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
	        if(la_===1) {
	            this.state = 281;
	            this.match(MQL_Parser.K_LIMIT);
	            this.state = 282;
	            this.match(MQL_Parser.UNSIGNED_INTEGER);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	matchStatement() {
	    let localctx = new MatchStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, MQL_Parser.RULE_matchStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 285;
	        this.match(MQL_Parser.K_MATCH);
	        this.state = 286;
	        this.graphPattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	letStatement() {
	    let localctx = new LetStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, MQL_Parser.RULE_letStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 288;
	        this.match(MQL_Parser.K_LET);
	        this.state = 289;
	        this.letDefinitionList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	letDefinitionList() {
	    let localctx = new LetDefinitionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, MQL_Parser.RULE_letDefinitionList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 291;
	        this.letDefinition();
	        this.state = 296;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===102) {
	            this.state = 292;
	            this.match(MQL_Parser.COMMA);
	            this.state = 293;
	            this.letDefinition();
	            this.state = 298;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	letDefinition() {
	    let localctx = new LetDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, MQL_Parser.RULE_letDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 299;
	        this.match(MQL_Parser.VARIABLE);
	        this.state = 300;
	        this.match(MQL_Parser.SINGLE_EQ);
	        this.state = 301;
	        this.conditionalOrExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whereStatement() {
	    let localctx = new WhereStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, MQL_Parser.RULE_whereStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 303;
	        this.match(MQL_Parser.K_WHERE);
	        this.state = 304;
	        this.conditionalOrExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupByStatement() {
	    let localctx = new GroupByStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, MQL_Parser.RULE_groupByStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 306;
	        this.match(MQL_Parser.K_GROUP);
	        this.state = 307;
	        this.match(MQL_Parser.K_BY);
	        this.state = 308;
	        this.groupByItem();
	        this.state = 313;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===102) {
	            this.state = 309;
	            this.match(MQL_Parser.COMMA);
	            this.state = 310;
	            this.groupByItem();
	            this.state = 315;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderByStatement() {
	    let localctx = new OrderByStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, MQL_Parser.RULE_orderByStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 316;
	        this.match(MQL_Parser.K_ORDER);
	        this.state = 317;
	        this.match(MQL_Parser.K_BY);
	        this.state = 318;
	        this.orderByItem();
	        this.state = 323;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===102) {
	            this.state = 319;
	            this.match(MQL_Parser.COMMA);
	            this.state = 320;
	            this.orderByItem();
	            this.state = 325;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStatement() {
	    let localctx = new ReturnStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, MQL_Parser.RULE_returnStatement);
	    var _la = 0;
	    try {
	        this.state = 349;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ReturnListContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 326;
	            this.match(MQL_Parser.K_RETURN);
	            this.state = 328;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
	            if(la_===1) {
	                this.state = 327;
	                this.match(MQL_Parser.K_DISTINCT);

	            }
	            this.state = 330;
	            this.returnItem();
	            this.state = 335;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===102) {
	                this.state = 331;
	                this.match(MQL_Parser.COMMA);
	                this.state = 332;
	                this.returnItem();
	                this.state = 337;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 339;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===37 || _la===43) {
	                this.state = 338;
	                this.limitOffsetClauses();
	            }

	            break;

	        case 2:
	            localctx = new ReturnAllContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 341;
	            this.match(MQL_Parser.K_RETURN);
	            this.state = 343;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===19) {
	                this.state = 342;
	                this.match(MQL_Parser.K_DISTINCT);
	            }

	            this.state = 345;
	            this.match(MQL_Parser.STAR);
	            this.state = 347;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===37 || _la===43) {
	                this.state = 346;
	                this.limitOffsetClauses();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callStatement() {
	    let localctx = new CallStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, MQL_Parser.RULE_callStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 351;
	        this.match(MQL_Parser.K_CALL);
	        this.state = 352;
	        this.identifier();
	        this.state = 353;
	        this.match(MQL_Parser.L_PAR);
	        this.state = 355;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 1)) & ~0x1f) === 0 && ((1 << (_la - 1)) & 4294967295) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 4294967295) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 3758160999) !== 0)) {
	            this.state = 354;
	            this.callArguments();
	        }

	        this.state = 357;
	        this.match(MQL_Parser.R_PAR);
	        this.state = 359;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===67) {
	            this.state = 358;
	            this.yieldStatement();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yieldStatement() {
	    let localctx = new YieldStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, MQL_Parser.RULE_yieldStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 361;
	        this.match(MQL_Parser.K_YIELD);
	        this.state = 371;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 91:
	            this.state = 362;
	            this.match(MQL_Parser.STAR);
	            break;
	        case 75:
	            this.state = 363;
	            this.yieldItem();
	            this.state = 368;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===102) {
	                this.state = 364;
	                this.match(MQL_Parser.COMMA);
	                this.state = 365;
	                this.yieldItem();
	                this.state = 370;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yieldItem() {
	    let localctx = new YieldItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, MQL_Parser.RULE_yieldItem);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 373;
	        this.match(MQL_Parser.VARIABLE);
	        this.state = 375;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===4) {
	            this.state = 374;
	            this.alias();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callArguments() {
	    let localctx = new CallArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, MQL_Parser.RULE_callArguments);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 377;
	        this.conditionalOrExpr();
	        this.state = 382;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===102) {
	            this.state = 378;
	            this.match(MQL_Parser.COMMA);
	            this.state = 379;
	            this.conditionalOrExpr();
	            this.state = 384;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limitOffsetClauses() {
	    let localctx = new LimitOffsetClausesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, MQL_Parser.RULE_limitOffsetClauses);
	    var _la = 0;
	    try {
	        this.state = 393;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 37:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 385;
	            this.limitClause();
	            this.state = 387;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===43) {
	                this.state = 386;
	                this.offsetClause();
	            }

	            break;
	        case 43:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 389;
	            this.offsetClause();
	            this.state = 391;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===37) {
	                this.state = 390;
	                this.limitClause();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limitClause() {
	    let localctx = new LimitClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, MQL_Parser.RULE_limitClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 395;
	        this.match(MQL_Parser.K_LIMIT);
	        this.state = 396;
	        this.match(MQL_Parser.UNSIGNED_INTEGER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	offsetClause() {
	    let localctx = new OffsetClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, MQL_Parser.RULE_offsetClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 398;
	        this.match(MQL_Parser.K_OFFSET);
	        this.state = 399;
	        this.match(MQL_Parser.UNSIGNED_INTEGER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnItem() {
	    let localctx = new ReturnItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, MQL_Parser.RULE_returnItem);
	    var _la = 0;
	    try {
	        this.state = 434;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ReturnItemVarContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 401;
	            this.match(MQL_Parser.VARIABLE);
	            this.state = 403;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===72) {
	                this.state = 402;
	                this.match(MQL_Parser.KEY);
	            }

	            break;

	        case 2:
	            localctx = new ReturnItemAggContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 405;
	            this.aggregateFunc();
	            this.state = 406;
	            this.match(MQL_Parser.L_PAR);
	            this.state = 407;
	            this.match(MQL_Parser.VARIABLE);
	            this.state = 409;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===72) {
	                this.state = 408;
	                this.match(MQL_Parser.KEY);
	            }

	            this.state = 411;
	            this.match(MQL_Parser.R_PAR);
	            this.state = 413;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===4) {
	                this.state = 412;
	                this.alias();
	            }

	            break;

	        case 3:
	            localctx = new ReturnItemCountContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 415;
	            this.match(MQL_Parser.K_COUNT);
	            this.state = 416;
	            this.match(MQL_Parser.L_PAR);
	            this.state = 418;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===19) {
	                this.state = 417;
	                this.match(MQL_Parser.K_DISTINCT);
	            }

	            this.state = 425;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 75:
	                this.state = 420;
	                this.match(MQL_Parser.VARIABLE);
	                this.state = 422;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===72) {
	                    this.state = 421;
	                    this.match(MQL_Parser.KEY);
	                }

	                break;
	            case 91:
	                this.state = 424;
	                this.match(MQL_Parser.STAR);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 427;
	            this.match(MQL_Parser.R_PAR);
	            this.state = 429;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===4) {
	                this.state = 428;
	                this.alias();
	            }

	            break;

	        case 4:
	            localctx = new ReturnItemExprContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 431;
	            this.conditionalOrExpr();
	            this.state = 432;
	            this.alias();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alias() {
	    let localctx = new AliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, MQL_Parser.RULE_alias);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 436;
	        this.match(MQL_Parser.K_AS);
	        this.state = 437;
	        this.match(MQL_Parser.VARIABLE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aggregateFunc() {
	    let localctx = new AggregateFuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, MQL_Parser.RULE_aggregateFunc);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 439;
	        _la = this._input.LA(1);
	        if(!(_la===5 || ((((_la - 40)) & ~0x1f) === 0 && ((1 << (_la - 40)) & 524291) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderByItem() {
	    let localctx = new OrderByItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, MQL_Parser.RULE_orderByItem);
	    var _la = 0;
	    try {
	        this.state = 475;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new OrderByItemVarContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 441;
	            this.match(MQL_Parser.VARIABLE);
	            this.state = 443;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===72) {
	                this.state = 442;
	                this.match(MQL_Parser.KEY);
	            }

	            this.state = 446;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===7 || _la===17) {
	                this.state = 445;
	                _la = this._input.LA(1);
	                if(!(_la===7 || _la===17)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            break;

	        case 2:
	            localctx = new OrderByItemAggContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 448;
	            this.aggregateFunc();
	            this.state = 449;
	            this.match(MQL_Parser.L_PAR);
	            this.state = 450;
	            this.match(MQL_Parser.VARIABLE);
	            this.state = 452;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===72) {
	                this.state = 451;
	                this.match(MQL_Parser.KEY);
	            }

	            this.state = 454;
	            this.match(MQL_Parser.R_PAR);
	            this.state = 456;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===7 || _la===17) {
	                this.state = 455;
	                _la = this._input.LA(1);
	                if(!(_la===7 || _la===17)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            break;

	        case 3:
	            localctx = new OrderByItemCountContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 458;
	            this.match(MQL_Parser.K_COUNT);
	            this.state = 459;
	            this.match(MQL_Parser.L_PAR);
	            this.state = 461;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===19) {
	                this.state = 460;
	                this.match(MQL_Parser.K_DISTINCT);
	            }

	            this.state = 463;
	            this.match(MQL_Parser.VARIABLE);
	            this.state = 465;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===72) {
	                this.state = 464;
	                this.match(MQL_Parser.KEY);
	            }

	            this.state = 467;
	            this.match(MQL_Parser.R_PAR);
	            this.state = 469;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===7 || _la===17) {
	                this.state = 468;
	                _la = this._input.LA(1);
	                if(!(_la===7 || _la===17)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            break;

	        case 4:
	            localctx = new OrderByItemExprContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 471;
	            this.conditionalOrExpr();
	            this.state = 473;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===7 || _la===17) {
	                this.state = 472;
	                _la = this._input.LA(1);
	                if(!(_la===7 || _la===17)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupByItem() {
	    let localctx = new GroupByItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, MQL_Parser.RULE_groupByItem);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 477;
	        this.match(MQL_Parser.VARIABLE);
	        this.state = 479;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===72) {
	            this.state = 478;
	            this.match(MQL_Parser.KEY);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphPattern() {
	    let localctx = new GraphPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, MQL_Parser.RULE_graphPattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 481;
	        this.basicPattern();
	        this.state = 485;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===44) {
	            this.state = 482;
	            this.optionalPattern();
	            this.state = 487;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionalPattern() {
	    let localctx = new OptionalPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, MQL_Parser.RULE_optionalPattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 488;
	        this.match(MQL_Parser.K_OPTIONAL);
	        this.state = 489;
	        this.match(MQL_Parser.LCURLY_BRACKET);
	        this.state = 490;
	        this.graphPattern();
	        this.state = 491;
	        this.match(MQL_Parser.RCURLY_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	basicPattern() {
	    let localctx = new BasicPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, MQL_Parser.RULE_basicPattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 493;
	        this.linearPattern();
	        this.state = 498;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===102) {
	            this.state = 494;
	            this.match(MQL_Parser.COMMA);
	            this.state = 495;
	            this.linearPattern();
	            this.state = 500;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	linearPattern() {
	    let localctx = new LinearPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, MQL_Parser.RULE_linearPattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 501;
	        this.node();
	        this.state = 510;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 81)) & ~0x1f) === 0 && ((1 << (_la - 81)) & 16465) !== 0)) {
	            this.state = 504;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 85:
	            case 95:
	                this.state = 502;
	                this.edge();
	                break;
	            case 81:
	            case 87:
	                this.state = 503;
	                this.path();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 506;
	            this.node();
	            this.state = 512;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	path() {
	    let localctx = new PathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, MQL_Parser.RULE_path);
	    var _la = 0;
	    try {
	        this.state = 538;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 81:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 513;
	            this.match(MQL_Parser.LEQ);
	            this.state = 514;
	            this.match(MQL_Parser.LSQUARE_BRACKET);
	            this.state = 516;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===3 || _la===6 || _la===53) {
	                this.state = 515;
	                this.pathType();
	            }

	            this.state = 519;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===75) {
	                this.state = 518;
	                this.match(MQL_Parser.VARIABLE);
	            }

	            this.state = 521;
	            this.pathAlternatives();
	            this.state = 522;
	            this.match(MQL_Parser.RSQUARE_BRACKET);
	            this.state = 523;
	            this.match(MQL_Parser.SINGLE_EQ);
	            break;
	        case 87:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 525;
	            this.match(MQL_Parser.SINGLE_EQ);
	            this.state = 526;
	            this.match(MQL_Parser.LSQUARE_BRACKET);
	            this.state = 528;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===3 || _la===6 || _la===53) {
	                this.state = 527;
	                this.pathType();
	            }

	            this.state = 531;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===75) {
	                this.state = 530;
	                this.match(MQL_Parser.VARIABLE);
	            }

	            this.state = 533;
	            this.pathAlternatives();
	            this.state = 534;
	            this.match(MQL_Parser.RSQUARE_BRACKET);
	            this.state = 535;
	            this.match(MQL_Parser.SINGLE_EQ);
	            this.state = 536;
	            this.match(MQL_Parser.GT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathAlternatives() {
	    let localctx = new PathAlternativesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, MQL_Parser.RULE_pathAlternatives);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 540;
	        this.pathSequence();
	        this.state = 545;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===89) {
	            this.state = 541;
	            this.match(MQL_Parser.PATH_ALTERNATIVE);
	            this.state = 542;
	            this.pathSequence();
	            this.state = 547;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathSequence() {
	    let localctx = new PathSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, MQL_Parser.RULE_pathSequence);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 548;
	        this.pathAtom();
	        this.state = 553;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===88) {
	            this.state = 549;
	            this.match(MQL_Parser.PATH_SEQUENCE);
	            this.state = 550;
	            this.pathAtom();
	            this.state = 555;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathAtom() {
	    let localctx = new PathAtomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, MQL_Parser.RULE_pathAtom);
	    var _la = 0;
	    try {
	        this.state = 572;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new PathAtomSimpleContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 557;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 556;
	                this.match(MQL_Parser.PATH_NEGATION);
	            }

	            this.state = 559;
	            this.match(MQL_Parser.TYPE);
	            this.state = 561;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 91)) & ~0x1f) === 0 && ((1 << (_la - 91)) & 141) !== 0)) {
	                this.state = 560;
	                this.pathSuffix();
	            }

	            break;

	        case 2:
	            localctx = new PathAtomAlternativesContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 564;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===90) {
	                this.state = 563;
	                this.match(MQL_Parser.PATH_NEGATION);
	            }

	            this.state = 566;
	            this.match(MQL_Parser.L_PAR);
	            this.state = 567;
	            this.pathAlternatives();
	            this.state = 568;
	            this.match(MQL_Parser.R_PAR);
	            this.state = 570;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 91)) & ~0x1f) === 0 && ((1 << (_la - 91)) & 141) !== 0)) {
	                this.state = 569;
	                this.pathSuffix();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathSuffix() {
	    let localctx = new PathSuffixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, MQL_Parser.RULE_pathSuffix);
	    try {
	        this.state = 582;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 91:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 574;
	            localctx.op = this.match(MQL_Parser.STAR);
	            break;
	        case 94:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 575;
	            localctx.op = this.match(MQL_Parser.PLUS);
	            break;
	        case 93:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 576;
	            localctx.op = this.match(MQL_Parser.QUESTION_MARK);
	            break;
	        case 98:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 577;
	            this.match(MQL_Parser.LCURLY_BRACKET);
	            this.state = 578;
	            localctx.min = this.match(MQL_Parser.UNSIGNED_INTEGER);
	            this.state = 579;
	            this.match(MQL_Parser.COMMA);
	            this.state = 580;
	            localctx.max = this.match(MQL_Parser.UNSIGNED_INTEGER);
	            this.state = 581;
	            this.match(MQL_Parser.RCURLY_BRACKET);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathType() {
	    let localctx = new PathTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, MQL_Parser.RULE_pathType);
	    var _la = 0;
	    try {
	        this.state = 599;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	        case 6:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 584;
	            _la = this._input.LA(1);
	            if(!(_la===3 || _la===6)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 586;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===53) {
	                this.state = 585;
	                this.match(MQL_Parser.K_SHORTEST);
	            }

	            this.state = 589;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1 || ((((_la - 55)) & ~0x1f) === 0 && ((1 << (_la - 55)) & 641) !== 0)) {
	                this.state = 588;
	                _la = this._input.LA(1);
	                if(!(_la===1 || ((((_la - 55)) & ~0x1f) === 0 && ((1 << (_la - 55)) & 641) !== 0))) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            break;
	        case 53:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 591;
	            this.match(MQL_Parser.K_SHORTEST);
	            this.state = 592;
	            this.match(MQL_Parser.UNSIGNED_INTEGER);
	            this.state = 594;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===32) {
	                this.state = 593;
	                this.match(MQL_Parser.K_GROUPS);
	            }

	            this.state = 597;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===1 || ((((_la - 55)) & ~0x1f) === 0 && ((1 << (_la - 55)) & 641) !== 0)) {
	                this.state = 596;
	                _la = this._input.LA(1);
	                if(!(_la===1 || ((((_la - 55)) & ~0x1f) === 0 && ((1 << (_la - 55)) & 641) !== 0))) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	node() {
	    let localctx = new NodeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, MQL_Parser.RULE_node);
	    try {
	        this.state = 603;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 601;
	            this.fixedNode();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 602;
	            this.varNode();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fixedNode() {
	    let localctx = new FixedNodeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, MQL_Parser.RULE_fixedNode);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 605;
	        this.match(MQL_Parser.L_PAR);
	        this.state = 606;
	        this.fixedNodeInside();
	        this.state = 607;
	        this.match(MQL_Parser.R_PAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fixedNodeInside() {
	    let localctx = new FixedNodeInsideContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, MQL_Parser.RULE_fixedNodeInside);
	    try {
	        this.state = 613;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 609;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 610;
	            this.match(MQL_Parser.ANON_ID);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 611;
	            this.match(MQL_Parser.EDGE_ID);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 612;
	            this.value();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edge() {
	    let localctx = new EdgeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, MQL_Parser.RULE_edge);
	    var _la = 0;
	    try {
	        this.state = 628;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 85:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 615;
	            this.match(MQL_Parser.LT);
	            this.state = 618;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
	            if(la_===1) {
	                this.state = 616;
	                this.match(MQL_Parser.MINUS);
	                this.state = 617;
	                this.edgeInside();

	            }
	            this.state = 620;
	            this.match(MQL_Parser.MINUS);
	            break;
	        case 95:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 621;
	            this.match(MQL_Parser.MINUS);
	            this.state = 625;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===100) {
	                this.state = 622;
	                this.edgeInside();
	                this.state = 623;
	                this.match(MQL_Parser.MINUS);
	            }

	            this.state = 627;
	            this.match(MQL_Parser.GT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	edgeInside() {
	    let localctx = new EdgeInsideContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, MQL_Parser.RULE_edgeInside);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 630;
	        this.match(MQL_Parser.LSQUARE_BRACKET);
	        this.state = 632;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===71 || _la===75) {
	            this.state = 631;
	            _la = this._input.LA(1);
	            if(!(_la===71 || _la===75)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 635;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===73 || _la===74) {
	            this.state = 634;
	            _la = this._input.LA(1);
	            if(!(_la===73 || _la===74)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 638;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===98) {
	            this.state = 637;
	            this.properties();
	        }

	        this.state = 640;
	        this.match(MQL_Parser.RSQUARE_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varNode() {
	    let localctx = new VarNodeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, MQL_Parser.RULE_varNode);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 642;
	        this.match(MQL_Parser.L_PAR);
	        this.state = 644;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===75) {
	            this.state = 643;
	            this.match(MQL_Parser.VARIABLE);
	        }

	        this.state = 649;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===73) {
	            this.state = 646;
	            this.match(MQL_Parser.TYPE);
	            this.state = 651;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 653;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===98) {
	            this.state = 652;
	            this.properties();
	        }

	        this.state = 655;
	        this.match(MQL_Parser.R_PAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	properties() {
	    let localctx = new PropertiesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, MQL_Parser.RULE_properties);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 657;
	        this.match(MQL_Parser.LCURLY_BRACKET);
	        this.state = 658;
	        this.property();
	        this.state = 663;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===102) {
	            this.state = 659;
	            this.match(MQL_Parser.COMMA);
	            this.state = 660;
	            this.property();
	            this.state = 665;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 666;
	        this.match(MQL_Parser.RCURLY_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	property() {
	    let localctx = new PropertyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, MQL_Parser.RULE_property);
	    var _la = 0;
	    try {
	        this.state = 697;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new Property1Context(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 668;
	            this.identifier();
	            this.state = 673;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 103:
	                this.state = 669;
	                this.match(MQL_Parser.COLON);
	                this.state = 670;
	                this.value();
	                break;
	            case 68:
	                this.state = 671;
	                this.match(MQL_Parser.TRUE_PROP);
	                break;
	            case 69:
	                this.state = 672;
	                this.match(MQL_Parser.FALSE_PROP);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 2:
	            localctx = new Property2Context(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 675;
	            this.identifier();
	            this.state = 676;
	            this.match(MQL_Parser.TYPE);
	            this.state = 677;
	            this.match(MQL_Parser.L_PAR);
	            this.state = 678;
	            this.match(MQL_Parser.STRING);
	            this.state = 679;
	            this.match(MQL_Parser.R_PAR);
	            break;

	        case 3:
	            localctx = new Property3Context(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 681;
	            this.identifier();
	            this.state = 682;
	            this.match(MQL_Parser.K_IS);
	            this.state = 684;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===51) {
	                this.state = 683;
	                this.match(MQL_Parser.K_NOT);
	            }

	            this.state = 686;
	            this.exprTypename();
	            this.state = 690;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===46) {
	                this.state = 687;
	                this.conditionalOrType();
	                this.state = 692;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 4:
	            localctx = new Property4Context(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 693;
	            this.identifier();

	            this.state = 694;
	            localctx.op = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 81)) & ~0x1f) === 0 && ((1 << (_la - 81)) & 63) !== 0))) {
	                localctx.op = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 695;
	            this.value();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionalOrType() {
	    let localctx = new ConditionalOrTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, MQL_Parser.RULE_conditionalOrType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 699;
	        this.match(MQL_Parser.K_OR);
	        this.state = 700;
	        this.exprTypename();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, MQL_Parser.RULE_identifier);
	    try {
	        this.state = 704;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 80:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 702;
	            this.match(MQL_Parser.NAME);
	            break;
	        case 1:
	        case 2:
	        case 3:
	        case 4:
	        case 5:
	        case 6:
	        case 7:
	        case 8:
	        case 9:
	        case 10:
	        case 11:
	        case 12:
	        case 13:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 18:
	        case 19:
	        case 20:
	        case 21:
	        case 22:
	        case 23:
	        case 24:
	        case 25:
	        case 26:
	        case 27:
	        case 28:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 703;
	            this.keyword();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	boolValue() {
	    let localctx = new BoolValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, MQL_Parser.RULE_boolValue);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 706;
	        _la = this._input.LA(1);
	        if(!(_la===29 || _la===61)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericValue() {
	    let localctx = new NumericValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, MQL_Parser.RULE_numericValue);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 709;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===94 || _la===95) {
	            this.state = 708;
	            _la = this._input.LA(1);
	            if(!(_la===94 || _la===95)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 711;
	        _la = this._input.LA(1);
	        if(!(((((_la - 77)) & ~0x1f) === 0 && ((1 << (_la - 77)) & 7) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	datatypeValue() {
	    let localctx = new DatatypeValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, MQL_Parser.RULE_datatypeValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 713;
	        this.identifier();
	        this.state = 714;
	        this.match(MQL_Parser.L_PAR);
	        this.state = 715;
	        this.match(MQL_Parser.STRING);
	        this.state = 716;
	        this.match(MQL_Parser.R_PAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	value() {
	    let localctx = new ValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, MQL_Parser.RULE_value);
	    try {
	        this.state = 722;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 77:
	        case 78:
	        case 79:
	        case 94:
	        case 95:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 718;
	            this.numericValue();
	            break;
	        case 76:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 719;
	            this.match(MQL_Parser.STRING);
	            break;
	        case 29:
	        case 61:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 720;
	            this.boolValue();
	            break;
	        case 1:
	        case 2:
	        case 3:
	        case 4:
	        case 5:
	        case 6:
	        case 7:
	        case 8:
	        case 9:
	        case 10:
	        case 11:
	        case 12:
	        case 13:
	        case 14:
	        case 15:
	        case 16:
	        case 17:
	        case 18:
	        case 19:
	        case 20:
	        case 21:
	        case 22:
	        case 23:
	        case 24:
	        case 25:
	        case 26:
	        case 27:
	        case 28:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 80:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 721;
	            this.datatypeValue();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionalOrExpr() {
	    let localctx = new ConditionalOrExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, MQL_Parser.RULE_conditionalOrExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 724;
	        this.conditionalAndExpr();
	        this.state = 729;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===46) {
	            this.state = 725;
	            this.match(MQL_Parser.K_OR);
	            this.state = 726;
	            this.conditionalAndExpr();
	            this.state = 731;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionalAndExpr() {
	    let localctx = new ConditionalAndExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, MQL_Parser.RULE_conditionalAndExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 732;
	        this.comparisonExpr();
	        this.state = 737;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===2) {
	            this.state = 733;
	            this.match(MQL_Parser.K_AND);
	            this.state = 734;
	            this.comparisonExpr();
	            this.state = 739;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comparisonExpr() {
	    let localctx = new ComparisonExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, MQL_Parser.RULE_comparisonExpr);
	    var _la = 0;
	    try {
	        this.state = 752;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ComparisonExprOpContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 740;
	            this.additiveExpr();
	            this.state = 743;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 81)) & ~0x1f) === 0 && ((1 << (_la - 81)) & 63) !== 0)) {
	                this.state = 741;
	                localctx.op = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(((((_la - 81)) & ~0x1f) === 0 && ((1 << (_la - 81)) & 63) !== 0))) {
	                    localctx.op = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 742;
	                this.additiveExpr();
	            }

	            break;

	        case 2:
	            localctx = new ComparisonExprIsContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 745;
	            this.additiveExpr();
	            this.state = 746;
	            this.match(MQL_Parser.K_IS);
	            this.state = 748;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===51) {
	                this.state = 747;
	                this.match(MQL_Parser.K_NOT);
	            }

	            this.state = 750;
	            this.exprTypename();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	additiveExpr() {
	    let localctx = new AdditiveExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, MQL_Parser.RULE_additiveExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 754;
	        this.multiplicativeExpr();
	        this.state = 759;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===94 || _la===95) {
	            this.state = 755;
	            localctx._tset1392 = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===94 || _la===95)) {
	                localctx._tset1392 = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            localctx.op.push(localctx._tset1392);
	            this.state = 756;
	            this.multiplicativeExpr();
	            this.state = 761;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiplicativeExpr() {
	    let localctx = new MultiplicativeExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, MQL_Parser.RULE_multiplicativeExpr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 762;
	        this.unaryExpr();
	        this.state = 767;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 88)) & ~0x1f) === 0 && ((1 << (_la - 88)) & 25) !== 0)) {
	            this.state = 763;
	            localctx._tset1411 = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 88)) & ~0x1f) === 0 && ((1 << (_la - 88)) & 25) !== 0))) {
	                localctx._tset1411 = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            localctx.op.push(localctx._tset1411);
	            this.state = 764;
	            this.unaryExpr();
	            this.state = 769;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryExpr() {
	    let localctx = new UnaryExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, MQL_Parser.RULE_unaryExpr);
	    try {
	        this.state = 777;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 770;
	            this.match(MQL_Parser.K_NOT);
	            this.state = 771;
	            this.unaryExpr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 772;
	            this.atomicExpr();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 773;
	            this.match(MQL_Parser.PLUS);
	            this.state = 774;
	            this.unaryExpr();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 775;
	            this.match(MQL_Parser.MINUS);
	            this.state = 776;
	            this.unaryExpr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atomicExpr() {
	    let localctx = new AtomicExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, MQL_Parser.RULE_atomicExpr);
	    var _la = 0;
	    try {
	        this.state = 790;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ExprVarContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 779;
	            this.match(MQL_Parser.VARIABLE);
	            this.state = 781;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===72) {
	                this.state = 780;
	                this.match(MQL_Parser.KEY);
	            }

	            break;

	        case 2:
	            localctx = new ExprValueContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 783;
	            this.value();
	            break;

	        case 3:
	            localctx = new ExprFixedNodeInsideContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 784;
	            this.fixedNodeInside();
	            break;

	        case 4:
	            localctx = new ExprParenthesisContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 785;
	            this.match(MQL_Parser.L_PAR);
	            this.state = 786;
	            this.conditionalOrExpr();
	            this.state = 787;
	            this.match(MQL_Parser.R_PAR);
	            break;

	        case 5:
	            localctx = new ExprFunctionContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 789;
	            this.function_();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	function_() {
	    let localctx = new FunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, MQL_Parser.RULE_function);
	    try {
	        this.state = 798;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 57:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 792;
	            this.regex();
	            break;
	        case 56:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 793;
	            this.textSearch();
	            break;
	        case 12:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 794;
	            this.cosineSimilarity();
	            break;
	        case 11:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 795;
	            this.cosineDistance();
	            break;
	        case 38:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 796;
	            this.manhattanDistance();
	            break;
	        case 21:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 797;
	            this.euclideanDistance();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	regex() {
	    let localctx = new RegexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, MQL_Parser.RULE_regex);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 800;
	        this.match(MQL_Parser.K_REGEX);
	        this.state = 801;
	        this.match(MQL_Parser.L_PAR);
	        this.state = 802;
	        this.conditionalOrExpr();
	        this.state = 803;
	        this.match(MQL_Parser.COMMA);
	        this.state = 804;
	        this.conditionalOrExpr();
	        this.state = 807;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===102) {
	            this.state = 805;
	            this.match(MQL_Parser.COMMA);
	            this.state = 806;
	            this.conditionalOrExpr();
	        }

	        this.state = 809;
	        this.match(MQL_Parser.R_PAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	textSearch() {
	    let localctx = new TextSearchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, MQL_Parser.RULE_textSearch);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 811;
	        this.match(MQL_Parser.K_TEXT_SEARCH);
	        this.state = 812;
	        this.match(MQL_Parser.L_PAR);
	        this.state = 813;
	        this.match(MQL_Parser.STRING);
	        this.state = 814;
	        this.match(MQL_Parser.COMMA);
	        this.state = 815;
	        this.match(MQL_Parser.STRING);
	        this.state = 816;
	        this.match(MQL_Parser.COMMA);
	        this.state = 817;
	        this.textSearchIndexMode();
	        this.state = 818;
	        this.match(MQL_Parser.COMMA);
	        this.state = 819;
	        this.match(MQL_Parser.VARIABLE);
	        this.state = 822;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===102) {
	            this.state = 820;
	            this.match(MQL_Parser.COMMA);
	            this.state = 821;
	            this.match(MQL_Parser.VARIABLE);
	        }

	        this.state = 824;
	        this.match(MQL_Parser.R_PAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cosineSimilarity() {
	    let localctx = new CosineSimilarityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, MQL_Parser.RULE_cosineSimilarity);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 826;
	        this.match(MQL_Parser.K_COSINE_SIMILARITY);
	        this.state = 827;
	        this.match(MQL_Parser.L_PAR);
	        this.state = 828;
	        this.conditionalOrExpr();
	        this.state = 829;
	        this.match(MQL_Parser.COMMA);
	        this.state = 830;
	        this.conditionalOrExpr();
	        this.state = 831;
	        this.match(MQL_Parser.R_PAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cosineDistance() {
	    let localctx = new CosineDistanceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, MQL_Parser.RULE_cosineDistance);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 833;
	        this.match(MQL_Parser.K_COSINE_DISTANCE);
	        this.state = 834;
	        this.match(MQL_Parser.L_PAR);
	        this.state = 835;
	        this.conditionalOrExpr();
	        this.state = 836;
	        this.match(MQL_Parser.COMMA);
	        this.state = 837;
	        this.conditionalOrExpr();
	        this.state = 838;
	        this.match(MQL_Parser.R_PAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	manhattanDistance() {
	    let localctx = new ManhattanDistanceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, MQL_Parser.RULE_manhattanDistance);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 840;
	        this.match(MQL_Parser.K_MANHATTAN_DISTANCE);
	        this.state = 841;
	        this.match(MQL_Parser.L_PAR);
	        this.state = 842;
	        this.conditionalOrExpr();
	        this.state = 843;
	        this.match(MQL_Parser.COMMA);
	        this.state = 844;
	        this.conditionalOrExpr();
	        this.state = 845;
	        this.match(MQL_Parser.R_PAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	euclideanDistance() {
	    let localctx = new EuclideanDistanceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, MQL_Parser.RULE_euclideanDistance);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 847;
	        this.match(MQL_Parser.K_EUCLIDEAN_DISTANCE);
	        this.state = 848;
	        this.match(MQL_Parser.L_PAR);
	        this.state = 849;
	        this.conditionalOrExpr();
	        this.state = 850;
	        this.match(MQL_Parser.COMMA);
	        this.state = 851;
	        this.conditionalOrExpr();
	        this.state = 852;
	        this.match(MQL_Parser.R_PAR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	textSearchIndexMode() {
	    let localctx = new TextSearchIndexModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, MQL_Parser.RULE_textSearchIndexMode);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 854;
	        _la = this._input.LA(1);
	        if(!(_la===39 || _la===48)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exprTypename() {
	    let localctx = new ExprTypenameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, MQL_Parser.RULE_exprTypename);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 856;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 1140851200) !== 0) || _la===52 || _la===60)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword() {
	    let localctx = new KeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, MQL_Parser.RULE_keyword);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 858;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 3758096382) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 3758096383) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 15) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

MQL_Parser.EOF = antlr4.Token.EOF;
MQL_Parser.K_ACYCLIC = 1;
MQL_Parser.K_AND = 2;
MQL_Parser.K_ANY = 3;
MQL_Parser.K_AS = 4;
MQL_Parser.K_AVG = 5;
MQL_Parser.K_ALL = 6;
MQL_Parser.K_ASC = 7;
MQL_Parser.K_BY = 8;
MQL_Parser.K_BOOL = 9;
MQL_Parser.K_CALL = 10;
MQL_Parser.K_COSINE_DISTANCE = 11;
MQL_Parser.K_COSINE_SIMILARITY = 12;
MQL_Parser.K_COUNT = 13;
MQL_Parser.K_CREATE = 14;
MQL_Parser.K_DELETE = 15;
MQL_Parser.K_DESCRIBE = 16;
MQL_Parser.K_DESC = 17;
MQL_Parser.K_DIMENSIONS = 18;
MQL_Parser.K_DISTINCT = 19;
MQL_Parser.K_EDGE = 20;
MQL_Parser.K_EUCLIDEAN_DISTANCE = 21;
MQL_Parser.K_FROM = 22;
MQL_Parser.K_INCOMING = 23;
MQL_Parser.K_INDEX = 24;
MQL_Parser.K_INSERT = 25;
MQL_Parser.K_INTEGER = 26;
MQL_Parser.K_INTO = 27;
MQL_Parser.K_IS = 28;
MQL_Parser.K_FALSE = 29;
MQL_Parser.K_FLOAT = 30;
MQL_Parser.K_GROUP = 31;
MQL_Parser.K_GROUPS = 32;
MQL_Parser.K_IDENTITY = 33;
MQL_Parser.K_LABELS = 34;
MQL_Parser.K_LABEL = 35;
MQL_Parser.K_LET = 36;
MQL_Parser.K_LIMIT = 37;
MQL_Parser.K_MANHATTAN_DISTANCE = 38;
MQL_Parser.K_MATCH = 39;
MQL_Parser.K_MAX = 40;
MQL_Parser.K_MIN = 41;
MQL_Parser.K_OBJECTS = 42;
MQL_Parser.K_OFFSET = 43;
MQL_Parser.K_OPTIONAL = 44;
MQL_Parser.K_ORDER = 45;
MQL_Parser.K_OR = 46;
MQL_Parser.K_OUTGOING = 47;
MQL_Parser.K_PREFIX = 48;
MQL_Parser.K_PROPERTIES = 49;
MQL_Parser.K_PROPERTY = 50;
MQL_Parser.K_NOT = 51;
MQL_Parser.K_NULL = 52;
MQL_Parser.K_SHORTEST = 53;
MQL_Parser.K_SHOW = 54;
MQL_Parser.K_SIMPLE = 55;
MQL_Parser.K_TEXT_SEARCH = 56;
MQL_Parser.K_REGEX = 57;
MQL_Parser.K_RETURN = 58;
MQL_Parser.K_SUM = 59;
MQL_Parser.K_STRING = 60;
MQL_Parser.K_TRUE = 61;
MQL_Parser.K_TRAILS = 62;
MQL_Parser.K_VALUES = 63;
MQL_Parser.K_WALKS = 64;
MQL_Parser.K_WITH = 65;
MQL_Parser.K_WHERE = 66;
MQL_Parser.K_YIELD = 67;
MQL_Parser.TRUE_PROP = 68;
MQL_Parser.FALSE_PROP = 69;
MQL_Parser.ANON_ID = 70;
MQL_Parser.EDGE_ID = 71;
MQL_Parser.KEY = 72;
MQL_Parser.TYPE = 73;
MQL_Parser.TYPE_VAR = 74;
MQL_Parser.VARIABLE = 75;
MQL_Parser.STRING = 76;
MQL_Parser.UNSIGNED_INTEGER = 77;
MQL_Parser.UNSIGNED_FLOAT = 78;
MQL_Parser.UNSIGNED_SCIENTIFIC_NOTATION = 79;
MQL_Parser.NAME = 80;
MQL_Parser.LEQ = 81;
MQL_Parser.GEQ = 82;
MQL_Parser.EQ = 83;
MQL_Parser.NEQ = 84;
MQL_Parser.LT = 85;
MQL_Parser.GT = 86;
MQL_Parser.SINGLE_EQ = 87;
MQL_Parser.PATH_SEQUENCE = 88;
MQL_Parser.PATH_ALTERNATIVE = 89;
MQL_Parser.PATH_NEGATION = 90;
MQL_Parser.STAR = 91;
MQL_Parser.PERCENT = 92;
MQL_Parser.QUESTION_MARK = 93;
MQL_Parser.PLUS = 94;
MQL_Parser.MINUS = 95;
MQL_Parser.L_PAR = 96;
MQL_Parser.R_PAR = 97;
MQL_Parser.LCURLY_BRACKET = 98;
MQL_Parser.RCURLY_BRACKET = 99;
MQL_Parser.LSQUARE_BRACKET = 100;
MQL_Parser.RSQUARE_BRACKET = 101;
MQL_Parser.COMMA = 102;
MQL_Parser.COLON = 103;
MQL_Parser.WHITE_SPACE = 104;
MQL_Parser.SINGLE_LINE_COMMENT = 105;
MQL_Parser.UNRECOGNIZED = 106;

MQL_Parser.RULE_root = 0;
MQL_Parser.RULE_matchQuery = 1;
MQL_Parser.RULE_primitiveStatementList = 2;
MQL_Parser.RULE_primitiveStatement = 3;
MQL_Parser.RULE_insertPatterns = 4;
MQL_Parser.RULE_insertLinearPattern = 5;
MQL_Parser.RULE_insertPlainNode = 6;
MQL_Parser.RULE_insertPlainNodeInside = 7;
MQL_Parser.RULE_insertPlainEdge = 8;
MQL_Parser.RULE_createIndexQuery = 9;
MQL_Parser.RULE_createIndexOptions = 10;
MQL_Parser.RULE_createIndexOption = 11;
MQL_Parser.RULE_showQuery = 12;
MQL_Parser.RULE_describeQuery = 13;
MQL_Parser.RULE_describeFlag = 14;
MQL_Parser.RULE_matchStatement = 15;
MQL_Parser.RULE_letStatement = 16;
MQL_Parser.RULE_letDefinitionList = 17;
MQL_Parser.RULE_letDefinition = 18;
MQL_Parser.RULE_whereStatement = 19;
MQL_Parser.RULE_groupByStatement = 20;
MQL_Parser.RULE_orderByStatement = 21;
MQL_Parser.RULE_returnStatement = 22;
MQL_Parser.RULE_callStatement = 23;
MQL_Parser.RULE_yieldStatement = 24;
MQL_Parser.RULE_yieldItem = 25;
MQL_Parser.RULE_callArguments = 26;
MQL_Parser.RULE_limitOffsetClauses = 27;
MQL_Parser.RULE_limitClause = 28;
MQL_Parser.RULE_offsetClause = 29;
MQL_Parser.RULE_returnItem = 30;
MQL_Parser.RULE_alias = 31;
MQL_Parser.RULE_aggregateFunc = 32;
MQL_Parser.RULE_orderByItem = 33;
MQL_Parser.RULE_groupByItem = 34;
MQL_Parser.RULE_graphPattern = 35;
MQL_Parser.RULE_optionalPattern = 36;
MQL_Parser.RULE_basicPattern = 37;
MQL_Parser.RULE_linearPattern = 38;
MQL_Parser.RULE_path = 39;
MQL_Parser.RULE_pathAlternatives = 40;
MQL_Parser.RULE_pathSequence = 41;
MQL_Parser.RULE_pathAtom = 42;
MQL_Parser.RULE_pathSuffix = 43;
MQL_Parser.RULE_pathType = 44;
MQL_Parser.RULE_node = 45;
MQL_Parser.RULE_fixedNode = 46;
MQL_Parser.RULE_fixedNodeInside = 47;
MQL_Parser.RULE_edge = 48;
MQL_Parser.RULE_edgeInside = 49;
MQL_Parser.RULE_varNode = 50;
MQL_Parser.RULE_properties = 51;
MQL_Parser.RULE_property = 52;
MQL_Parser.RULE_conditionalOrType = 53;
MQL_Parser.RULE_identifier = 54;
MQL_Parser.RULE_boolValue = 55;
MQL_Parser.RULE_numericValue = 56;
MQL_Parser.RULE_datatypeValue = 57;
MQL_Parser.RULE_value = 58;
MQL_Parser.RULE_conditionalOrExpr = 59;
MQL_Parser.RULE_conditionalAndExpr = 60;
MQL_Parser.RULE_comparisonExpr = 61;
MQL_Parser.RULE_additiveExpr = 62;
MQL_Parser.RULE_multiplicativeExpr = 63;
MQL_Parser.RULE_unaryExpr = 64;
MQL_Parser.RULE_atomicExpr = 65;
MQL_Parser.RULE_function = 66;
MQL_Parser.RULE_regex = 67;
MQL_Parser.RULE_textSearch = 68;
MQL_Parser.RULE_cosineSimilarity = 69;
MQL_Parser.RULE_cosineDistance = 70;
MQL_Parser.RULE_manhattanDistance = 71;
MQL_Parser.RULE_euclideanDistance = 72;
MQL_Parser.RULE_textSearchIndexMode = 73;
MQL_Parser.RULE_exprTypename = 74;
MQL_Parser.RULE_keyword = 75;

class RootContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_root;
    }

	EOF() {
	    return this.getToken(MQL_Parser.EOF, 0);
	};

	matchQuery() {
	    return this.getTypedRuleContext(MatchQueryContext,0);
	};

	describeQuery() {
	    return this.getTypedRuleContext(DescribeQueryContext,0);
	};

	insertPatterns() {
	    return this.getTypedRuleContext(InsertPatternsContext,0);
	};

	createIndexQuery() {
	    return this.getTypedRuleContext(CreateIndexQueryContext,0);
	};

	showQuery() {
	    return this.getTypedRuleContext(ShowQueryContext,0);
	};


}



class MatchQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_matchQuery;
    }

	primitiveStatementList() {
	    return this.getTypedRuleContext(PrimitiveStatementListContext,0);
	};

	returnStatement() {
	    return this.getTypedRuleContext(ReturnStatementContext,0);
	};

	whereStatement() {
	    return this.getTypedRuleContext(WhereStatementContext,0);
	};

	groupByStatement() {
	    return this.getTypedRuleContext(GroupByStatementContext,0);
	};

	orderByStatement() {
	    return this.getTypedRuleContext(OrderByStatementContext,0);
	};


}



class PrimitiveStatementListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_primitiveStatementList;
    }

	primitiveStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrimitiveStatementContext);
	    } else {
	        return this.getTypedRuleContext(PrimitiveStatementContext,i);
	    }
	};


}



class PrimitiveStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_primitiveStatement;
    }

	matchStatement() {
	    return this.getTypedRuleContext(MatchStatementContext,0);
	};

	callStatement() {
	    return this.getTypedRuleContext(CallStatementContext,0);
	};

	letStatement() {
	    return this.getTypedRuleContext(LetStatementContext,0);
	};


}



class InsertPatternsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_insertPatterns;
    }

	K_INSERT() {
	    return this.getToken(MQL_Parser.K_INSERT, 0);
	};

	insertLinearPattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InsertLinearPatternContext);
	    } else {
	        return this.getTypedRuleContext(InsertLinearPatternContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQL_Parser.COMMA);
	    } else {
	        return this.getToken(MQL_Parser.COMMA, i);
	    }
	};



}



class InsertLinearPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_insertLinearPattern;
    }

	insertPlainNode = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InsertPlainNodeContext);
	    } else {
	        return this.getTypedRuleContext(InsertPlainNodeContext,i);
	    }
	};

	insertPlainEdge = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InsertPlainEdgeContext);
	    } else {
	        return this.getTypedRuleContext(InsertPlainEdgeContext,i);
	    }
	};


}



class InsertPlainNodeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_insertPlainNode;
    }

	L_PAR() {
	    return this.getToken(MQL_Parser.L_PAR, 0);
	};

	R_PAR() {
	    return this.getToken(MQL_Parser.R_PAR, 0);
	};

	insertPlainNodeInside() {
	    return this.getTypedRuleContext(InsertPlainNodeInsideContext,0);
	};

	TYPE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQL_Parser.TYPE);
	    } else {
	        return this.getToken(MQL_Parser.TYPE, i);
	    }
	};


	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};


}



class InsertPlainNodeInsideContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_insertPlainNodeInside;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};


}



class InsertPlainEdgeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_insertPlainEdge;
    }

	LT() {
	    return this.getToken(MQL_Parser.LT, 0);
	};

	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQL_Parser.MINUS);
	    } else {
	        return this.getToken(MQL_Parser.MINUS, i);
	    }
	};


	LSQUARE_BRACKET() {
	    return this.getToken(MQL_Parser.LSQUARE_BRACKET, 0);
	};

	TYPE() {
	    return this.getToken(MQL_Parser.TYPE, 0);
	};

	RSQUARE_BRACKET() {
	    return this.getToken(MQL_Parser.RSQUARE_BRACKET, 0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	GT() {
	    return this.getToken(MQL_Parser.GT, 0);
	};


}



class CreateIndexQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_createIndexQuery;
    }

	K_CREATE() {
	    return this.getToken(MQL_Parser.K_CREATE, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	K_INDEX() {
	    return this.getToken(MQL_Parser.K_INDEX, 0);
	};

	STRING() {
	    return this.getToken(MQL_Parser.STRING, 0);
	};

	K_WITH() {
	    return this.getToken(MQL_Parser.K_WITH, 0);
	};

	createIndexOptions() {
	    return this.getTypedRuleContext(CreateIndexOptionsContext,0);
	};


}



class CreateIndexOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_createIndexOptions;
    }

	LCURLY_BRACKET() {
	    return this.getToken(MQL_Parser.LCURLY_BRACKET, 0);
	};

	RCURLY_BRACKET() {
	    return this.getToken(MQL_Parser.RCURLY_BRACKET, 0);
	};

	createIndexOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CreateIndexOptionContext);
	    } else {
	        return this.getTypedRuleContext(CreateIndexOptionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQL_Parser.COMMA);
	    } else {
	        return this.getToken(MQL_Parser.COMMA, i);
	    }
	};



}



class CreateIndexOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_createIndexOption;
    }

	STRING() {
	    return this.getToken(MQL_Parser.STRING, 0);
	};

	SINGLE_EQ() {
	    return this.getToken(MQL_Parser.SINGLE_EQ, 0);
	};

	value() {
	    return this.getTypedRuleContext(ValueContext,0);
	};

	boolValue() {
	    return this.getTypedRuleContext(BoolValueContext,0);
	};


}



class ShowQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_showQuery;
    }

	K_SHOW() {
	    return this.getToken(MQL_Parser.K_SHOW, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	K_INDEX() {
	    return this.getToken(MQL_Parser.K_INDEX, 0);
	};


}



class DescribeQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_describeQuery;
    }

	K_DESCRIBE() {
	    return this.getToken(MQL_Parser.K_DESCRIBE, 0);
	};

	fixedNodeInside() {
	    return this.getTypedRuleContext(FixedNodeInsideContext,0);
	};

	describeFlag = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DescribeFlagContext);
	    } else {
	        return this.getTypedRuleContext(DescribeFlagContext,i);
	    }
	};


}



class DescribeFlagContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_describeFlag;
    }

	K_LABELS() {
	    return this.getToken(MQL_Parser.K_LABELS, 0);
	};

	K_PROPERTIES() {
	    return this.getToken(MQL_Parser.K_PROPERTIES, 0);
	};

	K_OUTGOING() {
	    return this.getToken(MQL_Parser.K_OUTGOING, 0);
	};

	K_INCOMING() {
	    return this.getToken(MQL_Parser.K_INCOMING, 0);
	};

	K_LIMIT() {
	    return this.getToken(MQL_Parser.K_LIMIT, 0);
	};

	UNSIGNED_INTEGER() {
	    return this.getToken(MQL_Parser.UNSIGNED_INTEGER, 0);
	};


}



class MatchStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_matchStatement;
    }

	K_MATCH() {
	    return this.getToken(MQL_Parser.K_MATCH, 0);
	};

	graphPattern() {
	    return this.getTypedRuleContext(GraphPatternContext,0);
	};


}



class LetStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_letStatement;
    }

	K_LET() {
	    return this.getToken(MQL_Parser.K_LET, 0);
	};

	letDefinitionList() {
	    return this.getTypedRuleContext(LetDefinitionListContext,0);
	};


}



class LetDefinitionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_letDefinitionList;
    }

	letDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LetDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(LetDefinitionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQL_Parser.COMMA);
	    } else {
	        return this.getToken(MQL_Parser.COMMA, i);
	    }
	};



}



class LetDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_letDefinition;
    }

	VARIABLE() {
	    return this.getToken(MQL_Parser.VARIABLE, 0);
	};

	SINGLE_EQ() {
	    return this.getToken(MQL_Parser.SINGLE_EQ, 0);
	};

	conditionalOrExpr() {
	    return this.getTypedRuleContext(ConditionalOrExprContext,0);
	};


}



class WhereStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_whereStatement;
    }

	K_WHERE() {
	    return this.getToken(MQL_Parser.K_WHERE, 0);
	};

	conditionalOrExpr() {
	    return this.getTypedRuleContext(ConditionalOrExprContext,0);
	};


}



class GroupByStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_groupByStatement;
    }

	K_GROUP() {
	    return this.getToken(MQL_Parser.K_GROUP, 0);
	};

	K_BY() {
	    return this.getToken(MQL_Parser.K_BY, 0);
	};

	groupByItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GroupByItemContext);
	    } else {
	        return this.getTypedRuleContext(GroupByItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQL_Parser.COMMA);
	    } else {
	        return this.getToken(MQL_Parser.COMMA, i);
	    }
	};



}



class OrderByStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_orderByStatement;
    }

	K_ORDER() {
	    return this.getToken(MQL_Parser.K_ORDER, 0);
	};

	K_BY() {
	    return this.getToken(MQL_Parser.K_BY, 0);
	};

	orderByItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OrderByItemContext);
	    } else {
	        return this.getTypedRuleContext(OrderByItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQL_Parser.COMMA);
	    } else {
	        return this.getToken(MQL_Parser.COMMA, i);
	    }
	};



}



class ReturnStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_returnStatement;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ReturnAllContext extends ReturnStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	K_RETURN() {
	    return this.getToken(MQL_Parser.K_RETURN, 0);
	};

	STAR() {
	    return this.getToken(MQL_Parser.STAR, 0);
	};

	K_DISTINCT() {
	    return this.getToken(MQL_Parser.K_DISTINCT, 0);
	};

	limitOffsetClauses() {
	    return this.getTypedRuleContext(LimitOffsetClausesContext,0);
	};


}

MQL_Parser.ReturnAllContext = ReturnAllContext;

class ReturnListContext extends ReturnStatementContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	K_RETURN() {
	    return this.getToken(MQL_Parser.K_RETURN, 0);
	};

	returnItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ReturnItemContext);
	    } else {
	        return this.getTypedRuleContext(ReturnItemContext,i);
	    }
	};

	K_DISTINCT() {
	    return this.getToken(MQL_Parser.K_DISTINCT, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQL_Parser.COMMA);
	    } else {
	        return this.getToken(MQL_Parser.COMMA, i);
	    }
	};


	limitOffsetClauses() {
	    return this.getTypedRuleContext(LimitOffsetClausesContext,0);
	};


}

MQL_Parser.ReturnListContext = ReturnListContext;

class CallStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_callStatement;
    }

	K_CALL() {
	    return this.getToken(MQL_Parser.K_CALL, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	L_PAR() {
	    return this.getToken(MQL_Parser.L_PAR, 0);
	};

	R_PAR() {
	    return this.getToken(MQL_Parser.R_PAR, 0);
	};

	callArguments() {
	    return this.getTypedRuleContext(CallArgumentsContext,0);
	};

	yieldStatement() {
	    return this.getTypedRuleContext(YieldStatementContext,0);
	};


}



class YieldStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_yieldStatement;
    }

	K_YIELD() {
	    return this.getToken(MQL_Parser.K_YIELD, 0);
	};

	STAR() {
	    return this.getToken(MQL_Parser.STAR, 0);
	};

	yieldItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(YieldItemContext);
	    } else {
	        return this.getTypedRuleContext(YieldItemContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQL_Parser.COMMA);
	    } else {
	        return this.getToken(MQL_Parser.COMMA, i);
	    }
	};



}



class YieldItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_yieldItem;
    }

	VARIABLE() {
	    return this.getToken(MQL_Parser.VARIABLE, 0);
	};

	alias() {
	    return this.getTypedRuleContext(AliasContext,0);
	};


}



class CallArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_callArguments;
    }

	conditionalOrExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionalOrExprContext);
	    } else {
	        return this.getTypedRuleContext(ConditionalOrExprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQL_Parser.COMMA);
	    } else {
	        return this.getToken(MQL_Parser.COMMA, i);
	    }
	};



}



class LimitOffsetClausesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_limitOffsetClauses;
    }

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	offsetClause() {
	    return this.getTypedRuleContext(OffsetClauseContext,0);
	};


}



class LimitClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_limitClause;
    }

	K_LIMIT() {
	    return this.getToken(MQL_Parser.K_LIMIT, 0);
	};

	UNSIGNED_INTEGER() {
	    return this.getToken(MQL_Parser.UNSIGNED_INTEGER, 0);
	};


}



class OffsetClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_offsetClause;
    }

	K_OFFSET() {
	    return this.getToken(MQL_Parser.K_OFFSET, 0);
	};

	UNSIGNED_INTEGER() {
	    return this.getToken(MQL_Parser.UNSIGNED_INTEGER, 0);
	};


}



class ReturnItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_returnItem;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ReturnItemExprContext extends ReturnItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	conditionalOrExpr() {
	    return this.getTypedRuleContext(ConditionalOrExprContext,0);
	};

	alias() {
	    return this.getTypedRuleContext(AliasContext,0);
	};


}

MQL_Parser.ReturnItemExprContext = ReturnItemExprContext;

class ReturnItemVarContext extends ReturnItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	VARIABLE() {
	    return this.getToken(MQL_Parser.VARIABLE, 0);
	};

	KEY() {
	    return this.getToken(MQL_Parser.KEY, 0);
	};


}

MQL_Parser.ReturnItemVarContext = ReturnItemVarContext;

class ReturnItemAggContext extends ReturnItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	aggregateFunc() {
	    return this.getTypedRuleContext(AggregateFuncContext,0);
	};

	L_PAR() {
	    return this.getToken(MQL_Parser.L_PAR, 0);
	};

	VARIABLE() {
	    return this.getToken(MQL_Parser.VARIABLE, 0);
	};

	R_PAR() {
	    return this.getToken(MQL_Parser.R_PAR, 0);
	};

	KEY() {
	    return this.getToken(MQL_Parser.KEY, 0);
	};

	alias() {
	    return this.getTypedRuleContext(AliasContext,0);
	};


}

MQL_Parser.ReturnItemAggContext = ReturnItemAggContext;

class ReturnItemCountContext extends ReturnItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	K_COUNT() {
	    return this.getToken(MQL_Parser.K_COUNT, 0);
	};

	L_PAR() {
	    return this.getToken(MQL_Parser.L_PAR, 0);
	};

	R_PAR() {
	    return this.getToken(MQL_Parser.R_PAR, 0);
	};

	VARIABLE() {
	    return this.getToken(MQL_Parser.VARIABLE, 0);
	};

	STAR() {
	    return this.getToken(MQL_Parser.STAR, 0);
	};

	K_DISTINCT() {
	    return this.getToken(MQL_Parser.K_DISTINCT, 0);
	};

	alias() {
	    return this.getTypedRuleContext(AliasContext,0);
	};

	KEY() {
	    return this.getToken(MQL_Parser.KEY, 0);
	};


}

MQL_Parser.ReturnItemCountContext = ReturnItemCountContext;

class AliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_alias;
    }

	K_AS() {
	    return this.getToken(MQL_Parser.K_AS, 0);
	};

	VARIABLE() {
	    return this.getToken(MQL_Parser.VARIABLE, 0);
	};


}



class AggregateFuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_aggregateFunc;
    }

	K_SUM() {
	    return this.getToken(MQL_Parser.K_SUM, 0);
	};

	K_MAX() {
	    return this.getToken(MQL_Parser.K_MAX, 0);
	};

	K_MIN() {
	    return this.getToken(MQL_Parser.K_MIN, 0);
	};

	K_AVG() {
	    return this.getToken(MQL_Parser.K_AVG, 0);
	};


}



class OrderByItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_orderByItem;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class OrderByItemCountContext extends OrderByItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	K_COUNT() {
	    return this.getToken(MQL_Parser.K_COUNT, 0);
	};

	L_PAR() {
	    return this.getToken(MQL_Parser.L_PAR, 0);
	};

	VARIABLE() {
	    return this.getToken(MQL_Parser.VARIABLE, 0);
	};

	R_PAR() {
	    return this.getToken(MQL_Parser.R_PAR, 0);
	};

	K_DISTINCT() {
	    return this.getToken(MQL_Parser.K_DISTINCT, 0);
	};

	KEY() {
	    return this.getToken(MQL_Parser.KEY, 0);
	};

	K_ASC() {
	    return this.getToken(MQL_Parser.K_ASC, 0);
	};

	K_DESC() {
	    return this.getToken(MQL_Parser.K_DESC, 0);
	};


}

MQL_Parser.OrderByItemCountContext = OrderByItemCountContext;

class OrderByItemExprContext extends OrderByItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	conditionalOrExpr() {
	    return this.getTypedRuleContext(ConditionalOrExprContext,0);
	};

	K_ASC() {
	    return this.getToken(MQL_Parser.K_ASC, 0);
	};

	K_DESC() {
	    return this.getToken(MQL_Parser.K_DESC, 0);
	};


}

MQL_Parser.OrderByItemExprContext = OrderByItemExprContext;

class OrderByItemVarContext extends OrderByItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	VARIABLE() {
	    return this.getToken(MQL_Parser.VARIABLE, 0);
	};

	KEY() {
	    return this.getToken(MQL_Parser.KEY, 0);
	};

	K_ASC() {
	    return this.getToken(MQL_Parser.K_ASC, 0);
	};

	K_DESC() {
	    return this.getToken(MQL_Parser.K_DESC, 0);
	};


}

MQL_Parser.OrderByItemVarContext = OrderByItemVarContext;

class OrderByItemAggContext extends OrderByItemContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	aggregateFunc() {
	    return this.getTypedRuleContext(AggregateFuncContext,0);
	};

	L_PAR() {
	    return this.getToken(MQL_Parser.L_PAR, 0);
	};

	VARIABLE() {
	    return this.getToken(MQL_Parser.VARIABLE, 0);
	};

	R_PAR() {
	    return this.getToken(MQL_Parser.R_PAR, 0);
	};

	KEY() {
	    return this.getToken(MQL_Parser.KEY, 0);
	};

	K_ASC() {
	    return this.getToken(MQL_Parser.K_ASC, 0);
	};

	K_DESC() {
	    return this.getToken(MQL_Parser.K_DESC, 0);
	};


}

MQL_Parser.OrderByItemAggContext = OrderByItemAggContext;

class GroupByItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_groupByItem;
    }

	VARIABLE() {
	    return this.getToken(MQL_Parser.VARIABLE, 0);
	};

	KEY() {
	    return this.getToken(MQL_Parser.KEY, 0);
	};


}



class GraphPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_graphPattern;
    }

	basicPattern() {
	    return this.getTypedRuleContext(BasicPatternContext,0);
	};

	optionalPattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OptionalPatternContext);
	    } else {
	        return this.getTypedRuleContext(OptionalPatternContext,i);
	    }
	};


}



class OptionalPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_optionalPattern;
    }

	K_OPTIONAL() {
	    return this.getToken(MQL_Parser.K_OPTIONAL, 0);
	};

	LCURLY_BRACKET() {
	    return this.getToken(MQL_Parser.LCURLY_BRACKET, 0);
	};

	graphPattern() {
	    return this.getTypedRuleContext(GraphPatternContext,0);
	};

	RCURLY_BRACKET() {
	    return this.getToken(MQL_Parser.RCURLY_BRACKET, 0);
	};


}



class BasicPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_basicPattern;
    }

	linearPattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LinearPatternContext);
	    } else {
	        return this.getTypedRuleContext(LinearPatternContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQL_Parser.COMMA);
	    } else {
	        return this.getToken(MQL_Parser.COMMA, i);
	    }
	};



}



class LinearPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_linearPattern;
    }

	node = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NodeContext);
	    } else {
	        return this.getTypedRuleContext(NodeContext,i);
	    }
	};

	edge = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EdgeContext);
	    } else {
	        return this.getTypedRuleContext(EdgeContext,i);
	    }
	};

	path = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathContext);
	    } else {
	        return this.getTypedRuleContext(PathContext,i);
	    }
	};


}



class PathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_path;
    }

	LEQ() {
	    return this.getToken(MQL_Parser.LEQ, 0);
	};

	LSQUARE_BRACKET() {
	    return this.getToken(MQL_Parser.LSQUARE_BRACKET, 0);
	};

	pathAlternatives() {
	    return this.getTypedRuleContext(PathAlternativesContext,0);
	};

	RSQUARE_BRACKET() {
	    return this.getToken(MQL_Parser.RSQUARE_BRACKET, 0);
	};

	SINGLE_EQ = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQL_Parser.SINGLE_EQ);
	    } else {
	        return this.getToken(MQL_Parser.SINGLE_EQ, i);
	    }
	};


	pathType() {
	    return this.getTypedRuleContext(PathTypeContext,0);
	};

	VARIABLE() {
	    return this.getToken(MQL_Parser.VARIABLE, 0);
	};

	GT() {
	    return this.getToken(MQL_Parser.GT, 0);
	};


}



class PathAlternativesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_pathAlternatives;
    }

	pathSequence = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathSequenceContext);
	    } else {
	        return this.getTypedRuleContext(PathSequenceContext,i);
	    }
	};

	PATH_ALTERNATIVE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQL_Parser.PATH_ALTERNATIVE);
	    } else {
	        return this.getToken(MQL_Parser.PATH_ALTERNATIVE, i);
	    }
	};



}



class PathSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_pathSequence;
    }

	pathAtom = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathAtomContext);
	    } else {
	        return this.getTypedRuleContext(PathAtomContext,i);
	    }
	};

	PATH_SEQUENCE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQL_Parser.PATH_SEQUENCE);
	    } else {
	        return this.getToken(MQL_Parser.PATH_SEQUENCE, i);
	    }
	};



}



class PathAtomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_pathAtom;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PathAtomAlternativesContext extends PathAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	L_PAR() {
	    return this.getToken(MQL_Parser.L_PAR, 0);
	};

	pathAlternatives() {
	    return this.getTypedRuleContext(PathAlternativesContext,0);
	};

	R_PAR() {
	    return this.getToken(MQL_Parser.R_PAR, 0);
	};

	PATH_NEGATION() {
	    return this.getToken(MQL_Parser.PATH_NEGATION, 0);
	};

	pathSuffix() {
	    return this.getTypedRuleContext(PathSuffixContext,0);
	};


}

MQL_Parser.PathAtomAlternativesContext = PathAtomAlternativesContext;

class PathAtomSimpleContext extends PathAtomContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TYPE() {
	    return this.getToken(MQL_Parser.TYPE, 0);
	};

	PATH_NEGATION() {
	    return this.getToken(MQL_Parser.PATH_NEGATION, 0);
	};

	pathSuffix() {
	    return this.getTypedRuleContext(PathSuffixContext,0);
	};


}

MQL_Parser.PathAtomSimpleContext = PathAtomSimpleContext;

class PathSuffixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_pathSuffix;
        this.op = null;
        this.min = null;
        this.max = null;
    }

	STAR() {
	    return this.getToken(MQL_Parser.STAR, 0);
	};

	PLUS() {
	    return this.getToken(MQL_Parser.PLUS, 0);
	};

	QUESTION_MARK() {
	    return this.getToken(MQL_Parser.QUESTION_MARK, 0);
	};

	LCURLY_BRACKET() {
	    return this.getToken(MQL_Parser.LCURLY_BRACKET, 0);
	};

	COMMA() {
	    return this.getToken(MQL_Parser.COMMA, 0);
	};

	RCURLY_BRACKET() {
	    return this.getToken(MQL_Parser.RCURLY_BRACKET, 0);
	};

	UNSIGNED_INTEGER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQL_Parser.UNSIGNED_INTEGER);
	    } else {
	        return this.getToken(MQL_Parser.UNSIGNED_INTEGER, i);
	    }
	};



}



class PathTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_pathType;
    }

	K_ANY() {
	    return this.getToken(MQL_Parser.K_ANY, 0);
	};

	K_ALL() {
	    return this.getToken(MQL_Parser.K_ALL, 0);
	};

	K_SHORTEST() {
	    return this.getToken(MQL_Parser.K_SHORTEST, 0);
	};

	K_WALKS() {
	    return this.getToken(MQL_Parser.K_WALKS, 0);
	};

	K_SIMPLE() {
	    return this.getToken(MQL_Parser.K_SIMPLE, 0);
	};

	K_ACYCLIC() {
	    return this.getToken(MQL_Parser.K_ACYCLIC, 0);
	};

	K_TRAILS() {
	    return this.getToken(MQL_Parser.K_TRAILS, 0);
	};

	UNSIGNED_INTEGER() {
	    return this.getToken(MQL_Parser.UNSIGNED_INTEGER, 0);
	};

	K_GROUPS() {
	    return this.getToken(MQL_Parser.K_GROUPS, 0);
	};


}



class NodeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_node;
    }

	fixedNode() {
	    return this.getTypedRuleContext(FixedNodeContext,0);
	};

	varNode() {
	    return this.getTypedRuleContext(VarNodeContext,0);
	};


}



class FixedNodeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_fixedNode;
    }

	L_PAR() {
	    return this.getToken(MQL_Parser.L_PAR, 0);
	};

	fixedNodeInside() {
	    return this.getTypedRuleContext(FixedNodeInsideContext,0);
	};

	R_PAR() {
	    return this.getToken(MQL_Parser.R_PAR, 0);
	};


}



class FixedNodeInsideContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_fixedNodeInside;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ANON_ID() {
	    return this.getToken(MQL_Parser.ANON_ID, 0);
	};

	EDGE_ID() {
	    return this.getToken(MQL_Parser.EDGE_ID, 0);
	};

	value() {
	    return this.getTypedRuleContext(ValueContext,0);
	};


}



class EdgeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_edge;
    }

	LT() {
	    return this.getToken(MQL_Parser.LT, 0);
	};

	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQL_Parser.MINUS);
	    } else {
	        return this.getToken(MQL_Parser.MINUS, i);
	    }
	};


	edgeInside() {
	    return this.getTypedRuleContext(EdgeInsideContext,0);
	};

	GT() {
	    return this.getToken(MQL_Parser.GT, 0);
	};


}



class EdgeInsideContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_edgeInside;
    }

	LSQUARE_BRACKET() {
	    return this.getToken(MQL_Parser.LSQUARE_BRACKET, 0);
	};

	RSQUARE_BRACKET() {
	    return this.getToken(MQL_Parser.RSQUARE_BRACKET, 0);
	};

	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};

	VARIABLE() {
	    return this.getToken(MQL_Parser.VARIABLE, 0);
	};

	EDGE_ID() {
	    return this.getToken(MQL_Parser.EDGE_ID, 0);
	};

	TYPE() {
	    return this.getToken(MQL_Parser.TYPE, 0);
	};

	TYPE_VAR() {
	    return this.getToken(MQL_Parser.TYPE_VAR, 0);
	};


}



class VarNodeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_varNode;
    }

	L_PAR() {
	    return this.getToken(MQL_Parser.L_PAR, 0);
	};

	R_PAR() {
	    return this.getToken(MQL_Parser.R_PAR, 0);
	};

	VARIABLE() {
	    return this.getToken(MQL_Parser.VARIABLE, 0);
	};

	TYPE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQL_Parser.TYPE);
	    } else {
	        return this.getToken(MQL_Parser.TYPE, i);
	    }
	};


	properties() {
	    return this.getTypedRuleContext(PropertiesContext,0);
	};


}



class PropertiesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_properties;
    }

	LCURLY_BRACKET() {
	    return this.getToken(MQL_Parser.LCURLY_BRACKET, 0);
	};

	property = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PropertyContext);
	    } else {
	        return this.getTypedRuleContext(PropertyContext,i);
	    }
	};

	RCURLY_BRACKET() {
	    return this.getToken(MQL_Parser.RCURLY_BRACKET, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQL_Parser.COMMA);
	    } else {
	        return this.getToken(MQL_Parser.COMMA, i);
	    }
	};



}



class PropertyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_property;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class Property2Context extends PropertyContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	TYPE() {
	    return this.getToken(MQL_Parser.TYPE, 0);
	};

	L_PAR() {
	    return this.getToken(MQL_Parser.L_PAR, 0);
	};

	STRING() {
	    return this.getToken(MQL_Parser.STRING, 0);
	};

	R_PAR() {
	    return this.getToken(MQL_Parser.R_PAR, 0);
	};


}

MQL_Parser.Property2Context = Property2Context;

class Property1Context extends PropertyContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	COLON() {
	    return this.getToken(MQL_Parser.COLON, 0);
	};

	value() {
	    return this.getTypedRuleContext(ValueContext,0);
	};

	TRUE_PROP() {
	    return this.getToken(MQL_Parser.TRUE_PROP, 0);
	};

	FALSE_PROP() {
	    return this.getToken(MQL_Parser.FALSE_PROP, 0);
	};


}

MQL_Parser.Property1Context = Property1Context;

class Property4Context extends PropertyContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null;;
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	value() {
	    return this.getTypedRuleContext(ValueContext,0);
	};

	EQ() {
	    return this.getToken(MQL_Parser.EQ, 0);
	};

	NEQ() {
	    return this.getToken(MQL_Parser.NEQ, 0);
	};

	LT() {
	    return this.getToken(MQL_Parser.LT, 0);
	};

	GT() {
	    return this.getToken(MQL_Parser.GT, 0);
	};

	LEQ() {
	    return this.getToken(MQL_Parser.LEQ, 0);
	};

	GEQ() {
	    return this.getToken(MQL_Parser.GEQ, 0);
	};


}

MQL_Parser.Property4Context = Property4Context;

class Property3Context extends PropertyContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	K_IS() {
	    return this.getToken(MQL_Parser.K_IS, 0);
	};

	exprTypename() {
	    return this.getTypedRuleContext(ExprTypenameContext,0);
	};

	K_NOT() {
	    return this.getToken(MQL_Parser.K_NOT, 0);
	};

	conditionalOrType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionalOrTypeContext);
	    } else {
	        return this.getTypedRuleContext(ConditionalOrTypeContext,i);
	    }
	};


}

MQL_Parser.Property3Context = Property3Context;

class ConditionalOrTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_conditionalOrType;
    }

	K_OR() {
	    return this.getToken(MQL_Parser.K_OR, 0);
	};

	exprTypename() {
	    return this.getTypedRuleContext(ExprTypenameContext,0);
	};


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_identifier;
    }

	NAME() {
	    return this.getToken(MQL_Parser.NAME, 0);
	};

	keyword() {
	    return this.getTypedRuleContext(KeywordContext,0);
	};


}



class BoolValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_boolValue;
    }

	K_TRUE() {
	    return this.getToken(MQL_Parser.K_TRUE, 0);
	};

	K_FALSE() {
	    return this.getToken(MQL_Parser.K_FALSE, 0);
	};


}



class NumericValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_numericValue;
    }

	UNSIGNED_INTEGER() {
	    return this.getToken(MQL_Parser.UNSIGNED_INTEGER, 0);
	};

	UNSIGNED_FLOAT() {
	    return this.getToken(MQL_Parser.UNSIGNED_FLOAT, 0);
	};

	UNSIGNED_SCIENTIFIC_NOTATION() {
	    return this.getToken(MQL_Parser.UNSIGNED_SCIENTIFIC_NOTATION, 0);
	};

	PLUS() {
	    return this.getToken(MQL_Parser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(MQL_Parser.MINUS, 0);
	};


}



class DatatypeValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_datatypeValue;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	L_PAR() {
	    return this.getToken(MQL_Parser.L_PAR, 0);
	};

	STRING() {
	    return this.getToken(MQL_Parser.STRING, 0);
	};

	R_PAR() {
	    return this.getToken(MQL_Parser.R_PAR, 0);
	};


}



class ValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_value;
    }

	numericValue() {
	    return this.getTypedRuleContext(NumericValueContext,0);
	};

	STRING() {
	    return this.getToken(MQL_Parser.STRING, 0);
	};

	boolValue() {
	    return this.getTypedRuleContext(BoolValueContext,0);
	};

	datatypeValue() {
	    return this.getTypedRuleContext(DatatypeValueContext,0);
	};


}



class ConditionalOrExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_conditionalOrExpr;
    }

	conditionalAndExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionalAndExprContext);
	    } else {
	        return this.getTypedRuleContext(ConditionalAndExprContext,i);
	    }
	};

	K_OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQL_Parser.K_OR);
	    } else {
	        return this.getToken(MQL_Parser.K_OR, i);
	    }
	};



}



class ConditionalAndExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_conditionalAndExpr;
    }

	comparisonExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ComparisonExprContext);
	    } else {
	        return this.getTypedRuleContext(ComparisonExprContext,i);
	    }
	};

	K_AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQL_Parser.K_AND);
	    } else {
	        return this.getToken(MQL_Parser.K_AND, i);
	    }
	};



}



class ComparisonExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_comparisonExpr;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ComparisonExprIsContext extends ComparisonExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	additiveExpr() {
	    return this.getTypedRuleContext(AdditiveExprContext,0);
	};

	K_IS() {
	    return this.getToken(MQL_Parser.K_IS, 0);
	};

	exprTypename() {
	    return this.getTypedRuleContext(ExprTypenameContext,0);
	};

	K_NOT() {
	    return this.getToken(MQL_Parser.K_NOT, 0);
	};


}

MQL_Parser.ComparisonExprIsContext = ComparisonExprIsContext;

class ComparisonExprOpContext extends ComparisonExprContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null;;
        super.copyFrom(ctx);
    }

	additiveExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AdditiveExprContext);
	    } else {
	        return this.getTypedRuleContext(AdditiveExprContext,i);
	    }
	};

	EQ() {
	    return this.getToken(MQL_Parser.EQ, 0);
	};

	NEQ() {
	    return this.getToken(MQL_Parser.NEQ, 0);
	};

	LT() {
	    return this.getToken(MQL_Parser.LT, 0);
	};

	GT() {
	    return this.getToken(MQL_Parser.GT, 0);
	};

	LEQ() {
	    return this.getToken(MQL_Parser.LEQ, 0);
	};

	GEQ() {
	    return this.getToken(MQL_Parser.GEQ, 0);
	};


}

MQL_Parser.ComparisonExprOpContext = ComparisonExprOpContext;

class AdditiveExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_additiveExpr;
        this.s94 = null;
        this.op = [];
        this.s95 = null;
        this._tset1392 = null;
    }

	multiplicativeExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MultiplicativeExprContext);
	    } else {
	        return this.getTypedRuleContext(MultiplicativeExprContext,i);
	    }
	};

	PLUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQL_Parser.PLUS);
	    } else {
	        return this.getToken(MQL_Parser.PLUS, i);
	    }
	};


	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQL_Parser.MINUS);
	    } else {
	        return this.getToken(MQL_Parser.MINUS, i);
	    }
	};



}



class MultiplicativeExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_multiplicativeExpr;
        this.s91 = null;
        this.op = [];
        this.s88 = null;
        this.s92 = null;
        this._tset1411 = null;
    }

	unaryExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnaryExprContext);
	    } else {
	        return this.getTypedRuleContext(UnaryExprContext,i);
	    }
	};

	STAR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQL_Parser.STAR);
	    } else {
	        return this.getToken(MQL_Parser.STAR, i);
	    }
	};


	PATH_SEQUENCE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQL_Parser.PATH_SEQUENCE);
	    } else {
	        return this.getToken(MQL_Parser.PATH_SEQUENCE, i);
	    }
	};


	PERCENT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQL_Parser.PERCENT);
	    } else {
	        return this.getToken(MQL_Parser.PERCENT, i);
	    }
	};



}



class UnaryExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_unaryExpr;
    }

	K_NOT() {
	    return this.getToken(MQL_Parser.K_NOT, 0);
	};

	unaryExpr() {
	    return this.getTypedRuleContext(UnaryExprContext,0);
	};

	atomicExpr() {
	    return this.getTypedRuleContext(AtomicExprContext,0);
	};

	PLUS() {
	    return this.getToken(MQL_Parser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(MQL_Parser.MINUS, 0);
	};


}



class AtomicExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_atomicExpr;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ExprFunctionContext extends AtomicExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	function_() {
	    return this.getTypedRuleContext(FunctionContext,0);
	};


}

MQL_Parser.ExprFunctionContext = ExprFunctionContext;

class ExprValueContext extends AtomicExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	value() {
	    return this.getTypedRuleContext(ValueContext,0);
	};


}

MQL_Parser.ExprValueContext = ExprValueContext;

class ExprFixedNodeInsideContext extends AtomicExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	fixedNodeInside() {
	    return this.getTypedRuleContext(FixedNodeInsideContext,0);
	};


}

MQL_Parser.ExprFixedNodeInsideContext = ExprFixedNodeInsideContext;

class ExprVarContext extends AtomicExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	VARIABLE() {
	    return this.getToken(MQL_Parser.VARIABLE, 0);
	};

	KEY() {
	    return this.getToken(MQL_Parser.KEY, 0);
	};


}

MQL_Parser.ExprVarContext = ExprVarContext;

class ExprParenthesisContext extends AtomicExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	L_PAR() {
	    return this.getToken(MQL_Parser.L_PAR, 0);
	};

	conditionalOrExpr() {
	    return this.getTypedRuleContext(ConditionalOrExprContext,0);
	};

	R_PAR() {
	    return this.getToken(MQL_Parser.R_PAR, 0);
	};


}

MQL_Parser.ExprParenthesisContext = ExprParenthesisContext;

class FunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_function;
    }

	regex() {
	    return this.getTypedRuleContext(RegexContext,0);
	};

	textSearch() {
	    return this.getTypedRuleContext(TextSearchContext,0);
	};

	cosineSimilarity() {
	    return this.getTypedRuleContext(CosineSimilarityContext,0);
	};

	cosineDistance() {
	    return this.getTypedRuleContext(CosineDistanceContext,0);
	};

	manhattanDistance() {
	    return this.getTypedRuleContext(ManhattanDistanceContext,0);
	};

	euclideanDistance() {
	    return this.getTypedRuleContext(EuclideanDistanceContext,0);
	};


}



class RegexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_regex;
    }

	K_REGEX() {
	    return this.getToken(MQL_Parser.K_REGEX, 0);
	};

	L_PAR() {
	    return this.getToken(MQL_Parser.L_PAR, 0);
	};

	conditionalOrExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionalOrExprContext);
	    } else {
	        return this.getTypedRuleContext(ConditionalOrExprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQL_Parser.COMMA);
	    } else {
	        return this.getToken(MQL_Parser.COMMA, i);
	    }
	};


	R_PAR() {
	    return this.getToken(MQL_Parser.R_PAR, 0);
	};


}



class TextSearchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_textSearch;
    }

	K_TEXT_SEARCH() {
	    return this.getToken(MQL_Parser.K_TEXT_SEARCH, 0);
	};

	L_PAR() {
	    return this.getToken(MQL_Parser.L_PAR, 0);
	};

	STRING = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQL_Parser.STRING);
	    } else {
	        return this.getToken(MQL_Parser.STRING, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQL_Parser.COMMA);
	    } else {
	        return this.getToken(MQL_Parser.COMMA, i);
	    }
	};


	textSearchIndexMode() {
	    return this.getTypedRuleContext(TextSearchIndexModeContext,0);
	};

	VARIABLE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MQL_Parser.VARIABLE);
	    } else {
	        return this.getToken(MQL_Parser.VARIABLE, i);
	    }
	};


	R_PAR() {
	    return this.getToken(MQL_Parser.R_PAR, 0);
	};


}



class CosineSimilarityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_cosineSimilarity;
    }

	K_COSINE_SIMILARITY() {
	    return this.getToken(MQL_Parser.K_COSINE_SIMILARITY, 0);
	};

	L_PAR() {
	    return this.getToken(MQL_Parser.L_PAR, 0);
	};

	conditionalOrExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionalOrExprContext);
	    } else {
	        return this.getTypedRuleContext(ConditionalOrExprContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(MQL_Parser.COMMA, 0);
	};

	R_PAR() {
	    return this.getToken(MQL_Parser.R_PAR, 0);
	};


}



class CosineDistanceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_cosineDistance;
    }

	K_COSINE_DISTANCE() {
	    return this.getToken(MQL_Parser.K_COSINE_DISTANCE, 0);
	};

	L_PAR() {
	    return this.getToken(MQL_Parser.L_PAR, 0);
	};

	conditionalOrExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionalOrExprContext);
	    } else {
	        return this.getTypedRuleContext(ConditionalOrExprContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(MQL_Parser.COMMA, 0);
	};

	R_PAR() {
	    return this.getToken(MQL_Parser.R_PAR, 0);
	};


}



class ManhattanDistanceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_manhattanDistance;
    }

	K_MANHATTAN_DISTANCE() {
	    return this.getToken(MQL_Parser.K_MANHATTAN_DISTANCE, 0);
	};

	L_PAR() {
	    return this.getToken(MQL_Parser.L_PAR, 0);
	};

	conditionalOrExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionalOrExprContext);
	    } else {
	        return this.getTypedRuleContext(ConditionalOrExprContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(MQL_Parser.COMMA, 0);
	};

	R_PAR() {
	    return this.getToken(MQL_Parser.R_PAR, 0);
	};


}



class EuclideanDistanceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_euclideanDistance;
    }

	K_EUCLIDEAN_DISTANCE() {
	    return this.getToken(MQL_Parser.K_EUCLIDEAN_DISTANCE, 0);
	};

	L_PAR() {
	    return this.getToken(MQL_Parser.L_PAR, 0);
	};

	conditionalOrExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionalOrExprContext);
	    } else {
	        return this.getTypedRuleContext(ConditionalOrExprContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(MQL_Parser.COMMA, 0);
	};

	R_PAR() {
	    return this.getToken(MQL_Parser.R_PAR, 0);
	};


}



class TextSearchIndexModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_textSearchIndexMode;
    }

	K_PREFIX() {
	    return this.getToken(MQL_Parser.K_PREFIX, 0);
	};

	K_MATCH() {
	    return this.getToken(MQL_Parser.K_MATCH, 0);
	};


}



class ExprTypenameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_exprTypename;
    }

	K_NULL() {
	    return this.getToken(MQL_Parser.K_NULL, 0);
	};

	K_STRING() {
	    return this.getToken(MQL_Parser.K_STRING, 0);
	};

	K_BOOL() {
	    return this.getToken(MQL_Parser.K_BOOL, 0);
	};

	K_INTEGER() {
	    return this.getToken(MQL_Parser.K_INTEGER, 0);
	};

	K_FLOAT() {
	    return this.getToken(MQL_Parser.K_FLOAT, 0);
	};


}



class KeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MQL_Parser.RULE_keyword;
    }

	K_ACYCLIC() {
	    return this.getToken(MQL_Parser.K_ACYCLIC, 0);
	};

	K_AND() {
	    return this.getToken(MQL_Parser.K_AND, 0);
	};

	K_ANY() {
	    return this.getToken(MQL_Parser.K_ANY, 0);
	};

	K_AS() {
	    return this.getToken(MQL_Parser.K_AS, 0);
	};

	K_AVG() {
	    return this.getToken(MQL_Parser.K_AVG, 0);
	};

	K_ALL() {
	    return this.getToken(MQL_Parser.K_ALL, 0);
	};

	K_ASC() {
	    return this.getToken(MQL_Parser.K_ASC, 0);
	};

	K_BY() {
	    return this.getToken(MQL_Parser.K_BY, 0);
	};

	K_BOOL() {
	    return this.getToken(MQL_Parser.K_BOOL, 0);
	};

	K_CALL() {
	    return this.getToken(MQL_Parser.K_CALL, 0);
	};

	K_COSINE_DISTANCE() {
	    return this.getToken(MQL_Parser.K_COSINE_DISTANCE, 0);
	};

	K_COSINE_SIMILARITY() {
	    return this.getToken(MQL_Parser.K_COSINE_SIMILARITY, 0);
	};

	K_COUNT() {
	    return this.getToken(MQL_Parser.K_COUNT, 0);
	};

	K_CREATE() {
	    return this.getToken(MQL_Parser.K_CREATE, 0);
	};

	K_DELETE() {
	    return this.getToken(MQL_Parser.K_DELETE, 0);
	};

	K_DESCRIBE() {
	    return this.getToken(MQL_Parser.K_DESCRIBE, 0);
	};

	K_DESC() {
	    return this.getToken(MQL_Parser.K_DESC, 0);
	};

	K_DIMENSIONS() {
	    return this.getToken(MQL_Parser.K_DIMENSIONS, 0);
	};

	K_DISTINCT() {
	    return this.getToken(MQL_Parser.K_DISTINCT, 0);
	};

	K_EDGE() {
	    return this.getToken(MQL_Parser.K_EDGE, 0);
	};

	K_EUCLIDEAN_DISTANCE() {
	    return this.getToken(MQL_Parser.K_EUCLIDEAN_DISTANCE, 0);
	};

	K_FROM() {
	    return this.getToken(MQL_Parser.K_FROM, 0);
	};

	K_INCOMING() {
	    return this.getToken(MQL_Parser.K_INCOMING, 0);
	};

	K_INDEX() {
	    return this.getToken(MQL_Parser.K_INDEX, 0);
	};

	K_INSERT() {
	    return this.getToken(MQL_Parser.K_INSERT, 0);
	};

	K_INTEGER() {
	    return this.getToken(MQL_Parser.K_INTEGER, 0);
	};

	K_INTO() {
	    return this.getToken(MQL_Parser.K_INTO, 0);
	};

	K_IS() {
	    return this.getToken(MQL_Parser.K_IS, 0);
	};

	K_FLOAT() {
	    return this.getToken(MQL_Parser.K_FLOAT, 0);
	};

	K_GROUP() {
	    return this.getToken(MQL_Parser.K_GROUP, 0);
	};

	K_GROUPS() {
	    return this.getToken(MQL_Parser.K_GROUPS, 0);
	};

	K_IDENTITY() {
	    return this.getToken(MQL_Parser.K_IDENTITY, 0);
	};

	K_LABELS() {
	    return this.getToken(MQL_Parser.K_LABELS, 0);
	};

	K_LABEL() {
	    return this.getToken(MQL_Parser.K_LABEL, 0);
	};

	K_LET() {
	    return this.getToken(MQL_Parser.K_LET, 0);
	};

	K_LIMIT() {
	    return this.getToken(MQL_Parser.K_LIMIT, 0);
	};

	K_MANHATTAN_DISTANCE() {
	    return this.getToken(MQL_Parser.K_MANHATTAN_DISTANCE, 0);
	};

	K_MATCH() {
	    return this.getToken(MQL_Parser.K_MATCH, 0);
	};

	K_MAX() {
	    return this.getToken(MQL_Parser.K_MAX, 0);
	};

	K_MIN() {
	    return this.getToken(MQL_Parser.K_MIN, 0);
	};

	K_OBJECTS() {
	    return this.getToken(MQL_Parser.K_OBJECTS, 0);
	};

	K_OFFSET() {
	    return this.getToken(MQL_Parser.K_OFFSET, 0);
	};

	K_OPTIONAL() {
	    return this.getToken(MQL_Parser.K_OPTIONAL, 0);
	};

	K_ORDER() {
	    return this.getToken(MQL_Parser.K_ORDER, 0);
	};

	K_OR() {
	    return this.getToken(MQL_Parser.K_OR, 0);
	};

	K_OUTGOING() {
	    return this.getToken(MQL_Parser.K_OUTGOING, 0);
	};

	K_PREFIX() {
	    return this.getToken(MQL_Parser.K_PREFIX, 0);
	};

	K_PROPERTIES() {
	    return this.getToken(MQL_Parser.K_PROPERTIES, 0);
	};

	K_PROPERTY() {
	    return this.getToken(MQL_Parser.K_PROPERTY, 0);
	};

	K_NOT() {
	    return this.getToken(MQL_Parser.K_NOT, 0);
	};

	K_NULL() {
	    return this.getToken(MQL_Parser.K_NULL, 0);
	};

	K_SHORTEST() {
	    return this.getToken(MQL_Parser.K_SHORTEST, 0);
	};

	K_SHOW() {
	    return this.getToken(MQL_Parser.K_SHOW, 0);
	};

	K_SIMPLE() {
	    return this.getToken(MQL_Parser.K_SIMPLE, 0);
	};

	K_TEXT_SEARCH() {
	    return this.getToken(MQL_Parser.K_TEXT_SEARCH, 0);
	};

	K_REGEX() {
	    return this.getToken(MQL_Parser.K_REGEX, 0);
	};

	K_RETURN() {
	    return this.getToken(MQL_Parser.K_RETURN, 0);
	};

	K_SUM() {
	    return this.getToken(MQL_Parser.K_SUM, 0);
	};

	K_STRING() {
	    return this.getToken(MQL_Parser.K_STRING, 0);
	};

	K_TRAILS() {
	    return this.getToken(MQL_Parser.K_TRAILS, 0);
	};

	K_VALUES() {
	    return this.getToken(MQL_Parser.K_VALUES, 0);
	};

	K_WALKS() {
	    return this.getToken(MQL_Parser.K_WALKS, 0);
	};

	K_WITH() {
	    return this.getToken(MQL_Parser.K_WITH, 0);
	};

	K_WHERE() {
	    return this.getToken(MQL_Parser.K_WHERE, 0);
	};

	K_YIELD() {
	    return this.getToken(MQL_Parser.K_YIELD, 0);
	};


}




MQL_Parser.RootContext = RootContext; 
MQL_Parser.MatchQueryContext = MatchQueryContext; 
MQL_Parser.PrimitiveStatementListContext = PrimitiveStatementListContext; 
MQL_Parser.PrimitiveStatementContext = PrimitiveStatementContext; 
MQL_Parser.InsertPatternsContext = InsertPatternsContext; 
MQL_Parser.InsertLinearPatternContext = InsertLinearPatternContext; 
MQL_Parser.InsertPlainNodeContext = InsertPlainNodeContext; 
MQL_Parser.InsertPlainNodeInsideContext = InsertPlainNodeInsideContext; 
MQL_Parser.InsertPlainEdgeContext = InsertPlainEdgeContext; 
MQL_Parser.CreateIndexQueryContext = CreateIndexQueryContext; 
MQL_Parser.CreateIndexOptionsContext = CreateIndexOptionsContext; 
MQL_Parser.CreateIndexOptionContext = CreateIndexOptionContext; 
MQL_Parser.ShowQueryContext = ShowQueryContext; 
MQL_Parser.DescribeQueryContext = DescribeQueryContext; 
MQL_Parser.DescribeFlagContext = DescribeFlagContext; 
MQL_Parser.MatchStatementContext = MatchStatementContext; 
MQL_Parser.LetStatementContext = LetStatementContext; 
MQL_Parser.LetDefinitionListContext = LetDefinitionListContext; 
MQL_Parser.LetDefinitionContext = LetDefinitionContext; 
MQL_Parser.WhereStatementContext = WhereStatementContext; 
MQL_Parser.GroupByStatementContext = GroupByStatementContext; 
MQL_Parser.OrderByStatementContext = OrderByStatementContext; 
MQL_Parser.ReturnStatementContext = ReturnStatementContext; 
MQL_Parser.CallStatementContext = CallStatementContext; 
MQL_Parser.YieldStatementContext = YieldStatementContext; 
MQL_Parser.YieldItemContext = YieldItemContext; 
MQL_Parser.CallArgumentsContext = CallArgumentsContext; 
MQL_Parser.LimitOffsetClausesContext = LimitOffsetClausesContext; 
MQL_Parser.LimitClauseContext = LimitClauseContext; 
MQL_Parser.OffsetClauseContext = OffsetClauseContext; 
MQL_Parser.ReturnItemContext = ReturnItemContext; 
MQL_Parser.AliasContext = AliasContext; 
MQL_Parser.AggregateFuncContext = AggregateFuncContext; 
MQL_Parser.OrderByItemContext = OrderByItemContext; 
MQL_Parser.GroupByItemContext = GroupByItemContext; 
MQL_Parser.GraphPatternContext = GraphPatternContext; 
MQL_Parser.OptionalPatternContext = OptionalPatternContext; 
MQL_Parser.BasicPatternContext = BasicPatternContext; 
MQL_Parser.LinearPatternContext = LinearPatternContext; 
MQL_Parser.PathContext = PathContext; 
MQL_Parser.PathAlternativesContext = PathAlternativesContext; 
MQL_Parser.PathSequenceContext = PathSequenceContext; 
MQL_Parser.PathAtomContext = PathAtomContext; 
MQL_Parser.PathSuffixContext = PathSuffixContext; 
MQL_Parser.PathTypeContext = PathTypeContext; 
MQL_Parser.NodeContext = NodeContext; 
MQL_Parser.FixedNodeContext = FixedNodeContext; 
MQL_Parser.FixedNodeInsideContext = FixedNodeInsideContext; 
MQL_Parser.EdgeContext = EdgeContext; 
MQL_Parser.EdgeInsideContext = EdgeInsideContext; 
MQL_Parser.VarNodeContext = VarNodeContext; 
MQL_Parser.PropertiesContext = PropertiesContext; 
MQL_Parser.PropertyContext = PropertyContext; 
MQL_Parser.ConditionalOrTypeContext = ConditionalOrTypeContext; 
MQL_Parser.IdentifierContext = IdentifierContext; 
MQL_Parser.BoolValueContext = BoolValueContext; 
MQL_Parser.NumericValueContext = NumericValueContext; 
MQL_Parser.DatatypeValueContext = DatatypeValueContext; 
MQL_Parser.ValueContext = ValueContext; 
MQL_Parser.ConditionalOrExprContext = ConditionalOrExprContext; 
MQL_Parser.ConditionalAndExprContext = ConditionalAndExprContext; 
MQL_Parser.ComparisonExprContext = ComparisonExprContext; 
MQL_Parser.AdditiveExprContext = AdditiveExprContext; 
MQL_Parser.MultiplicativeExprContext = MultiplicativeExprContext; 
MQL_Parser.UnaryExprContext = UnaryExprContext; 
MQL_Parser.AtomicExprContext = AtomicExprContext; 
MQL_Parser.FunctionContext = FunctionContext; 
MQL_Parser.RegexContext = RegexContext; 
MQL_Parser.TextSearchContext = TextSearchContext; 
MQL_Parser.CosineSimilarityContext = CosineSimilarityContext; 
MQL_Parser.CosineDistanceContext = CosineDistanceContext; 
MQL_Parser.ManhattanDistanceContext = ManhattanDistanceContext; 
MQL_Parser.EuclideanDistanceContext = EuclideanDistanceContext; 
MQL_Parser.TextSearchIndexModeContext = TextSearchIndexModeContext; 
MQL_Parser.ExprTypenameContext = ExprTypenameContext; 
MQL_Parser.KeywordContext = KeywordContext; 
