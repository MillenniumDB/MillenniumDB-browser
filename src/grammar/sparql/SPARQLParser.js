// Generated from src/grammar/sparql/SPARQLParser.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';
import SPARQLParserListener from './SPARQLParserListener.js';
const serializedATN = [4,1,152,1375,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,1,0,1,0,1,0,1,0,1,0,3,0,248,8,0,1,0,
1,0,1,0,1,1,1,1,5,1,255,8,1,10,1,12,1,258,9,1,1,2,1,2,1,2,1,3,1,3,1,3,1,
3,1,4,1,4,5,4,269,8,4,10,4,12,4,272,9,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,
1,6,1,6,3,6,284,8,6,1,6,4,6,287,8,6,11,6,12,6,288,1,6,3,6,292,8,6,1,7,1,
7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,303,8,8,1,9,1,9,1,9,5,9,308,8,9,10,9,12,
9,311,9,9,1,9,1,9,1,9,1,9,5,9,317,8,9,10,9,12,9,320,9,9,1,9,1,9,1,9,3,9,
325,8,9,1,9,1,9,3,9,329,8,9,1,10,1,10,4,10,333,8,10,11,10,12,10,334,1,10,
3,10,338,8,10,1,10,5,10,341,8,10,10,10,12,10,344,9,10,1,10,3,10,347,8,10,
1,10,1,10,1,11,1,11,5,11,353,8,11,10,11,12,11,356,9,11,1,11,1,11,1,11,1,
12,1,12,3,12,363,8,12,1,12,1,12,1,13,3,13,368,8,13,1,13,1,13,1,14,3,14,373,
8,14,1,14,3,14,376,8,14,1,14,3,14,379,8,14,1,14,3,14,382,8,14,1,15,1,15,
1,15,4,15,387,8,15,11,15,12,15,388,1,16,1,16,1,16,1,16,1,16,1,16,3,16,397,
8,16,1,16,1,16,1,16,3,16,402,8,16,1,17,1,17,4,17,406,8,17,11,17,12,17,407,
1,18,1,18,1,19,1,19,1,19,4,19,415,8,19,11,19,12,19,416,1,20,1,20,1,20,1,
20,1,20,1,20,1,20,3,20,426,8,20,1,21,1,21,3,21,430,8,21,1,21,1,21,3,21,434,
8,21,3,21,436,8,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,3,24,446,8,24,
1,25,1,25,1,25,3,25,451,8,25,5,25,453,8,25,10,25,12,25,456,9,25,1,26,1,26,
1,26,3,26,461,8,26,1,26,1,26,1,27,3,27,466,8,27,1,27,5,27,469,8,27,10,27,
12,27,472,9,27,1,28,1,28,3,28,476,8,28,1,28,3,28,479,8,28,1,29,1,29,1,29,
3,29,484,8,29,5,29,486,8,29,10,29,12,29,489,9,29,1,30,1,30,1,30,1,30,1,30,
1,30,1,30,1,30,3,30,499,8,30,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,33,1,33,
3,33,510,8,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,
1,35,1,36,1,36,3,36,527,8,36,1,37,1,37,1,37,5,37,532,8,37,10,37,12,37,535,
9,37,1,37,1,37,1,38,1,38,5,38,541,8,38,10,38,12,38,544,9,38,1,38,1,38,1,
38,5,38,549,8,38,10,38,12,38,552,9,38,1,38,1,38,1,39,1,39,5,39,558,8,39,
10,39,12,39,561,9,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,3,40,570,8,40,1,
41,1,41,1,41,1,42,1,42,1,42,5,42,578,8,42,10,42,12,42,581,9,42,1,43,1,43,
1,43,1,44,1,44,1,44,1,44,1,44,1,44,3,44,592,8,44,1,45,1,45,1,45,1,46,1,46,
3,46,599,8,46,1,46,1,46,3,46,603,8,46,1,46,1,46,1,47,1,47,1,47,5,47,610,
8,47,10,47,12,47,613,9,47,1,48,1,48,3,48,617,8,48,1,48,1,48,1,49,1,49,1,
49,3,49,624,8,49,5,49,626,8,49,10,49,12,49,629,9,49,1,50,1,50,1,50,1,50,
1,50,1,50,3,50,637,8,50,1,51,3,51,640,8,51,1,52,1,52,1,52,1,52,1,52,1,52,
3,52,648,8,52,5,52,650,8,52,10,52,12,52,653,9,52,1,53,1,53,3,53,657,8,53,
1,54,1,54,1,54,5,54,662,8,54,10,54,12,54,665,9,54,1,55,1,55,1,56,1,56,1,
56,1,56,1,56,1,56,3,56,675,8,56,1,57,3,57,678,8,57,1,58,1,58,3,58,682,8,
58,1,58,1,58,1,58,3,58,687,8,58,5,58,689,8,58,10,58,12,58,692,9,58,1,59,
1,59,3,59,696,8,59,1,59,1,59,1,60,1,60,1,60,3,60,703,8,60,1,60,3,60,706,
8,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,714,8,60,1,61,1,61,1,62,1,62,1,62,
5,62,721,8,62,10,62,12,62,724,9,62,1,63,1,63,1,64,1,64,1,65,1,65,1,65,5,
65,733,8,65,10,65,12,65,736,9,65,1,66,1,66,1,66,5,66,741,8,66,10,66,12,66,
744,9,66,1,67,1,67,3,67,748,8,67,1,68,3,68,751,8,68,1,68,1,68,1,69,1,69,
1,69,1,69,1,69,1,69,1,69,3,69,762,8,69,1,70,1,70,1,70,1,70,3,70,768,8,70,
1,71,1,71,1,72,1,72,1,72,1,72,1,73,1,73,1,73,1,74,1,74,1,74,1,75,1,75,1,
75,1,75,1,75,1,75,1,75,1,75,3,75,790,8,75,1,76,1,76,1,76,1,76,1,76,5,76,
797,8,76,10,76,12,76,800,9,76,3,76,802,8,76,1,76,3,76,805,8,76,1,77,3,77,
808,8,77,1,77,1,77,3,77,812,8,77,1,78,1,78,1,79,1,79,3,79,818,8,79,1,80,
1,80,1,80,1,80,1,81,1,81,3,81,826,8,81,1,82,1,82,1,82,1,82,1,83,1,83,4,83,
834,8,83,11,83,12,83,835,1,83,1,83,1,84,1,84,4,84,842,8,84,11,84,12,84,843,
1,84,1,84,1,85,1,85,3,85,850,8,85,1,86,1,86,3,86,854,8,86,1,87,1,87,3,87,
858,8,87,1,88,1,88,3,88,862,8,88,1,89,1,89,1,90,1,90,1,90,1,90,1,90,1,90,
3,90,872,8,90,1,91,1,91,1,91,1,92,1,92,1,93,1,93,1,93,5,93,882,8,93,10,93,
12,93,885,9,93,1,94,1,94,1,94,5,94,890,8,94,10,94,12,94,893,9,94,1,95,1,
95,1,95,3,95,898,8,95,1,95,1,95,3,95,902,8,95,1,95,1,95,1,95,3,95,907,8,
95,1,95,1,95,3,95,911,8,95,1,96,1,96,5,96,915,8,96,10,96,12,96,918,9,96,
1,97,1,97,1,97,5,97,923,8,97,10,97,12,97,926,9,97,1,98,1,98,1,98,1,98,3,
98,932,8,98,1,99,1,99,1,99,5,99,937,8,99,10,99,12,99,940,9,99,1,100,3,100,
943,8,100,1,100,1,100,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,101,1,
101,1,101,3,101,957,8,101,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,3,102,1000,8,102,1,
102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,
102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,
102,1,102,1,102,3,102,1029,8,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,3,102,1166,8,102,1,102,1,
102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,
102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,
102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,
102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,
102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,3,102,1227,8,102,
1,103,1,103,1,103,1,103,1,103,1,103,1,103,3,103,1236,8,103,1,103,1,103,1,
104,1,104,1,104,1,104,1,104,1,104,1,104,3,104,1247,8,104,1,104,1,104,1,105,
1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,3,105,1260,8,105,1,105,1,
105,1,106,1,106,1,106,1,107,1,107,1,107,1,107,1,108,1,108,1,108,3,108,1274,
8,108,1,108,1,108,3,108,1278,8,108,1,108,1,108,1,108,1,108,3,108,1284,8,
108,1,108,1,108,1,108,1,108,1,108,1,108,3,108,1292,8,108,1,108,1,108,1,108,
1,108,1,108,1,108,3,108,1300,8,108,1,108,1,108,1,108,1,108,1,108,1,108,3,
108,1308,8,108,1,108,1,108,1,108,1,108,1,108,1,108,3,108,1316,8,108,1,108,
1,108,1,108,1,108,1,108,1,108,3,108,1324,8,108,1,108,1,108,1,108,1,108,1,
108,3,108,1331,8,108,1,108,1,108,3,108,1335,8,108,1,109,1,109,3,109,1339,
8,109,1,110,1,110,1,110,1,110,3,110,1345,8,110,1,111,1,111,1,111,3,111,1350,
8,111,1,112,1,112,1,113,1,113,1,114,1,114,1,115,1,115,1,116,1,116,1,117,
1,117,3,117,1364,8,117,1,118,1,118,1,119,1,119,3,119,1370,8,119,1,120,1,
120,1,120,1,120,0,0,121,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,
36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,
84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,
124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,
160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,
196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,
232,234,236,238,240,0,15,1,0,5,6,1,0,15,16,2,0,40,40,100,100,1,0,102,104,
1,0,109,110,2,0,127,129,148,150,2,0,143,143,147,147,1,0,141,142,2,0,141,
142,146,146,1,0,112,114,1,0,115,117,1,0,118,120,1,0,37,38,1,0,121,124,1,
0,106,107,1473,0,242,1,0,0,0,2,256,1,0,0,0,4,259,1,0,0,0,6,262,1,0,0,0,8,
266,1,0,0,0,10,276,1,0,0,0,12,281,1,0,0,0,14,293,1,0,0,0,16,302,1,0,0,0,
18,304,1,0,0,0,20,330,1,0,0,0,22,350,1,0,0,0,24,360,1,0,0,0,26,367,1,0,0,
0,28,372,1,0,0,0,30,383,1,0,0,0,32,401,1,0,0,0,34,403,1,0,0,0,36,409,1,0,
0,0,38,411,1,0,0,0,40,425,1,0,0,0,42,435,1,0,0,0,44,437,1,0,0,0,46,440,1,
0,0,0,48,445,1,0,0,0,50,447,1,0,0,0,52,457,1,0,0,0,54,465,1,0,0,0,56,473,
1,0,0,0,58,480,1,0,0,0,60,498,1,0,0,0,62,500,1,0,0,0,64,503,1,0,0,0,66,507,
1,0,0,0,68,514,1,0,0,0,70,521,1,0,0,0,72,526,1,0,0,0,74,528,1,0,0,0,76,538,
1,0,0,0,78,555,1,0,0,0,80,569,1,0,0,0,82,571,1,0,0,0,84,574,1,0,0,0,86,582,
1,0,0,0,88,591,1,0,0,0,90,593,1,0,0,0,92,596,1,0,0,0,94,606,1,0,0,0,96,614,
1,0,0,0,98,620,1,0,0,0,100,636,1,0,0,0,102,639,1,0,0,0,104,641,1,0,0,0,106,
656,1,0,0,0,108,658,1,0,0,0,110,666,1,0,0,0,112,674,1,0,0,0,114,677,1,0,
0,0,116,681,1,0,0,0,118,695,1,0,0,0,120,713,1,0,0,0,122,715,1,0,0,0,124,
717,1,0,0,0,126,725,1,0,0,0,128,727,1,0,0,0,130,729,1,0,0,0,132,737,1,0,
0,0,134,745,1,0,0,0,136,750,1,0,0,0,138,761,1,0,0,0,140,767,1,0,0,0,142,
769,1,0,0,0,144,771,1,0,0,0,146,775,1,0,0,0,148,778,1,0,0,0,150,789,1,0,
0,0,152,804,1,0,0,0,154,807,1,0,0,0,156,813,1,0,0,0,158,817,1,0,0,0,160,
819,1,0,0,0,162,825,1,0,0,0,164,827,1,0,0,0,166,831,1,0,0,0,168,839,1,0,
0,0,170,849,1,0,0,0,172,853,1,0,0,0,174,857,1,0,0,0,176,861,1,0,0,0,178,
863,1,0,0,0,180,871,1,0,0,0,182,873,1,0,0,0,184,876,1,0,0,0,186,878,1,0,
0,0,188,886,1,0,0,0,190,910,1,0,0,0,192,912,1,0,0,0,194,919,1,0,0,0,196,
931,1,0,0,0,198,933,1,0,0,0,200,942,1,0,0,0,202,956,1,0,0,0,204,1226,1,0,
0,0,206,1228,1,0,0,0,208,1239,1,0,0,0,210,1250,1,0,0,0,212,1263,1,0,0,0,
214,1266,1,0,0,0,216,1334,1,0,0,0,218,1336,1,0,0,0,220,1340,1,0,0,0,222,
1349,1,0,0,0,224,1351,1,0,0,0,226,1353,1,0,0,0,228,1355,1,0,0,0,230,1357,
1,0,0,0,232,1359,1,0,0,0,234,1363,1,0,0,0,236,1365,1,0,0,0,238,1369,1,0,
0,0,240,1371,1,0,0,0,242,247,3,2,1,0,243,248,3,8,4,0,244,248,3,18,9,0,245,
248,3,20,10,0,246,248,3,22,11,0,247,243,1,0,0,0,247,244,1,0,0,0,247,245,
1,0,0,0,247,246,1,0,0,0,248,249,1,0,0,0,249,250,3,48,24,0,250,251,5,0,0,
1,251,1,1,0,0,0,252,255,3,4,2,0,253,255,3,6,3,0,254,252,1,0,0,0,254,253,
1,0,0,0,255,258,1,0,0,0,256,254,1,0,0,0,256,257,1,0,0,0,257,3,1,0,0,0,258,
256,1,0,0,0,259,260,5,2,0,0,260,261,5,105,0,0,261,5,1,0,0,0,262,263,5,3,
0,0,263,264,5,106,0,0,264,265,5,105,0,0,265,7,1,0,0,0,266,270,3,12,6,0,267,
269,3,24,12,0,268,267,1,0,0,0,269,272,1,0,0,0,270,268,1,0,0,0,270,271,1,
0,0,0,271,273,1,0,0,0,272,270,1,0,0,0,273,274,3,26,13,0,274,275,3,28,14,
0,275,9,1,0,0,0,276,277,3,12,6,0,277,278,3,26,13,0,278,279,3,28,14,0,279,
280,3,48,24,0,280,11,1,0,0,0,281,283,5,4,0,0,282,284,3,14,7,0,283,282,1,
0,0,0,283,284,1,0,0,0,284,291,1,0,0,0,285,287,3,16,8,0,286,285,1,0,0,0,287,
288,1,0,0,0,288,286,1,0,0,0,288,289,1,0,0,0,289,292,1,0,0,0,290,292,5,143,
0,0,291,286,1,0,0,0,291,290,1,0,0,0,292,13,1,0,0,0,293,294,7,0,0,0,294,15,
1,0,0,0,295,303,3,178,89,0,296,297,5,133,0,0,297,298,3,184,92,0,298,299,
5,41,0,0,299,300,3,178,89,0,300,301,5,134,0,0,301,303,1,0,0,0,302,295,1,
0,0,0,302,296,1,0,0,0,303,17,1,0,0,0,304,328,5,7,0,0,305,309,3,96,48,0,306,
308,3,24,12,0,307,306,1,0,0,0,308,311,1,0,0,0,309,307,1,0,0,0,309,310,1,
0,0,0,310,312,1,0,0,0,311,309,1,0,0,0,312,313,3,26,13,0,313,314,3,28,14,
0,314,329,1,0,0,0,315,317,3,24,12,0,316,315,1,0,0,0,317,320,1,0,0,0,318,
316,1,0,0,0,318,319,1,0,0,0,319,321,1,0,0,0,320,318,1,0,0,0,321,322,5,12,
0,0,322,324,5,135,0,0,323,325,3,50,25,0,324,323,1,0,0,0,324,325,1,0,0,0,
325,326,1,0,0,0,326,327,5,136,0,0,327,329,3,28,14,0,328,305,1,0,0,0,328,
318,1,0,0,0,329,19,1,0,0,0,330,337,5,8,0,0,331,333,3,176,88,0,332,331,1,
0,0,0,333,334,1,0,0,0,334,332,1,0,0,0,334,335,1,0,0,0,335,338,1,0,0,0,336,
338,5,143,0,0,337,332,1,0,0,0,337,336,1,0,0,0,338,342,1,0,0,0,339,341,3,
24,12,0,340,339,1,0,0,0,341,344,1,0,0,0,342,340,1,0,0,0,342,343,1,0,0,0,
343,346,1,0,0,0,344,342,1,0,0,0,345,347,3,26,13,0,346,345,1,0,0,0,346,347,
1,0,0,0,347,348,1,0,0,0,348,349,3,28,14,0,349,21,1,0,0,0,350,354,5,9,0,0,
351,353,3,24,12,0,352,351,1,0,0,0,353,356,1,0,0,0,354,352,1,0,0,0,354,355,
1,0,0,0,355,357,1,0,0,0,356,354,1,0,0,0,357,358,3,26,13,0,358,359,3,28,14,
0,359,23,1,0,0,0,360,362,5,10,0,0,361,363,5,11,0,0,362,361,1,0,0,0,362,363,
1,0,0,0,363,364,1,0,0,0,364,365,3,234,117,0,365,25,1,0,0,0,366,368,5,12,
0,0,367,366,1,0,0,0,367,368,1,0,0,0,368,369,1,0,0,0,369,370,3,52,26,0,370,
27,1,0,0,0,371,373,3,30,15,0,372,371,1,0,0,0,372,373,1,0,0,0,373,375,1,0,
0,0,374,376,3,34,17,0,375,374,1,0,0,0,375,376,1,0,0,0,376,378,1,0,0,0,377,
379,3,38,19,0,378,377,1,0,0,0,378,379,1,0,0,0,379,381,1,0,0,0,380,382,3,
42,21,0,381,380,1,0,0,0,381,382,1,0,0,0,382,29,1,0,0,0,383,384,5,42,0,0,
384,386,5,14,0,0,385,387,3,32,16,0,386,385,1,0,0,0,387,388,1,0,0,0,388,386,
1,0,0,0,388,389,1,0,0,0,389,31,1,0,0,0,390,402,3,204,102,0,391,402,3,90,
45,0,392,393,5,133,0,0,393,396,3,184,92,0,394,395,5,41,0,0,395,397,3,178,
89,0,396,394,1,0,0,0,396,397,1,0,0,0,397,398,1,0,0,0,398,399,5,134,0,0,399,
402,1,0,0,0,400,402,3,178,89,0,401,390,1,0,0,0,401,391,1,0,0,0,401,392,1,
0,0,0,401,400,1,0,0,0,402,33,1,0,0,0,403,405,5,43,0,0,404,406,3,36,18,0,
405,404,1,0,0,0,406,407,1,0,0,0,407,405,1,0,0,0,407,408,1,0,0,0,408,35,1,
0,0,0,409,410,3,88,44,0,410,37,1,0,0,0,411,412,5,13,0,0,412,414,5,14,0,0,
413,415,3,40,20,0,414,413,1,0,0,0,415,416,1,0,0,0,416,414,1,0,0,0,416,417,
1,0,0,0,417,39,1,0,0,0,418,419,7,1,0,0,419,420,5,133,0,0,420,421,3,184,92,
0,421,422,5,134,0,0,422,426,1,0,0,0,423,426,3,88,44,0,424,426,3,178,89,0,
425,418,1,0,0,0,425,423,1,0,0,0,425,424,1,0,0,0,426,41,1,0,0,0,427,429,3,
44,22,0,428,430,3,46,23,0,429,428,1,0,0,0,429,430,1,0,0,0,430,436,1,0,0,
0,431,433,3,46,23,0,432,434,3,44,22,0,433,432,1,0,0,0,433,434,1,0,0,0,434,
436,1,0,0,0,435,427,1,0,0,0,435,431,1,0,0,0,436,43,1,0,0,0,437,438,5,17,
0,0,438,439,5,112,0,0,439,45,1,0,0,0,440,441,5,18,0,0,441,442,5,112,0,0,
442,47,1,0,0,0,443,444,5,19,0,0,444,446,3,72,36,0,445,443,1,0,0,0,445,446,
1,0,0,0,446,49,1,0,0,0,447,454,3,100,50,0,448,450,5,140,0,0,449,451,3,100,
50,0,450,449,1,0,0,0,450,451,1,0,0,0,451,453,1,0,0,0,452,448,1,0,0,0,453,
456,1,0,0,0,454,452,1,0,0,0,454,455,1,0,0,0,455,51,1,0,0,0,456,454,1,0,0,
0,457,460,5,135,0,0,458,461,3,10,5,0,459,461,3,54,27,0,460,458,1,0,0,0,460,
459,1,0,0,0,461,462,1,0,0,0,462,463,5,136,0,0,463,53,1,0,0,0,464,466,3,58,
29,0,465,464,1,0,0,0,465,466,1,0,0,0,466,470,1,0,0,0,467,469,3,56,28,0,468,
467,1,0,0,0,469,472,1,0,0,0,470,468,1,0,0,0,470,471,1,0,0,0,471,55,1,0,0,
0,472,470,1,0,0,0,473,475,3,60,30,0,474,476,5,140,0,0,475,474,1,0,0,0,475,
476,1,0,0,0,476,478,1,0,0,0,477,479,3,58,29,0,478,477,1,0,0,0,478,479,1,
0,0,0,479,57,1,0,0,0,480,487,3,112,56,0,481,483,5,140,0,0,482,484,3,112,
56,0,483,482,1,0,0,0,483,484,1,0,0,0,484,486,1,0,0,0,485,481,1,0,0,0,486,
489,1,0,0,0,487,485,1,0,0,0,487,488,1,0,0,0,488,59,1,0,0,0,489,487,1,0,0,
0,490,499,3,84,42,0,491,499,3,62,31,0,492,499,3,82,41,0,493,499,3,64,32,
0,494,499,3,66,33,0,495,499,3,86,43,0,496,499,3,68,34,0,497,499,3,70,35,
0,498,490,1,0,0,0,498,491,1,0,0,0,498,492,1,0,0,0,498,493,1,0,0,0,498,494,
1,0,0,0,498,495,1,0,0,0,498,496,1,0,0,0,498,497,1,0,0,0,499,61,1,0,0,0,500,
501,5,20,0,0,501,502,3,52,26,0,502,63,1,0,0,0,503,504,5,21,0,0,504,505,3,
176,88,0,505,506,3,52,26,0,506,65,1,0,0,0,507,509,5,46,0,0,508,510,5,39,
0,0,509,508,1,0,0,0,509,510,1,0,0,0,510,511,1,0,0,0,511,512,3,176,88,0,512,
513,3,52,26,0,513,67,1,0,0,0,514,515,5,47,0,0,515,516,5,133,0,0,516,517,
3,184,92,0,517,518,5,41,0,0,518,519,3,178,89,0,519,520,5,134,0,0,520,69,
1,0,0,0,521,522,5,19,0,0,522,523,3,72,36,0,523,71,1,0,0,0,524,527,3,74,37,
0,525,527,3,76,38,0,526,524,1,0,0,0,526,525,1,0,0,0,527,73,1,0,0,0,528,529,
3,178,89,0,529,533,5,135,0,0,530,532,3,80,40,0,531,530,1,0,0,0,532,535,1,
0,0,0,533,531,1,0,0,0,533,534,1,0,0,0,534,536,1,0,0,0,535,533,1,0,0,0,536,
537,5,136,0,0,537,75,1,0,0,0,538,542,5,133,0,0,539,541,3,178,89,0,540,539,
1,0,0,0,541,544,1,0,0,0,542,540,1,0,0,0,542,543,1,0,0,0,543,545,1,0,0,0,
544,542,1,0,0,0,545,546,5,134,0,0,546,550,5,135,0,0,547,549,3,78,39,0,548,
547,1,0,0,0,549,552,1,0,0,0,550,548,1,0,0,0,550,551,1,0,0,0,551,553,1,0,
0,0,552,550,1,0,0,0,553,554,5,136,0,0,554,77,1,0,0,0,555,559,5,133,0,0,556,
558,3,80,40,0,557,556,1,0,0,0,558,561,1,0,0,0,559,557,1,0,0,0,559,560,1,
0,0,0,560,562,1,0,0,0,561,559,1,0,0,0,562,563,5,134,0,0,563,79,1,0,0,0,564,
570,3,234,117,0,565,570,3,220,110,0,566,570,3,222,111,0,567,570,3,230,115,
0,568,570,5,44,0,0,569,564,1,0,0,0,569,565,1,0,0,0,569,566,1,0,0,0,569,567,
1,0,0,0,569,568,1,0,0,0,570,81,1,0,0,0,571,572,5,48,0,0,572,573,3,52,26,
0,573,83,1,0,0,0,574,579,3,52,26,0,575,576,5,22,0,0,576,578,3,52,26,0,577,
575,1,0,0,0,578,581,1,0,0,0,579,577,1,0,0,0,579,580,1,0,0,0,580,85,1,0,0,
0,581,579,1,0,0,0,582,583,5,23,0,0,583,584,3,88,44,0,584,87,1,0,0,0,585,
586,5,133,0,0,586,587,3,184,92,0,587,588,5,134,0,0,588,592,1,0,0,0,589,592,
3,204,102,0,590,592,3,90,45,0,591,585,1,0,0,0,591,589,1,0,0,0,591,590,1,
0,0,0,592,89,1,0,0,0,593,594,3,234,117,0,594,595,3,92,46,0,595,91,1,0,0,
0,596,602,5,133,0,0,597,599,5,5,0,0,598,597,1,0,0,0,598,599,1,0,0,0,599,
600,1,0,0,0,600,603,3,94,47,0,601,603,1,0,0,0,602,598,1,0,0,0,602,601,1,
0,0,0,603,604,1,0,0,0,604,605,5,134,0,0,605,93,1,0,0,0,606,611,3,184,92,
0,607,608,5,145,0,0,608,610,3,184,92,0,609,607,1,0,0,0,610,613,1,0,0,0,611,
609,1,0,0,0,611,612,1,0,0,0,612,95,1,0,0,0,613,611,1,0,0,0,614,616,5,135,
0,0,615,617,3,98,49,0,616,615,1,0,0,0,616,617,1,0,0,0,617,618,1,0,0,0,618,
619,5,136,0,0,619,97,1,0,0,0,620,627,3,100,50,0,621,623,5,140,0,0,622,624,
3,98,49,0,623,622,1,0,0,0,623,624,1,0,0,0,624,626,1,0,0,0,625,621,1,0,0,
0,626,629,1,0,0,0,627,625,1,0,0,0,627,628,1,0,0,0,628,99,1,0,0,0,629,627,
1,0,0,0,630,631,3,174,87,0,631,632,3,104,52,0,632,637,1,0,0,0,633,634,3,
158,79,0,634,635,3,102,51,0,635,637,1,0,0,0,636,630,1,0,0,0,636,633,1,0,
0,0,637,101,1,0,0,0,638,640,3,104,52,0,639,638,1,0,0,0,639,640,1,0,0,0,640,
103,1,0,0,0,641,642,3,106,53,0,642,651,3,108,54,0,643,647,5,139,0,0,644,
645,3,106,53,0,645,646,3,108,54,0,646,648,1,0,0,0,647,644,1,0,0,0,647,648,
1,0,0,0,648,650,1,0,0,0,649,643,1,0,0,0,650,653,1,0,0,0,651,649,1,0,0,0,
651,652,1,0,0,0,652,105,1,0,0,0,653,651,1,0,0,0,654,657,3,176,88,0,655,657,
5,24,0,0,656,654,1,0,0,0,656,655,1,0,0,0,657,107,1,0,0,0,658,663,3,110,55,
0,659,660,5,145,0,0,660,662,3,110,55,0,661,659,1,0,0,0,662,665,1,0,0,0,663,
661,1,0,0,0,663,664,1,0,0,0,664,109,1,0,0,0,665,663,1,0,0,0,666,667,3,170,
85,0,667,111,1,0,0,0,668,669,3,174,87,0,669,670,3,116,58,0,670,675,1,0,0,
0,671,672,3,162,81,0,672,673,3,114,57,0,673,675,1,0,0,0,674,668,1,0,0,0,
674,671,1,0,0,0,675,113,1,0,0,0,676,678,3,116,58,0,677,676,1,0,0,0,677,678,
1,0,0,0,678,115,1,0,0,0,679,682,3,120,60,0,680,682,3,122,61,0,681,679,1,
0,0,0,681,680,1,0,0,0,682,683,1,0,0,0,683,690,3,124,62,0,684,686,5,139,0,
0,685,687,3,118,59,0,686,685,1,0,0,0,686,687,1,0,0,0,687,689,1,0,0,0,688,
684,1,0,0,0,689,692,1,0,0,0,690,688,1,0,0,0,690,691,1,0,0,0,691,117,1,0,
0,0,692,690,1,0,0,0,693,696,3,120,60,0,694,696,3,122,61,0,695,693,1,0,0,
0,695,694,1,0,0,0,696,697,1,0,0,0,697,698,3,108,54,0,698,119,1,0,0,0,699,
714,3,128,64,0,700,702,7,2,0,0,701,703,5,101,0,0,702,701,1,0,0,0,702,703,
1,0,0,0,703,705,1,0,0,0,704,706,7,3,0,0,705,704,1,0,0,0,705,706,1,0,0,0,
706,707,1,0,0,0,707,708,5,133,0,0,708,709,3,128,64,0,709,710,5,41,0,0,710,
711,3,178,89,0,711,712,5,134,0,0,712,714,1,0,0,0,713,699,1,0,0,0,713,700,
1,0,0,0,714,121,1,0,0,0,715,716,3,178,89,0,716,123,1,0,0,0,717,722,3,126,
63,0,718,719,5,145,0,0,719,721,3,126,63,0,720,718,1,0,0,0,721,724,1,0,0,
0,722,720,1,0,0,0,722,723,1,0,0,0,723,125,1,0,0,0,724,722,1,0,0,0,725,726,
3,172,86,0,726,127,1,0,0,0,727,728,3,130,65,0,728,129,1,0,0,0,729,734,3,
132,66,0,730,731,5,151,0,0,731,733,3,132,66,0,732,730,1,0,0,0,733,736,1,
0,0,0,734,732,1,0,0,0,734,735,1,0,0,0,735,131,1,0,0,0,736,734,1,0,0,0,737,
742,3,136,68,0,738,739,5,147,0,0,739,741,3,136,68,0,740,738,1,0,0,0,741,
744,1,0,0,0,742,740,1,0,0,0,742,743,1,0,0,0,743,133,1,0,0,0,744,742,1,0,
0,0,745,747,3,150,75,0,746,748,3,138,69,0,747,746,1,0,0,0,747,748,1,0,0,
0,748,135,1,0,0,0,749,751,5,132,0,0,750,749,1,0,0,0,750,751,1,0,0,0,751,
752,1,0,0,0,752,753,3,134,67,0,753,137,1,0,0,0,754,762,5,144,0,0,755,762,
5,143,0,0,756,762,5,141,0,0,757,758,5,135,0,0,758,759,3,140,70,0,759,760,
5,136,0,0,760,762,1,0,0,0,761,754,1,0,0,0,761,755,1,0,0,0,761,756,1,0,0,
0,761,757,1,0,0,0,762,139,1,0,0,0,763,768,3,142,71,0,764,768,3,144,72,0,
765,768,3,146,73,0,766,768,3,148,74,0,767,763,1,0,0,0,767,764,1,0,0,0,767,
765,1,0,0,0,767,766,1,0,0,0,768,141,1,0,0,0,769,770,5,112,0,0,770,143,1,
0,0,0,771,772,5,112,0,0,772,773,5,145,0,0,773,774,5,112,0,0,774,145,1,0,
0,0,775,776,5,112,0,0,776,777,5,145,0,0,777,147,1,0,0,0,778,779,5,145,0,
0,779,780,5,112,0,0,780,149,1,0,0,0,781,790,3,234,117,0,782,790,5,24,0,0,
783,784,5,146,0,0,784,790,3,152,76,0,785,786,5,133,0,0,786,787,3,128,64,
0,787,788,5,134,0,0,788,790,1,0,0,0,789,781,1,0,0,0,789,782,1,0,0,0,789,
783,1,0,0,0,789,785,1,0,0,0,790,151,1,0,0,0,791,805,3,154,77,0,792,801,5,
133,0,0,793,798,3,154,77,0,794,795,5,151,0,0,795,797,3,154,77,0,796,794,
1,0,0,0,797,800,1,0,0,0,798,796,1,0,0,0,798,799,1,0,0,0,799,802,1,0,0,0,
800,798,1,0,0,0,801,793,1,0,0,0,801,802,1,0,0,0,802,803,1,0,0,0,803,805,
5,134,0,0,804,791,1,0,0,0,804,792,1,0,0,0,805,153,1,0,0,0,806,808,5,132,
0,0,807,806,1,0,0,0,807,808,1,0,0,0,808,811,1,0,0,0,809,812,3,234,117,0,
810,812,5,24,0,0,811,809,1,0,0,0,811,810,1,0,0,0,812,155,1,0,0,0,813,814,
5,112,0,0,814,157,1,0,0,0,815,818,3,166,83,0,816,818,3,160,80,0,817,815,
1,0,0,0,817,816,1,0,0,0,818,159,1,0,0,0,819,820,5,137,0,0,820,821,3,104,
52,0,821,822,5,138,0,0,822,161,1,0,0,0,823,826,3,168,84,0,824,826,3,164,
82,0,825,823,1,0,0,0,825,824,1,0,0,0,826,163,1,0,0,0,827,828,5,137,0,0,828,
829,3,116,58,0,829,830,5,138,0,0,830,165,1,0,0,0,831,833,5,133,0,0,832,834,
3,170,85,0,833,832,1,0,0,0,834,835,1,0,0,0,835,833,1,0,0,0,835,836,1,0,0,
0,836,837,1,0,0,0,837,838,5,134,0,0,838,167,1,0,0,0,839,841,5,133,0,0,840,
842,3,172,86,0,841,840,1,0,0,0,842,843,1,0,0,0,843,841,1,0,0,0,843,844,1,
0,0,0,844,845,1,0,0,0,845,846,5,134,0,0,846,169,1,0,0,0,847,850,3,174,87,
0,848,850,3,158,79,0,849,847,1,0,0,0,849,848,1,0,0,0,850,171,1,0,0,0,851,
854,3,174,87,0,852,854,3,162,81,0,853,851,1,0,0,0,853,852,1,0,0,0,854,173,
1,0,0,0,855,858,3,178,89,0,856,858,3,180,90,0,857,855,1,0,0,0,857,856,1,
0,0,0,858,175,1,0,0,0,859,862,3,178,89,0,860,862,3,234,117,0,861,859,1,0,
0,0,861,860,1,0,0,0,862,177,1,0,0,0,863,864,7,4,0,0,864,179,1,0,0,0,865,
872,3,234,117,0,866,872,3,220,110,0,867,872,3,222,111,0,868,872,3,230,115,
0,869,872,3,238,119,0,870,872,3,182,91,0,871,865,1,0,0,0,871,866,1,0,0,0,
871,867,1,0,0,0,871,868,1,0,0,0,871,869,1,0,0,0,871,870,1,0,0,0,872,181,
1,0,0,0,873,874,5,133,0,0,874,875,5,134,0,0,875,183,1,0,0,0,876,877,3,186,
93,0,877,185,1,0,0,0,878,883,3,188,94,0,879,880,5,131,0,0,880,882,3,188,
94,0,881,879,1,0,0,0,882,885,1,0,0,0,883,881,1,0,0,0,883,884,1,0,0,0,884,
187,1,0,0,0,885,883,1,0,0,0,886,891,3,190,95,0,887,888,5,130,0,0,888,890,
3,190,95,0,889,887,1,0,0,0,890,893,1,0,0,0,891,889,1,0,0,0,891,892,1,0,0,
0,892,189,1,0,0,0,893,891,1,0,0,0,894,897,3,192,96,0,895,896,7,5,0,0,896,
898,3,192,96,0,897,895,1,0,0,0,897,898,1,0,0,0,898,911,1,0,0,0,899,901,3,
192,96,0,900,902,5,96,0,0,901,900,1,0,0,0,901,902,1,0,0,0,902,903,1,0,0,
0,903,904,5,97,0,0,904,906,5,133,0,0,905,907,3,94,47,0,906,905,1,0,0,0,906,
907,1,0,0,0,907,908,1,0,0,0,908,909,5,134,0,0,909,911,1,0,0,0,910,894,1,
0,0,0,910,899,1,0,0,0,911,191,1,0,0,0,912,916,3,198,99,0,913,915,3,194,97,
0,914,913,1,0,0,0,915,918,1,0,0,0,916,914,1,0,0,0,916,917,1,0,0,0,917,193,
1,0,0,0,918,916,1,0,0,0,919,924,3,196,98,0,920,921,7,6,0,0,921,923,3,200,
100,0,922,920,1,0,0,0,923,926,1,0,0,0,924,922,1,0,0,0,924,925,1,0,0,0,925,
195,1,0,0,0,926,924,1,0,0,0,927,928,7,7,0,0,928,932,3,198,99,0,929,932,3,
226,113,0,930,932,3,228,114,0,931,927,1,0,0,0,931,929,1,0,0,0,931,930,1,
0,0,0,932,197,1,0,0,0,933,938,3,200,100,0,934,935,7,6,0,0,935,937,3,200,
100,0,936,934,1,0,0,0,937,940,1,0,0,0,938,936,1,0,0,0,938,939,1,0,0,0,939,
199,1,0,0,0,940,938,1,0,0,0,941,943,7,8,0,0,942,941,1,0,0,0,942,943,1,0,
0,0,943,944,1,0,0,0,944,945,3,202,101,0,945,201,1,0,0,0,946,947,5,133,0,
0,947,948,3,184,92,0,948,949,5,134,0,0,949,957,1,0,0,0,950,957,3,204,102,
0,951,957,3,218,109,0,952,957,3,220,110,0,953,957,3,222,111,0,954,957,3,
230,115,0,955,957,3,178,89,0,956,946,1,0,0,0,956,950,1,0,0,0,956,951,1,0,
0,0,956,952,1,0,0,0,956,953,1,0,0,0,956,954,1,0,0,0,956,955,1,0,0,0,957,
203,1,0,0,0,958,1227,3,216,108,0,959,960,5,25,0,0,960,961,5,133,0,0,961,
962,3,184,92,0,962,963,5,134,0,0,963,1227,1,0,0,0,964,965,5,26,0,0,965,966,
5,133,0,0,966,967,3,184,92,0,967,968,5,134,0,0,968,1227,1,0,0,0,969,970,
5,27,0,0,970,971,5,133,0,0,971,972,3,184,92,0,972,973,5,145,0,0,973,974,
3,184,92,0,974,975,5,134,0,0,975,1227,1,0,0,0,976,977,5,28,0,0,977,978,5,
133,0,0,978,979,3,184,92,0,979,980,5,134,0,0,980,1227,1,0,0,0,981,982,5,
29,0,0,982,983,5,133,0,0,983,984,3,178,89,0,984,985,5,134,0,0,985,1227,1,
0,0,0,986,987,5,49,0,0,987,988,5,133,0,0,988,989,3,184,92,0,989,990,5,134,
0,0,990,1227,1,0,0,0,991,992,5,50,0,0,992,993,5,133,0,0,993,994,3,184,92,
0,994,995,5,134,0,0,995,1227,1,0,0,0,996,997,5,51,0,0,997,999,5,133,0,0,
998,1000,3,184,92,0,999,998,1,0,0,0,999,1000,1,0,0,0,1000,1001,1,0,0,0,1001,
1227,5,134,0,0,1002,1003,5,52,0,0,1003,1004,5,133,0,0,1004,1227,5,134,0,
0,1005,1006,5,53,0,0,1006,1007,5,133,0,0,1007,1008,3,184,92,0,1008,1009,
5,134,0,0,1009,1227,1,0,0,0,1010,1011,5,54,0,0,1011,1012,5,133,0,0,1012,
1013,3,184,92,0,1013,1014,5,134,0,0,1014,1227,1,0,0,0,1015,1016,5,55,0,0,
1016,1017,5,133,0,0,1017,1018,3,184,92,0,1018,1019,5,134,0,0,1019,1227,1,
0,0,0,1020,1021,5,56,0,0,1021,1022,5,133,0,0,1022,1023,3,184,92,0,1023,1024,
5,134,0,0,1024,1227,1,0,0,0,1025,1026,5,57,0,0,1026,1028,5,133,0,0,1027,
1029,3,94,47,0,1028,1027,1,0,0,0,1028,1029,1,0,0,0,1029,1030,1,0,0,0,1030,
1227,5,134,0,0,1031,1227,3,208,104,0,1032,1033,5,58,0,0,1033,1034,5,133,
0,0,1034,1035,3,184,92,0,1035,1036,5,134,0,0,1036,1227,1,0,0,0,1037,1227,
3,210,105,0,1038,1039,5,59,0,0,1039,1040,5,133,0,0,1040,1041,3,184,92,0,
1041,1042,5,134,0,0,1042,1227,1,0,0,0,1043,1044,5,60,0,0,1044,1045,5,133,
0,0,1045,1046,3,184,92,0,1046,1047,5,134,0,0,1047,1227,1,0,0,0,1048,1049,
5,61,0,0,1049,1050,5,133,0,0,1050,1051,3,184,92,0,1051,1052,5,134,0,0,1052,
1227,1,0,0,0,1053,1054,5,62,0,0,1054,1055,5,133,0,0,1055,1056,3,184,92,0,
1056,1057,5,145,0,0,1057,1058,3,184,92,0,1058,1059,5,134,0,0,1059,1227,1,
0,0,0,1060,1061,5,63,0,0,1061,1062,5,133,0,0,1062,1063,3,184,92,0,1063,1064,
5,145,0,0,1064,1065,3,184,92,0,1065,1066,5,134,0,0,1066,1227,1,0,0,0,1067,
1068,5,64,0,0,1068,1069,5,133,0,0,1069,1070,3,184,92,0,1070,1071,5,145,0,
0,1071,1072,3,184,92,0,1072,1073,5,134,0,0,1073,1227,1,0,0,0,1074,1075,5,
65,0,0,1075,1076,5,133,0,0,1076,1077,3,184,92,0,1077,1078,5,145,0,0,1078,
1079,3,184,92,0,1079,1080,5,134,0,0,1080,1227,1,0,0,0,1081,1082,5,66,0,0,
1082,1083,5,133,0,0,1083,1084,3,184,92,0,1084,1085,5,145,0,0,1085,1086,3,
184,92,0,1086,1087,5,134,0,0,1087,1227,1,0,0,0,1088,1089,5,68,0,0,1089,1090,
5,133,0,0,1090,1091,3,184,92,0,1091,1092,5,134,0,0,1092,1227,1,0,0,0,1093,
1094,5,69,0,0,1094,1095,5,133,0,0,1095,1096,3,184,92,0,1096,1097,5,134,0,
0,1097,1227,1,0,0,0,1098,1099,5,70,0,0,1099,1100,5,133,0,0,1100,1101,3,184,
92,0,1101,1102,5,134,0,0,1102,1227,1,0,0,0,1103,1104,5,71,0,0,1104,1105,
5,133,0,0,1105,1106,3,184,92,0,1106,1107,5,134,0,0,1107,1227,1,0,0,0,1108,
1109,5,72,0,0,1109,1110,5,133,0,0,1110,1111,3,184,92,0,1111,1112,5,134,0,
0,1112,1227,1,0,0,0,1113,1114,5,73,0,0,1114,1115,5,133,0,0,1115,1116,3,184,
92,0,1116,1117,5,134,0,0,1117,1227,1,0,0,0,1118,1119,5,74,0,0,1119,1120,
5,133,0,0,1120,1121,3,184,92,0,1121,1122,5,134,0,0,1122,1227,1,0,0,0,1123,
1124,5,75,0,0,1124,1125,5,133,0,0,1125,1126,3,184,92,0,1126,1127,5,134,0,
0,1127,1227,1,0,0,0,1128,1129,5,76,0,0,1129,1130,5,133,0,0,1130,1227,5,134,
0,0,1131,1132,5,77,0,0,1132,1133,5,133,0,0,1133,1227,5,134,0,0,1134,1135,
5,78,0,0,1135,1136,5,133,0,0,1136,1227,5,134,0,0,1137,1138,5,79,0,0,1138,
1139,5,133,0,0,1139,1140,3,184,92,0,1140,1141,5,134,0,0,1141,1227,1,0,0,
0,1142,1143,5,80,0,0,1143,1144,5,133,0,0,1144,1145,3,184,92,0,1145,1146,
5,134,0,0,1146,1227,1,0,0,0,1147,1148,5,81,0,0,1148,1149,5,133,0,0,1149,
1150,3,184,92,0,1150,1151,5,134,0,0,1151,1227,1,0,0,0,1152,1153,5,82,0,0,
1153,1154,5,133,0,0,1154,1155,3,184,92,0,1155,1156,5,134,0,0,1156,1227,1,
0,0,0,1157,1158,5,83,0,0,1158,1159,5,133,0,0,1159,1160,3,184,92,0,1160,1161,
5,134,0,0,1161,1227,1,0,0,0,1162,1163,5,84,0,0,1163,1165,5,133,0,0,1164,
1166,3,94,47,0,1165,1164,1,0,0,0,1165,1166,1,0,0,0,1166,1167,1,0,0,0,1167,
1227,5,134,0,0,1168,1169,5,85,0,0,1169,1170,5,133,0,0,1170,1171,3,184,92,
0,1171,1172,5,145,0,0,1172,1173,3,184,92,0,1173,1174,5,145,0,0,1174,1175,
3,184,92,0,1175,1176,5,134,0,0,1176,1227,1,0,0,0,1177,1178,5,86,0,0,1178,
1179,5,133,0,0,1179,1180,3,184,92,0,1180,1181,5,145,0,0,1181,1182,3,184,
92,0,1182,1183,5,134,0,0,1183,1227,1,0,0,0,1184,1185,5,87,0,0,1185,1186,
5,133,0,0,1186,1187,3,184,92,0,1187,1188,5,145,0,0,1188,1189,3,184,92,0,
1189,1190,5,134,0,0,1190,1227,1,0,0,0,1191,1192,5,30,0,0,1192,1193,5,133,
0,0,1193,1194,3,184,92,0,1194,1195,5,145,0,0,1195,1196,3,184,92,0,1196,1197,
5,134,0,0,1197,1227,1,0,0,0,1198,1199,5,31,0,0,1199,1200,5,133,0,0,1200,
1201,3,184,92,0,1201,1202,5,134,0,0,1202,1227,1,0,0,0,1203,1204,5,32,0,0,
1204,1205,5,133,0,0,1205,1206,3,184,92,0,1206,1207,5,134,0,0,1207,1227,1,
0,0,0,1208,1209,5,33,0,0,1209,1210,5,133,0,0,1210,1211,3,184,92,0,1211,1212,
5,134,0,0,1212,1227,1,0,0,0,1213,1214,5,34,0,0,1214,1215,5,133,0,0,1215,
1216,3,184,92,0,1216,1217,5,134,0,0,1217,1227,1,0,0,0,1218,1219,5,88,0,0,
1219,1220,5,133,0,0,1220,1221,3,184,92,0,1221,1222,5,134,0,0,1222,1227,1,
0,0,0,1223,1227,3,206,103,0,1224,1227,3,212,106,0,1225,1227,3,214,107,0,
1226,958,1,0,0,0,1226,959,1,0,0,0,1226,964,1,0,0,0,1226,969,1,0,0,0,1226,
976,1,0,0,0,1226,981,1,0,0,0,1226,986,1,0,0,0,1226,991,1,0,0,0,1226,996,
1,0,0,0,1226,1002,1,0,0,0,1226,1005,1,0,0,0,1226,1010,1,0,0,0,1226,1015,
1,0,0,0,1226,1020,1,0,0,0,1226,1025,1,0,0,0,1226,1031,1,0,0,0,1226,1032,
1,0,0,0,1226,1037,1,0,0,0,1226,1038,1,0,0,0,1226,1043,1,0,0,0,1226,1048,
1,0,0,0,1226,1053,1,0,0,0,1226,1060,1,0,0,0,1226,1067,1,0,0,0,1226,1074,
1,0,0,0,1226,1081,1,0,0,0,1226,1088,1,0,0,0,1226,1093,1,0,0,0,1226,1098,
1,0,0,0,1226,1103,1,0,0,0,1226,1108,1,0,0,0,1226,1113,1,0,0,0,1226,1118,
1,0,0,0,1226,1123,1,0,0,0,1226,1128,1,0,0,0,1226,1131,1,0,0,0,1226,1134,
1,0,0,0,1226,1137,1,0,0,0,1226,1142,1,0,0,0,1226,1147,1,0,0,0,1226,1152,
1,0,0,0,1226,1157,1,0,0,0,1226,1162,1,0,0,0,1226,1168,1,0,0,0,1226,1177,
1,0,0,0,1226,1184,1,0,0,0,1226,1191,1,0,0,0,1226,1198,1,0,0,0,1226,1203,
1,0,0,0,1226,1208,1,0,0,0,1226,1213,1,0,0,0,1226,1218,1,0,0,0,1226,1223,
1,0,0,0,1226,1224,1,0,0,0,1226,1225,1,0,0,0,1227,205,1,0,0,0,1228,1229,5,
35,0,0,1229,1230,5,133,0,0,1230,1231,3,184,92,0,1231,1232,5,145,0,0,1232,
1235,3,184,92,0,1233,1234,5,145,0,0,1234,1236,3,184,92,0,1235,1233,1,0,0,
0,1235,1236,1,0,0,0,1236,1237,1,0,0,0,1237,1238,5,134,0,0,1238,207,1,0,0,
0,1239,1240,5,36,0,0,1240,1241,5,133,0,0,1241,1242,3,184,92,0,1242,1243,
5,145,0,0,1243,1246,3,184,92,0,1244,1245,5,145,0,0,1245,1247,3,184,92,0,
1246,1244,1,0,0,0,1246,1247,1,0,0,0,1247,1248,1,0,0,0,1248,1249,5,134,0,
0,1249,209,1,0,0,0,1250,1251,5,67,0,0,1251,1252,5,133,0,0,1252,1253,3,184,
92,0,1253,1254,5,145,0,0,1254,1255,3,184,92,0,1255,1256,5,145,0,0,1256,1259,
3,184,92,0,1257,1258,5,145,0,0,1258,1260,3,184,92,0,1259,1257,1,0,0,0,1259,
1260,1,0,0,0,1260,1261,1,0,0,0,1261,1262,5,134,0,0,1262,211,1,0,0,0,1263,
1264,5,98,0,0,1264,1265,3,52,26,0,1265,213,1,0,0,0,1266,1267,5,96,0,0,1267,
1268,5,98,0,0,1268,1269,3,52,26,0,1269,215,1,0,0,0,1270,1271,5,89,0,0,1271,
1273,5,133,0,0,1272,1274,5,5,0,0,1273,1272,1,0,0,0,1273,1274,1,0,0,0,1274,
1277,1,0,0,0,1275,1278,5,143,0,0,1276,1278,3,184,92,0,1277,1275,1,0,0,0,
1277,1276,1,0,0,0,1278,1279,1,0,0,0,1279,1335,5,134,0,0,1280,1281,5,90,0,
0,1281,1283,5,133,0,0,1282,1284,5,5,0,0,1283,1282,1,0,0,0,1283,1284,1,0,
0,0,1284,1285,1,0,0,0,1285,1286,3,184,92,0,1286,1287,5,134,0,0,1287,1335,
1,0,0,0,1288,1289,5,91,0,0,1289,1291,5,133,0,0,1290,1292,5,5,0,0,1291,1290,
1,0,0,0,1291,1292,1,0,0,0,1292,1293,1,0,0,0,1293,1294,3,184,92,0,1294,1295,
5,134,0,0,1295,1335,1,0,0,0,1296,1297,5,92,0,0,1297,1299,5,133,0,0,1298,
1300,5,5,0,0,1299,1298,1,0,0,0,1299,1300,1,0,0,0,1300,1301,1,0,0,0,1301,
1302,3,184,92,0,1302,1303,5,134,0,0,1303,1335,1,0,0,0,1304,1305,5,93,0,0,
1305,1307,5,133,0,0,1306,1308,5,5,0,0,1307,1306,1,0,0,0,1307,1308,1,0,0,
0,1308,1309,1,0,0,0,1309,1310,3,184,92,0,1310,1311,5,134,0,0,1311,1335,1,
0,0,0,1312,1313,5,94,0,0,1313,1315,5,133,0,0,1314,1316,5,5,0,0,1315,1314,
1,0,0,0,1315,1316,1,0,0,0,1316,1317,1,0,0,0,1317,1318,3,184,92,0,1318,1319,
5,134,0,0,1319,1335,1,0,0,0,1320,1321,5,95,0,0,1321,1323,5,133,0,0,1322,
1324,5,5,0,0,1323,1322,1,0,0,0,1323,1324,1,0,0,0,1324,1325,1,0,0,0,1325,
1330,3,184,92,0,1326,1327,5,139,0,0,1327,1328,5,99,0,0,1328,1329,5,148,0,
0,1329,1331,3,232,116,0,1330,1326,1,0,0,0,1330,1331,1,0,0,0,1331,1332,1,
0,0,0,1332,1333,5,134,0,0,1333,1335,1,0,0,0,1334,1270,1,0,0,0,1334,1280,
1,0,0,0,1334,1288,1,0,0,0,1334,1296,1,0,0,0,1334,1304,1,0,0,0,1334,1312,
1,0,0,0,1334,1320,1,0,0,0,1335,217,1,0,0,0,1336,1338,3,234,117,0,1337,1339,
3,92,46,0,1338,1337,1,0,0,0,1338,1339,1,0,0,0,1339,219,1,0,0,0,1340,1344,
3,232,116,0,1341,1345,5,111,0,0,1342,1343,5,126,0,0,1343,1345,3,234,117,
0,1344,1341,1,0,0,0,1344,1342,1,0,0,0,1344,1345,1,0,0,0,1345,221,1,0,0,0,
1346,1350,3,224,112,0,1347,1350,3,226,113,0,1348,1350,3,228,114,0,1349,1346,
1,0,0,0,1349,1347,1,0,0,0,1349,1348,1,0,0,0,1350,223,1,0,0,0,1351,1352,7,
9,0,0,1352,225,1,0,0,0,1353,1354,7,10,0,0,1354,227,1,0,0,0,1355,1356,7,11,
0,0,1356,229,1,0,0,0,1357,1358,7,12,0,0,1358,231,1,0,0,0,1359,1360,7,13,
0,0,1360,233,1,0,0,0,1361,1364,5,105,0,0,1362,1364,3,236,118,0,1363,1361,
1,0,0,0,1363,1362,1,0,0,0,1364,235,1,0,0,0,1365,1366,7,14,0,0,1366,237,1,
0,0,0,1367,1370,5,108,0,0,1368,1370,3,240,120,0,1369,1367,1,0,0,0,1369,1368,
1,0,0,0,1370,239,1,0,0,0,1371,1372,5,137,0,0,1372,1373,5,138,0,0,1373,241,
1,0,0,0,129,247,254,256,270,283,288,291,302,309,318,324,328,334,337,342,
346,354,362,367,372,375,378,381,388,396,401,407,416,425,429,433,435,445,
450,454,460,465,470,475,478,483,487,498,509,526,533,542,550,559,569,579,
591,598,602,611,616,623,627,636,639,647,651,656,663,674,677,681,686,690,
695,702,705,713,722,734,742,747,750,761,767,789,798,801,804,807,811,817,
825,835,843,849,853,857,861,871,883,891,897,901,906,910,916,924,931,938,
942,956,999,1028,1165,1226,1235,1246,1259,1273,1277,1283,1291,1299,1307,
1315,1323,1330,1334,1338,1344,1349,1363,1369];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class SPARQLParser extends antlr4.Parser {

    static grammarFileName = "SPARQLParser.g4";
    static literalNames = [ null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            "'a'", null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, "'^^'", 
                            "'<='", "'>='", "'!='", "'&&'", "'||'", "'^'", 
                            "'('", "')'", "'{'", "'}'", "'['", "']'", "';'", 
                            "'.'", "'+'", "'-'", "'*'", "'?'", "','", "'!'", 
                            "'/'", "'='", "'<'", "'>'", "'|'" ];
    static symbolicNames = [ null, "WS", "BASE", "PREFIX", "SELECT", "DISTINCT", 
                             "REDUCED", "CONSTRUCT", "DESCRIBE", "ASK", 
                             "FROM", "NAMED", "WHERE", "ORDER", "BY", "ASC", 
                             "DESC", "LIMIT", "OFFSET", "VALUES", "OPTIONAL", 
                             "GRAPH", "UNION", "FILTER", "A", "STR", "LANG", 
                             "LANGMATCHES", "DATATYPE", "BOUND", "SAMETERM", 
                             "ISIRI", "ISURI", "ISBLANK", "ISLITERAL", "REGEX", 
                             "SUBSTR", "TRUE", "FALSE", "SILENT", "ALL", 
                             "AS", "GROUP", "HAVING", "UNDEF", "BINDINGS", 
                             "SERVICE", "BIND", "MINUS", "IRI", "URI", "BNODE", 
                             "RAND", "ABS", "CEIL", "FLOOR", "ROUND", "CONCAT", 
                             "STRLEN", "UCASE", "LCASE", "ENCODE_FOR_URI", 
                             "CONTAINS", "STRSTARTS", "STRENDS", "STRBEFORE", 
                             "STRAFTER", "REPLACE", "YEAR", "MONTH", "DAY", 
                             "HOURS", "MINUTES", "SECONDS", "TIMEZONE", 
                             "TZ", "NOW", "UUID", "STRUUID", "MD5", "SHA1", 
                             "SHA256", "SHA384", "SHA512", "COALESCE", "IF", 
                             "STRLANG", "STRDT", "ISNUMERIC", "COUNT", "SUM", 
                             "MIN", "MAX", "AVG", "SAMPLE", "GROUP_CONCAT", 
                             "NOT", "IN", "EXISTS", "SEPARATOR", "ANY", 
                             "SHORTEST", "SIMPLE", "ACYCLIC", "WALKS", "IRIREF", 
                             "PNAME_NS", "PNAME_LN", "BLANK_NODE_LABEL", 
                             "VAR1", "VAR2", "LANGTAG", "INTEGER", "DECIMAL", 
                             "DOUBLE", "INTEGER_POSITIVE", "DECIMAL_POSITIVE", 
                             "DOUBLE_POSITIVE", "INTEGER_NEGATIVE", "DECIMAL_NEGATIVE", 
                             "DOUBLE_NEGATIVE", "STRING_LITERAL1", "STRING_LITERAL2", 
                             "STRING_LITERAL_LONG1", "STRING_LITERAL_LONG2", 
                             "COMMENT", "REFERENCE", "LESS_EQUAL", "GREATER_EQUAL", 
                             "NOT_EQUAL", "AND", "OR", "INVERSE", "OPEN_BRACE", 
                             "CLOSE_BRACE", "OPEN_CURLY_BRACE", "CLOSE_CURLY_BRACE", 
                             "OPEN_SQUARE_BRACKET", "CLOSE_SQUARE_BRACKET", 
                             "SEMICOLON", "DOT", "PLUS_SIGN", "MINUS_SIGN", 
                             "ASTERISK", "QUESTION_MARK", "COMMA", "NEGATION", 
                             "DIVIDE", "EQUAL", "LESS", "GREATER", "PIPE", 
                             "ANY_OTHER" ];
    static ruleNames = [ "query", "prologue", "baseDecl", "prefixDecl", 
                         "selectQuery", "subSelect", "selectClause", "selectModifier", 
                         "selectVariables", "constructQuery", "describeQuery", 
                         "askQuery", "datasetClause", "whereClause", "solutionModifier", 
                         "groupClause", "groupCondition", "havingClause", 
                         "havingCondition", "orderClause", "orderCondition", 
                         "limitOffsetClauses", "limitClause", "offsetClause", 
                         "valuesClause", "triplesTemplate", "groupGraphPattern", 
                         "groupGraphPatternSub", "groupGraphPatternSubList", 
                         "triplesBlock", "graphPatternNotTriples", "optionalGraphPattern", 
                         "graphGraphPattern", "serviceGraphPattern", "bind", 
                         "inlineData", "dataBlock", "inlineDataOneVar", 
                         "inlineDataFull", "dataBlockValues", "dataBlockValue", 
                         "minusGraphPattern", "groupOrUnionGraphPattern", 
                         "filter", "constraint", "functionCall", "argList", 
                         "expressionList", "constructTemplate", "constructTriples", 
                         "triplesSameSubject", "propertyList", "propertyListNotEmpty", 
                         "verb", "objectList", "object", "triplesSameSubjectPath", 
                         "propertyListPath", "propertyListPathNotEmpty", 
                         "propertyListPathNotEmptyList", "verbPath", "verbSimple", 
                         "objectListPath", "objectPath", "path", "pathAlternative", 
                         "pathSequence", "pathElt", "pathEltOrInverse", 
                         "pathMod", "pathQuantity", "pathQuantityExact", 
                         "pathQuantityRange", "pathQuantityMin", "pathQuantityMax", 
                         "pathPrimary", "pathNegatedPropertySet", "pathOneInPropertySet", 
                         "integer", "triplesNode", "blankNodePropertyList", 
                         "triplesNodePath", "blankNodePropertyListPath", 
                         "collection", "collectionPath", "graphNode", "graphNodePath", 
                         "varOrTerm", "varOrIRI", "var", "graphTerm", "nil", 
                         "expression", "conditionalOrExpression", "conditionalAndExpression", 
                         "relationalExpression", "additiveExpression", "rhsAdditiveExpression", 
                         "rhsAdditiveExpressionSub", "multiplicativeExpression", 
                         "unaryExpression", "primaryExpression", "builtInCall", 
                         "regexExpression", "subStringExpression", "strReplaceExpression", 
                         "existsFunction", "notExistsFunction", "aggregate", 
                         "iriOrFunction", "rdfLiteral", "numericLiteral", 
                         "numericLiteralUnsigned", "numericLiteralPositive", 
                         "numericLiteralNegative", "booleanLiteral", "string", 
                         "iri", "prefixedName", "blankNode", "anon" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = SPARQLParser.ruleNames;
        this.literalNames = SPARQLParser.literalNames;
        this.symbolicNames = SPARQLParser.symbolicNames;
    }



	query() {
	    let localctx = new QueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, SPARQLParser.RULE_query);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 242;
	        this.prologue();
	        this.state = 247;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 4:
	            this.state = 243;
	            this.selectQuery();
	            break;
	        case 7:
	            this.state = 244;
	            this.constructQuery();
	            break;
	        case 8:
	            this.state = 245;
	            this.describeQuery();
	            break;
	        case 9:
	            this.state = 246;
	            this.askQuery();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 249;
	        this.valuesClause();
	        this.state = 250;
	        this.match(SPARQLParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prologue() {
	    let localctx = new PrologueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, SPARQLParser.RULE_prologue);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 256;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===2 || _la===3) {
	            this.state = 254;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 2:
	                this.state = 252;
	                this.baseDecl();
	                break;
	            case 3:
	                this.state = 253;
	                this.prefixDecl();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 258;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	baseDecl() {
	    let localctx = new BaseDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, SPARQLParser.RULE_baseDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 259;
	        this.match(SPARQLParser.BASE);
	        this.state = 260;
	        this.match(SPARQLParser.IRIREF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prefixDecl() {
	    let localctx = new PrefixDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, SPARQLParser.RULE_prefixDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 262;
	        this.match(SPARQLParser.PREFIX);
	        this.state = 263;
	        this.match(SPARQLParser.PNAME_NS);
	        this.state = 264;
	        this.match(SPARQLParser.IRIREF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectQuery() {
	    let localctx = new SelectQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, SPARQLParser.RULE_selectQuery);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 266;
	        this.selectClause();
	        this.state = 270;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===10) {
	            this.state = 267;
	            this.datasetClause();
	            this.state = 272;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 273;
	        this.whereClause();
	        this.state = 274;
	        this.solutionModifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subSelect() {
	    let localctx = new SubSelectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, SPARQLParser.RULE_subSelect);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 276;
	        this.selectClause();
	        this.state = 277;
	        this.whereClause();
	        this.state = 278;
	        this.solutionModifier();
	        this.state = 279;
	        this.valuesClause();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectClause() {
	    let localctx = new SelectClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, SPARQLParser.RULE_selectClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 281;
	        this.match(SPARQLParser.SELECT);
	        this.state = 283;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===5 || _la===6) {
	            this.state = 282;
	            this.selectModifier();
	        }

	        this.state = 291;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 109:
	        case 110:
	        case 133:
	            this.state = 286; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 285;
	                this.selectVariables();
	                this.state = 288; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(((((_la - 109)) & ~0x1f) === 0 && ((1 << (_la - 109)) & 16777219) !== 0));
	            break;
	        case 143:
	            this.state = 290;
	            this.match(SPARQLParser.ASTERISK);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectModifier() {
	    let localctx = new SelectModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, SPARQLParser.RULE_selectModifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 293;
	        _la = this._input.LA(1);
	        if(!(_la===5 || _la===6)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectVariables() {
	    let localctx = new SelectVariablesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, SPARQLParser.RULE_selectVariables);
	    try {
	        this.state = 302;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 109:
	        case 110:
	            localctx = new SelectSingleVariableContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 295;
	            this.var_();
	            break;
	        case 133:
	            localctx = new SelectExpressionAsVariableContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 296;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 297;
	            this.expression();
	            this.state = 298;
	            this.match(SPARQLParser.AS);
	            this.state = 299;
	            this.var_();
	            this.state = 300;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructQuery() {
	    let localctx = new ConstructQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, SPARQLParser.RULE_constructQuery);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 304;
	        this.match(SPARQLParser.CONSTRUCT);
	        this.state = 328;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 135:
	            this.state = 305;
	            this.constructTemplate();
	            this.state = 309;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===10) {
	                this.state = 306;
	                this.datasetClause();
	                this.state = 311;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 312;
	            this.whereClause();
	            this.state = 313;
	            this.solutionModifier();
	            break;
	        case 10:
	        case 12:
	            this.state = 318;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===10) {
	                this.state = 315;
	                this.datasetClause();
	                this.state = 320;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 321;
	            this.match(SPARQLParser.WHERE);
	            this.state = 322;
	            this.match(SPARQLParser.OPEN_CURLY_BRACE);
	            this.state = 324;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===37 || _la===38 || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 269483967) !== 0) || _la===137) {
	                this.state = 323;
	                this.triplesTemplate();
	            }

	            this.state = 326;
	            this.match(SPARQLParser.CLOSE_CURLY_BRACE);
	            this.state = 327;
	            this.solutionModifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describeQuery() {
	    let localctx = new DescribeQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, SPARQLParser.RULE_describeQuery);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 330;
	        this.match(SPARQLParser.DESCRIBE);
	        this.state = 337;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 105:
	        case 106:
	        case 107:
	        case 109:
	        case 110:
	            this.state = 332; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 331;
	                this.varOrIRI();
	                this.state = 334; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 55) !== 0));
	            break;
	        case 143:
	            this.state = 336;
	            this.match(SPARQLParser.ASTERISK);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 342;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===10) {
	            this.state = 339;
	            this.datasetClause();
	            this.state = 344;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 346;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===12 || _la===135) {
	            this.state = 345;
	            this.whereClause();
	        }

	        this.state = 348;
	        this.solutionModifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	askQuery() {
	    let localctx = new AskQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, SPARQLParser.RULE_askQuery);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 350;
	        this.match(SPARQLParser.ASK);
	        this.state = 354;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===10) {
	            this.state = 351;
	            this.datasetClause();
	            this.state = 356;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 357;
	        this.whereClause();
	        this.state = 358;
	        this.solutionModifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	datasetClause() {
	    let localctx = new DatasetClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, SPARQLParser.RULE_datasetClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 360;
	        this.match(SPARQLParser.FROM);
	        this.state = 362;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===11) {
	            this.state = 361;
	            this.match(SPARQLParser.NAMED);
	        }

	        this.state = 364;
	        this.iri();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whereClause() {
	    let localctx = new WhereClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, SPARQLParser.RULE_whereClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 367;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===12) {
	            this.state = 366;
	            this.match(SPARQLParser.WHERE);
	        }

	        this.state = 369;
	        this.groupGraphPattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	solutionModifier() {
	    let localctx = new SolutionModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, SPARQLParser.RULE_solutionModifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 372;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===42) {
	            this.state = 371;
	            this.groupClause();
	        }

	        this.state = 375;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===43) {
	            this.state = 374;
	            this.havingClause();
	        }

	        this.state = 378;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===13) {
	            this.state = 377;
	            this.orderClause();
	        }

	        this.state = 381;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===17 || _la===18) {
	            this.state = 380;
	            this.limitOffsetClauses();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupClause() {
	    let localctx = new GroupClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, SPARQLParser.RULE_groupClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 383;
	        this.match(SPARQLParser.GROUP);
	        this.state = 384;
	        this.match(SPARQLParser.BY);
	        this.state = 386; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 385;
	            this.groupCondition();
	            this.state = 388; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 25)) & ~0x1f) === 0 && ((1 << (_la - 25)) & 4278194175) !== 0) || ((((_la - 57)) & ~0x1f) === 0 && ((1 << (_la - 57)) & 4294967295) !== 0) || ((((_la - 89)) & ~0x1f) === 0 && ((1 << (_la - 89)) & 3605247) !== 0) || _la===133);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupCondition() {
	    let localctx = new GroupConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, SPARQLParser.RULE_groupCondition);
	    var _la = 0;
	    try {
	        this.state = 401;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 25:
	        case 26:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 98:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 390;
	            this.builtInCall();
	            break;
	        case 105:
	        case 106:
	        case 107:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 391;
	            this.functionCall();
	            break;
	        case 133:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 392;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 393;
	            this.expression();
	            this.state = 396;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===41) {
	                this.state = 394;
	                this.match(SPARQLParser.AS);
	                this.state = 395;
	                this.var_();
	            }

	            this.state = 398;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 109:
	        case 110:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 400;
	            this.var_();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	havingClause() {
	    let localctx = new HavingClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, SPARQLParser.RULE_havingClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 403;
	        this.match(SPARQLParser.HAVING);
	        this.state = 405; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 404;
	            this.havingCondition();
	            this.state = 407; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 25)) & ~0x1f) === 0 && ((1 << (_la - 25)) & 4278194175) !== 0) || ((((_la - 57)) & ~0x1f) === 0 && ((1 << (_la - 57)) & 4294967295) !== 0) || ((((_la - 89)) & ~0x1f) === 0 && ((1 << (_la - 89)) & 459519) !== 0) || _la===133);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	havingCondition() {
	    let localctx = new HavingConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, SPARQLParser.RULE_havingCondition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 409;
	        this.constraint();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderClause() {
	    let localctx = new OrderClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, SPARQLParser.RULE_orderClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 411;
	        this.match(SPARQLParser.ORDER);
	        this.state = 412;
	        this.match(SPARQLParser.BY);
	        this.state = 414; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 413;
	            this.orderCondition();
	            this.state = 416; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 15)) & ~0x1f) === 0 && ((1 << (_la - 15)) & 4193283) !== 0) || ((((_la - 49)) & ~0x1f) === 0 && ((1 << (_la - 49)) & 4294967295) !== 0) || ((((_la - 81)) & ~0x1f) === 0 && ((1 << (_la - 81)) & 922943487) !== 0) || _la===133);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderCondition() {
	    let localctx = new OrderConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, SPARQLParser.RULE_orderCondition);
	    var _la = 0;
	    try {
	        this.state = 425;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 15:
	        case 16:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 418;
	            _la = this._input.LA(1);
	            if(!(_la===15 || _la===16)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 419;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 420;
	            this.expression();
	            this.state = 421;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 25:
	        case 26:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 98:
	        case 105:
	        case 106:
	        case 107:
	        case 133:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 423;
	            this.constraint();
	            break;
	        case 109:
	        case 110:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 424;
	            this.var_();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limitOffsetClauses() {
	    let localctx = new LimitOffsetClausesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, SPARQLParser.RULE_limitOffsetClauses);
	    var _la = 0;
	    try {
	        this.state = 435;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 17:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 427;
	            this.limitClause();
	            this.state = 429;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===18) {
	                this.state = 428;
	                this.offsetClause();
	            }

	            break;
	        case 18:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 431;
	            this.offsetClause();
	            this.state = 433;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===17) {
	                this.state = 432;
	                this.limitClause();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limitClause() {
	    let localctx = new LimitClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, SPARQLParser.RULE_limitClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 437;
	        this.match(SPARQLParser.LIMIT);
	        this.state = 438;
	        this.match(SPARQLParser.INTEGER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	offsetClause() {
	    let localctx = new OffsetClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, SPARQLParser.RULE_offsetClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 440;
	        this.match(SPARQLParser.OFFSET);
	        this.state = 441;
	        this.match(SPARQLParser.INTEGER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valuesClause() {
	    let localctx = new ValuesClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, SPARQLParser.RULE_valuesClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 445;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 443;
	            this.match(SPARQLParser.VALUES);
	            this.state = 444;
	            this.dataBlock();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	triplesTemplate() {
	    let localctx = new TriplesTemplateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, SPARQLParser.RULE_triplesTemplate);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 447;
	        this.triplesSameSubject();
	        this.state = 454;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===140) {
	            this.state = 448;
	            this.match(SPARQLParser.DOT);
	            this.state = 450;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===37 || _la===38 || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 269483967) !== 0) || _la===137) {
	                this.state = 449;
	                this.triplesSameSubject();
	            }

	            this.state = 456;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupGraphPattern() {
	    let localctx = new GroupGraphPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, SPARQLParser.RULE_groupGraphPattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 457;
	        this.match(SPARQLParser.OPEN_CURLY_BRACE);
	        this.state = 460;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 4:
	            this.state = 458;
	            this.subSelect();
	            break;
	        case 19:
	        case 20:
	        case 21:
	        case 23:
	        case 37:
	        case 38:
	        case 46:
	        case 47:
	        case 48:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 133:
	        case 135:
	        case 136:
	        case 137:
	            this.state = 459;
	            this.groupGraphPatternSub();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 462;
	        this.match(SPARQLParser.CLOSE_CURLY_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupGraphPatternSub() {
	    let localctx = new GroupGraphPatternSubContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, SPARQLParser.RULE_groupGraphPatternSub);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 465;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===37 || _la===38 || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 269483967) !== 0) || _la===137) {
	            this.state = 464;
	            this.triplesBlock();
	        }

	        this.state = 470;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 19)) & ~0x1f) === 0 && ((1 << (_la - 19)) & 939524119) !== 0) || _la===135) {
	            this.state = 467;
	            this.groupGraphPatternSubList();
	            this.state = 472;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupGraphPatternSubList() {
	    let localctx = new GroupGraphPatternSubListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, SPARQLParser.RULE_groupGraphPatternSubList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 473;
	        this.graphPatternNotTriples();
	        this.state = 475;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===140) {
	            this.state = 474;
	            this.match(SPARQLParser.DOT);
	        }

	        this.state = 478;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===37 || _la===38 || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 269483967) !== 0) || _la===137) {
	            this.state = 477;
	            this.triplesBlock();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	triplesBlock() {
	    let localctx = new TriplesBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, SPARQLParser.RULE_triplesBlock);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 480;
	        this.triplesSameSubjectPath();
	        this.state = 487;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===140) {
	            this.state = 481;
	            this.match(SPARQLParser.DOT);
	            this.state = 483;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===37 || _la===38 || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 269483967) !== 0) || _la===137) {
	                this.state = 482;
	                this.triplesSameSubjectPath();
	            }

	            this.state = 489;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphPatternNotTriples() {
	    let localctx = new GraphPatternNotTriplesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, SPARQLParser.RULE_graphPatternNotTriples);
	    try {
	        this.state = 498;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 135:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 490;
	            this.groupOrUnionGraphPattern();
	            break;
	        case 20:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 491;
	            this.optionalGraphPattern();
	            break;
	        case 48:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 492;
	            this.minusGraphPattern();
	            break;
	        case 21:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 493;
	            this.graphGraphPattern();
	            break;
	        case 46:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 494;
	            this.serviceGraphPattern();
	            break;
	        case 23:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 495;
	            this.filter();
	            break;
	        case 47:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 496;
	            this.bind();
	            break;
	        case 19:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 497;
	            this.inlineData();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionalGraphPattern() {
	    let localctx = new OptionalGraphPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, SPARQLParser.RULE_optionalGraphPattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 500;
	        this.match(SPARQLParser.OPTIONAL);
	        this.state = 501;
	        this.groupGraphPattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphGraphPattern() {
	    let localctx = new GraphGraphPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, SPARQLParser.RULE_graphGraphPattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 503;
	        this.match(SPARQLParser.GRAPH);
	        this.state = 504;
	        this.varOrIRI();
	        this.state = 505;
	        this.groupGraphPattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	serviceGraphPattern() {
	    let localctx = new ServiceGraphPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, SPARQLParser.RULE_serviceGraphPattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 507;
	        this.match(SPARQLParser.SERVICE);
	        this.state = 509;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===39) {
	            this.state = 508;
	            this.match(SPARQLParser.SILENT);
	        }

	        this.state = 511;
	        this.varOrIRI();
	        this.state = 512;
	        this.groupGraphPattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bind() {
	    let localctx = new BindContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, SPARQLParser.RULE_bind);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 514;
	        this.match(SPARQLParser.BIND);
	        this.state = 515;
	        this.match(SPARQLParser.OPEN_BRACE);
	        this.state = 516;
	        this.expression();
	        this.state = 517;
	        this.match(SPARQLParser.AS);
	        this.state = 518;
	        this.var_();
	        this.state = 519;
	        this.match(SPARQLParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inlineData() {
	    let localctx = new InlineDataContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, SPARQLParser.RULE_inlineData);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 521;
	        this.match(SPARQLParser.VALUES);
	        this.state = 522;
	        this.dataBlock();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataBlock() {
	    let localctx = new DataBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, SPARQLParser.RULE_dataBlock);
	    try {
	        this.state = 526;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 109:
	        case 110:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 524;
	            this.inlineDataOneVar();
	            break;
	        case 133:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 525;
	            this.inlineDataFull();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inlineDataOneVar() {
	    let localctx = new InlineDataOneVarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, SPARQLParser.RULE_inlineDataOneVar);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 528;
	        this.var_();
	        this.state = 529;
	        this.match(SPARQLParser.OPEN_CURLY_BRACE);
	        this.state = 533;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 131) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 1048455) !== 0)) {
	            this.state = 530;
	            this.dataBlockValue();
	            this.state = 535;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 536;
	        this.match(SPARQLParser.CLOSE_CURLY_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inlineDataFull() {
	    let localctx = new InlineDataFullContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, SPARQLParser.RULE_inlineDataFull);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 538;
	        this.match(SPARQLParser.OPEN_BRACE);
	        this.state = 542;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===109 || _la===110) {
	            this.state = 539;
	            this.var_();
	            this.state = 544;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 545;
	        this.match(SPARQLParser.CLOSE_BRACE);
	        this.state = 546;
	        this.match(SPARQLParser.OPEN_CURLY_BRACE);
	        this.state = 550;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===133) {
	            this.state = 547;
	            this.dataBlockValues();
	            this.state = 552;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 553;
	        this.match(SPARQLParser.CLOSE_CURLY_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataBlockValues() {
	    let localctx = new DataBlockValuesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, SPARQLParser.RULE_dataBlockValues);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 555;
	        this.match(SPARQLParser.OPEN_BRACE);
	        this.state = 559;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 131) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 1048455) !== 0)) {
	            this.state = 556;
	            this.dataBlockValue();
	            this.state = 561;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 562;
	        this.match(SPARQLParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataBlockValue() {
	    let localctx = new DataBlockValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, SPARQLParser.RULE_dataBlockValue);
	    try {
	        this.state = 569;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 105:
	        case 106:
	        case 107:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 564;
	            this.iri();
	            break;
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 565;
	            this.rdfLiteral();
	            break;
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 566;
	            this.numericLiteral();
	            break;
	        case 37:
	        case 38:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 567;
	            this.booleanLiteral();
	            break;
	        case 44:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 568;
	            this.match(SPARQLParser.UNDEF);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	minusGraphPattern() {
	    let localctx = new MinusGraphPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, SPARQLParser.RULE_minusGraphPattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 571;
	        this.match(SPARQLParser.MINUS);
	        this.state = 572;
	        this.groupGraphPattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupOrUnionGraphPattern() {
	    let localctx = new GroupOrUnionGraphPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, SPARQLParser.RULE_groupOrUnionGraphPattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 574;
	        this.groupGraphPattern();
	        this.state = 579;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===22) {
	            this.state = 575;
	            this.match(SPARQLParser.UNION);
	            this.state = 576;
	            this.groupGraphPattern();
	            this.state = 581;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	filter() {
	    let localctx = new FilterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, SPARQLParser.RULE_filter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 582;
	        this.match(SPARQLParser.FILTER);
	        this.state = 583;
	        this.constraint();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constraint() {
	    let localctx = new ConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, SPARQLParser.RULE_constraint);
	    try {
	        this.state = 591;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 133:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 585;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 586;
	            this.expression();
	            this.state = 587;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 25:
	        case 26:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 98:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 589;
	            this.builtInCall();
	            break;
	        case 105:
	        case 106:
	        case 107:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 590;
	            this.functionCall();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionCall() {
	    let localctx = new FunctionCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, SPARQLParser.RULE_functionCall);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 593;
	        this.iri();
	        this.state = 594;
	        this.argList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argList() {
	    let localctx = new ArgListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, SPARQLParser.RULE_argList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 596;
	        this.match(SPARQLParser.OPEN_BRACE);
	        this.state = 602;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 5:
	        case 25:
	        case 26:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 98:
	        case 105:
	        case 106:
	        case 107:
	        case 109:
	        case 110:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 133:
	        case 141:
	        case 142:
	        case 146:
	            this.state = 598;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5) {
	                this.state = 597;
	                this.match(SPARQLParser.DISTINCT);
	            }

	            this.state = 600;
	            this.expressionList();
	            break;
	        case 134:
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 604;
	        this.match(SPARQLParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionList() {
	    let localctx = new ExpressionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, SPARQLParser.RULE_expressionList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 606;
	        this.expression();
	        this.state = 611;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===145) {
	            this.state = 607;
	            this.match(SPARQLParser.COMMA);
	            this.state = 608;
	            this.expression();
	            this.state = 613;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructTemplate() {
	    let localctx = new ConstructTemplateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, SPARQLParser.RULE_constructTemplate);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 614;
	        this.match(SPARQLParser.OPEN_CURLY_BRACE);
	        this.state = 616;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===37 || _la===38 || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 269483967) !== 0) || _la===137) {
	            this.state = 615;
	            this.constructTriples();
	        }

	        this.state = 618;
	        this.match(SPARQLParser.CLOSE_CURLY_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructTriples() {
	    let localctx = new ConstructTriplesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, SPARQLParser.RULE_constructTriples);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 620;
	        this.triplesSameSubject();
	        this.state = 627;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,57,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 621;
	                this.match(SPARQLParser.DOT);
	                this.state = 623;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===37 || _la===38 || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 269483967) !== 0) || _la===137) {
	                    this.state = 622;
	                    this.constructTriples();
	                }
	         
	            }
	            this.state = 629;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,57,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	triplesSameSubject() {
	    let localctx = new TriplesSameSubjectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, SPARQLParser.RULE_triplesSameSubject);
	    try {
	        this.state = 636;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 630;
	            this.varOrTerm();
	            this.state = 631;
	            this.propertyListNotEmpty();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 633;
	            this.triplesNode();
	            this.state = 634;
	            this.propertyList();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyList() {
	    let localctx = new PropertyListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, SPARQLParser.RULE_propertyList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 639;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24 || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 55) !== 0)) {
	            this.state = 638;
	            this.propertyListNotEmpty();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyListNotEmpty() {
	    let localctx = new PropertyListNotEmptyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, SPARQLParser.RULE_propertyListNotEmpty);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 641;
	        this.verb();
	        this.state = 642;
	        this.objectList();
	        this.state = 651;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===139) {
	            this.state = 643;
	            this.match(SPARQLParser.SEMICOLON);
	            this.state = 647;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===24 || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 55) !== 0)) {
	                this.state = 644;
	                this.verb();
	                this.state = 645;
	                this.objectList();
	            }

	            this.state = 653;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	verb() {
	    let localctx = new VerbContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, SPARQLParser.RULE_verb);
	    try {
	        this.state = 656;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 105:
	        case 106:
	        case 107:
	        case 109:
	        case 110:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 654;
	            this.varOrIRI();
	            break;
	        case 24:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 655;
	            this.match(SPARQLParser.A);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	objectList() {
	    let localctx = new ObjectListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, SPARQLParser.RULE_objectList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 658;
	        this.object();
	        this.state = 663;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===145) {
	            this.state = 659;
	            this.match(SPARQLParser.COMMA);
	            this.state = 660;
	            this.object();
	            this.state = 665;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object() {
	    let localctx = new ObjectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, SPARQLParser.RULE_object);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 666;
	        this.graphNode();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	triplesSameSubjectPath() {
	    let localctx = new TriplesSameSubjectPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, SPARQLParser.RULE_triplesSameSubjectPath);
	    try {
	        this.state = 674;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 668;
	            this.varOrTerm();
	            this.state = 669;
	            this.propertyListPathNotEmpty();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 671;
	            this.triplesNodePath();
	            this.state = 672;
	            this.propertyListPath();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyListPath() {
	    let localctx = new PropertyListPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, SPARQLParser.RULE_propertyListPath);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 677;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24 || _la===40 || ((((_la - 100)) & ~0x1f) === 0 && ((1 << (_la - 100)) & 1761) !== 0) || ((((_la - 132)) & ~0x1f) === 0 && ((1 << (_la - 132)) & 16387) !== 0)) {
	            this.state = 676;
	            this.propertyListPathNotEmpty();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyListPathNotEmpty() {
	    let localctx = new PropertyListPathNotEmptyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, SPARQLParser.RULE_propertyListPathNotEmpty);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 681;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 24:
	        case 40:
	        case 100:
	        case 105:
	        case 106:
	        case 107:
	        case 132:
	        case 133:
	        case 146:
	            this.state = 679;
	            this.verbPath();
	            break;
	        case 109:
	        case 110:
	            this.state = 680;
	            this.verbSimple();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 683;
	        this.objectListPath();
	        this.state = 690;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===139) {
	            this.state = 684;
	            this.match(SPARQLParser.SEMICOLON);
	            this.state = 686;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===24 || _la===40 || ((((_la - 100)) & ~0x1f) === 0 && ((1 << (_la - 100)) & 1761) !== 0) || ((((_la - 132)) & ~0x1f) === 0 && ((1 << (_la - 132)) & 16387) !== 0)) {
	                this.state = 685;
	                this.propertyListPathNotEmptyList();
	            }

	            this.state = 692;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyListPathNotEmptyList() {
	    let localctx = new PropertyListPathNotEmptyListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, SPARQLParser.RULE_propertyListPathNotEmptyList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 695;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 24:
	        case 40:
	        case 100:
	        case 105:
	        case 106:
	        case 107:
	        case 132:
	        case 133:
	        case 146:
	            this.state = 693;
	            this.verbPath();
	            break;
	        case 109:
	        case 110:
	            this.state = 694;
	            this.verbSimple();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 697;
	        this.objectList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	verbPath() {
	    let localctx = new VerbPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, SPARQLParser.RULE_verbPath);
	    var _la = 0;
	    try {
	        this.state = 713;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 24:
	        case 105:
	        case 106:
	        case 107:
	        case 132:
	        case 133:
	        case 146:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 699;
	            this.path();
	            break;
	        case 40:
	        case 100:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 700;
	            _la = this._input.LA(1);
	            if(!(_la===40 || _la===100)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 702;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===101) {
	                this.state = 701;
	                this.match(SPARQLParser.SHORTEST);
	            }

	            this.state = 705;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 7) !== 0)) {
	                this.state = 704;
	                _la = this._input.LA(1);
	                if(!(((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 7) !== 0))) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 707;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 708;
	            this.path();
	            this.state = 709;
	            this.match(SPARQLParser.AS);
	            this.state = 710;
	            this.var_();
	            this.state = 711;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	verbSimple() {
	    let localctx = new VerbSimpleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, SPARQLParser.RULE_verbSimple);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 715;
	        this.var_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	objectListPath() {
	    let localctx = new ObjectListPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, SPARQLParser.RULE_objectListPath);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 717;
	        this.objectPath();
	        this.state = 722;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===145) {
	            this.state = 718;
	            this.match(SPARQLParser.COMMA);
	            this.state = 719;
	            this.objectPath();
	            this.state = 724;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	objectPath() {
	    let localctx = new ObjectPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, SPARQLParser.RULE_objectPath);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 725;
	        this.graphNodePath();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	path() {
	    let localctx = new PathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, SPARQLParser.RULE_path);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 727;
	        this.pathAlternative();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathAlternative() {
	    let localctx = new PathAlternativeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, SPARQLParser.RULE_pathAlternative);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 729;
	        this.pathSequence();
	        this.state = 734;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===151) {
	            this.state = 730;
	            this.match(SPARQLParser.PIPE);
	            this.state = 731;
	            this.pathSequence();
	            this.state = 736;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathSequence() {
	    let localctx = new PathSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, SPARQLParser.RULE_pathSequence);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 737;
	        this.pathEltOrInverse();
	        this.state = 742;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===147) {
	            this.state = 738;
	            this.match(SPARQLParser.DIVIDE);
	            this.state = 739;
	            this.pathEltOrInverse();
	            this.state = 744;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathElt() {
	    let localctx = new PathEltContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, SPARQLParser.RULE_pathElt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 745;
	        this.pathPrimary();
	        this.state = 747;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 135)) & ~0x1f) === 0 && ((1 << (_la - 135)) & 833) !== 0)) {
	            this.state = 746;
	            this.pathMod();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathEltOrInverse() {
	    let localctx = new PathEltOrInverseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, SPARQLParser.RULE_pathEltOrInverse);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 750;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===132) {
	            this.state = 749;
	            this.match(SPARQLParser.INVERSE);
	        }

	        this.state = 752;
	        this.pathElt();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathMod() {
	    let localctx = new PathModContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, SPARQLParser.RULE_pathMod);
	    try {
	        this.state = 761;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 144:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 754;
	            this.match(SPARQLParser.QUESTION_MARK);
	            break;
	        case 143:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 755;
	            this.match(SPARQLParser.ASTERISK);
	            break;
	        case 141:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 756;
	            this.match(SPARQLParser.PLUS_SIGN);
	            break;
	        case 135:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 757;
	            this.match(SPARQLParser.OPEN_CURLY_BRACE);
	            this.state = 758;
	            this.pathQuantity();
	            this.state = 759;
	            this.match(SPARQLParser.CLOSE_CURLY_BRACE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathQuantity() {
	    let localctx = new PathQuantityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, SPARQLParser.RULE_pathQuantity);
	    try {
	        this.state = 767;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 763;
	            this.pathQuantityExact();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 764;
	            this.pathQuantityRange();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 765;
	            this.pathQuantityMin();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 766;
	            this.pathQuantityMax();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathQuantityExact() {
	    let localctx = new PathQuantityExactContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, SPARQLParser.RULE_pathQuantityExact);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 769;
	        this.match(SPARQLParser.INTEGER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathQuantityRange() {
	    let localctx = new PathQuantityRangeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, SPARQLParser.RULE_pathQuantityRange);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 771;
	        localctx.min = this.match(SPARQLParser.INTEGER);
	        this.state = 772;
	        this.match(SPARQLParser.COMMA);
	        this.state = 773;
	        localctx.max = this.match(SPARQLParser.INTEGER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathQuantityMin() {
	    let localctx = new PathQuantityMinContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, SPARQLParser.RULE_pathQuantityMin);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 775;
	        localctx.min = this.match(SPARQLParser.INTEGER);
	        this.state = 776;
	        this.match(SPARQLParser.COMMA);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathQuantityMax() {
	    let localctx = new PathQuantityMaxContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, SPARQLParser.RULE_pathQuantityMax);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 778;
	        this.match(SPARQLParser.COMMA);
	        this.state = 779;
	        localctx.max = this.match(SPARQLParser.INTEGER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathPrimary() {
	    let localctx = new PathPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, SPARQLParser.RULE_pathPrimary);
	    try {
	        this.state = 789;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 105:
	        case 106:
	        case 107:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 781;
	            this.iri();
	            break;
	        case 24:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 782;
	            this.match(SPARQLParser.A);
	            break;
	        case 146:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 783;
	            this.match(SPARQLParser.NEGATION);
	            this.state = 784;
	            this.pathNegatedPropertySet();
	            break;
	        case 133:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 785;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 786;
	            this.path();
	            this.state = 787;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathNegatedPropertySet() {
	    let localctx = new PathNegatedPropertySetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, SPARQLParser.RULE_pathNegatedPropertySet);
	    var _la = 0;
	    try {
	        this.state = 804;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 24:
	        case 105:
	        case 106:
	        case 107:
	        case 132:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 791;
	            this.pathOneInPropertySet();
	            break;
	        case 133:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 792;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 801;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===24 || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 134217735) !== 0)) {
	                this.state = 793;
	                this.pathOneInPropertySet();
	                this.state = 798;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===151) {
	                    this.state = 794;
	                    this.match(SPARQLParser.PIPE);
	                    this.state = 795;
	                    this.pathOneInPropertySet();
	                    this.state = 800;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 803;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathOneInPropertySet() {
	    let localctx = new PathOneInPropertySetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, SPARQLParser.RULE_pathOneInPropertySet);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 807;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===132) {
	            this.state = 806;
	            this.match(SPARQLParser.INVERSE);
	        }

	        this.state = 811;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 105:
	        case 106:
	        case 107:
	            this.state = 809;
	            this.iri();
	            break;
	        case 24:
	            this.state = 810;
	            this.match(SPARQLParser.A);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	integer() {
	    let localctx = new IntegerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, SPARQLParser.RULE_integer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 813;
	        this.match(SPARQLParser.INTEGER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	triplesNode() {
	    let localctx = new TriplesNodeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, SPARQLParser.RULE_triplesNode);
	    try {
	        this.state = 817;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 133:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 815;
	            this.collection();
	            break;
	        case 137:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 816;
	            this.blankNodePropertyList();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blankNodePropertyList() {
	    let localctx = new BlankNodePropertyListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, SPARQLParser.RULE_blankNodePropertyList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 819;
	        this.match(SPARQLParser.OPEN_SQUARE_BRACKET);
	        this.state = 820;
	        this.propertyListNotEmpty();
	        this.state = 821;
	        this.match(SPARQLParser.CLOSE_SQUARE_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	triplesNodePath() {
	    let localctx = new TriplesNodePathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, SPARQLParser.RULE_triplesNodePath);
	    try {
	        this.state = 825;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 133:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 823;
	            this.collectionPath();
	            break;
	        case 137:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 824;
	            this.blankNodePropertyListPath();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blankNodePropertyListPath() {
	    let localctx = new BlankNodePropertyListPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, SPARQLParser.RULE_blankNodePropertyListPath);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 827;
	        this.match(SPARQLParser.OPEN_SQUARE_BRACKET);
	        this.state = 828;
	        this.propertyListPathNotEmpty();
	        this.state = 829;
	        this.match(SPARQLParser.CLOSE_SQUARE_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	collection() {
	    let localctx = new CollectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, SPARQLParser.RULE_collection);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 831;
	        this.match(SPARQLParser.OPEN_BRACE);
	        this.state = 833; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 832;
	            this.graphNode();
	            this.state = 835; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===37 || _la===38 || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 269483967) !== 0) || _la===137);
	        this.state = 837;
	        this.match(SPARQLParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	collectionPath() {
	    let localctx = new CollectionPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, SPARQLParser.RULE_collectionPath);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 839;
	        this.match(SPARQLParser.OPEN_BRACE);
	        this.state = 841; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 840;
	            this.graphNodePath();
	            this.state = 843; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===37 || _la===38 || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 269483967) !== 0) || _la===137);
	        this.state = 845;
	        this.match(SPARQLParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphNode() {
	    let localctx = new GraphNodeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, SPARQLParser.RULE_graphNode);
	    try {
	        this.state = 849;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,90,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 847;
	            this.varOrTerm();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 848;
	            this.triplesNode();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphNodePath() {
	    let localctx = new GraphNodePathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, SPARQLParser.RULE_graphNodePath);
	    try {
	        this.state = 853;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 851;
	            this.varOrTerm();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 852;
	            this.triplesNodePath();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varOrTerm() {
	    let localctx = new VarOrTermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, SPARQLParser.RULE_varOrTerm);
	    try {
	        this.state = 857;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 109:
	        case 110:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 855;
	            this.var_();
	            break;
	        case 37:
	        case 38:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 133:
	        case 137:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 856;
	            this.graphTerm();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varOrIRI() {
	    let localctx = new VarOrIRIContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, SPARQLParser.RULE_varOrIRI);
	    try {
	        this.state = 861;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 109:
	        case 110:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 859;
	            this.var_();
	            break;
	        case 105:
	        case 106:
	        case 107:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 860;
	            this.iri();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	var_() {
	    let localctx = new VarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, SPARQLParser.RULE_var);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 863;
	        _la = this._input.LA(1);
	        if(!(_la===109 || _la===110)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphTerm() {
	    let localctx = new GraphTermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, SPARQLParser.RULE_graphTerm);
	    try {
	        this.state = 871;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 105:
	        case 106:
	        case 107:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 865;
	            this.iri();
	            break;
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 866;
	            this.rdfLiteral();
	            break;
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 867;
	            this.numericLiteral();
	            break;
	        case 37:
	        case 38:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 868;
	            this.booleanLiteral();
	            break;
	        case 108:
	        case 137:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 869;
	            this.blankNode();
	            break;
	        case 133:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 870;
	            this.nil();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nil() {
	    let localctx = new NilContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, SPARQLParser.RULE_nil);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 873;
	        this.match(SPARQLParser.OPEN_BRACE);
	        this.state = 874;
	        this.match(SPARQLParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, SPARQLParser.RULE_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 876;
	        this.conditionalOrExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionalOrExpression() {
	    let localctx = new ConditionalOrExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, SPARQLParser.RULE_conditionalOrExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 878;
	        this.conditionalAndExpression();
	        this.state = 883;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===131) {
	            this.state = 879;
	            this.match(SPARQLParser.OR);
	            this.state = 880;
	            this.conditionalAndExpression();
	            this.state = 885;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionalAndExpression() {
	    let localctx = new ConditionalAndExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, SPARQLParser.RULE_conditionalAndExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 886;
	        this.relationalExpression();
	        this.state = 891;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===130) {
	            this.state = 887;
	            this.match(SPARQLParser.AND);
	            this.state = 888;
	            this.relationalExpression();
	            this.state = 893;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationalExpression() {
	    let localctx = new RelationalExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, SPARQLParser.RULE_relationalExpression);
	    var _la = 0;
	    try {
	        this.state = 910;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,100,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 894;
	            this.additiveExpression();
	            this.state = 897;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 127)) & ~0x1f) === 0 && ((1 << (_la - 127)) & 14680071) !== 0)) {
	                this.state = 895;
	                localctx.op = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(((((_la - 127)) & ~0x1f) === 0 && ((1 << (_la - 127)) & 14680071) !== 0))) {
	                    localctx.op = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 896;
	                this.additiveExpression();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 899;
	            this.additiveExpression();
	            this.state = 901;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===96) {
	                this.state = 900;
	                this.match(SPARQLParser.NOT);
	            }

	            this.state = 903;
	            this.match(SPARQLParser.IN);
	            this.state = 904;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 906;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 25)) & ~0x1f) === 0 && ((1 << (_la - 25)) & 4278206463) !== 0) || ((((_la - 57)) & ~0x1f) === 0 && ((1 << (_la - 57)) & 4294967295) !== 0) || ((((_la - 89)) & ~0x1f) === 0 && ((1 << (_la - 89)) & 4290183935) !== 0) || ((((_la - 121)) & ~0x1f) === 0 && ((1 << (_la - 121)) & 36704271) !== 0)) {
	                this.state = 905;
	                this.expressionList();
	            }

	            this.state = 908;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	additiveExpression() {
	    let localctx = new AdditiveExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, SPARQLParser.RULE_additiveExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 912;
	        this.multiplicativeExpression();
	        this.state = 916;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 115)) & ~0x1f) === 0 && ((1 << (_la - 115)) & 201326655) !== 0)) {
	            this.state = 913;
	            this.rhsAdditiveExpression();
	            this.state = 918;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rhsAdditiveExpression() {
	    let localctx = new RhsAdditiveExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, SPARQLParser.RULE_rhsAdditiveExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 919;
	        this.rhsAdditiveExpressionSub();
	        this.state = 924;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===143 || _la===147) {
	            this.state = 920;
	            localctx._tset1701 = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===143 || _la===147)) {
	                localctx._tset1701 = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            localctx.op.push(localctx._tset1701);
	            this.state = 921;
	            this.unaryExpression();
	            this.state = 926;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rhsAdditiveExpressionSub() {
	    let localctx = new RhsAdditiveExpressionSubContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, SPARQLParser.RULE_rhsAdditiveExpressionSub);
	    var _la = 0;
	    try {
	        this.state = 931;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 141:
	        case 142:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 927;
	            _la = this._input.LA(1);
	            if(!(_la===141 || _la===142)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 928;
	            this.multiplicativeExpression();
	            break;
	        case 115:
	        case 116:
	        case 117:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 929;
	            this.numericLiteralPositive();
	            break;
	        case 118:
	        case 119:
	        case 120:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 930;
	            this.numericLiteralNegative();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiplicativeExpression() {
	    let localctx = new MultiplicativeExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, SPARQLParser.RULE_multiplicativeExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 933;
	        this.unaryExpression();
	        this.state = 938;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,104,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 934;
	                localctx._tset1744 = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===143 || _la===147)) {
	                    localctx._tset1744 = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                localctx.op.push(localctx._tset1744);
	                this.state = 935;
	                this.unaryExpression(); 
	            }
	            this.state = 940;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,104,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryExpression() {
	    let localctx = new UnaryExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, SPARQLParser.RULE_unaryExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 942;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 141)) & ~0x1f) === 0 && ((1 << (_la - 141)) & 35) !== 0)) {
	            this.state = 941;
	            localctx.op = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 141)) & ~0x1f) === 0 && ((1 << (_la - 141)) & 35) !== 0))) {
	                localctx.op = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 944;
	        this.primaryExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primaryExpression() {
	    let localctx = new PrimaryExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, SPARQLParser.RULE_primaryExpression);
	    try {
	        this.state = 956;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 133:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 946;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 947;
	            this.expression();
	            this.state = 948;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 25:
	        case 26:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 98:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 950;
	            this.builtInCall();
	            break;
	        case 105:
	        case 106:
	        case 107:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 951;
	            this.iriOrFunction();
	            break;
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 952;
	            this.rdfLiteral();
	            break;
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 953;
	            this.numericLiteral();
	            break;
	        case 37:
	        case 38:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 954;
	            this.booleanLiteral();
	            break;
	        case 109:
	        case 110:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 955;
	            this.var_();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	builtInCall() {
	    let localctx = new BuiltInCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, SPARQLParser.RULE_builtInCall);
	    var _la = 0;
	    try {
	        this.state = 1226;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 958;
	            this.aggregate();
	            break;
	        case 25:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 959;
	            this.match(SPARQLParser.STR);
	            this.state = 960;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 961;
	            this.expression();
	            this.state = 962;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 26:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 964;
	            this.match(SPARQLParser.LANG);
	            this.state = 965;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 966;
	            this.expression();
	            this.state = 967;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 27:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 969;
	            this.match(SPARQLParser.LANGMATCHES);
	            this.state = 970;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 971;
	            this.expression();
	            this.state = 972;
	            this.match(SPARQLParser.COMMA);
	            this.state = 973;
	            this.expression();
	            this.state = 974;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 28:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 976;
	            this.match(SPARQLParser.DATATYPE);
	            this.state = 977;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 978;
	            this.expression();
	            this.state = 979;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 29:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 981;
	            this.match(SPARQLParser.BOUND);
	            this.state = 982;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 983;
	            this.var_();
	            this.state = 984;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 49:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 986;
	            this.match(SPARQLParser.IRI);
	            this.state = 987;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 988;
	            this.expression();
	            this.state = 989;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 50:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 991;
	            this.match(SPARQLParser.URI);
	            this.state = 992;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 993;
	            this.expression();
	            this.state = 994;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 51:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 996;
	            this.match(SPARQLParser.BNODE);
	            this.state = 997;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 999;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 25)) & ~0x1f) === 0 && ((1 << (_la - 25)) & 4278206463) !== 0) || ((((_la - 57)) & ~0x1f) === 0 && ((1 << (_la - 57)) & 4294967295) !== 0) || ((((_la - 89)) & ~0x1f) === 0 && ((1 << (_la - 89)) & 4290183935) !== 0) || ((((_la - 121)) & ~0x1f) === 0 && ((1 << (_la - 121)) & 36704271) !== 0)) {
	                this.state = 998;
	                this.expression();
	            }

	            this.state = 1001;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 52:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1002;
	            this.match(SPARQLParser.RAND);
	            this.state = 1003;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1004;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 53:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1005;
	            this.match(SPARQLParser.ABS);
	            this.state = 1006;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1007;
	            this.expression();
	            this.state = 1008;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 54:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1010;
	            this.match(SPARQLParser.CEIL);
	            this.state = 1011;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1012;
	            this.expression();
	            this.state = 1013;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 55:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1015;
	            this.match(SPARQLParser.FLOOR);
	            this.state = 1016;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1017;
	            this.expression();
	            this.state = 1018;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 56:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1020;
	            this.match(SPARQLParser.ROUND);
	            this.state = 1021;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1022;
	            this.expression();
	            this.state = 1023;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 57:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1025;
	            this.match(SPARQLParser.CONCAT);
	            this.state = 1026;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1028;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 25)) & ~0x1f) === 0 && ((1 << (_la - 25)) & 4278206463) !== 0) || ((((_la - 57)) & ~0x1f) === 0 && ((1 << (_la - 57)) & 4294967295) !== 0) || ((((_la - 89)) & ~0x1f) === 0 && ((1 << (_la - 89)) & 4290183935) !== 0) || ((((_la - 121)) & ~0x1f) === 0 && ((1 << (_la - 121)) & 36704271) !== 0)) {
	                this.state = 1027;
	                this.expressionList();
	            }

	            this.state = 1030;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 36:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 1031;
	            this.subStringExpression();
	            break;
	        case 58:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 1032;
	            this.match(SPARQLParser.STRLEN);
	            this.state = 1033;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1034;
	            this.expression();
	            this.state = 1035;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 67:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 1037;
	            this.strReplaceExpression();
	            break;
	        case 59:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 1038;
	            this.match(SPARQLParser.UCASE);
	            this.state = 1039;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1040;
	            this.expression();
	            this.state = 1041;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 60:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 1043;
	            this.match(SPARQLParser.LCASE);
	            this.state = 1044;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1045;
	            this.expression();
	            this.state = 1046;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 61:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 1048;
	            this.match(SPARQLParser.ENCODE_FOR_URI);
	            this.state = 1049;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1050;
	            this.expression();
	            this.state = 1051;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 62:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 1053;
	            this.match(SPARQLParser.CONTAINS);
	            this.state = 1054;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1055;
	            this.expression();
	            this.state = 1056;
	            this.match(SPARQLParser.COMMA);
	            this.state = 1057;
	            this.expression();
	            this.state = 1058;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 63:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 1060;
	            this.match(SPARQLParser.STRSTARTS);
	            this.state = 1061;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1062;
	            this.expression();
	            this.state = 1063;
	            this.match(SPARQLParser.COMMA);
	            this.state = 1064;
	            this.expression();
	            this.state = 1065;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 64:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 1067;
	            this.match(SPARQLParser.STRENDS);
	            this.state = 1068;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1069;
	            this.expression();
	            this.state = 1070;
	            this.match(SPARQLParser.COMMA);
	            this.state = 1071;
	            this.expression();
	            this.state = 1072;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 65:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 1074;
	            this.match(SPARQLParser.STRBEFORE);
	            this.state = 1075;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1076;
	            this.expression();
	            this.state = 1077;
	            this.match(SPARQLParser.COMMA);
	            this.state = 1078;
	            this.expression();
	            this.state = 1079;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 66:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 1081;
	            this.match(SPARQLParser.STRAFTER);
	            this.state = 1082;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1083;
	            this.expression();
	            this.state = 1084;
	            this.match(SPARQLParser.COMMA);
	            this.state = 1085;
	            this.expression();
	            this.state = 1086;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 68:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 1088;
	            this.match(SPARQLParser.YEAR);
	            this.state = 1089;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1090;
	            this.expression();
	            this.state = 1091;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 69:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 1093;
	            this.match(SPARQLParser.MONTH);
	            this.state = 1094;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1095;
	            this.expression();
	            this.state = 1096;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 70:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 1098;
	            this.match(SPARQLParser.DAY);
	            this.state = 1099;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1100;
	            this.expression();
	            this.state = 1101;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 71:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 1103;
	            this.match(SPARQLParser.HOURS);
	            this.state = 1104;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1105;
	            this.expression();
	            this.state = 1106;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 72:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 1108;
	            this.match(SPARQLParser.MINUTES);
	            this.state = 1109;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1110;
	            this.expression();
	            this.state = 1111;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 73:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 1113;
	            this.match(SPARQLParser.SECONDS);
	            this.state = 1114;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1115;
	            this.expression();
	            this.state = 1116;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 74:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 1118;
	            this.match(SPARQLParser.TIMEZONE);
	            this.state = 1119;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1120;
	            this.expression();
	            this.state = 1121;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 75:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 1123;
	            this.match(SPARQLParser.TZ);
	            this.state = 1124;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1125;
	            this.expression();
	            this.state = 1126;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 76:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 1128;
	            this.match(SPARQLParser.NOW);
	            this.state = 1129;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1130;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 77:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 1131;
	            this.match(SPARQLParser.UUID);
	            this.state = 1132;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1133;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 78:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 1134;
	            this.match(SPARQLParser.STRUUID);
	            this.state = 1135;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1136;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 79:
	            this.enterOuterAlt(localctx, 38);
	            this.state = 1137;
	            this.match(SPARQLParser.MD5);
	            this.state = 1138;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1139;
	            this.expression();
	            this.state = 1140;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 80:
	            this.enterOuterAlt(localctx, 39);
	            this.state = 1142;
	            this.match(SPARQLParser.SHA1);
	            this.state = 1143;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1144;
	            this.expression();
	            this.state = 1145;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 81:
	            this.enterOuterAlt(localctx, 40);
	            this.state = 1147;
	            this.match(SPARQLParser.SHA256);
	            this.state = 1148;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1149;
	            this.expression();
	            this.state = 1150;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 82:
	            this.enterOuterAlt(localctx, 41);
	            this.state = 1152;
	            this.match(SPARQLParser.SHA384);
	            this.state = 1153;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1154;
	            this.expression();
	            this.state = 1155;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 83:
	            this.enterOuterAlt(localctx, 42);
	            this.state = 1157;
	            this.match(SPARQLParser.SHA512);
	            this.state = 1158;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1159;
	            this.expression();
	            this.state = 1160;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 84:
	            this.enterOuterAlt(localctx, 43);
	            this.state = 1162;
	            this.match(SPARQLParser.COALESCE);
	            this.state = 1163;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1165;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 25)) & ~0x1f) === 0 && ((1 << (_la - 25)) & 4278206463) !== 0) || ((((_la - 57)) & ~0x1f) === 0 && ((1 << (_la - 57)) & 4294967295) !== 0) || ((((_la - 89)) & ~0x1f) === 0 && ((1 << (_la - 89)) & 4290183935) !== 0) || ((((_la - 121)) & ~0x1f) === 0 && ((1 << (_la - 121)) & 36704271) !== 0)) {
	                this.state = 1164;
	                this.expressionList();
	            }

	            this.state = 1167;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 85:
	            this.enterOuterAlt(localctx, 44);
	            this.state = 1168;
	            this.match(SPARQLParser.IF);
	            this.state = 1169;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1170;
	            this.expression();
	            this.state = 1171;
	            this.match(SPARQLParser.COMMA);
	            this.state = 1172;
	            this.expression();
	            this.state = 1173;
	            this.match(SPARQLParser.COMMA);
	            this.state = 1174;
	            this.expression();
	            this.state = 1175;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 86:
	            this.enterOuterAlt(localctx, 45);
	            this.state = 1177;
	            this.match(SPARQLParser.STRLANG);
	            this.state = 1178;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1179;
	            this.expression();
	            this.state = 1180;
	            this.match(SPARQLParser.COMMA);
	            this.state = 1181;
	            this.expression();
	            this.state = 1182;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 87:
	            this.enterOuterAlt(localctx, 46);
	            this.state = 1184;
	            this.match(SPARQLParser.STRDT);
	            this.state = 1185;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1186;
	            this.expression();
	            this.state = 1187;
	            this.match(SPARQLParser.COMMA);
	            this.state = 1188;
	            this.expression();
	            this.state = 1189;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 30:
	            this.enterOuterAlt(localctx, 47);
	            this.state = 1191;
	            this.match(SPARQLParser.SAMETERM);
	            this.state = 1192;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1193;
	            this.expression();
	            this.state = 1194;
	            this.match(SPARQLParser.COMMA);
	            this.state = 1195;
	            this.expression();
	            this.state = 1196;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 31:
	            this.enterOuterAlt(localctx, 48);
	            this.state = 1198;
	            this.match(SPARQLParser.ISIRI);
	            this.state = 1199;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1200;
	            this.expression();
	            this.state = 1201;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 32:
	            this.enterOuterAlt(localctx, 49);
	            this.state = 1203;
	            this.match(SPARQLParser.ISURI);
	            this.state = 1204;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1205;
	            this.expression();
	            this.state = 1206;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 33:
	            this.enterOuterAlt(localctx, 50);
	            this.state = 1208;
	            this.match(SPARQLParser.ISBLANK);
	            this.state = 1209;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1210;
	            this.expression();
	            this.state = 1211;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 34:
	            this.enterOuterAlt(localctx, 51);
	            this.state = 1213;
	            this.match(SPARQLParser.ISLITERAL);
	            this.state = 1214;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1215;
	            this.expression();
	            this.state = 1216;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 88:
	            this.enterOuterAlt(localctx, 52);
	            this.state = 1218;
	            this.match(SPARQLParser.ISNUMERIC);
	            this.state = 1219;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1220;
	            this.expression();
	            this.state = 1221;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 35:
	            this.enterOuterAlt(localctx, 53);
	            this.state = 1223;
	            this.regexExpression();
	            break;
	        case 98:
	            this.enterOuterAlt(localctx, 54);
	            this.state = 1224;
	            this.existsFunction();
	            break;
	        case 96:
	            this.enterOuterAlt(localctx, 55);
	            this.state = 1225;
	            this.notExistsFunction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	regexExpression() {
	    let localctx = new RegexExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, SPARQLParser.RULE_regexExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1228;
	        this.match(SPARQLParser.REGEX);
	        this.state = 1229;
	        this.match(SPARQLParser.OPEN_BRACE);
	        this.state = 1230;
	        this.expression();
	        this.state = 1231;
	        this.match(SPARQLParser.COMMA);
	        this.state = 1232;
	        this.expression();
	        this.state = 1235;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===145) {
	            this.state = 1233;
	            this.match(SPARQLParser.COMMA);
	            this.state = 1234;
	            this.expression();
	        }

	        this.state = 1237;
	        this.match(SPARQLParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subStringExpression() {
	    let localctx = new SubStringExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, SPARQLParser.RULE_subStringExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1239;
	        this.match(SPARQLParser.SUBSTR);
	        this.state = 1240;
	        this.match(SPARQLParser.OPEN_BRACE);
	        this.state = 1241;
	        this.expression();
	        this.state = 1242;
	        this.match(SPARQLParser.COMMA);
	        this.state = 1243;
	        this.expression();
	        this.state = 1246;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===145) {
	            this.state = 1244;
	            this.match(SPARQLParser.COMMA);
	            this.state = 1245;
	            this.expression();
	        }

	        this.state = 1248;
	        this.match(SPARQLParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	strReplaceExpression() {
	    let localctx = new StrReplaceExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, SPARQLParser.RULE_strReplaceExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1250;
	        this.match(SPARQLParser.REPLACE);
	        this.state = 1251;
	        this.match(SPARQLParser.OPEN_BRACE);
	        this.state = 1252;
	        this.expression();
	        this.state = 1253;
	        this.match(SPARQLParser.COMMA);
	        this.state = 1254;
	        this.expression();
	        this.state = 1255;
	        this.match(SPARQLParser.COMMA);
	        this.state = 1256;
	        this.expression();
	        this.state = 1259;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===145) {
	            this.state = 1257;
	            this.match(SPARQLParser.COMMA);
	            this.state = 1258;
	            this.expression();
	        }

	        this.state = 1261;
	        this.match(SPARQLParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	existsFunction() {
	    let localctx = new ExistsFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, SPARQLParser.RULE_existsFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1263;
	        this.match(SPARQLParser.EXISTS);
	        this.state = 1264;
	        this.groupGraphPattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	notExistsFunction() {
	    let localctx = new NotExistsFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, SPARQLParser.RULE_notExistsFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1266;
	        this.match(SPARQLParser.NOT);
	        this.state = 1267;
	        this.match(SPARQLParser.EXISTS);
	        this.state = 1268;
	        this.groupGraphPattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aggregate() {
	    let localctx = new AggregateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, SPARQLParser.RULE_aggregate);
	    var _la = 0;
	    try {
	        this.state = 1334;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 89:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1270;
	            this.match(SPARQLParser.COUNT);
	            this.state = 1271;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1273;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5) {
	                this.state = 1272;
	                this.match(SPARQLParser.DISTINCT);
	            }

	            this.state = 1277;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 143:
	                this.state = 1275;
	                this.match(SPARQLParser.ASTERISK);
	                break;
	            case 25:
	            case 26:
	            case 27:
	            case 28:
	            case 29:
	            case 30:
	            case 31:
	            case 32:
	            case 33:
	            case 34:
	            case 35:
	            case 36:
	            case 37:
	            case 38:
	            case 49:
	            case 50:
	            case 51:
	            case 52:
	            case 53:
	            case 54:
	            case 55:
	            case 56:
	            case 57:
	            case 58:
	            case 59:
	            case 60:
	            case 61:
	            case 62:
	            case 63:
	            case 64:
	            case 65:
	            case 66:
	            case 67:
	            case 68:
	            case 69:
	            case 70:
	            case 71:
	            case 72:
	            case 73:
	            case 74:
	            case 75:
	            case 76:
	            case 77:
	            case 78:
	            case 79:
	            case 80:
	            case 81:
	            case 82:
	            case 83:
	            case 84:
	            case 85:
	            case 86:
	            case 87:
	            case 88:
	            case 89:
	            case 90:
	            case 91:
	            case 92:
	            case 93:
	            case 94:
	            case 95:
	            case 96:
	            case 98:
	            case 105:
	            case 106:
	            case 107:
	            case 109:
	            case 110:
	            case 112:
	            case 113:
	            case 114:
	            case 115:
	            case 116:
	            case 117:
	            case 118:
	            case 119:
	            case 120:
	            case 121:
	            case 122:
	            case 123:
	            case 124:
	            case 133:
	            case 141:
	            case 142:
	            case 146:
	                this.state = 1276;
	                this.expression();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1279;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 90:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1280;
	            this.match(SPARQLParser.SUM);
	            this.state = 1281;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1283;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5) {
	                this.state = 1282;
	                this.match(SPARQLParser.DISTINCT);
	            }

	            this.state = 1285;
	            this.expression();
	            this.state = 1286;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 91:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1288;
	            this.match(SPARQLParser.MIN);
	            this.state = 1289;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1291;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5) {
	                this.state = 1290;
	                this.match(SPARQLParser.DISTINCT);
	            }

	            this.state = 1293;
	            this.expression();
	            this.state = 1294;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 92:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1296;
	            this.match(SPARQLParser.MAX);
	            this.state = 1297;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1299;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5) {
	                this.state = 1298;
	                this.match(SPARQLParser.DISTINCT);
	            }

	            this.state = 1301;
	            this.expression();
	            this.state = 1302;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 93:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1304;
	            this.match(SPARQLParser.AVG);
	            this.state = 1305;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1307;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5) {
	                this.state = 1306;
	                this.match(SPARQLParser.DISTINCT);
	            }

	            this.state = 1309;
	            this.expression();
	            this.state = 1310;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 94:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1312;
	            this.match(SPARQLParser.SAMPLE);
	            this.state = 1313;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1315;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5) {
	                this.state = 1314;
	                this.match(SPARQLParser.DISTINCT);
	            }

	            this.state = 1317;
	            this.expression();
	            this.state = 1318;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 95:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1320;
	            this.match(SPARQLParser.GROUP_CONCAT);
	            this.state = 1321;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1323;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5) {
	                this.state = 1322;
	                this.match(SPARQLParser.DISTINCT);
	            }

	            this.state = 1325;
	            this.expression();
	            this.state = 1330;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===139) {
	                this.state = 1326;
	                this.match(SPARQLParser.SEMICOLON);
	                this.state = 1327;
	                this.match(SPARQLParser.SEPARATOR);
	                this.state = 1328;
	                this.match(SPARQLParser.EQUAL);
	                this.state = 1329;
	                this.string();
	            }

	            this.state = 1332;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iriOrFunction() {
	    let localctx = new IriOrFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, SPARQLParser.RULE_iriOrFunction);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1336;
	        this.iri();
	        this.state = 1338;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===133) {
	            this.state = 1337;
	            this.argList();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rdfLiteral() {
	    let localctx = new RdfLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, SPARQLParser.RULE_rdfLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1340;
	        this.string();
	        this.state = 1344;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 111:
	        	this.state = 1341;
	        	this.match(SPARQLParser.LANGTAG);
	        	break;
	        case 126:
	        	this.state = 1342;
	        	this.match(SPARQLParser.REFERENCE);
	        	this.state = 1343;
	        	this.iri();
	        	break;
	        case 19:
	        case 20:
	        case 21:
	        case 23:
	        case 24:
	        case 37:
	        case 38:
	        case 40:
	        case 41:
	        case 44:
	        case 46:
	        case 47:
	        case 48:
	        case 96:
	        case 97:
	        case 100:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericLiteral() {
	    let localctx = new NumericLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, SPARQLParser.RULE_numericLiteral);
	    try {
	        this.state = 1349;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 112:
	        case 113:
	        case 114:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1346;
	            this.numericLiteralUnsigned();
	            break;
	        case 115:
	        case 116:
	        case 117:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1347;
	            this.numericLiteralPositive();
	            break;
	        case 118:
	        case 119:
	        case 120:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1348;
	            this.numericLiteralNegative();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericLiteralUnsigned() {
	    let localctx = new NumericLiteralUnsignedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, SPARQLParser.RULE_numericLiteralUnsigned);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1351;
	        _la = this._input.LA(1);
	        if(!(((((_la - 112)) & ~0x1f) === 0 && ((1 << (_la - 112)) & 7) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericLiteralPositive() {
	    let localctx = new NumericLiteralPositiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, SPARQLParser.RULE_numericLiteralPositive);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1353;
	        _la = this._input.LA(1);
	        if(!(((((_la - 115)) & ~0x1f) === 0 && ((1 << (_la - 115)) & 7) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericLiteralNegative() {
	    let localctx = new NumericLiteralNegativeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, SPARQLParser.RULE_numericLiteralNegative);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1355;
	        _la = this._input.LA(1);
	        if(!(((((_la - 118)) & ~0x1f) === 0 && ((1 << (_la - 118)) & 7) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanLiteral() {
	    let localctx = new BooleanLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, SPARQLParser.RULE_booleanLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1357;
	        _la = this._input.LA(1);
	        if(!(_la===37 || _la===38)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	string() {
	    let localctx = new StringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, SPARQLParser.RULE_string);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1359;
	        _la = this._input.LA(1);
	        if(!(((((_la - 121)) & ~0x1f) === 0 && ((1 << (_la - 121)) & 15) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iri() {
	    let localctx = new IriContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, SPARQLParser.RULE_iri);
	    try {
	        this.state = 1363;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 105:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1361;
	            this.match(SPARQLParser.IRIREF);
	            break;
	        case 106:
	        case 107:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1362;
	            this.prefixedName();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prefixedName() {
	    let localctx = new PrefixedNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, SPARQLParser.RULE_prefixedName);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1365;
	        _la = this._input.LA(1);
	        if(!(_la===106 || _la===107)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blankNode() {
	    let localctx = new BlankNodeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, SPARQLParser.RULE_blankNode);
	    try {
	        this.state = 1369;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 108:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1367;
	            this.match(SPARQLParser.BLANK_NODE_LABEL);
	            break;
	        case 137:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1368;
	            this.anon();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	anon() {
	    let localctx = new AnonContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, SPARQLParser.RULE_anon);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1371;
	        this.match(SPARQLParser.OPEN_SQUARE_BRACKET);
	        this.state = 1372;
	        this.match(SPARQLParser.CLOSE_SQUARE_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

SPARQLParser.EOF = antlr4.Token.EOF;
SPARQLParser.WS = 1;
SPARQLParser.BASE = 2;
SPARQLParser.PREFIX = 3;
SPARQLParser.SELECT = 4;
SPARQLParser.DISTINCT = 5;
SPARQLParser.REDUCED = 6;
SPARQLParser.CONSTRUCT = 7;
SPARQLParser.DESCRIBE = 8;
SPARQLParser.ASK = 9;
SPARQLParser.FROM = 10;
SPARQLParser.NAMED = 11;
SPARQLParser.WHERE = 12;
SPARQLParser.ORDER = 13;
SPARQLParser.BY = 14;
SPARQLParser.ASC = 15;
SPARQLParser.DESC = 16;
SPARQLParser.LIMIT = 17;
SPARQLParser.OFFSET = 18;
SPARQLParser.VALUES = 19;
SPARQLParser.OPTIONAL = 20;
SPARQLParser.GRAPH = 21;
SPARQLParser.UNION = 22;
SPARQLParser.FILTER = 23;
SPARQLParser.A = 24;
SPARQLParser.STR = 25;
SPARQLParser.LANG = 26;
SPARQLParser.LANGMATCHES = 27;
SPARQLParser.DATATYPE = 28;
SPARQLParser.BOUND = 29;
SPARQLParser.SAMETERM = 30;
SPARQLParser.ISIRI = 31;
SPARQLParser.ISURI = 32;
SPARQLParser.ISBLANK = 33;
SPARQLParser.ISLITERAL = 34;
SPARQLParser.REGEX = 35;
SPARQLParser.SUBSTR = 36;
SPARQLParser.TRUE = 37;
SPARQLParser.FALSE = 38;
SPARQLParser.SILENT = 39;
SPARQLParser.ALL = 40;
SPARQLParser.AS = 41;
SPARQLParser.GROUP = 42;
SPARQLParser.HAVING = 43;
SPARQLParser.UNDEF = 44;
SPARQLParser.BINDINGS = 45;
SPARQLParser.SERVICE = 46;
SPARQLParser.BIND = 47;
SPARQLParser.MINUS = 48;
SPARQLParser.IRI = 49;
SPARQLParser.URI = 50;
SPARQLParser.BNODE = 51;
SPARQLParser.RAND = 52;
SPARQLParser.ABS = 53;
SPARQLParser.CEIL = 54;
SPARQLParser.FLOOR = 55;
SPARQLParser.ROUND = 56;
SPARQLParser.CONCAT = 57;
SPARQLParser.STRLEN = 58;
SPARQLParser.UCASE = 59;
SPARQLParser.LCASE = 60;
SPARQLParser.ENCODE_FOR_URI = 61;
SPARQLParser.CONTAINS = 62;
SPARQLParser.STRSTARTS = 63;
SPARQLParser.STRENDS = 64;
SPARQLParser.STRBEFORE = 65;
SPARQLParser.STRAFTER = 66;
SPARQLParser.REPLACE = 67;
SPARQLParser.YEAR = 68;
SPARQLParser.MONTH = 69;
SPARQLParser.DAY = 70;
SPARQLParser.HOURS = 71;
SPARQLParser.MINUTES = 72;
SPARQLParser.SECONDS = 73;
SPARQLParser.TIMEZONE = 74;
SPARQLParser.TZ = 75;
SPARQLParser.NOW = 76;
SPARQLParser.UUID = 77;
SPARQLParser.STRUUID = 78;
SPARQLParser.MD5 = 79;
SPARQLParser.SHA1 = 80;
SPARQLParser.SHA256 = 81;
SPARQLParser.SHA384 = 82;
SPARQLParser.SHA512 = 83;
SPARQLParser.COALESCE = 84;
SPARQLParser.IF = 85;
SPARQLParser.STRLANG = 86;
SPARQLParser.STRDT = 87;
SPARQLParser.ISNUMERIC = 88;
SPARQLParser.COUNT = 89;
SPARQLParser.SUM = 90;
SPARQLParser.MIN = 91;
SPARQLParser.MAX = 92;
SPARQLParser.AVG = 93;
SPARQLParser.SAMPLE = 94;
SPARQLParser.GROUP_CONCAT = 95;
SPARQLParser.NOT = 96;
SPARQLParser.IN = 97;
SPARQLParser.EXISTS = 98;
SPARQLParser.SEPARATOR = 99;
SPARQLParser.ANY = 100;
SPARQLParser.SHORTEST = 101;
SPARQLParser.SIMPLE = 102;
SPARQLParser.ACYCLIC = 103;
SPARQLParser.WALKS = 104;
SPARQLParser.IRIREF = 105;
SPARQLParser.PNAME_NS = 106;
SPARQLParser.PNAME_LN = 107;
SPARQLParser.BLANK_NODE_LABEL = 108;
SPARQLParser.VAR1 = 109;
SPARQLParser.VAR2 = 110;
SPARQLParser.LANGTAG = 111;
SPARQLParser.INTEGER = 112;
SPARQLParser.DECIMAL = 113;
SPARQLParser.DOUBLE = 114;
SPARQLParser.INTEGER_POSITIVE = 115;
SPARQLParser.DECIMAL_POSITIVE = 116;
SPARQLParser.DOUBLE_POSITIVE = 117;
SPARQLParser.INTEGER_NEGATIVE = 118;
SPARQLParser.DECIMAL_NEGATIVE = 119;
SPARQLParser.DOUBLE_NEGATIVE = 120;
SPARQLParser.STRING_LITERAL1 = 121;
SPARQLParser.STRING_LITERAL2 = 122;
SPARQLParser.STRING_LITERAL_LONG1 = 123;
SPARQLParser.STRING_LITERAL_LONG2 = 124;
SPARQLParser.COMMENT = 125;
SPARQLParser.REFERENCE = 126;
SPARQLParser.LESS_EQUAL = 127;
SPARQLParser.GREATER_EQUAL = 128;
SPARQLParser.NOT_EQUAL = 129;
SPARQLParser.AND = 130;
SPARQLParser.OR = 131;
SPARQLParser.INVERSE = 132;
SPARQLParser.OPEN_BRACE = 133;
SPARQLParser.CLOSE_BRACE = 134;
SPARQLParser.OPEN_CURLY_BRACE = 135;
SPARQLParser.CLOSE_CURLY_BRACE = 136;
SPARQLParser.OPEN_SQUARE_BRACKET = 137;
SPARQLParser.CLOSE_SQUARE_BRACKET = 138;
SPARQLParser.SEMICOLON = 139;
SPARQLParser.DOT = 140;
SPARQLParser.PLUS_SIGN = 141;
SPARQLParser.MINUS_SIGN = 142;
SPARQLParser.ASTERISK = 143;
SPARQLParser.QUESTION_MARK = 144;
SPARQLParser.COMMA = 145;
SPARQLParser.NEGATION = 146;
SPARQLParser.DIVIDE = 147;
SPARQLParser.EQUAL = 148;
SPARQLParser.LESS = 149;
SPARQLParser.GREATER = 150;
SPARQLParser.PIPE = 151;
SPARQLParser.ANY_OTHER = 152;

SPARQLParser.RULE_query = 0;
SPARQLParser.RULE_prologue = 1;
SPARQLParser.RULE_baseDecl = 2;
SPARQLParser.RULE_prefixDecl = 3;
SPARQLParser.RULE_selectQuery = 4;
SPARQLParser.RULE_subSelect = 5;
SPARQLParser.RULE_selectClause = 6;
SPARQLParser.RULE_selectModifier = 7;
SPARQLParser.RULE_selectVariables = 8;
SPARQLParser.RULE_constructQuery = 9;
SPARQLParser.RULE_describeQuery = 10;
SPARQLParser.RULE_askQuery = 11;
SPARQLParser.RULE_datasetClause = 12;
SPARQLParser.RULE_whereClause = 13;
SPARQLParser.RULE_solutionModifier = 14;
SPARQLParser.RULE_groupClause = 15;
SPARQLParser.RULE_groupCondition = 16;
SPARQLParser.RULE_havingClause = 17;
SPARQLParser.RULE_havingCondition = 18;
SPARQLParser.RULE_orderClause = 19;
SPARQLParser.RULE_orderCondition = 20;
SPARQLParser.RULE_limitOffsetClauses = 21;
SPARQLParser.RULE_limitClause = 22;
SPARQLParser.RULE_offsetClause = 23;
SPARQLParser.RULE_valuesClause = 24;
SPARQLParser.RULE_triplesTemplate = 25;
SPARQLParser.RULE_groupGraphPattern = 26;
SPARQLParser.RULE_groupGraphPatternSub = 27;
SPARQLParser.RULE_groupGraphPatternSubList = 28;
SPARQLParser.RULE_triplesBlock = 29;
SPARQLParser.RULE_graphPatternNotTriples = 30;
SPARQLParser.RULE_optionalGraphPattern = 31;
SPARQLParser.RULE_graphGraphPattern = 32;
SPARQLParser.RULE_serviceGraphPattern = 33;
SPARQLParser.RULE_bind = 34;
SPARQLParser.RULE_inlineData = 35;
SPARQLParser.RULE_dataBlock = 36;
SPARQLParser.RULE_inlineDataOneVar = 37;
SPARQLParser.RULE_inlineDataFull = 38;
SPARQLParser.RULE_dataBlockValues = 39;
SPARQLParser.RULE_dataBlockValue = 40;
SPARQLParser.RULE_minusGraphPattern = 41;
SPARQLParser.RULE_groupOrUnionGraphPattern = 42;
SPARQLParser.RULE_filter = 43;
SPARQLParser.RULE_constraint = 44;
SPARQLParser.RULE_functionCall = 45;
SPARQLParser.RULE_argList = 46;
SPARQLParser.RULE_expressionList = 47;
SPARQLParser.RULE_constructTemplate = 48;
SPARQLParser.RULE_constructTriples = 49;
SPARQLParser.RULE_triplesSameSubject = 50;
SPARQLParser.RULE_propertyList = 51;
SPARQLParser.RULE_propertyListNotEmpty = 52;
SPARQLParser.RULE_verb = 53;
SPARQLParser.RULE_objectList = 54;
SPARQLParser.RULE_object = 55;
SPARQLParser.RULE_triplesSameSubjectPath = 56;
SPARQLParser.RULE_propertyListPath = 57;
SPARQLParser.RULE_propertyListPathNotEmpty = 58;
SPARQLParser.RULE_propertyListPathNotEmptyList = 59;
SPARQLParser.RULE_verbPath = 60;
SPARQLParser.RULE_verbSimple = 61;
SPARQLParser.RULE_objectListPath = 62;
SPARQLParser.RULE_objectPath = 63;
SPARQLParser.RULE_path = 64;
SPARQLParser.RULE_pathAlternative = 65;
SPARQLParser.RULE_pathSequence = 66;
SPARQLParser.RULE_pathElt = 67;
SPARQLParser.RULE_pathEltOrInverse = 68;
SPARQLParser.RULE_pathMod = 69;
SPARQLParser.RULE_pathQuantity = 70;
SPARQLParser.RULE_pathQuantityExact = 71;
SPARQLParser.RULE_pathQuantityRange = 72;
SPARQLParser.RULE_pathQuantityMin = 73;
SPARQLParser.RULE_pathQuantityMax = 74;
SPARQLParser.RULE_pathPrimary = 75;
SPARQLParser.RULE_pathNegatedPropertySet = 76;
SPARQLParser.RULE_pathOneInPropertySet = 77;
SPARQLParser.RULE_integer = 78;
SPARQLParser.RULE_triplesNode = 79;
SPARQLParser.RULE_blankNodePropertyList = 80;
SPARQLParser.RULE_triplesNodePath = 81;
SPARQLParser.RULE_blankNodePropertyListPath = 82;
SPARQLParser.RULE_collection = 83;
SPARQLParser.RULE_collectionPath = 84;
SPARQLParser.RULE_graphNode = 85;
SPARQLParser.RULE_graphNodePath = 86;
SPARQLParser.RULE_varOrTerm = 87;
SPARQLParser.RULE_varOrIRI = 88;
SPARQLParser.RULE_var = 89;
SPARQLParser.RULE_graphTerm = 90;
SPARQLParser.RULE_nil = 91;
SPARQLParser.RULE_expression = 92;
SPARQLParser.RULE_conditionalOrExpression = 93;
SPARQLParser.RULE_conditionalAndExpression = 94;
SPARQLParser.RULE_relationalExpression = 95;
SPARQLParser.RULE_additiveExpression = 96;
SPARQLParser.RULE_rhsAdditiveExpression = 97;
SPARQLParser.RULE_rhsAdditiveExpressionSub = 98;
SPARQLParser.RULE_multiplicativeExpression = 99;
SPARQLParser.RULE_unaryExpression = 100;
SPARQLParser.RULE_primaryExpression = 101;
SPARQLParser.RULE_builtInCall = 102;
SPARQLParser.RULE_regexExpression = 103;
SPARQLParser.RULE_subStringExpression = 104;
SPARQLParser.RULE_strReplaceExpression = 105;
SPARQLParser.RULE_existsFunction = 106;
SPARQLParser.RULE_notExistsFunction = 107;
SPARQLParser.RULE_aggregate = 108;
SPARQLParser.RULE_iriOrFunction = 109;
SPARQLParser.RULE_rdfLiteral = 110;
SPARQLParser.RULE_numericLiteral = 111;
SPARQLParser.RULE_numericLiteralUnsigned = 112;
SPARQLParser.RULE_numericLiteralPositive = 113;
SPARQLParser.RULE_numericLiteralNegative = 114;
SPARQLParser.RULE_booleanLiteral = 115;
SPARQLParser.RULE_string = 116;
SPARQLParser.RULE_iri = 117;
SPARQLParser.RULE_prefixedName = 118;
SPARQLParser.RULE_blankNode = 119;
SPARQLParser.RULE_anon = 120;

class QueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_query;
    }

	prologue() {
	    return this.getTypedRuleContext(PrologueContext,0);
	};

	valuesClause() {
	    return this.getTypedRuleContext(ValuesClauseContext,0);
	};

	EOF() {
	    return this.getToken(SPARQLParser.EOF, 0);
	};

	selectQuery() {
	    return this.getTypedRuleContext(SelectQueryContext,0);
	};

	constructQuery() {
	    return this.getTypedRuleContext(ConstructQueryContext,0);
	};

	describeQuery() {
	    return this.getTypedRuleContext(DescribeQueryContext,0);
	};

	askQuery() {
	    return this.getTypedRuleContext(AskQueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitQuery(this);
		}
	}


}



class PrologueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_prologue;
    }

	baseDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BaseDeclContext);
	    } else {
	        return this.getTypedRuleContext(BaseDeclContext,i);
	    }
	};

	prefixDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrefixDeclContext);
	    } else {
	        return this.getTypedRuleContext(PrefixDeclContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterPrologue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitPrologue(this);
		}
	}


}



class BaseDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_baseDecl;
    }

	BASE() {
	    return this.getToken(SPARQLParser.BASE, 0);
	};

	IRIREF() {
	    return this.getToken(SPARQLParser.IRIREF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterBaseDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitBaseDecl(this);
		}
	}


}



class PrefixDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_prefixDecl;
    }

	PREFIX() {
	    return this.getToken(SPARQLParser.PREFIX, 0);
	};

	PNAME_NS() {
	    return this.getToken(SPARQLParser.PNAME_NS, 0);
	};

	IRIREF() {
	    return this.getToken(SPARQLParser.IRIREF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterPrefixDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitPrefixDecl(this);
		}
	}


}



class SelectQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_selectQuery;
    }

	selectClause() {
	    return this.getTypedRuleContext(SelectClauseContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	solutionModifier() {
	    return this.getTypedRuleContext(SolutionModifierContext,0);
	};

	datasetClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DatasetClauseContext);
	    } else {
	        return this.getTypedRuleContext(DatasetClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterSelectQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitSelectQuery(this);
		}
	}


}



class SubSelectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_subSelect;
    }

	selectClause() {
	    return this.getTypedRuleContext(SelectClauseContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	solutionModifier() {
	    return this.getTypedRuleContext(SolutionModifierContext,0);
	};

	valuesClause() {
	    return this.getTypedRuleContext(ValuesClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterSubSelect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitSubSelect(this);
		}
	}


}



class SelectClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_selectClause;
    }

	SELECT() {
	    return this.getToken(SPARQLParser.SELECT, 0);
	};

	ASTERISK() {
	    return this.getToken(SPARQLParser.ASTERISK, 0);
	};

	selectModifier() {
	    return this.getTypedRuleContext(SelectModifierContext,0);
	};

	selectVariables = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectVariablesContext);
	    } else {
	        return this.getTypedRuleContext(SelectVariablesContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterSelectClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitSelectClause(this);
		}
	}


}



class SelectModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_selectModifier;
    }

	DISTINCT() {
	    return this.getToken(SPARQLParser.DISTINCT, 0);
	};

	REDUCED() {
	    return this.getToken(SPARQLParser.REDUCED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterSelectModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitSelectModifier(this);
		}
	}


}



class SelectVariablesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_selectVariables;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SelectSingleVariableContext extends SelectVariablesContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	var_() {
	    return this.getTypedRuleContext(VarContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterSelectSingleVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitSelectSingleVariable(this);
		}
	}


}

SPARQLParser.SelectSingleVariableContext = SelectSingleVariableContext;

class SelectExpressionAsVariableContext extends SelectVariablesContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OPEN_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_BRACE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	AS() {
	    return this.getToken(SPARQLParser.AS, 0);
	};

	var_() {
	    return this.getTypedRuleContext(VarContext,0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterSelectExpressionAsVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitSelectExpressionAsVariable(this);
		}
	}


}

SPARQLParser.SelectExpressionAsVariableContext = SelectExpressionAsVariableContext;

class ConstructQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_constructQuery;
    }

	CONSTRUCT() {
	    return this.getToken(SPARQLParser.CONSTRUCT, 0);
	};

	constructTemplate() {
	    return this.getTypedRuleContext(ConstructTemplateContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	solutionModifier() {
	    return this.getTypedRuleContext(SolutionModifierContext,0);
	};

	WHERE() {
	    return this.getToken(SPARQLParser.WHERE, 0);
	};

	OPEN_CURLY_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_CURLY_BRACE, 0);
	};

	CLOSE_CURLY_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_CURLY_BRACE, 0);
	};

	datasetClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DatasetClauseContext);
	    } else {
	        return this.getTypedRuleContext(DatasetClauseContext,i);
	    }
	};

	triplesTemplate() {
	    return this.getTypedRuleContext(TriplesTemplateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterConstructQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitConstructQuery(this);
		}
	}


}



class DescribeQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_describeQuery;
    }

	DESCRIBE() {
	    return this.getToken(SPARQLParser.DESCRIBE, 0);
	};

	solutionModifier() {
	    return this.getTypedRuleContext(SolutionModifierContext,0);
	};

	ASTERISK() {
	    return this.getToken(SPARQLParser.ASTERISK, 0);
	};

	datasetClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DatasetClauseContext);
	    } else {
	        return this.getTypedRuleContext(DatasetClauseContext,i);
	    }
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	varOrIRI = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VarOrIRIContext);
	    } else {
	        return this.getTypedRuleContext(VarOrIRIContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterDescribeQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitDescribeQuery(this);
		}
	}


}



class AskQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_askQuery;
    }

	ASK() {
	    return this.getToken(SPARQLParser.ASK, 0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	solutionModifier() {
	    return this.getTypedRuleContext(SolutionModifierContext,0);
	};

	datasetClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DatasetClauseContext);
	    } else {
	        return this.getTypedRuleContext(DatasetClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterAskQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitAskQuery(this);
		}
	}


}



class DatasetClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_datasetClause;
    }

	FROM() {
	    return this.getToken(SPARQLParser.FROM, 0);
	};

	iri() {
	    return this.getTypedRuleContext(IriContext,0);
	};

	NAMED() {
	    return this.getToken(SPARQLParser.NAMED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterDatasetClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitDatasetClause(this);
		}
	}


}



class WhereClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_whereClause;
    }

	groupGraphPattern() {
	    return this.getTypedRuleContext(GroupGraphPatternContext,0);
	};

	WHERE() {
	    return this.getToken(SPARQLParser.WHERE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterWhereClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitWhereClause(this);
		}
	}


}



class SolutionModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_solutionModifier;
    }

	groupClause() {
	    return this.getTypedRuleContext(GroupClauseContext,0);
	};

	havingClause() {
	    return this.getTypedRuleContext(HavingClauseContext,0);
	};

	orderClause() {
	    return this.getTypedRuleContext(OrderClauseContext,0);
	};

	limitOffsetClauses() {
	    return this.getTypedRuleContext(LimitOffsetClausesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterSolutionModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitSolutionModifier(this);
		}
	}


}



class GroupClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_groupClause;
    }

	GROUP() {
	    return this.getToken(SPARQLParser.GROUP, 0);
	};

	BY() {
	    return this.getToken(SPARQLParser.BY, 0);
	};

	groupCondition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GroupConditionContext);
	    } else {
	        return this.getTypedRuleContext(GroupConditionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterGroupClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitGroupClause(this);
		}
	}


}



class GroupConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_groupCondition;
    }

	builtInCall() {
	    return this.getTypedRuleContext(BuiltInCallContext,0);
	};

	functionCall() {
	    return this.getTypedRuleContext(FunctionCallContext,0);
	};

	OPEN_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_BRACE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_BRACE, 0);
	};

	AS() {
	    return this.getToken(SPARQLParser.AS, 0);
	};

	var_() {
	    return this.getTypedRuleContext(VarContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterGroupCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitGroupCondition(this);
		}
	}


}



class HavingClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_havingClause;
    }

	HAVING() {
	    return this.getToken(SPARQLParser.HAVING, 0);
	};

	havingCondition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(HavingConditionContext);
	    } else {
	        return this.getTypedRuleContext(HavingConditionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterHavingClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitHavingClause(this);
		}
	}


}



class HavingConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_havingCondition;
    }

	constraint() {
	    return this.getTypedRuleContext(ConstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterHavingCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitHavingCondition(this);
		}
	}


}



class OrderClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_orderClause;
    }

	ORDER() {
	    return this.getToken(SPARQLParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(SPARQLParser.BY, 0);
	};

	orderCondition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OrderConditionContext);
	    } else {
	        return this.getTypedRuleContext(OrderConditionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterOrderClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitOrderClause(this);
		}
	}


}



class OrderConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_orderCondition;
    }

	OPEN_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_BRACE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_BRACE, 0);
	};

	ASC() {
	    return this.getToken(SPARQLParser.ASC, 0);
	};

	DESC() {
	    return this.getToken(SPARQLParser.DESC, 0);
	};

	constraint() {
	    return this.getTypedRuleContext(ConstraintContext,0);
	};

	var_() {
	    return this.getTypedRuleContext(VarContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterOrderCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitOrderCondition(this);
		}
	}


}



class LimitOffsetClausesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_limitOffsetClauses;
    }

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	offsetClause() {
	    return this.getTypedRuleContext(OffsetClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterLimitOffsetClauses(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitLimitOffsetClauses(this);
		}
	}


}



class LimitClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_limitClause;
    }

	LIMIT() {
	    return this.getToken(SPARQLParser.LIMIT, 0);
	};

	INTEGER() {
	    return this.getToken(SPARQLParser.INTEGER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterLimitClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitLimitClause(this);
		}
	}


}



class OffsetClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_offsetClause;
    }

	OFFSET() {
	    return this.getToken(SPARQLParser.OFFSET, 0);
	};

	INTEGER() {
	    return this.getToken(SPARQLParser.INTEGER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterOffsetClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitOffsetClause(this);
		}
	}


}



class ValuesClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_valuesClause;
    }

	VALUES() {
	    return this.getToken(SPARQLParser.VALUES, 0);
	};

	dataBlock() {
	    return this.getTypedRuleContext(DataBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterValuesClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitValuesClause(this);
		}
	}


}



class TriplesTemplateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_triplesTemplate;
    }

	triplesSameSubject = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TriplesSameSubjectContext);
	    } else {
	        return this.getTypedRuleContext(TriplesSameSubjectContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SPARQLParser.DOT);
	    } else {
	        return this.getToken(SPARQLParser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterTriplesTemplate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitTriplesTemplate(this);
		}
	}


}



class GroupGraphPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_groupGraphPattern;
    }

	OPEN_CURLY_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_CURLY_BRACE, 0);
	};

	CLOSE_CURLY_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_CURLY_BRACE, 0);
	};

	subSelect() {
	    return this.getTypedRuleContext(SubSelectContext,0);
	};

	groupGraphPatternSub() {
	    return this.getTypedRuleContext(GroupGraphPatternSubContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterGroupGraphPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitGroupGraphPattern(this);
		}
	}


}



class GroupGraphPatternSubContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_groupGraphPatternSub;
    }

	triplesBlock() {
	    return this.getTypedRuleContext(TriplesBlockContext,0);
	};

	groupGraphPatternSubList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GroupGraphPatternSubListContext);
	    } else {
	        return this.getTypedRuleContext(GroupGraphPatternSubListContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterGroupGraphPatternSub(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitGroupGraphPatternSub(this);
		}
	}


}



class GroupGraphPatternSubListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_groupGraphPatternSubList;
    }

	graphPatternNotTriples() {
	    return this.getTypedRuleContext(GraphPatternNotTriplesContext,0);
	};

	DOT() {
	    return this.getToken(SPARQLParser.DOT, 0);
	};

	triplesBlock() {
	    return this.getTypedRuleContext(TriplesBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterGroupGraphPatternSubList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitGroupGraphPatternSubList(this);
		}
	}


}



class TriplesBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_triplesBlock;
    }

	triplesSameSubjectPath = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TriplesSameSubjectPathContext);
	    } else {
	        return this.getTypedRuleContext(TriplesSameSubjectPathContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SPARQLParser.DOT);
	    } else {
	        return this.getToken(SPARQLParser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterTriplesBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitTriplesBlock(this);
		}
	}


}



class GraphPatternNotTriplesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_graphPatternNotTriples;
    }

	groupOrUnionGraphPattern() {
	    return this.getTypedRuleContext(GroupOrUnionGraphPatternContext,0);
	};

	optionalGraphPattern() {
	    return this.getTypedRuleContext(OptionalGraphPatternContext,0);
	};

	minusGraphPattern() {
	    return this.getTypedRuleContext(MinusGraphPatternContext,0);
	};

	graphGraphPattern() {
	    return this.getTypedRuleContext(GraphGraphPatternContext,0);
	};

	serviceGraphPattern() {
	    return this.getTypedRuleContext(ServiceGraphPatternContext,0);
	};

	filter() {
	    return this.getTypedRuleContext(FilterContext,0);
	};

	bind() {
	    return this.getTypedRuleContext(BindContext,0);
	};

	inlineData() {
	    return this.getTypedRuleContext(InlineDataContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterGraphPatternNotTriples(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitGraphPatternNotTriples(this);
		}
	}


}



class OptionalGraphPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_optionalGraphPattern;
    }

	OPTIONAL() {
	    return this.getToken(SPARQLParser.OPTIONAL, 0);
	};

	groupGraphPattern() {
	    return this.getTypedRuleContext(GroupGraphPatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterOptionalGraphPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitOptionalGraphPattern(this);
		}
	}


}



class GraphGraphPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_graphGraphPattern;
    }

	GRAPH() {
	    return this.getToken(SPARQLParser.GRAPH, 0);
	};

	varOrIRI() {
	    return this.getTypedRuleContext(VarOrIRIContext,0);
	};

	groupGraphPattern() {
	    return this.getTypedRuleContext(GroupGraphPatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterGraphGraphPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitGraphGraphPattern(this);
		}
	}


}



class ServiceGraphPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_serviceGraphPattern;
    }

	SERVICE() {
	    return this.getToken(SPARQLParser.SERVICE, 0);
	};

	varOrIRI() {
	    return this.getTypedRuleContext(VarOrIRIContext,0);
	};

	groupGraphPattern() {
	    return this.getTypedRuleContext(GroupGraphPatternContext,0);
	};

	SILENT() {
	    return this.getToken(SPARQLParser.SILENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterServiceGraphPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitServiceGraphPattern(this);
		}
	}


}



class BindContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_bind;
    }

	BIND() {
	    return this.getToken(SPARQLParser.BIND, 0);
	};

	OPEN_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_BRACE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	AS() {
	    return this.getToken(SPARQLParser.AS, 0);
	};

	var_() {
	    return this.getTypedRuleContext(VarContext,0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterBind(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitBind(this);
		}
	}


}



class InlineDataContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_inlineData;
    }

	VALUES() {
	    return this.getToken(SPARQLParser.VALUES, 0);
	};

	dataBlock() {
	    return this.getTypedRuleContext(DataBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterInlineData(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitInlineData(this);
		}
	}


}



class DataBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_dataBlock;
    }

	inlineDataOneVar() {
	    return this.getTypedRuleContext(InlineDataOneVarContext,0);
	};

	inlineDataFull() {
	    return this.getTypedRuleContext(InlineDataFullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterDataBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitDataBlock(this);
		}
	}


}



class InlineDataOneVarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_inlineDataOneVar;
    }

	var_() {
	    return this.getTypedRuleContext(VarContext,0);
	};

	OPEN_CURLY_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_CURLY_BRACE, 0);
	};

	CLOSE_CURLY_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_CURLY_BRACE, 0);
	};

	dataBlockValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataBlockValueContext);
	    } else {
	        return this.getTypedRuleContext(DataBlockValueContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterInlineDataOneVar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitInlineDataOneVar(this);
		}
	}


}



class InlineDataFullContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_inlineDataFull;
    }

	OPEN_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_BRACE, 0);
	};

	OPEN_CURLY_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_CURLY_BRACE, 0);
	};

	CLOSE_CURLY_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_CURLY_BRACE, 0);
	};

	var_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VarContext);
	    } else {
	        return this.getTypedRuleContext(VarContext,i);
	    }
	};

	dataBlockValues = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataBlockValuesContext);
	    } else {
	        return this.getTypedRuleContext(DataBlockValuesContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterInlineDataFull(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitInlineDataFull(this);
		}
	}


}



class DataBlockValuesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_dataBlockValues;
    }

	OPEN_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_BRACE, 0);
	};

	dataBlockValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataBlockValueContext);
	    } else {
	        return this.getTypedRuleContext(DataBlockValueContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterDataBlockValues(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitDataBlockValues(this);
		}
	}


}



class DataBlockValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_dataBlockValue;
    }

	iri() {
	    return this.getTypedRuleContext(IriContext,0);
	};

	rdfLiteral() {
	    return this.getTypedRuleContext(RdfLiteralContext,0);
	};

	numericLiteral() {
	    return this.getTypedRuleContext(NumericLiteralContext,0);
	};

	booleanLiteral() {
	    return this.getTypedRuleContext(BooleanLiteralContext,0);
	};

	UNDEF() {
	    return this.getToken(SPARQLParser.UNDEF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterDataBlockValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitDataBlockValue(this);
		}
	}


}



class MinusGraphPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_minusGraphPattern;
    }

	MINUS() {
	    return this.getToken(SPARQLParser.MINUS, 0);
	};

	groupGraphPattern() {
	    return this.getTypedRuleContext(GroupGraphPatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterMinusGraphPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitMinusGraphPattern(this);
		}
	}


}



class GroupOrUnionGraphPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_groupOrUnionGraphPattern;
    }

	groupGraphPattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GroupGraphPatternContext);
	    } else {
	        return this.getTypedRuleContext(GroupGraphPatternContext,i);
	    }
	};

	UNION = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SPARQLParser.UNION);
	    } else {
	        return this.getToken(SPARQLParser.UNION, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterGroupOrUnionGraphPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitGroupOrUnionGraphPattern(this);
		}
	}


}



class FilterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_filter;
    }

	FILTER() {
	    return this.getToken(SPARQLParser.FILTER, 0);
	};

	constraint() {
	    return this.getTypedRuleContext(ConstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterFilter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitFilter(this);
		}
	}


}



class ConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_constraint;
    }

	OPEN_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_BRACE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_BRACE, 0);
	};

	builtInCall() {
	    return this.getTypedRuleContext(BuiltInCallContext,0);
	};

	functionCall() {
	    return this.getTypedRuleContext(FunctionCallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitConstraint(this);
		}
	}


}



class FunctionCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_functionCall;
    }

	iri() {
	    return this.getTypedRuleContext(IriContext,0);
	};

	argList() {
	    return this.getTypedRuleContext(ArgListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitFunctionCall(this);
		}
	}


}



class ArgListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_argList;
    }

	OPEN_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_BRACE, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	DISTINCT() {
	    return this.getToken(SPARQLParser.DISTINCT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterArgList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitArgList(this);
		}
	}


}



class ExpressionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_expressionList;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SPARQLParser.COMMA);
	    } else {
	        return this.getToken(SPARQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterExpressionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitExpressionList(this);
		}
	}


}



class ConstructTemplateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_constructTemplate;
    }

	OPEN_CURLY_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_CURLY_BRACE, 0);
	};

	CLOSE_CURLY_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_CURLY_BRACE, 0);
	};

	constructTriples() {
	    return this.getTypedRuleContext(ConstructTriplesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterConstructTemplate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitConstructTemplate(this);
		}
	}


}



class ConstructTriplesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_constructTriples;
    }

	triplesSameSubject() {
	    return this.getTypedRuleContext(TriplesSameSubjectContext,0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SPARQLParser.DOT);
	    } else {
	        return this.getToken(SPARQLParser.DOT, i);
	    }
	};


	constructTriples = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstructTriplesContext);
	    } else {
	        return this.getTypedRuleContext(ConstructTriplesContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterConstructTriples(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitConstructTriples(this);
		}
	}


}



class TriplesSameSubjectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_triplesSameSubject;
    }

	varOrTerm() {
	    return this.getTypedRuleContext(VarOrTermContext,0);
	};

	propertyListNotEmpty() {
	    return this.getTypedRuleContext(PropertyListNotEmptyContext,0);
	};

	triplesNode() {
	    return this.getTypedRuleContext(TriplesNodeContext,0);
	};

	propertyList() {
	    return this.getTypedRuleContext(PropertyListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterTriplesSameSubject(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitTriplesSameSubject(this);
		}
	}


}



class PropertyListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_propertyList;
    }

	propertyListNotEmpty() {
	    return this.getTypedRuleContext(PropertyListNotEmptyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterPropertyList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitPropertyList(this);
		}
	}


}



class PropertyListNotEmptyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_propertyListNotEmpty;
    }

	verb = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VerbContext);
	    } else {
	        return this.getTypedRuleContext(VerbContext,i);
	    }
	};

	objectList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ObjectListContext);
	    } else {
	        return this.getTypedRuleContext(ObjectListContext,i);
	    }
	};

	SEMICOLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SPARQLParser.SEMICOLON);
	    } else {
	        return this.getToken(SPARQLParser.SEMICOLON, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterPropertyListNotEmpty(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitPropertyListNotEmpty(this);
		}
	}


}



class VerbContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_verb;
    }

	varOrIRI() {
	    return this.getTypedRuleContext(VarOrIRIContext,0);
	};

	A() {
	    return this.getToken(SPARQLParser.A, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterVerb(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitVerb(this);
		}
	}


}



class ObjectListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_objectList;
    }

	object = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ObjectContext);
	    } else {
	        return this.getTypedRuleContext(ObjectContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SPARQLParser.COMMA);
	    } else {
	        return this.getToken(SPARQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterObjectList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitObjectList(this);
		}
	}


}



class ObjectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_object;
    }

	graphNode() {
	    return this.getTypedRuleContext(GraphNodeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterObject(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitObject(this);
		}
	}


}



class TriplesSameSubjectPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_triplesSameSubjectPath;
    }

	varOrTerm() {
	    return this.getTypedRuleContext(VarOrTermContext,0);
	};

	propertyListPathNotEmpty() {
	    return this.getTypedRuleContext(PropertyListPathNotEmptyContext,0);
	};

	triplesNodePath() {
	    return this.getTypedRuleContext(TriplesNodePathContext,0);
	};

	propertyListPath() {
	    return this.getTypedRuleContext(PropertyListPathContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterTriplesSameSubjectPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitTriplesSameSubjectPath(this);
		}
	}


}



class PropertyListPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_propertyListPath;
    }

	propertyListPathNotEmpty() {
	    return this.getTypedRuleContext(PropertyListPathNotEmptyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterPropertyListPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitPropertyListPath(this);
		}
	}


}



class PropertyListPathNotEmptyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_propertyListPathNotEmpty;
    }

	objectListPath() {
	    return this.getTypedRuleContext(ObjectListPathContext,0);
	};

	verbPath() {
	    return this.getTypedRuleContext(VerbPathContext,0);
	};

	verbSimple() {
	    return this.getTypedRuleContext(VerbSimpleContext,0);
	};

	SEMICOLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SPARQLParser.SEMICOLON);
	    } else {
	        return this.getToken(SPARQLParser.SEMICOLON, i);
	    }
	};


	propertyListPathNotEmptyList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PropertyListPathNotEmptyListContext);
	    } else {
	        return this.getTypedRuleContext(PropertyListPathNotEmptyListContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterPropertyListPathNotEmpty(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitPropertyListPathNotEmpty(this);
		}
	}


}



class PropertyListPathNotEmptyListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_propertyListPathNotEmptyList;
    }

	objectList() {
	    return this.getTypedRuleContext(ObjectListContext,0);
	};

	verbPath() {
	    return this.getTypedRuleContext(VerbPathContext,0);
	};

	verbSimple() {
	    return this.getTypedRuleContext(VerbSimpleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterPropertyListPathNotEmptyList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitPropertyListPathNotEmptyList(this);
		}
	}


}



class VerbPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_verbPath;
    }

	path() {
	    return this.getTypedRuleContext(PathContext,0);
	};

	OPEN_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_BRACE, 0);
	};

	AS() {
	    return this.getToken(SPARQLParser.AS, 0);
	};

	var_() {
	    return this.getTypedRuleContext(VarContext,0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_BRACE, 0);
	};

	ANY() {
	    return this.getToken(SPARQLParser.ANY, 0);
	};

	ALL() {
	    return this.getToken(SPARQLParser.ALL, 0);
	};

	SHORTEST() {
	    return this.getToken(SPARQLParser.SHORTEST, 0);
	};

	WALKS() {
	    return this.getToken(SPARQLParser.WALKS, 0);
	};

	SIMPLE() {
	    return this.getToken(SPARQLParser.SIMPLE, 0);
	};

	ACYCLIC() {
	    return this.getToken(SPARQLParser.ACYCLIC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterVerbPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitVerbPath(this);
		}
	}


}



class VerbSimpleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_verbSimple;
    }

	var_() {
	    return this.getTypedRuleContext(VarContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterVerbSimple(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitVerbSimple(this);
		}
	}


}



class ObjectListPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_objectListPath;
    }

	objectPath = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ObjectPathContext);
	    } else {
	        return this.getTypedRuleContext(ObjectPathContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SPARQLParser.COMMA);
	    } else {
	        return this.getToken(SPARQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterObjectListPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitObjectListPath(this);
		}
	}


}



class ObjectPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_objectPath;
    }

	graphNodePath() {
	    return this.getTypedRuleContext(GraphNodePathContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterObjectPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitObjectPath(this);
		}
	}


}



class PathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_path;
    }

	pathAlternative() {
	    return this.getTypedRuleContext(PathAlternativeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitPath(this);
		}
	}


}



class PathAlternativeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_pathAlternative;
    }

	pathSequence = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathSequenceContext);
	    } else {
	        return this.getTypedRuleContext(PathSequenceContext,i);
	    }
	};

	PIPE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SPARQLParser.PIPE);
	    } else {
	        return this.getToken(SPARQLParser.PIPE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterPathAlternative(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitPathAlternative(this);
		}
	}


}



class PathSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_pathSequence;
    }

	pathEltOrInverse = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathEltOrInverseContext);
	    } else {
	        return this.getTypedRuleContext(PathEltOrInverseContext,i);
	    }
	};

	DIVIDE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SPARQLParser.DIVIDE);
	    } else {
	        return this.getToken(SPARQLParser.DIVIDE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterPathSequence(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitPathSequence(this);
		}
	}


}



class PathEltContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_pathElt;
    }

	pathPrimary() {
	    return this.getTypedRuleContext(PathPrimaryContext,0);
	};

	pathMod() {
	    return this.getTypedRuleContext(PathModContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterPathElt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitPathElt(this);
		}
	}


}



class PathEltOrInverseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_pathEltOrInverse;
    }

	pathElt() {
	    return this.getTypedRuleContext(PathEltContext,0);
	};

	INVERSE() {
	    return this.getToken(SPARQLParser.INVERSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterPathEltOrInverse(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitPathEltOrInverse(this);
		}
	}


}



class PathModContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_pathMod;
    }

	QUESTION_MARK() {
	    return this.getToken(SPARQLParser.QUESTION_MARK, 0);
	};

	ASTERISK() {
	    return this.getToken(SPARQLParser.ASTERISK, 0);
	};

	PLUS_SIGN() {
	    return this.getToken(SPARQLParser.PLUS_SIGN, 0);
	};

	OPEN_CURLY_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_CURLY_BRACE, 0);
	};

	pathQuantity() {
	    return this.getTypedRuleContext(PathQuantityContext,0);
	};

	CLOSE_CURLY_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_CURLY_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterPathMod(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitPathMod(this);
		}
	}


}



class PathQuantityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_pathQuantity;
    }

	pathQuantityExact() {
	    return this.getTypedRuleContext(PathQuantityExactContext,0);
	};

	pathQuantityRange() {
	    return this.getTypedRuleContext(PathQuantityRangeContext,0);
	};

	pathQuantityMin() {
	    return this.getTypedRuleContext(PathQuantityMinContext,0);
	};

	pathQuantityMax() {
	    return this.getTypedRuleContext(PathQuantityMaxContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterPathQuantity(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitPathQuantity(this);
		}
	}


}



class PathQuantityExactContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_pathQuantityExact;
    }

	INTEGER() {
	    return this.getToken(SPARQLParser.INTEGER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterPathQuantityExact(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitPathQuantityExact(this);
		}
	}


}



class PathQuantityRangeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_pathQuantityRange;
        this.min = null;
        this.max = null;
    }

	COMMA() {
	    return this.getToken(SPARQLParser.COMMA, 0);
	};

	INTEGER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SPARQLParser.INTEGER);
	    } else {
	        return this.getToken(SPARQLParser.INTEGER, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterPathQuantityRange(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitPathQuantityRange(this);
		}
	}


}



class PathQuantityMinContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_pathQuantityMin;
        this.min = null;
    }

	COMMA() {
	    return this.getToken(SPARQLParser.COMMA, 0);
	};

	INTEGER() {
	    return this.getToken(SPARQLParser.INTEGER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterPathQuantityMin(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitPathQuantityMin(this);
		}
	}


}



class PathQuantityMaxContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_pathQuantityMax;
        this.max = null;
    }

	COMMA() {
	    return this.getToken(SPARQLParser.COMMA, 0);
	};

	INTEGER() {
	    return this.getToken(SPARQLParser.INTEGER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterPathQuantityMax(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitPathQuantityMax(this);
		}
	}


}



class PathPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_pathPrimary;
    }

	iri() {
	    return this.getTypedRuleContext(IriContext,0);
	};

	A() {
	    return this.getToken(SPARQLParser.A, 0);
	};

	NEGATION() {
	    return this.getToken(SPARQLParser.NEGATION, 0);
	};

	pathNegatedPropertySet() {
	    return this.getTypedRuleContext(PathNegatedPropertySetContext,0);
	};

	OPEN_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_BRACE, 0);
	};

	path() {
	    return this.getTypedRuleContext(PathContext,0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterPathPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitPathPrimary(this);
		}
	}


}



class PathNegatedPropertySetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_pathNegatedPropertySet;
    }

	pathOneInPropertySet = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathOneInPropertySetContext);
	    } else {
	        return this.getTypedRuleContext(PathOneInPropertySetContext,i);
	    }
	};

	OPEN_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_BRACE, 0);
	};

	PIPE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SPARQLParser.PIPE);
	    } else {
	        return this.getToken(SPARQLParser.PIPE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterPathNegatedPropertySet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitPathNegatedPropertySet(this);
		}
	}


}



class PathOneInPropertySetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_pathOneInPropertySet;
    }

	iri() {
	    return this.getTypedRuleContext(IriContext,0);
	};

	A() {
	    return this.getToken(SPARQLParser.A, 0);
	};

	INVERSE() {
	    return this.getToken(SPARQLParser.INVERSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterPathOneInPropertySet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitPathOneInPropertySet(this);
		}
	}


}



class IntegerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_integer;
    }

	INTEGER() {
	    return this.getToken(SPARQLParser.INTEGER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterInteger(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitInteger(this);
		}
	}


}



class TriplesNodeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_triplesNode;
    }

	collection() {
	    return this.getTypedRuleContext(CollectionContext,0);
	};

	blankNodePropertyList() {
	    return this.getTypedRuleContext(BlankNodePropertyListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterTriplesNode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitTriplesNode(this);
		}
	}


}



class BlankNodePropertyListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_blankNodePropertyList;
    }

	OPEN_SQUARE_BRACKET() {
	    return this.getToken(SPARQLParser.OPEN_SQUARE_BRACKET, 0);
	};

	propertyListNotEmpty() {
	    return this.getTypedRuleContext(PropertyListNotEmptyContext,0);
	};

	CLOSE_SQUARE_BRACKET() {
	    return this.getToken(SPARQLParser.CLOSE_SQUARE_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterBlankNodePropertyList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitBlankNodePropertyList(this);
		}
	}


}



class TriplesNodePathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_triplesNodePath;
    }

	collectionPath() {
	    return this.getTypedRuleContext(CollectionPathContext,0);
	};

	blankNodePropertyListPath() {
	    return this.getTypedRuleContext(BlankNodePropertyListPathContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterTriplesNodePath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitTriplesNodePath(this);
		}
	}


}



class BlankNodePropertyListPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_blankNodePropertyListPath;
    }

	OPEN_SQUARE_BRACKET() {
	    return this.getToken(SPARQLParser.OPEN_SQUARE_BRACKET, 0);
	};

	propertyListPathNotEmpty() {
	    return this.getTypedRuleContext(PropertyListPathNotEmptyContext,0);
	};

	CLOSE_SQUARE_BRACKET() {
	    return this.getToken(SPARQLParser.CLOSE_SQUARE_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterBlankNodePropertyListPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitBlankNodePropertyListPath(this);
		}
	}


}



class CollectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_collection;
    }

	OPEN_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_BRACE, 0);
	};

	graphNode = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GraphNodeContext);
	    } else {
	        return this.getTypedRuleContext(GraphNodeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterCollection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitCollection(this);
		}
	}


}



class CollectionPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_collectionPath;
    }

	OPEN_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_BRACE, 0);
	};

	graphNodePath = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GraphNodePathContext);
	    } else {
	        return this.getTypedRuleContext(GraphNodePathContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterCollectionPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitCollectionPath(this);
		}
	}


}



class GraphNodeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_graphNode;
    }

	varOrTerm() {
	    return this.getTypedRuleContext(VarOrTermContext,0);
	};

	triplesNode() {
	    return this.getTypedRuleContext(TriplesNodeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterGraphNode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitGraphNode(this);
		}
	}


}



class GraphNodePathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_graphNodePath;
    }

	varOrTerm() {
	    return this.getTypedRuleContext(VarOrTermContext,0);
	};

	triplesNodePath() {
	    return this.getTypedRuleContext(TriplesNodePathContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterGraphNodePath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitGraphNodePath(this);
		}
	}


}



class VarOrTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_varOrTerm;
    }

	var_() {
	    return this.getTypedRuleContext(VarContext,0);
	};

	graphTerm() {
	    return this.getTypedRuleContext(GraphTermContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterVarOrTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitVarOrTerm(this);
		}
	}


}



class VarOrIRIContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_varOrIRI;
    }

	var_() {
	    return this.getTypedRuleContext(VarContext,0);
	};

	iri() {
	    return this.getTypedRuleContext(IriContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterVarOrIRI(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitVarOrIRI(this);
		}
	}


}



class VarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_var;
    }

	VAR1() {
	    return this.getToken(SPARQLParser.VAR1, 0);
	};

	VAR2() {
	    return this.getToken(SPARQLParser.VAR2, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterVar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitVar(this);
		}
	}


}



class GraphTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_graphTerm;
    }

	iri() {
	    return this.getTypedRuleContext(IriContext,0);
	};

	rdfLiteral() {
	    return this.getTypedRuleContext(RdfLiteralContext,0);
	};

	numericLiteral() {
	    return this.getTypedRuleContext(NumericLiteralContext,0);
	};

	booleanLiteral() {
	    return this.getTypedRuleContext(BooleanLiteralContext,0);
	};

	blankNode() {
	    return this.getTypedRuleContext(BlankNodeContext,0);
	};

	nil() {
	    return this.getTypedRuleContext(NilContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterGraphTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitGraphTerm(this);
		}
	}


}



class NilContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_nil;
    }

	OPEN_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterNil(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitNil(this);
		}
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_expression;
    }

	conditionalOrExpression() {
	    return this.getTypedRuleContext(ConditionalOrExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitExpression(this);
		}
	}


}



class ConditionalOrExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_conditionalOrExpression;
    }

	conditionalAndExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionalAndExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ConditionalAndExpressionContext,i);
	    }
	};

	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SPARQLParser.OR);
	    } else {
	        return this.getToken(SPARQLParser.OR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterConditionalOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitConditionalOrExpression(this);
		}
	}


}



class ConditionalAndExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_conditionalAndExpression;
    }

	relationalExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RelationalExpressionContext);
	    } else {
	        return this.getTypedRuleContext(RelationalExpressionContext,i);
	    }
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SPARQLParser.AND);
	    } else {
	        return this.getToken(SPARQLParser.AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterConditionalAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitConditionalAndExpression(this);
		}
	}


}



class RelationalExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_relationalExpression;
        this.op = null;
    }

	additiveExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AdditiveExpressionContext);
	    } else {
	        return this.getTypedRuleContext(AdditiveExpressionContext,i);
	    }
	};

	EQUAL() {
	    return this.getToken(SPARQLParser.EQUAL, 0);
	};

	NOT_EQUAL() {
	    return this.getToken(SPARQLParser.NOT_EQUAL, 0);
	};

	LESS() {
	    return this.getToken(SPARQLParser.LESS, 0);
	};

	GREATER() {
	    return this.getToken(SPARQLParser.GREATER, 0);
	};

	LESS_EQUAL() {
	    return this.getToken(SPARQLParser.LESS_EQUAL, 0);
	};

	GREATER_EQUAL() {
	    return this.getToken(SPARQLParser.GREATER_EQUAL, 0);
	};

	IN() {
	    return this.getToken(SPARQLParser.IN, 0);
	};

	OPEN_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_BRACE, 0);
	};

	NOT() {
	    return this.getToken(SPARQLParser.NOT, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterRelationalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitRelationalExpression(this);
		}
	}


}



class AdditiveExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_additiveExpression;
    }

	multiplicativeExpression() {
	    return this.getTypedRuleContext(MultiplicativeExpressionContext,0);
	};

	rhsAdditiveExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RhsAdditiveExpressionContext);
	    } else {
	        return this.getTypedRuleContext(RhsAdditiveExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterAdditiveExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitAdditiveExpression(this);
		}
	}


}



class RhsAdditiveExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_rhsAdditiveExpression;
        this.s143 = null;
        this.op = [];
        this.s147 = null;
        this._tset1701 = null;
    }

	rhsAdditiveExpressionSub() {
	    return this.getTypedRuleContext(RhsAdditiveExpressionSubContext,0);
	};

	unaryExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnaryExpressionContext);
	    } else {
	        return this.getTypedRuleContext(UnaryExpressionContext,i);
	    }
	};

	ASTERISK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SPARQLParser.ASTERISK);
	    } else {
	        return this.getToken(SPARQLParser.ASTERISK, i);
	    }
	};


	DIVIDE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SPARQLParser.DIVIDE);
	    } else {
	        return this.getToken(SPARQLParser.DIVIDE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterRhsAdditiveExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitRhsAdditiveExpression(this);
		}
	}


}



class RhsAdditiveExpressionSubContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_rhsAdditiveExpressionSub;
    }

	multiplicativeExpression() {
	    return this.getTypedRuleContext(MultiplicativeExpressionContext,0);
	};

	PLUS_SIGN() {
	    return this.getToken(SPARQLParser.PLUS_SIGN, 0);
	};

	MINUS_SIGN() {
	    return this.getToken(SPARQLParser.MINUS_SIGN, 0);
	};

	numericLiteralPositive() {
	    return this.getTypedRuleContext(NumericLiteralPositiveContext,0);
	};

	numericLiteralNegative() {
	    return this.getTypedRuleContext(NumericLiteralNegativeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterRhsAdditiveExpressionSub(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitRhsAdditiveExpressionSub(this);
		}
	}


}



class MultiplicativeExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_multiplicativeExpression;
        this.s143 = null;
        this.op = [];
        this.s147 = null;
        this._tset1744 = null;
    }

	unaryExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnaryExpressionContext);
	    } else {
	        return this.getTypedRuleContext(UnaryExpressionContext,i);
	    }
	};

	ASTERISK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SPARQLParser.ASTERISK);
	    } else {
	        return this.getToken(SPARQLParser.ASTERISK, i);
	    }
	};


	DIVIDE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SPARQLParser.DIVIDE);
	    } else {
	        return this.getToken(SPARQLParser.DIVIDE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterMultiplicativeExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitMultiplicativeExpression(this);
		}
	}


}



class UnaryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_unaryExpression;
        this.op = null;
    }

	primaryExpression() {
	    return this.getTypedRuleContext(PrimaryExpressionContext,0);
	};

	NEGATION() {
	    return this.getToken(SPARQLParser.NEGATION, 0);
	};

	PLUS_SIGN() {
	    return this.getToken(SPARQLParser.PLUS_SIGN, 0);
	};

	MINUS_SIGN() {
	    return this.getToken(SPARQLParser.MINUS_SIGN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterUnaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitUnaryExpression(this);
		}
	}


}



class PrimaryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_primaryExpression;
    }

	OPEN_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_BRACE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_BRACE, 0);
	};

	builtInCall() {
	    return this.getTypedRuleContext(BuiltInCallContext,0);
	};

	iriOrFunction() {
	    return this.getTypedRuleContext(IriOrFunctionContext,0);
	};

	rdfLiteral() {
	    return this.getTypedRuleContext(RdfLiteralContext,0);
	};

	numericLiteral() {
	    return this.getTypedRuleContext(NumericLiteralContext,0);
	};

	booleanLiteral() {
	    return this.getTypedRuleContext(BooleanLiteralContext,0);
	};

	var_() {
	    return this.getTypedRuleContext(VarContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterPrimaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitPrimaryExpression(this);
		}
	}


}



class BuiltInCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_builtInCall;
    }

	aggregate() {
	    return this.getTypedRuleContext(AggregateContext,0);
	};

	STR() {
	    return this.getToken(SPARQLParser.STR, 0);
	};

	OPEN_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_BRACE, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	CLOSE_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_BRACE, 0);
	};

	LANG() {
	    return this.getToken(SPARQLParser.LANG, 0);
	};

	LANGMATCHES() {
	    return this.getToken(SPARQLParser.LANGMATCHES, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SPARQLParser.COMMA);
	    } else {
	        return this.getToken(SPARQLParser.COMMA, i);
	    }
	};


	DATATYPE() {
	    return this.getToken(SPARQLParser.DATATYPE, 0);
	};

	BOUND() {
	    return this.getToken(SPARQLParser.BOUND, 0);
	};

	var_() {
	    return this.getTypedRuleContext(VarContext,0);
	};

	IRI() {
	    return this.getToken(SPARQLParser.IRI, 0);
	};

	URI() {
	    return this.getToken(SPARQLParser.URI, 0);
	};

	BNODE() {
	    return this.getToken(SPARQLParser.BNODE, 0);
	};

	RAND() {
	    return this.getToken(SPARQLParser.RAND, 0);
	};

	ABS() {
	    return this.getToken(SPARQLParser.ABS, 0);
	};

	CEIL() {
	    return this.getToken(SPARQLParser.CEIL, 0);
	};

	FLOOR() {
	    return this.getToken(SPARQLParser.FLOOR, 0);
	};

	ROUND() {
	    return this.getToken(SPARQLParser.ROUND, 0);
	};

	CONCAT() {
	    return this.getToken(SPARQLParser.CONCAT, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	subStringExpression() {
	    return this.getTypedRuleContext(SubStringExpressionContext,0);
	};

	STRLEN() {
	    return this.getToken(SPARQLParser.STRLEN, 0);
	};

	strReplaceExpression() {
	    return this.getTypedRuleContext(StrReplaceExpressionContext,0);
	};

	UCASE() {
	    return this.getToken(SPARQLParser.UCASE, 0);
	};

	LCASE() {
	    return this.getToken(SPARQLParser.LCASE, 0);
	};

	ENCODE_FOR_URI() {
	    return this.getToken(SPARQLParser.ENCODE_FOR_URI, 0);
	};

	CONTAINS() {
	    return this.getToken(SPARQLParser.CONTAINS, 0);
	};

	STRSTARTS() {
	    return this.getToken(SPARQLParser.STRSTARTS, 0);
	};

	STRENDS() {
	    return this.getToken(SPARQLParser.STRENDS, 0);
	};

	STRBEFORE() {
	    return this.getToken(SPARQLParser.STRBEFORE, 0);
	};

	STRAFTER() {
	    return this.getToken(SPARQLParser.STRAFTER, 0);
	};

	YEAR() {
	    return this.getToken(SPARQLParser.YEAR, 0);
	};

	MONTH() {
	    return this.getToken(SPARQLParser.MONTH, 0);
	};

	DAY() {
	    return this.getToken(SPARQLParser.DAY, 0);
	};

	HOURS() {
	    return this.getToken(SPARQLParser.HOURS, 0);
	};

	MINUTES() {
	    return this.getToken(SPARQLParser.MINUTES, 0);
	};

	SECONDS() {
	    return this.getToken(SPARQLParser.SECONDS, 0);
	};

	TIMEZONE() {
	    return this.getToken(SPARQLParser.TIMEZONE, 0);
	};

	TZ() {
	    return this.getToken(SPARQLParser.TZ, 0);
	};

	NOW() {
	    return this.getToken(SPARQLParser.NOW, 0);
	};

	UUID() {
	    return this.getToken(SPARQLParser.UUID, 0);
	};

	STRUUID() {
	    return this.getToken(SPARQLParser.STRUUID, 0);
	};

	MD5() {
	    return this.getToken(SPARQLParser.MD5, 0);
	};

	SHA1() {
	    return this.getToken(SPARQLParser.SHA1, 0);
	};

	SHA256() {
	    return this.getToken(SPARQLParser.SHA256, 0);
	};

	SHA384() {
	    return this.getToken(SPARQLParser.SHA384, 0);
	};

	SHA512() {
	    return this.getToken(SPARQLParser.SHA512, 0);
	};

	COALESCE() {
	    return this.getToken(SPARQLParser.COALESCE, 0);
	};

	IF() {
	    return this.getToken(SPARQLParser.IF, 0);
	};

	STRLANG() {
	    return this.getToken(SPARQLParser.STRLANG, 0);
	};

	STRDT() {
	    return this.getToken(SPARQLParser.STRDT, 0);
	};

	SAMETERM() {
	    return this.getToken(SPARQLParser.SAMETERM, 0);
	};

	ISIRI() {
	    return this.getToken(SPARQLParser.ISIRI, 0);
	};

	ISURI() {
	    return this.getToken(SPARQLParser.ISURI, 0);
	};

	ISBLANK() {
	    return this.getToken(SPARQLParser.ISBLANK, 0);
	};

	ISLITERAL() {
	    return this.getToken(SPARQLParser.ISLITERAL, 0);
	};

	ISNUMERIC() {
	    return this.getToken(SPARQLParser.ISNUMERIC, 0);
	};

	regexExpression() {
	    return this.getTypedRuleContext(RegexExpressionContext,0);
	};

	existsFunction() {
	    return this.getTypedRuleContext(ExistsFunctionContext,0);
	};

	notExistsFunction() {
	    return this.getTypedRuleContext(NotExistsFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterBuiltInCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitBuiltInCall(this);
		}
	}


}



class RegexExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_regexExpression;
    }

	REGEX() {
	    return this.getToken(SPARQLParser.REGEX, 0);
	};

	OPEN_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_BRACE, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SPARQLParser.COMMA);
	    } else {
	        return this.getToken(SPARQLParser.COMMA, i);
	    }
	};


	CLOSE_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterRegexExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitRegexExpression(this);
		}
	}


}



class SubStringExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_subStringExpression;
    }

	SUBSTR() {
	    return this.getToken(SPARQLParser.SUBSTR, 0);
	};

	OPEN_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_BRACE, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SPARQLParser.COMMA);
	    } else {
	        return this.getToken(SPARQLParser.COMMA, i);
	    }
	};


	CLOSE_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterSubStringExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitSubStringExpression(this);
		}
	}


}



class StrReplaceExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_strReplaceExpression;
    }

	REPLACE() {
	    return this.getToken(SPARQLParser.REPLACE, 0);
	};

	OPEN_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_BRACE, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SPARQLParser.COMMA);
	    } else {
	        return this.getToken(SPARQLParser.COMMA, i);
	    }
	};


	CLOSE_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterStrReplaceExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitStrReplaceExpression(this);
		}
	}


}



class ExistsFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_existsFunction;
    }

	EXISTS() {
	    return this.getToken(SPARQLParser.EXISTS, 0);
	};

	groupGraphPattern() {
	    return this.getTypedRuleContext(GroupGraphPatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterExistsFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitExistsFunction(this);
		}
	}


}



class NotExistsFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_notExistsFunction;
    }

	NOT() {
	    return this.getToken(SPARQLParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(SPARQLParser.EXISTS, 0);
	};

	groupGraphPattern() {
	    return this.getTypedRuleContext(GroupGraphPatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterNotExistsFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitNotExistsFunction(this);
		}
	}


}



class AggregateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_aggregate;
    }

	COUNT() {
	    return this.getToken(SPARQLParser.COUNT, 0);
	};

	OPEN_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_BRACE, 0);
	};

	ASTERISK() {
	    return this.getToken(SPARQLParser.ASTERISK, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	DISTINCT() {
	    return this.getToken(SPARQLParser.DISTINCT, 0);
	};

	SUM() {
	    return this.getToken(SPARQLParser.SUM, 0);
	};

	MIN() {
	    return this.getToken(SPARQLParser.MIN, 0);
	};

	MAX() {
	    return this.getToken(SPARQLParser.MAX, 0);
	};

	AVG() {
	    return this.getToken(SPARQLParser.AVG, 0);
	};

	SAMPLE() {
	    return this.getToken(SPARQLParser.SAMPLE, 0);
	};

	GROUP_CONCAT() {
	    return this.getToken(SPARQLParser.GROUP_CONCAT, 0);
	};

	SEMICOLON() {
	    return this.getToken(SPARQLParser.SEMICOLON, 0);
	};

	SEPARATOR() {
	    return this.getToken(SPARQLParser.SEPARATOR, 0);
	};

	EQUAL() {
	    return this.getToken(SPARQLParser.EQUAL, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterAggregate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitAggregate(this);
		}
	}


}



class IriOrFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_iriOrFunction;
    }

	iri() {
	    return this.getTypedRuleContext(IriContext,0);
	};

	argList() {
	    return this.getTypedRuleContext(ArgListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterIriOrFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitIriOrFunction(this);
		}
	}


}



class RdfLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_rdfLiteral;
    }

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	LANGTAG() {
	    return this.getToken(SPARQLParser.LANGTAG, 0);
	};

	REFERENCE() {
	    return this.getToken(SPARQLParser.REFERENCE, 0);
	};

	iri() {
	    return this.getTypedRuleContext(IriContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterRdfLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitRdfLiteral(this);
		}
	}


}



class NumericLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_numericLiteral;
    }

	numericLiteralUnsigned() {
	    return this.getTypedRuleContext(NumericLiteralUnsignedContext,0);
	};

	numericLiteralPositive() {
	    return this.getTypedRuleContext(NumericLiteralPositiveContext,0);
	};

	numericLiteralNegative() {
	    return this.getTypedRuleContext(NumericLiteralNegativeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterNumericLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitNumericLiteral(this);
		}
	}


}



class NumericLiteralUnsignedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_numericLiteralUnsigned;
    }

	INTEGER() {
	    return this.getToken(SPARQLParser.INTEGER, 0);
	};

	DECIMAL() {
	    return this.getToken(SPARQLParser.DECIMAL, 0);
	};

	DOUBLE() {
	    return this.getToken(SPARQLParser.DOUBLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterNumericLiteralUnsigned(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitNumericLiteralUnsigned(this);
		}
	}


}



class NumericLiteralPositiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_numericLiteralPositive;
    }

	INTEGER_POSITIVE() {
	    return this.getToken(SPARQLParser.INTEGER_POSITIVE, 0);
	};

	DECIMAL_POSITIVE() {
	    return this.getToken(SPARQLParser.DECIMAL_POSITIVE, 0);
	};

	DOUBLE_POSITIVE() {
	    return this.getToken(SPARQLParser.DOUBLE_POSITIVE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterNumericLiteralPositive(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitNumericLiteralPositive(this);
		}
	}


}



class NumericLiteralNegativeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_numericLiteralNegative;
    }

	INTEGER_NEGATIVE() {
	    return this.getToken(SPARQLParser.INTEGER_NEGATIVE, 0);
	};

	DECIMAL_NEGATIVE() {
	    return this.getToken(SPARQLParser.DECIMAL_NEGATIVE, 0);
	};

	DOUBLE_NEGATIVE() {
	    return this.getToken(SPARQLParser.DOUBLE_NEGATIVE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterNumericLiteralNegative(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitNumericLiteralNegative(this);
		}
	}


}



class BooleanLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_booleanLiteral;
    }

	TRUE() {
	    return this.getToken(SPARQLParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(SPARQLParser.FALSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterBooleanLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitBooleanLiteral(this);
		}
	}


}



class StringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_string;
    }

	STRING_LITERAL1() {
	    return this.getToken(SPARQLParser.STRING_LITERAL1, 0);
	};

	STRING_LITERAL2() {
	    return this.getToken(SPARQLParser.STRING_LITERAL2, 0);
	};

	STRING_LITERAL_LONG1() {
	    return this.getToken(SPARQLParser.STRING_LITERAL_LONG1, 0);
	};

	STRING_LITERAL_LONG2() {
	    return this.getToken(SPARQLParser.STRING_LITERAL_LONG2, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitString(this);
		}
	}


}



class IriContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_iri;
    }

	IRIREF() {
	    return this.getToken(SPARQLParser.IRIREF, 0);
	};

	prefixedName() {
	    return this.getTypedRuleContext(PrefixedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterIri(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitIri(this);
		}
	}


}



class PrefixedNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_prefixedName;
    }

	PNAME_LN() {
	    return this.getToken(SPARQLParser.PNAME_LN, 0);
	};

	PNAME_NS() {
	    return this.getToken(SPARQLParser.PNAME_NS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterPrefixedName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitPrefixedName(this);
		}
	}


}



class BlankNodeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_blankNode;
    }

	BLANK_NODE_LABEL() {
	    return this.getToken(SPARQLParser.BLANK_NODE_LABEL, 0);
	};

	anon() {
	    return this.getTypedRuleContext(AnonContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterBlankNode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitBlankNode(this);
		}
	}


}



class AnonContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_anon;
    }

	OPEN_SQUARE_BRACKET() {
	    return this.getToken(SPARQLParser.OPEN_SQUARE_BRACKET, 0);
	};

	CLOSE_SQUARE_BRACKET() {
	    return this.getToken(SPARQLParser.CLOSE_SQUARE_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterAnon(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitAnon(this);
		}
	}


}




SPARQLParser.QueryContext = QueryContext; 
SPARQLParser.PrologueContext = PrologueContext; 
SPARQLParser.BaseDeclContext = BaseDeclContext; 
SPARQLParser.PrefixDeclContext = PrefixDeclContext; 
SPARQLParser.SelectQueryContext = SelectQueryContext; 
SPARQLParser.SubSelectContext = SubSelectContext; 
SPARQLParser.SelectClauseContext = SelectClauseContext; 
SPARQLParser.SelectModifierContext = SelectModifierContext; 
SPARQLParser.SelectVariablesContext = SelectVariablesContext; 
SPARQLParser.ConstructQueryContext = ConstructQueryContext; 
SPARQLParser.DescribeQueryContext = DescribeQueryContext; 
SPARQLParser.AskQueryContext = AskQueryContext; 
SPARQLParser.DatasetClauseContext = DatasetClauseContext; 
SPARQLParser.WhereClauseContext = WhereClauseContext; 
SPARQLParser.SolutionModifierContext = SolutionModifierContext; 
SPARQLParser.GroupClauseContext = GroupClauseContext; 
SPARQLParser.GroupConditionContext = GroupConditionContext; 
SPARQLParser.HavingClauseContext = HavingClauseContext; 
SPARQLParser.HavingConditionContext = HavingConditionContext; 
SPARQLParser.OrderClauseContext = OrderClauseContext; 
SPARQLParser.OrderConditionContext = OrderConditionContext; 
SPARQLParser.LimitOffsetClausesContext = LimitOffsetClausesContext; 
SPARQLParser.LimitClauseContext = LimitClauseContext; 
SPARQLParser.OffsetClauseContext = OffsetClauseContext; 
SPARQLParser.ValuesClauseContext = ValuesClauseContext; 
SPARQLParser.TriplesTemplateContext = TriplesTemplateContext; 
SPARQLParser.GroupGraphPatternContext = GroupGraphPatternContext; 
SPARQLParser.GroupGraphPatternSubContext = GroupGraphPatternSubContext; 
SPARQLParser.GroupGraphPatternSubListContext = GroupGraphPatternSubListContext; 
SPARQLParser.TriplesBlockContext = TriplesBlockContext; 
SPARQLParser.GraphPatternNotTriplesContext = GraphPatternNotTriplesContext; 
SPARQLParser.OptionalGraphPatternContext = OptionalGraphPatternContext; 
SPARQLParser.GraphGraphPatternContext = GraphGraphPatternContext; 
SPARQLParser.ServiceGraphPatternContext = ServiceGraphPatternContext; 
SPARQLParser.BindContext = BindContext; 
SPARQLParser.InlineDataContext = InlineDataContext; 
SPARQLParser.DataBlockContext = DataBlockContext; 
SPARQLParser.InlineDataOneVarContext = InlineDataOneVarContext; 
SPARQLParser.InlineDataFullContext = InlineDataFullContext; 
SPARQLParser.DataBlockValuesContext = DataBlockValuesContext; 
SPARQLParser.DataBlockValueContext = DataBlockValueContext; 
SPARQLParser.MinusGraphPatternContext = MinusGraphPatternContext; 
SPARQLParser.GroupOrUnionGraphPatternContext = GroupOrUnionGraphPatternContext; 
SPARQLParser.FilterContext = FilterContext; 
SPARQLParser.ConstraintContext = ConstraintContext; 
SPARQLParser.FunctionCallContext = FunctionCallContext; 
SPARQLParser.ArgListContext = ArgListContext; 
SPARQLParser.ExpressionListContext = ExpressionListContext; 
SPARQLParser.ConstructTemplateContext = ConstructTemplateContext; 
SPARQLParser.ConstructTriplesContext = ConstructTriplesContext; 
SPARQLParser.TriplesSameSubjectContext = TriplesSameSubjectContext; 
SPARQLParser.PropertyListContext = PropertyListContext; 
SPARQLParser.PropertyListNotEmptyContext = PropertyListNotEmptyContext; 
SPARQLParser.VerbContext = VerbContext; 
SPARQLParser.ObjectListContext = ObjectListContext; 
SPARQLParser.ObjectContext = ObjectContext; 
SPARQLParser.TriplesSameSubjectPathContext = TriplesSameSubjectPathContext; 
SPARQLParser.PropertyListPathContext = PropertyListPathContext; 
SPARQLParser.PropertyListPathNotEmptyContext = PropertyListPathNotEmptyContext; 
SPARQLParser.PropertyListPathNotEmptyListContext = PropertyListPathNotEmptyListContext; 
SPARQLParser.VerbPathContext = VerbPathContext; 
SPARQLParser.VerbSimpleContext = VerbSimpleContext; 
SPARQLParser.ObjectListPathContext = ObjectListPathContext; 
SPARQLParser.ObjectPathContext = ObjectPathContext; 
SPARQLParser.PathContext = PathContext; 
SPARQLParser.PathAlternativeContext = PathAlternativeContext; 
SPARQLParser.PathSequenceContext = PathSequenceContext; 
SPARQLParser.PathEltContext = PathEltContext; 
SPARQLParser.PathEltOrInverseContext = PathEltOrInverseContext; 
SPARQLParser.PathModContext = PathModContext; 
SPARQLParser.PathQuantityContext = PathQuantityContext; 
SPARQLParser.PathQuantityExactContext = PathQuantityExactContext; 
SPARQLParser.PathQuantityRangeContext = PathQuantityRangeContext; 
SPARQLParser.PathQuantityMinContext = PathQuantityMinContext; 
SPARQLParser.PathQuantityMaxContext = PathQuantityMaxContext; 
SPARQLParser.PathPrimaryContext = PathPrimaryContext; 
SPARQLParser.PathNegatedPropertySetContext = PathNegatedPropertySetContext; 
SPARQLParser.PathOneInPropertySetContext = PathOneInPropertySetContext; 
SPARQLParser.IntegerContext = IntegerContext; 
SPARQLParser.TriplesNodeContext = TriplesNodeContext; 
SPARQLParser.BlankNodePropertyListContext = BlankNodePropertyListContext; 
SPARQLParser.TriplesNodePathContext = TriplesNodePathContext; 
SPARQLParser.BlankNodePropertyListPathContext = BlankNodePropertyListPathContext; 
SPARQLParser.CollectionContext = CollectionContext; 
SPARQLParser.CollectionPathContext = CollectionPathContext; 
SPARQLParser.GraphNodeContext = GraphNodeContext; 
SPARQLParser.GraphNodePathContext = GraphNodePathContext; 
SPARQLParser.VarOrTermContext = VarOrTermContext; 
SPARQLParser.VarOrIRIContext = VarOrIRIContext; 
SPARQLParser.VarContext = VarContext; 
SPARQLParser.GraphTermContext = GraphTermContext; 
SPARQLParser.NilContext = NilContext; 
SPARQLParser.ExpressionContext = ExpressionContext; 
SPARQLParser.ConditionalOrExpressionContext = ConditionalOrExpressionContext; 
SPARQLParser.ConditionalAndExpressionContext = ConditionalAndExpressionContext; 
SPARQLParser.RelationalExpressionContext = RelationalExpressionContext; 
SPARQLParser.AdditiveExpressionContext = AdditiveExpressionContext; 
SPARQLParser.RhsAdditiveExpressionContext = RhsAdditiveExpressionContext; 
SPARQLParser.RhsAdditiveExpressionSubContext = RhsAdditiveExpressionSubContext; 
SPARQLParser.MultiplicativeExpressionContext = MultiplicativeExpressionContext; 
SPARQLParser.UnaryExpressionContext = UnaryExpressionContext; 
SPARQLParser.PrimaryExpressionContext = PrimaryExpressionContext; 
SPARQLParser.BuiltInCallContext = BuiltInCallContext; 
SPARQLParser.RegexExpressionContext = RegexExpressionContext; 
SPARQLParser.SubStringExpressionContext = SubStringExpressionContext; 
SPARQLParser.StrReplaceExpressionContext = StrReplaceExpressionContext; 
SPARQLParser.ExistsFunctionContext = ExistsFunctionContext; 
SPARQLParser.NotExistsFunctionContext = NotExistsFunctionContext; 
SPARQLParser.AggregateContext = AggregateContext; 
SPARQLParser.IriOrFunctionContext = IriOrFunctionContext; 
SPARQLParser.RdfLiteralContext = RdfLiteralContext; 
SPARQLParser.NumericLiteralContext = NumericLiteralContext; 
SPARQLParser.NumericLiteralUnsignedContext = NumericLiteralUnsignedContext; 
SPARQLParser.NumericLiteralPositiveContext = NumericLiteralPositiveContext; 
SPARQLParser.NumericLiteralNegativeContext = NumericLiteralNegativeContext; 
SPARQLParser.BooleanLiteralContext = BooleanLiteralContext; 
SPARQLParser.StringContext = StringContext; 
SPARQLParser.IriContext = IriContext; 
SPARQLParser.PrefixedNameContext = PrefixedNameContext; 
SPARQLParser.BlankNodeContext = BlankNodeContext; 
SPARQLParser.AnonContext = AnonContext; 
