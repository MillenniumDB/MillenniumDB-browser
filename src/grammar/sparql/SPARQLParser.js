// Generated from src/grammar/sparql/SPARQLParser.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';
import SPARQLParserListener from './SPARQLParserListener.js';
const serializedATN = [4,1,152,1340,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,1,0,1,0,1,0,1,0,1,0,3,0,
238,8,0,1,0,1,0,1,0,1,1,1,1,5,1,245,8,1,10,1,12,1,248,9,1,1,2,1,2,1,2,1,
3,1,3,1,3,1,3,1,4,1,4,5,4,259,8,4,10,4,12,4,262,9,4,1,4,1,4,1,4,1,5,1,5,
1,5,1,5,1,5,1,6,1,6,3,6,274,8,6,1,6,4,6,277,8,6,11,6,12,6,278,1,6,3,6,282,
8,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,293,8,8,1,9,1,9,1,9,5,9,298,
8,9,10,9,12,9,301,9,9,1,9,1,9,1,9,1,9,5,9,307,8,9,10,9,12,9,310,9,9,1,9,
1,9,1,9,3,9,315,8,9,1,9,1,9,3,9,319,8,9,1,10,1,10,4,10,323,8,10,11,10,12,
10,324,1,10,3,10,328,8,10,1,10,5,10,331,8,10,10,10,12,10,334,9,10,1,10,3,
10,337,8,10,1,10,1,10,1,11,1,11,5,11,343,8,11,10,11,12,11,346,9,11,1,11,
1,11,1,11,1,12,1,12,3,12,353,8,12,1,12,1,12,1,13,3,13,358,8,13,1,13,1,13,
1,14,3,14,363,8,14,1,14,3,14,366,8,14,1,14,3,14,369,8,14,1,14,3,14,372,8,
14,1,15,1,15,1,15,4,15,377,8,15,11,15,12,15,378,1,16,1,16,1,16,1,16,1,16,
1,16,3,16,387,8,16,1,16,1,16,1,16,3,16,392,8,16,1,17,1,17,4,17,396,8,17,
11,17,12,17,397,1,18,1,18,1,19,1,19,1,19,4,19,405,8,19,11,19,12,19,406,1,
20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,416,8,20,1,21,1,21,3,21,420,8,21,1,
21,1,21,3,21,424,8,21,3,21,426,8,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,
24,3,24,436,8,24,1,25,1,25,1,25,3,25,441,8,25,5,25,443,8,25,10,25,12,25,
446,9,25,1,26,1,26,1,26,3,26,451,8,26,1,26,1,26,1,27,3,27,456,8,27,1,27,
5,27,459,8,27,10,27,12,27,462,9,27,1,28,1,28,3,28,466,8,28,1,28,3,28,469,
8,28,1,29,1,29,1,29,3,29,474,8,29,5,29,476,8,29,10,29,12,29,479,9,29,1,30,
1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,489,8,30,1,31,1,31,1,31,1,32,1,32,
1,32,1,32,1,33,1,33,3,33,500,8,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,
1,34,1,34,1,35,1,35,1,35,1,36,1,36,3,36,517,8,36,1,37,1,37,1,37,5,37,522,
8,37,10,37,12,37,525,9,37,1,37,1,37,1,38,1,38,5,38,531,8,38,10,38,12,38,
534,9,38,1,38,1,38,1,38,5,38,539,8,38,10,38,12,38,542,9,38,1,38,1,38,1,39,
1,39,5,39,548,8,39,10,39,12,39,551,9,39,1,39,1,39,1,40,1,40,1,40,1,40,1,
40,3,40,560,8,40,1,41,1,41,1,41,1,42,1,42,1,42,5,42,568,8,42,10,42,12,42,
571,9,42,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,3,44,582,8,44,1,45,
1,45,1,45,1,46,1,46,3,46,589,8,46,1,46,1,46,3,46,593,8,46,1,46,1,46,1,47,
1,47,1,47,5,47,600,8,47,10,47,12,47,603,9,47,1,48,1,48,3,48,607,8,48,1,48,
1,48,1,49,1,49,1,49,3,49,614,8,49,5,49,616,8,49,10,49,12,49,619,9,49,1,50,
1,50,1,50,1,50,1,50,1,50,3,50,627,8,50,1,51,3,51,630,8,51,1,52,1,52,1,52,
1,52,1,52,1,52,3,52,638,8,52,5,52,640,8,52,10,52,12,52,643,9,52,1,53,1,53,
3,53,647,8,53,1,54,1,54,1,54,5,54,652,8,54,10,54,12,54,655,9,54,1,55,1,55,
1,56,1,56,1,56,1,56,1,56,1,56,3,56,665,8,56,1,57,3,57,668,8,57,1,58,1,58,
3,58,672,8,58,1,58,1,58,1,58,3,58,677,8,58,5,58,679,8,58,10,58,12,58,682,
9,58,1,59,1,59,3,59,686,8,59,1,59,1,59,1,60,1,60,1,60,3,60,693,8,60,1,60,
3,60,696,8,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,704,8,60,1,61,1,61,1,62,
1,62,1,62,5,62,711,8,62,10,62,12,62,714,9,62,1,63,1,63,1,64,1,64,1,65,1,
65,1,65,5,65,723,8,65,10,65,12,65,726,9,65,1,66,1,66,1,66,5,66,731,8,66,
10,66,12,66,734,9,66,1,67,1,67,3,67,738,8,67,1,68,3,68,741,8,68,1,68,1,68,
1,69,1,69,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,755,8,70,1,71,1,71,
1,71,1,71,1,71,5,71,762,8,71,10,71,12,71,765,9,71,3,71,767,8,71,1,71,3,71,
770,8,71,1,72,3,72,773,8,72,1,72,1,72,3,72,777,8,72,1,73,1,73,1,74,1,74,
3,74,783,8,74,1,75,1,75,1,75,1,75,1,76,1,76,3,76,791,8,76,1,77,1,77,1,77,
1,77,1,78,1,78,4,78,799,8,78,11,78,12,78,800,1,78,1,78,1,79,1,79,4,79,807,
8,79,11,79,12,79,808,1,79,1,79,1,80,1,80,3,80,815,8,80,1,81,1,81,3,81,819,
8,81,1,82,1,82,3,82,823,8,82,1,83,1,83,3,83,827,8,83,1,84,1,84,1,85,1,85,
1,85,1,85,1,85,1,85,3,85,837,8,85,1,86,1,86,1,86,1,87,1,87,1,88,1,88,1,88,
5,88,847,8,88,10,88,12,88,850,9,88,1,89,1,89,1,89,5,89,855,8,89,10,89,12,
89,858,9,89,1,90,1,90,1,90,3,90,863,8,90,1,90,1,90,3,90,867,8,90,1,90,1,
90,1,90,3,90,872,8,90,1,90,1,90,3,90,876,8,90,1,91,1,91,5,91,880,8,91,10,
91,12,91,883,9,91,1,92,1,92,1,92,5,92,888,8,92,10,92,12,92,891,9,92,1,93,
1,93,1,93,1,93,3,93,897,8,93,1,94,1,94,1,94,5,94,902,8,94,10,94,12,94,905,
9,94,1,95,3,95,908,8,95,1,95,1,95,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,
1,96,1,96,3,96,922,8,96,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,
1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,
97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,
1,97,1,97,3,97,965,8,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,
1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,
97,1,97,1,97,3,97,994,8,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,
1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,
97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,
1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,
97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,
1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,
97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,
1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,
97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,
1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,3,97,1131,8,97,1,97,1,
97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,
1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,
97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,
1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,3,
97,1192,8,97,1,98,1,98,1,98,1,98,1,98,1,98,1,98,3,98,1201,8,98,1,98,1,98,
1,99,1,99,1,99,1,99,1,99,1,99,1,99,3,99,1212,8,99,1,99,1,99,1,100,1,100,
1,100,1,100,1,100,1,100,1,100,1,100,1,100,3,100,1225,8,100,1,100,1,100,1,
101,1,101,1,101,1,102,1,102,1,102,1,102,1,103,1,103,1,103,3,103,1239,8,103,
1,103,1,103,3,103,1243,8,103,1,103,1,103,1,103,1,103,3,103,1249,8,103,1,
103,1,103,1,103,1,103,1,103,1,103,3,103,1257,8,103,1,103,1,103,1,103,1,103,
1,103,1,103,3,103,1265,8,103,1,103,1,103,1,103,1,103,1,103,1,103,3,103,1273,
8,103,1,103,1,103,1,103,1,103,1,103,1,103,3,103,1281,8,103,1,103,1,103,1,
103,1,103,1,103,1,103,3,103,1289,8,103,1,103,1,103,1,103,1,103,1,103,3,103,
1296,8,103,1,103,1,103,3,103,1300,8,103,1,104,1,104,3,104,1304,8,104,1,105,
1,105,1,105,1,105,3,105,1310,8,105,1,106,1,106,1,106,3,106,1315,8,106,1,
107,1,107,1,108,1,108,1,109,1,109,1,110,1,110,1,111,1,111,1,112,1,112,3,
112,1329,8,112,1,113,1,113,1,114,1,114,3,114,1335,8,114,1,115,1,115,1,115,
1,115,0,0,116,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,
90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,
130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,
166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,
202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,0,16,1,0,5,6,
1,0,15,16,2,0,40,40,100,100,1,0,102,104,2,0,141,141,143,144,1,0,109,110,
2,0,127,129,148,150,2,0,143,143,147,147,1,0,141,142,2,0,141,142,146,146,
1,0,112,114,1,0,115,117,1,0,118,120,1,0,37,38,1,0,121,124,1,0,106,107,1437,
0,232,1,0,0,0,2,246,1,0,0,0,4,249,1,0,0,0,6,252,1,0,0,0,8,256,1,0,0,0,10,
266,1,0,0,0,12,271,1,0,0,0,14,283,1,0,0,0,16,292,1,0,0,0,18,294,1,0,0,0,
20,320,1,0,0,0,22,340,1,0,0,0,24,350,1,0,0,0,26,357,1,0,0,0,28,362,1,0,0,
0,30,373,1,0,0,0,32,391,1,0,0,0,34,393,1,0,0,0,36,399,1,0,0,0,38,401,1,0,
0,0,40,415,1,0,0,0,42,425,1,0,0,0,44,427,1,0,0,0,46,430,1,0,0,0,48,435,1,
0,0,0,50,437,1,0,0,0,52,447,1,0,0,0,54,455,1,0,0,0,56,463,1,0,0,0,58,470,
1,0,0,0,60,488,1,0,0,0,62,490,1,0,0,0,64,493,1,0,0,0,66,497,1,0,0,0,68,504,
1,0,0,0,70,511,1,0,0,0,72,516,1,0,0,0,74,518,1,0,0,0,76,528,1,0,0,0,78,545,
1,0,0,0,80,559,1,0,0,0,82,561,1,0,0,0,84,564,1,0,0,0,86,572,1,0,0,0,88,581,
1,0,0,0,90,583,1,0,0,0,92,586,1,0,0,0,94,596,1,0,0,0,96,604,1,0,0,0,98,610,
1,0,0,0,100,626,1,0,0,0,102,629,1,0,0,0,104,631,1,0,0,0,106,646,1,0,0,0,
108,648,1,0,0,0,110,656,1,0,0,0,112,664,1,0,0,0,114,667,1,0,0,0,116,671,
1,0,0,0,118,685,1,0,0,0,120,703,1,0,0,0,122,705,1,0,0,0,124,707,1,0,0,0,
126,715,1,0,0,0,128,717,1,0,0,0,130,719,1,0,0,0,132,727,1,0,0,0,134,735,
1,0,0,0,136,740,1,0,0,0,138,744,1,0,0,0,140,754,1,0,0,0,142,769,1,0,0,0,
144,772,1,0,0,0,146,778,1,0,0,0,148,782,1,0,0,0,150,784,1,0,0,0,152,790,
1,0,0,0,154,792,1,0,0,0,156,796,1,0,0,0,158,804,1,0,0,0,160,814,1,0,0,0,
162,818,1,0,0,0,164,822,1,0,0,0,166,826,1,0,0,0,168,828,1,0,0,0,170,836,
1,0,0,0,172,838,1,0,0,0,174,841,1,0,0,0,176,843,1,0,0,0,178,851,1,0,0,0,
180,875,1,0,0,0,182,877,1,0,0,0,184,884,1,0,0,0,186,896,1,0,0,0,188,898,
1,0,0,0,190,907,1,0,0,0,192,921,1,0,0,0,194,1191,1,0,0,0,196,1193,1,0,0,
0,198,1204,1,0,0,0,200,1215,1,0,0,0,202,1228,1,0,0,0,204,1231,1,0,0,0,206,
1299,1,0,0,0,208,1301,1,0,0,0,210,1305,1,0,0,0,212,1314,1,0,0,0,214,1316,
1,0,0,0,216,1318,1,0,0,0,218,1320,1,0,0,0,220,1322,1,0,0,0,222,1324,1,0,
0,0,224,1328,1,0,0,0,226,1330,1,0,0,0,228,1334,1,0,0,0,230,1336,1,0,0,0,
232,237,3,2,1,0,233,238,3,8,4,0,234,238,3,18,9,0,235,238,3,20,10,0,236,238,
3,22,11,0,237,233,1,0,0,0,237,234,1,0,0,0,237,235,1,0,0,0,237,236,1,0,0,
0,238,239,1,0,0,0,239,240,3,48,24,0,240,241,5,0,0,1,241,1,1,0,0,0,242,245,
3,4,2,0,243,245,3,6,3,0,244,242,1,0,0,0,244,243,1,0,0,0,245,248,1,0,0,0,
246,244,1,0,0,0,246,247,1,0,0,0,247,3,1,0,0,0,248,246,1,0,0,0,249,250,5,
2,0,0,250,251,5,105,0,0,251,5,1,0,0,0,252,253,5,3,0,0,253,254,5,106,0,0,
254,255,5,105,0,0,255,7,1,0,0,0,256,260,3,12,6,0,257,259,3,24,12,0,258,257,
1,0,0,0,259,262,1,0,0,0,260,258,1,0,0,0,260,261,1,0,0,0,261,263,1,0,0,0,
262,260,1,0,0,0,263,264,3,26,13,0,264,265,3,28,14,0,265,9,1,0,0,0,266,267,
3,12,6,0,267,268,3,26,13,0,268,269,3,28,14,0,269,270,3,48,24,0,270,11,1,
0,0,0,271,273,5,4,0,0,272,274,3,14,7,0,273,272,1,0,0,0,273,274,1,0,0,0,274,
281,1,0,0,0,275,277,3,16,8,0,276,275,1,0,0,0,277,278,1,0,0,0,278,276,1,0,
0,0,278,279,1,0,0,0,279,282,1,0,0,0,280,282,5,143,0,0,281,276,1,0,0,0,281,
280,1,0,0,0,282,13,1,0,0,0,283,284,7,0,0,0,284,15,1,0,0,0,285,293,3,168,
84,0,286,287,5,133,0,0,287,288,3,174,87,0,288,289,5,41,0,0,289,290,3,168,
84,0,290,291,5,134,0,0,291,293,1,0,0,0,292,285,1,0,0,0,292,286,1,0,0,0,293,
17,1,0,0,0,294,318,5,7,0,0,295,299,3,96,48,0,296,298,3,24,12,0,297,296,1,
0,0,0,298,301,1,0,0,0,299,297,1,0,0,0,299,300,1,0,0,0,300,302,1,0,0,0,301,
299,1,0,0,0,302,303,3,26,13,0,303,304,3,28,14,0,304,319,1,0,0,0,305,307,
3,24,12,0,306,305,1,0,0,0,307,310,1,0,0,0,308,306,1,0,0,0,308,309,1,0,0,
0,309,311,1,0,0,0,310,308,1,0,0,0,311,312,5,12,0,0,312,314,5,135,0,0,313,
315,3,50,25,0,314,313,1,0,0,0,314,315,1,0,0,0,315,316,1,0,0,0,316,317,5,
136,0,0,317,319,3,28,14,0,318,295,1,0,0,0,318,308,1,0,0,0,319,19,1,0,0,0,
320,327,5,8,0,0,321,323,3,166,83,0,322,321,1,0,0,0,323,324,1,0,0,0,324,322,
1,0,0,0,324,325,1,0,0,0,325,328,1,0,0,0,326,328,5,143,0,0,327,322,1,0,0,
0,327,326,1,0,0,0,328,332,1,0,0,0,329,331,3,24,12,0,330,329,1,0,0,0,331,
334,1,0,0,0,332,330,1,0,0,0,332,333,1,0,0,0,333,336,1,0,0,0,334,332,1,0,
0,0,335,337,3,26,13,0,336,335,1,0,0,0,336,337,1,0,0,0,337,338,1,0,0,0,338,
339,3,28,14,0,339,21,1,0,0,0,340,344,5,9,0,0,341,343,3,24,12,0,342,341,1,
0,0,0,343,346,1,0,0,0,344,342,1,0,0,0,344,345,1,0,0,0,345,347,1,0,0,0,346,
344,1,0,0,0,347,348,3,26,13,0,348,349,3,28,14,0,349,23,1,0,0,0,350,352,5,
10,0,0,351,353,5,11,0,0,352,351,1,0,0,0,352,353,1,0,0,0,353,354,1,0,0,0,
354,355,3,224,112,0,355,25,1,0,0,0,356,358,5,12,0,0,357,356,1,0,0,0,357,
358,1,0,0,0,358,359,1,0,0,0,359,360,3,52,26,0,360,27,1,0,0,0,361,363,3,30,
15,0,362,361,1,0,0,0,362,363,1,0,0,0,363,365,1,0,0,0,364,366,3,34,17,0,365,
364,1,0,0,0,365,366,1,0,0,0,366,368,1,0,0,0,367,369,3,38,19,0,368,367,1,
0,0,0,368,369,1,0,0,0,369,371,1,0,0,0,370,372,3,42,21,0,371,370,1,0,0,0,
371,372,1,0,0,0,372,29,1,0,0,0,373,374,5,42,0,0,374,376,5,14,0,0,375,377,
3,32,16,0,376,375,1,0,0,0,377,378,1,0,0,0,378,376,1,0,0,0,378,379,1,0,0,
0,379,31,1,0,0,0,380,392,3,194,97,0,381,392,3,90,45,0,382,383,5,133,0,0,
383,386,3,174,87,0,384,385,5,41,0,0,385,387,3,168,84,0,386,384,1,0,0,0,386,
387,1,0,0,0,387,388,1,0,0,0,388,389,5,134,0,0,389,392,1,0,0,0,390,392,3,
168,84,0,391,380,1,0,0,0,391,381,1,0,0,0,391,382,1,0,0,0,391,390,1,0,0,0,
392,33,1,0,0,0,393,395,5,43,0,0,394,396,3,36,18,0,395,394,1,0,0,0,396,397,
1,0,0,0,397,395,1,0,0,0,397,398,1,0,0,0,398,35,1,0,0,0,399,400,3,88,44,0,
400,37,1,0,0,0,401,402,5,13,0,0,402,404,5,14,0,0,403,405,3,40,20,0,404,403,
1,0,0,0,405,406,1,0,0,0,406,404,1,0,0,0,406,407,1,0,0,0,407,39,1,0,0,0,408,
409,7,1,0,0,409,410,5,133,0,0,410,411,3,174,87,0,411,412,5,134,0,0,412,416,
1,0,0,0,413,416,3,88,44,0,414,416,3,168,84,0,415,408,1,0,0,0,415,413,1,0,
0,0,415,414,1,0,0,0,416,41,1,0,0,0,417,419,3,44,22,0,418,420,3,46,23,0,419,
418,1,0,0,0,419,420,1,0,0,0,420,426,1,0,0,0,421,423,3,46,23,0,422,424,3,
44,22,0,423,422,1,0,0,0,423,424,1,0,0,0,424,426,1,0,0,0,425,417,1,0,0,0,
425,421,1,0,0,0,426,43,1,0,0,0,427,428,5,17,0,0,428,429,5,112,0,0,429,45,
1,0,0,0,430,431,5,18,0,0,431,432,5,112,0,0,432,47,1,0,0,0,433,434,5,19,0,
0,434,436,3,72,36,0,435,433,1,0,0,0,435,436,1,0,0,0,436,49,1,0,0,0,437,444,
3,100,50,0,438,440,5,140,0,0,439,441,3,100,50,0,440,439,1,0,0,0,440,441,
1,0,0,0,441,443,1,0,0,0,442,438,1,0,0,0,443,446,1,0,0,0,444,442,1,0,0,0,
444,445,1,0,0,0,445,51,1,0,0,0,446,444,1,0,0,0,447,450,5,135,0,0,448,451,
3,10,5,0,449,451,3,54,27,0,450,448,1,0,0,0,450,449,1,0,0,0,451,452,1,0,0,
0,452,453,5,136,0,0,453,53,1,0,0,0,454,456,3,58,29,0,455,454,1,0,0,0,455,
456,1,0,0,0,456,460,1,0,0,0,457,459,3,56,28,0,458,457,1,0,0,0,459,462,1,
0,0,0,460,458,1,0,0,0,460,461,1,0,0,0,461,55,1,0,0,0,462,460,1,0,0,0,463,
465,3,60,30,0,464,466,5,140,0,0,465,464,1,0,0,0,465,466,1,0,0,0,466,468,
1,0,0,0,467,469,3,58,29,0,468,467,1,0,0,0,468,469,1,0,0,0,469,57,1,0,0,0,
470,477,3,112,56,0,471,473,5,140,0,0,472,474,3,112,56,0,473,472,1,0,0,0,
473,474,1,0,0,0,474,476,1,0,0,0,475,471,1,0,0,0,476,479,1,0,0,0,477,475,
1,0,0,0,477,478,1,0,0,0,478,59,1,0,0,0,479,477,1,0,0,0,480,489,3,84,42,0,
481,489,3,62,31,0,482,489,3,82,41,0,483,489,3,64,32,0,484,489,3,66,33,0,
485,489,3,86,43,0,486,489,3,68,34,0,487,489,3,70,35,0,488,480,1,0,0,0,488,
481,1,0,0,0,488,482,1,0,0,0,488,483,1,0,0,0,488,484,1,0,0,0,488,485,1,0,
0,0,488,486,1,0,0,0,488,487,1,0,0,0,489,61,1,0,0,0,490,491,5,20,0,0,491,
492,3,52,26,0,492,63,1,0,0,0,493,494,5,21,0,0,494,495,3,166,83,0,495,496,
3,52,26,0,496,65,1,0,0,0,497,499,5,46,0,0,498,500,5,39,0,0,499,498,1,0,0,
0,499,500,1,0,0,0,500,501,1,0,0,0,501,502,3,166,83,0,502,503,3,52,26,0,503,
67,1,0,0,0,504,505,5,47,0,0,505,506,5,133,0,0,506,507,3,174,87,0,507,508,
5,41,0,0,508,509,3,168,84,0,509,510,5,134,0,0,510,69,1,0,0,0,511,512,5,19,
0,0,512,513,3,72,36,0,513,71,1,0,0,0,514,517,3,74,37,0,515,517,3,76,38,0,
516,514,1,0,0,0,516,515,1,0,0,0,517,73,1,0,0,0,518,519,3,168,84,0,519,523,
5,135,0,0,520,522,3,80,40,0,521,520,1,0,0,0,522,525,1,0,0,0,523,521,1,0,
0,0,523,524,1,0,0,0,524,526,1,0,0,0,525,523,1,0,0,0,526,527,5,136,0,0,527,
75,1,0,0,0,528,532,5,133,0,0,529,531,3,168,84,0,530,529,1,0,0,0,531,534,
1,0,0,0,532,530,1,0,0,0,532,533,1,0,0,0,533,535,1,0,0,0,534,532,1,0,0,0,
535,536,5,134,0,0,536,540,5,135,0,0,537,539,3,78,39,0,538,537,1,0,0,0,539,
542,1,0,0,0,540,538,1,0,0,0,540,541,1,0,0,0,541,543,1,0,0,0,542,540,1,0,
0,0,543,544,5,136,0,0,544,77,1,0,0,0,545,549,5,133,0,0,546,548,3,80,40,0,
547,546,1,0,0,0,548,551,1,0,0,0,549,547,1,0,0,0,549,550,1,0,0,0,550,552,
1,0,0,0,551,549,1,0,0,0,552,553,5,134,0,0,553,79,1,0,0,0,554,560,3,224,112,
0,555,560,3,210,105,0,556,560,3,212,106,0,557,560,3,220,110,0,558,560,5,
44,0,0,559,554,1,0,0,0,559,555,1,0,0,0,559,556,1,0,0,0,559,557,1,0,0,0,559,
558,1,0,0,0,560,81,1,0,0,0,561,562,5,48,0,0,562,563,3,52,26,0,563,83,1,0,
0,0,564,569,3,52,26,0,565,566,5,22,0,0,566,568,3,52,26,0,567,565,1,0,0,0,
568,571,1,0,0,0,569,567,1,0,0,0,569,570,1,0,0,0,570,85,1,0,0,0,571,569,1,
0,0,0,572,573,5,23,0,0,573,574,3,88,44,0,574,87,1,0,0,0,575,576,5,133,0,
0,576,577,3,174,87,0,577,578,5,134,0,0,578,582,1,0,0,0,579,582,3,194,97,
0,580,582,3,90,45,0,581,575,1,0,0,0,581,579,1,0,0,0,581,580,1,0,0,0,582,
89,1,0,0,0,583,584,3,224,112,0,584,585,3,92,46,0,585,91,1,0,0,0,586,592,
5,133,0,0,587,589,5,5,0,0,588,587,1,0,0,0,588,589,1,0,0,0,589,590,1,0,0,
0,590,593,3,94,47,0,591,593,1,0,0,0,592,588,1,0,0,0,592,591,1,0,0,0,593,
594,1,0,0,0,594,595,5,134,0,0,595,93,1,0,0,0,596,601,3,174,87,0,597,598,
5,145,0,0,598,600,3,174,87,0,599,597,1,0,0,0,600,603,1,0,0,0,601,599,1,0,
0,0,601,602,1,0,0,0,602,95,1,0,0,0,603,601,1,0,0,0,604,606,5,135,0,0,605,
607,3,98,49,0,606,605,1,0,0,0,606,607,1,0,0,0,607,608,1,0,0,0,608,609,5,
136,0,0,609,97,1,0,0,0,610,617,3,100,50,0,611,613,5,140,0,0,612,614,3,98,
49,0,613,612,1,0,0,0,613,614,1,0,0,0,614,616,1,0,0,0,615,611,1,0,0,0,616,
619,1,0,0,0,617,615,1,0,0,0,617,618,1,0,0,0,618,99,1,0,0,0,619,617,1,0,0,
0,620,621,3,164,82,0,621,622,3,104,52,0,622,627,1,0,0,0,623,624,3,148,74,
0,624,625,3,102,51,0,625,627,1,0,0,0,626,620,1,0,0,0,626,623,1,0,0,0,627,
101,1,0,0,0,628,630,3,104,52,0,629,628,1,0,0,0,629,630,1,0,0,0,630,103,1,
0,0,0,631,632,3,106,53,0,632,641,3,108,54,0,633,637,5,139,0,0,634,635,3,
106,53,0,635,636,3,108,54,0,636,638,1,0,0,0,637,634,1,0,0,0,637,638,1,0,
0,0,638,640,1,0,0,0,639,633,1,0,0,0,640,643,1,0,0,0,641,639,1,0,0,0,641,
642,1,0,0,0,642,105,1,0,0,0,643,641,1,0,0,0,644,647,3,166,83,0,645,647,5,
24,0,0,646,644,1,0,0,0,646,645,1,0,0,0,647,107,1,0,0,0,648,653,3,110,55,
0,649,650,5,145,0,0,650,652,3,110,55,0,651,649,1,0,0,0,652,655,1,0,0,0,653,
651,1,0,0,0,653,654,1,0,0,0,654,109,1,0,0,0,655,653,1,0,0,0,656,657,3,160,
80,0,657,111,1,0,0,0,658,659,3,164,82,0,659,660,3,116,58,0,660,665,1,0,0,
0,661,662,3,152,76,0,662,663,3,114,57,0,663,665,1,0,0,0,664,658,1,0,0,0,
664,661,1,0,0,0,665,113,1,0,0,0,666,668,3,116,58,0,667,666,1,0,0,0,667,668,
1,0,0,0,668,115,1,0,0,0,669,672,3,120,60,0,670,672,3,122,61,0,671,669,1,
0,0,0,671,670,1,0,0,0,672,673,1,0,0,0,673,680,3,124,62,0,674,676,5,139,0,
0,675,677,3,118,59,0,676,675,1,0,0,0,676,677,1,0,0,0,677,679,1,0,0,0,678,
674,1,0,0,0,679,682,1,0,0,0,680,678,1,0,0,0,680,681,1,0,0,0,681,117,1,0,
0,0,682,680,1,0,0,0,683,686,3,120,60,0,684,686,3,122,61,0,685,683,1,0,0,
0,685,684,1,0,0,0,686,687,1,0,0,0,687,688,3,108,54,0,688,119,1,0,0,0,689,
704,3,128,64,0,690,692,7,2,0,0,691,693,5,101,0,0,692,691,1,0,0,0,692,693,
1,0,0,0,693,695,1,0,0,0,694,696,7,3,0,0,695,694,1,0,0,0,695,696,1,0,0,0,
696,697,1,0,0,0,697,698,5,133,0,0,698,699,3,128,64,0,699,700,5,41,0,0,700,
701,3,168,84,0,701,702,5,134,0,0,702,704,1,0,0,0,703,689,1,0,0,0,703,690,
1,0,0,0,704,121,1,0,0,0,705,706,3,168,84,0,706,123,1,0,0,0,707,712,3,126,
63,0,708,709,5,145,0,0,709,711,3,126,63,0,710,708,1,0,0,0,711,714,1,0,0,
0,712,710,1,0,0,0,712,713,1,0,0,0,713,125,1,0,0,0,714,712,1,0,0,0,715,716,
3,162,81,0,716,127,1,0,0,0,717,718,3,130,65,0,718,129,1,0,0,0,719,724,3,
132,66,0,720,721,5,151,0,0,721,723,3,132,66,0,722,720,1,0,0,0,723,726,1,
0,0,0,724,722,1,0,0,0,724,725,1,0,0,0,725,131,1,0,0,0,726,724,1,0,0,0,727,
732,3,136,68,0,728,729,5,147,0,0,729,731,3,136,68,0,730,728,1,0,0,0,731,
734,1,0,0,0,732,730,1,0,0,0,732,733,1,0,0,0,733,133,1,0,0,0,734,732,1,0,
0,0,735,737,3,140,70,0,736,738,3,138,69,0,737,736,1,0,0,0,737,738,1,0,0,
0,738,135,1,0,0,0,739,741,5,132,0,0,740,739,1,0,0,0,740,741,1,0,0,0,741,
742,1,0,0,0,742,743,3,134,67,0,743,137,1,0,0,0,744,745,7,4,0,0,745,139,1,
0,0,0,746,755,3,224,112,0,747,755,5,24,0,0,748,749,5,146,0,0,749,755,3,142,
71,0,750,751,5,133,0,0,751,752,3,128,64,0,752,753,5,134,0,0,753,755,1,0,
0,0,754,746,1,0,0,0,754,747,1,0,0,0,754,748,1,0,0,0,754,750,1,0,0,0,755,
141,1,0,0,0,756,770,3,144,72,0,757,766,5,133,0,0,758,763,3,144,72,0,759,
760,5,151,0,0,760,762,3,144,72,0,761,759,1,0,0,0,762,765,1,0,0,0,763,761,
1,0,0,0,763,764,1,0,0,0,764,767,1,0,0,0,765,763,1,0,0,0,766,758,1,0,0,0,
766,767,1,0,0,0,767,768,1,0,0,0,768,770,5,134,0,0,769,756,1,0,0,0,769,757,
1,0,0,0,770,143,1,0,0,0,771,773,5,132,0,0,772,771,1,0,0,0,772,773,1,0,0,
0,773,776,1,0,0,0,774,777,3,224,112,0,775,777,5,24,0,0,776,774,1,0,0,0,776,
775,1,0,0,0,777,145,1,0,0,0,778,779,5,112,0,0,779,147,1,0,0,0,780,783,3,
156,78,0,781,783,3,150,75,0,782,780,1,0,0,0,782,781,1,0,0,0,783,149,1,0,
0,0,784,785,5,137,0,0,785,786,3,104,52,0,786,787,5,138,0,0,787,151,1,0,0,
0,788,791,3,158,79,0,789,791,3,154,77,0,790,788,1,0,0,0,790,789,1,0,0,0,
791,153,1,0,0,0,792,793,5,137,0,0,793,794,3,116,58,0,794,795,5,138,0,0,795,
155,1,0,0,0,796,798,5,133,0,0,797,799,3,160,80,0,798,797,1,0,0,0,799,800,
1,0,0,0,800,798,1,0,0,0,800,801,1,0,0,0,801,802,1,0,0,0,802,803,5,134,0,
0,803,157,1,0,0,0,804,806,5,133,0,0,805,807,3,162,81,0,806,805,1,0,0,0,807,
808,1,0,0,0,808,806,1,0,0,0,808,809,1,0,0,0,809,810,1,0,0,0,810,811,5,134,
0,0,811,159,1,0,0,0,812,815,3,164,82,0,813,815,3,148,74,0,814,812,1,0,0,
0,814,813,1,0,0,0,815,161,1,0,0,0,816,819,3,164,82,0,817,819,3,152,76,0,
818,816,1,0,0,0,818,817,1,0,0,0,819,163,1,0,0,0,820,823,3,168,84,0,821,823,
3,170,85,0,822,820,1,0,0,0,822,821,1,0,0,0,823,165,1,0,0,0,824,827,3,168,
84,0,825,827,3,224,112,0,826,824,1,0,0,0,826,825,1,0,0,0,827,167,1,0,0,0,
828,829,7,5,0,0,829,169,1,0,0,0,830,837,3,224,112,0,831,837,3,210,105,0,
832,837,3,212,106,0,833,837,3,220,110,0,834,837,3,228,114,0,835,837,3,172,
86,0,836,830,1,0,0,0,836,831,1,0,0,0,836,832,1,0,0,0,836,833,1,0,0,0,836,
834,1,0,0,0,836,835,1,0,0,0,837,171,1,0,0,0,838,839,5,133,0,0,839,840,5,
134,0,0,840,173,1,0,0,0,841,842,3,176,88,0,842,175,1,0,0,0,843,848,3,178,
89,0,844,845,5,131,0,0,845,847,3,178,89,0,846,844,1,0,0,0,847,850,1,0,0,
0,848,846,1,0,0,0,848,849,1,0,0,0,849,177,1,0,0,0,850,848,1,0,0,0,851,856,
3,180,90,0,852,853,5,130,0,0,853,855,3,180,90,0,854,852,1,0,0,0,855,858,
1,0,0,0,856,854,1,0,0,0,856,857,1,0,0,0,857,179,1,0,0,0,858,856,1,0,0,0,
859,862,3,182,91,0,860,861,7,6,0,0,861,863,3,182,91,0,862,860,1,0,0,0,862,
863,1,0,0,0,863,876,1,0,0,0,864,866,3,182,91,0,865,867,5,96,0,0,866,865,
1,0,0,0,866,867,1,0,0,0,867,868,1,0,0,0,868,869,5,97,0,0,869,871,5,133,0,
0,870,872,3,94,47,0,871,870,1,0,0,0,871,872,1,0,0,0,872,873,1,0,0,0,873,
874,5,134,0,0,874,876,1,0,0,0,875,859,1,0,0,0,875,864,1,0,0,0,876,181,1,
0,0,0,877,881,3,188,94,0,878,880,3,184,92,0,879,878,1,0,0,0,880,883,1,0,
0,0,881,879,1,0,0,0,881,882,1,0,0,0,882,183,1,0,0,0,883,881,1,0,0,0,884,
889,3,186,93,0,885,886,7,7,0,0,886,888,3,190,95,0,887,885,1,0,0,0,888,891,
1,0,0,0,889,887,1,0,0,0,889,890,1,0,0,0,890,185,1,0,0,0,891,889,1,0,0,0,
892,893,7,8,0,0,893,897,3,188,94,0,894,897,3,216,108,0,895,897,3,218,109,
0,896,892,1,0,0,0,896,894,1,0,0,0,896,895,1,0,0,0,897,187,1,0,0,0,898,903,
3,190,95,0,899,900,7,7,0,0,900,902,3,190,95,0,901,899,1,0,0,0,902,905,1,
0,0,0,903,901,1,0,0,0,903,904,1,0,0,0,904,189,1,0,0,0,905,903,1,0,0,0,906,
908,7,9,0,0,907,906,1,0,0,0,907,908,1,0,0,0,908,909,1,0,0,0,909,910,3,192,
96,0,910,191,1,0,0,0,911,912,5,133,0,0,912,913,3,174,87,0,913,914,5,134,
0,0,914,922,1,0,0,0,915,922,3,194,97,0,916,922,3,208,104,0,917,922,3,210,
105,0,918,922,3,212,106,0,919,922,3,220,110,0,920,922,3,168,84,0,921,911,
1,0,0,0,921,915,1,0,0,0,921,916,1,0,0,0,921,917,1,0,0,0,921,918,1,0,0,0,
921,919,1,0,0,0,921,920,1,0,0,0,922,193,1,0,0,0,923,1192,3,206,103,0,924,
925,5,25,0,0,925,926,5,133,0,0,926,927,3,174,87,0,927,928,5,134,0,0,928,
1192,1,0,0,0,929,930,5,26,0,0,930,931,5,133,0,0,931,932,3,174,87,0,932,933,
5,134,0,0,933,1192,1,0,0,0,934,935,5,27,0,0,935,936,5,133,0,0,936,937,3,
174,87,0,937,938,5,145,0,0,938,939,3,174,87,0,939,940,5,134,0,0,940,1192,
1,0,0,0,941,942,5,28,0,0,942,943,5,133,0,0,943,944,3,174,87,0,944,945,5,
134,0,0,945,1192,1,0,0,0,946,947,5,29,0,0,947,948,5,133,0,0,948,949,3,168,
84,0,949,950,5,134,0,0,950,1192,1,0,0,0,951,952,5,49,0,0,952,953,5,133,0,
0,953,954,3,174,87,0,954,955,5,134,0,0,955,1192,1,0,0,0,956,957,5,50,0,0,
957,958,5,133,0,0,958,959,3,174,87,0,959,960,5,134,0,0,960,1192,1,0,0,0,
961,962,5,51,0,0,962,964,5,133,0,0,963,965,3,174,87,0,964,963,1,0,0,0,964,
965,1,0,0,0,965,966,1,0,0,0,966,1192,5,134,0,0,967,968,5,52,0,0,968,969,
5,133,0,0,969,1192,5,134,0,0,970,971,5,53,0,0,971,972,5,133,0,0,972,973,
3,174,87,0,973,974,5,134,0,0,974,1192,1,0,0,0,975,976,5,54,0,0,976,977,5,
133,0,0,977,978,3,174,87,0,978,979,5,134,0,0,979,1192,1,0,0,0,980,981,5,
55,0,0,981,982,5,133,0,0,982,983,3,174,87,0,983,984,5,134,0,0,984,1192,1,
0,0,0,985,986,5,56,0,0,986,987,5,133,0,0,987,988,3,174,87,0,988,989,5,134,
0,0,989,1192,1,0,0,0,990,991,5,57,0,0,991,993,5,133,0,0,992,994,3,94,47,
0,993,992,1,0,0,0,993,994,1,0,0,0,994,995,1,0,0,0,995,1192,5,134,0,0,996,
1192,3,198,99,0,997,998,5,58,0,0,998,999,5,133,0,0,999,1000,3,174,87,0,1000,
1001,5,134,0,0,1001,1192,1,0,0,0,1002,1192,3,200,100,0,1003,1004,5,59,0,
0,1004,1005,5,133,0,0,1005,1006,3,174,87,0,1006,1007,5,134,0,0,1007,1192,
1,0,0,0,1008,1009,5,60,0,0,1009,1010,5,133,0,0,1010,1011,3,174,87,0,1011,
1012,5,134,0,0,1012,1192,1,0,0,0,1013,1014,5,61,0,0,1014,1015,5,133,0,0,
1015,1016,3,174,87,0,1016,1017,5,134,0,0,1017,1192,1,0,0,0,1018,1019,5,62,
0,0,1019,1020,5,133,0,0,1020,1021,3,174,87,0,1021,1022,5,145,0,0,1022,1023,
3,174,87,0,1023,1024,5,134,0,0,1024,1192,1,0,0,0,1025,1026,5,63,0,0,1026,
1027,5,133,0,0,1027,1028,3,174,87,0,1028,1029,5,145,0,0,1029,1030,3,174,
87,0,1030,1031,5,134,0,0,1031,1192,1,0,0,0,1032,1033,5,64,0,0,1033,1034,
5,133,0,0,1034,1035,3,174,87,0,1035,1036,5,145,0,0,1036,1037,3,174,87,0,
1037,1038,5,134,0,0,1038,1192,1,0,0,0,1039,1040,5,65,0,0,1040,1041,5,133,
0,0,1041,1042,3,174,87,0,1042,1043,5,145,0,0,1043,1044,3,174,87,0,1044,1045,
5,134,0,0,1045,1192,1,0,0,0,1046,1047,5,66,0,0,1047,1048,5,133,0,0,1048,
1049,3,174,87,0,1049,1050,5,145,0,0,1050,1051,3,174,87,0,1051,1052,5,134,
0,0,1052,1192,1,0,0,0,1053,1054,5,68,0,0,1054,1055,5,133,0,0,1055,1056,3,
174,87,0,1056,1057,5,134,0,0,1057,1192,1,0,0,0,1058,1059,5,69,0,0,1059,1060,
5,133,0,0,1060,1061,3,174,87,0,1061,1062,5,134,0,0,1062,1192,1,0,0,0,1063,
1064,5,70,0,0,1064,1065,5,133,0,0,1065,1066,3,174,87,0,1066,1067,5,134,0,
0,1067,1192,1,0,0,0,1068,1069,5,71,0,0,1069,1070,5,133,0,0,1070,1071,3,174,
87,0,1071,1072,5,134,0,0,1072,1192,1,0,0,0,1073,1074,5,72,0,0,1074,1075,
5,133,0,0,1075,1076,3,174,87,0,1076,1077,5,134,0,0,1077,1192,1,0,0,0,1078,
1079,5,73,0,0,1079,1080,5,133,0,0,1080,1081,3,174,87,0,1081,1082,5,134,0,
0,1082,1192,1,0,0,0,1083,1084,5,74,0,0,1084,1085,5,133,0,0,1085,1086,3,174,
87,0,1086,1087,5,134,0,0,1087,1192,1,0,0,0,1088,1089,5,75,0,0,1089,1090,
5,133,0,0,1090,1091,3,174,87,0,1091,1092,5,134,0,0,1092,1192,1,0,0,0,1093,
1094,5,76,0,0,1094,1095,5,133,0,0,1095,1192,5,134,0,0,1096,1097,5,77,0,0,
1097,1098,5,133,0,0,1098,1192,5,134,0,0,1099,1100,5,78,0,0,1100,1101,5,133,
0,0,1101,1192,5,134,0,0,1102,1103,5,79,0,0,1103,1104,5,133,0,0,1104,1105,
3,174,87,0,1105,1106,5,134,0,0,1106,1192,1,0,0,0,1107,1108,5,80,0,0,1108,
1109,5,133,0,0,1109,1110,3,174,87,0,1110,1111,5,134,0,0,1111,1192,1,0,0,
0,1112,1113,5,81,0,0,1113,1114,5,133,0,0,1114,1115,3,174,87,0,1115,1116,
5,134,0,0,1116,1192,1,0,0,0,1117,1118,5,82,0,0,1118,1119,5,133,0,0,1119,
1120,3,174,87,0,1120,1121,5,134,0,0,1121,1192,1,0,0,0,1122,1123,5,83,0,0,
1123,1124,5,133,0,0,1124,1125,3,174,87,0,1125,1126,5,134,0,0,1126,1192,1,
0,0,0,1127,1128,5,84,0,0,1128,1130,5,133,0,0,1129,1131,3,94,47,0,1130,1129,
1,0,0,0,1130,1131,1,0,0,0,1131,1132,1,0,0,0,1132,1192,5,134,0,0,1133,1134,
5,85,0,0,1134,1135,5,133,0,0,1135,1136,3,174,87,0,1136,1137,5,145,0,0,1137,
1138,3,174,87,0,1138,1139,5,145,0,0,1139,1140,3,174,87,0,1140,1141,5,134,
0,0,1141,1192,1,0,0,0,1142,1143,5,86,0,0,1143,1144,5,133,0,0,1144,1145,3,
174,87,0,1145,1146,5,145,0,0,1146,1147,3,174,87,0,1147,1148,5,134,0,0,1148,
1192,1,0,0,0,1149,1150,5,87,0,0,1150,1151,5,133,0,0,1151,1152,3,174,87,0,
1152,1153,5,145,0,0,1153,1154,3,174,87,0,1154,1155,5,134,0,0,1155,1192,1,
0,0,0,1156,1157,5,30,0,0,1157,1158,5,133,0,0,1158,1159,3,174,87,0,1159,1160,
5,145,0,0,1160,1161,3,174,87,0,1161,1162,5,134,0,0,1162,1192,1,0,0,0,1163,
1164,5,31,0,0,1164,1165,5,133,0,0,1165,1166,3,174,87,0,1166,1167,5,134,0,
0,1167,1192,1,0,0,0,1168,1169,5,32,0,0,1169,1170,5,133,0,0,1170,1171,3,174,
87,0,1171,1172,5,134,0,0,1172,1192,1,0,0,0,1173,1174,5,33,0,0,1174,1175,
5,133,0,0,1175,1176,3,174,87,0,1176,1177,5,134,0,0,1177,1192,1,0,0,0,1178,
1179,5,34,0,0,1179,1180,5,133,0,0,1180,1181,3,174,87,0,1181,1182,5,134,0,
0,1182,1192,1,0,0,0,1183,1184,5,88,0,0,1184,1185,5,133,0,0,1185,1186,3,174,
87,0,1186,1187,5,134,0,0,1187,1192,1,0,0,0,1188,1192,3,196,98,0,1189,1192,
3,202,101,0,1190,1192,3,204,102,0,1191,923,1,0,0,0,1191,924,1,0,0,0,1191,
929,1,0,0,0,1191,934,1,0,0,0,1191,941,1,0,0,0,1191,946,1,0,0,0,1191,951,
1,0,0,0,1191,956,1,0,0,0,1191,961,1,0,0,0,1191,967,1,0,0,0,1191,970,1,0,
0,0,1191,975,1,0,0,0,1191,980,1,0,0,0,1191,985,1,0,0,0,1191,990,1,0,0,0,
1191,996,1,0,0,0,1191,997,1,0,0,0,1191,1002,1,0,0,0,1191,1003,1,0,0,0,1191,
1008,1,0,0,0,1191,1013,1,0,0,0,1191,1018,1,0,0,0,1191,1025,1,0,0,0,1191,
1032,1,0,0,0,1191,1039,1,0,0,0,1191,1046,1,0,0,0,1191,1053,1,0,0,0,1191,
1058,1,0,0,0,1191,1063,1,0,0,0,1191,1068,1,0,0,0,1191,1073,1,0,0,0,1191,
1078,1,0,0,0,1191,1083,1,0,0,0,1191,1088,1,0,0,0,1191,1093,1,0,0,0,1191,
1096,1,0,0,0,1191,1099,1,0,0,0,1191,1102,1,0,0,0,1191,1107,1,0,0,0,1191,
1112,1,0,0,0,1191,1117,1,0,0,0,1191,1122,1,0,0,0,1191,1127,1,0,0,0,1191,
1133,1,0,0,0,1191,1142,1,0,0,0,1191,1149,1,0,0,0,1191,1156,1,0,0,0,1191,
1163,1,0,0,0,1191,1168,1,0,0,0,1191,1173,1,0,0,0,1191,1178,1,0,0,0,1191,
1183,1,0,0,0,1191,1188,1,0,0,0,1191,1189,1,0,0,0,1191,1190,1,0,0,0,1192,
195,1,0,0,0,1193,1194,5,35,0,0,1194,1195,5,133,0,0,1195,1196,3,174,87,0,
1196,1197,5,145,0,0,1197,1200,3,174,87,0,1198,1199,5,145,0,0,1199,1201,3,
174,87,0,1200,1198,1,0,0,0,1200,1201,1,0,0,0,1201,1202,1,0,0,0,1202,1203,
5,134,0,0,1203,197,1,0,0,0,1204,1205,5,36,0,0,1205,1206,5,133,0,0,1206,1207,
3,174,87,0,1207,1208,5,145,0,0,1208,1211,3,174,87,0,1209,1210,5,145,0,0,
1210,1212,3,174,87,0,1211,1209,1,0,0,0,1211,1212,1,0,0,0,1212,1213,1,0,0,
0,1213,1214,5,134,0,0,1214,199,1,0,0,0,1215,1216,5,67,0,0,1216,1217,5,133,
0,0,1217,1218,3,174,87,0,1218,1219,5,145,0,0,1219,1220,3,174,87,0,1220,1221,
5,145,0,0,1221,1224,3,174,87,0,1222,1223,5,145,0,0,1223,1225,3,174,87,0,
1224,1222,1,0,0,0,1224,1225,1,0,0,0,1225,1226,1,0,0,0,1226,1227,5,134,0,
0,1227,201,1,0,0,0,1228,1229,5,98,0,0,1229,1230,3,52,26,0,1230,203,1,0,0,
0,1231,1232,5,96,0,0,1232,1233,5,98,0,0,1233,1234,3,52,26,0,1234,205,1,0,
0,0,1235,1236,5,89,0,0,1236,1238,5,133,0,0,1237,1239,5,5,0,0,1238,1237,1,
0,0,0,1238,1239,1,0,0,0,1239,1242,1,0,0,0,1240,1243,5,143,0,0,1241,1243,
3,174,87,0,1242,1240,1,0,0,0,1242,1241,1,0,0,0,1243,1244,1,0,0,0,1244,1300,
5,134,0,0,1245,1246,5,90,0,0,1246,1248,5,133,0,0,1247,1249,5,5,0,0,1248,
1247,1,0,0,0,1248,1249,1,0,0,0,1249,1250,1,0,0,0,1250,1251,3,174,87,0,1251,
1252,5,134,0,0,1252,1300,1,0,0,0,1253,1254,5,91,0,0,1254,1256,5,133,0,0,
1255,1257,5,5,0,0,1256,1255,1,0,0,0,1256,1257,1,0,0,0,1257,1258,1,0,0,0,
1258,1259,3,174,87,0,1259,1260,5,134,0,0,1260,1300,1,0,0,0,1261,1262,5,92,
0,0,1262,1264,5,133,0,0,1263,1265,5,5,0,0,1264,1263,1,0,0,0,1264,1265,1,
0,0,0,1265,1266,1,0,0,0,1266,1267,3,174,87,0,1267,1268,5,134,0,0,1268,1300,
1,0,0,0,1269,1270,5,93,0,0,1270,1272,5,133,0,0,1271,1273,5,5,0,0,1272,1271,
1,0,0,0,1272,1273,1,0,0,0,1273,1274,1,0,0,0,1274,1275,3,174,87,0,1275,1276,
5,134,0,0,1276,1300,1,0,0,0,1277,1278,5,94,0,0,1278,1280,5,133,0,0,1279,
1281,5,5,0,0,1280,1279,1,0,0,0,1280,1281,1,0,0,0,1281,1282,1,0,0,0,1282,
1283,3,174,87,0,1283,1284,5,134,0,0,1284,1300,1,0,0,0,1285,1286,5,95,0,0,
1286,1288,5,133,0,0,1287,1289,5,5,0,0,1288,1287,1,0,0,0,1288,1289,1,0,0,
0,1289,1290,1,0,0,0,1290,1295,3,174,87,0,1291,1292,5,139,0,0,1292,1293,5,
99,0,0,1293,1294,5,148,0,0,1294,1296,3,222,111,0,1295,1291,1,0,0,0,1295,
1296,1,0,0,0,1296,1297,1,0,0,0,1297,1298,5,134,0,0,1298,1300,1,0,0,0,1299,
1235,1,0,0,0,1299,1245,1,0,0,0,1299,1253,1,0,0,0,1299,1261,1,0,0,0,1299,
1269,1,0,0,0,1299,1277,1,0,0,0,1299,1285,1,0,0,0,1300,207,1,0,0,0,1301,1303,
3,224,112,0,1302,1304,3,92,46,0,1303,1302,1,0,0,0,1303,1304,1,0,0,0,1304,
209,1,0,0,0,1305,1309,3,222,111,0,1306,1310,5,111,0,0,1307,1308,5,126,0,
0,1308,1310,3,224,112,0,1309,1306,1,0,0,0,1309,1307,1,0,0,0,1309,1310,1,
0,0,0,1310,211,1,0,0,0,1311,1315,3,214,107,0,1312,1315,3,216,108,0,1313,
1315,3,218,109,0,1314,1311,1,0,0,0,1314,1312,1,0,0,0,1314,1313,1,0,0,0,1315,
213,1,0,0,0,1316,1317,7,10,0,0,1317,215,1,0,0,0,1318,1319,7,11,0,0,1319,
217,1,0,0,0,1320,1321,7,12,0,0,1321,219,1,0,0,0,1322,1323,7,13,0,0,1323,
221,1,0,0,0,1324,1325,7,14,0,0,1325,223,1,0,0,0,1326,1329,5,105,0,0,1327,
1329,3,226,113,0,1328,1326,1,0,0,0,1328,1327,1,0,0,0,1329,225,1,0,0,0,1330,
1331,7,15,0,0,1331,227,1,0,0,0,1332,1335,5,108,0,0,1333,1335,3,230,115,0,
1334,1332,1,0,0,0,1334,1333,1,0,0,0,1335,229,1,0,0,0,1336,1337,5,137,0,0,
1337,1338,5,138,0,0,1338,231,1,0,0,0,127,237,244,246,260,273,278,281,292,
299,308,314,318,324,327,332,336,344,352,357,362,365,368,371,378,386,391,
397,406,415,419,423,425,435,440,444,450,455,460,465,468,473,477,488,499,
516,523,532,540,549,559,569,581,588,592,601,606,613,617,626,629,637,641,
646,653,664,667,671,676,680,685,692,695,703,712,724,732,737,740,754,763,
766,769,772,776,782,790,800,808,814,818,822,826,836,848,856,862,866,871,
875,881,889,896,903,907,921,964,993,1130,1191,1200,1211,1224,1238,1242,1248,
1256,1264,1272,1280,1288,1295,1299,1303,1309,1314,1328,1334];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class SPARQLParser extends antlr4.Parser {

    static grammarFileName = "SPARQLParser.g4";
    static literalNames = [ null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            "'a'", null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, "'^^'", 
                            "'<='", "'>='", "'!='", "'&&'", "'||'", "'^'", 
                            "'('", "')'", "'{'", "'}'", "'['", "']'", "';'", 
                            "'.'", "'+'", "'-'", "'*'", "'?'", "','", "'!'", 
                            "'/'", "'='", "'<'", "'>'", "'|'" ];
    static symbolicNames = [ null, "WS", "BASE", "PREFIX", "SELECT", "DISTINCT", 
                             "REDUCED", "CONSTRUCT", "DESCRIBE", "ASK", 
                             "FROM", "NAMED", "WHERE", "ORDER", "BY", "ASC", 
                             "DESC", "LIMIT", "OFFSET", "VALUES", "OPTIONAL", 
                             "GRAPH", "UNION", "FILTER", "A", "STR", "LANG", 
                             "LANGMATCHES", "DATATYPE", "BOUND", "SAMETERM", 
                             "ISIRI", "ISURI", "ISBLANK", "ISLITERAL", "REGEX", 
                             "SUBSTR", "TRUE", "FALSE", "SILENT", "ALL", 
                             "AS", "GROUP", "HAVING", "UNDEF", "BINDINGS", 
                             "SERVICE", "BIND", "MINUS", "IRI", "URI", "BNODE", 
                             "RAND", "ABS", "CEIL", "FLOOR", "ROUND", "CONCAT", 
                             "STRLEN", "UCASE", "LCASE", "ENCODE_FOR_URI", 
                             "CONTAINS", "STRSTARTS", "STRENDS", "STRBEFORE", 
                             "STRAFTER", "REPLACE", "YEAR", "MONTH", "DAY", 
                             "HOURS", "MINUTES", "SECONDS", "TIMEZONE", 
                             "TZ", "NOW", "UUID", "STRUUID", "MD5", "SHA1", 
                             "SHA256", "SHA384", "SHA512", "COALESCE", "IF", 
                             "STRLANG", "STRDT", "ISNUMERIC", "COUNT", "SUM", 
                             "MIN", "MAX", "AVG", "SAMPLE", "GROUP_CONCAT", 
                             "NOT", "IN", "EXISTS", "SEPARATOR", "ANY", 
                             "SHORTEST", "SIMPLE", "ACYCLIC", "WALKS", "IRIREF", 
                             "PNAME_NS", "PNAME_LN", "BLANK_NODE_LABEL", 
                             "VAR1", "VAR2", "LANGTAG", "INTEGER", "DECIMAL", 
                             "DOUBLE", "INTEGER_POSITIVE", "DECIMAL_POSITIVE", 
                             "DOUBLE_POSITIVE", "INTEGER_NEGATIVE", "DECIMAL_NEGATIVE", 
                             "DOUBLE_NEGATIVE", "STRING_LITERAL1", "STRING_LITERAL2", 
                             "STRING_LITERAL_LONG1", "STRING_LITERAL_LONG2", 
                             "COMMENT", "REFERENCE", "LESS_EQUAL", "GREATER_EQUAL", 
                             "NOT_EQUAL", "AND", "OR", "INVERSE", "OPEN_BRACE", 
                             "CLOSE_BRACE", "OPEN_CURLY_BRACE", "CLOSE_CURLY_BRACE", 
                             "OPEN_SQUARE_BRACKET", "CLOSE_SQUARE_BRACKET", 
                             "SEMICOLON", "DOT", "PLUS_SIGN", "MINUS_SIGN", 
                             "ASTERISK", "QUESTION_MARK", "COMMA", "NEGATION", 
                             "DIVIDE", "EQUAL", "LESS", "GREATER", "PIPE", 
                             "ANY_OTHER" ];
    static ruleNames = [ "query", "prologue", "baseDecl", "prefixDecl", 
                         "selectQuery", "subSelect", "selectClause", "selectModifier", 
                         "selectVariables", "constructQuery", "describeQuery", 
                         "askQuery", "datasetClause", "whereClause", "solutionModifier", 
                         "groupClause", "groupCondition", "havingClause", 
                         "havingCondition", "orderClause", "orderCondition", 
                         "limitOffsetClauses", "limitClause", "offsetClause", 
                         "valuesClause", "triplesTemplate", "groupGraphPattern", 
                         "groupGraphPatternSub", "groupGraphPatternSubList", 
                         "triplesBlock", "graphPatternNotTriples", "optionalGraphPattern", 
                         "graphGraphPattern", "serviceGraphPattern", "bind", 
                         "inlineData", "dataBlock", "inlineDataOneVar", 
                         "inlineDataFull", "dataBlockValues", "dataBlockValue", 
                         "minusGraphPattern", "groupOrUnionGraphPattern", 
                         "filter", "constraint", "functionCall", "argList", 
                         "expressionList", "constructTemplate", "constructTriples", 
                         "triplesSameSubject", "propertyList", "propertyListNotEmpty", 
                         "verb", "objectList", "object", "triplesSameSubjectPath", 
                         "propertyListPath", "propertyListPathNotEmpty", 
                         "propertyListPathNotEmptyList", "verbPath", "verbSimple", 
                         "objectListPath", "objectPath", "path", "pathAlternative", 
                         "pathSequence", "pathElt", "pathEltOrInverse", 
                         "pathMod", "pathPrimary", "pathNegatedPropertySet", 
                         "pathOneInPropertySet", "integer", "triplesNode", 
                         "blankNodePropertyList", "triplesNodePath", "blankNodePropertyListPath", 
                         "collection", "collectionPath", "graphNode", "graphNodePath", 
                         "varOrTerm", "varOrIRI", "var", "graphTerm", "nil", 
                         "expression", "conditionalOrExpression", "conditionalAndExpression", 
                         "relationalExpression", "additiveExpression", "rhsAdditiveExpression", 
                         "rhsAdditiveExpressionSub", "multiplicativeExpression", 
                         "unaryExpression", "primaryExpression", "builtInCall", 
                         "regexExpression", "subStringExpression", "strReplaceExpression", 
                         "existsFunction", "notExistsFunction", "aggregate", 
                         "iriOrFunction", "rdfLiteral", "numericLiteral", 
                         "numericLiteralUnsigned", "numericLiteralPositive", 
                         "numericLiteralNegative", "booleanLiteral", "string", 
                         "iri", "prefixedName", "blankNode", "anon" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = SPARQLParser.ruleNames;
        this.literalNames = SPARQLParser.literalNames;
        this.symbolicNames = SPARQLParser.symbolicNames;
    }



	query() {
	    let localctx = new QueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, SPARQLParser.RULE_query);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 232;
	        this.prologue();
	        this.state = 237;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 4:
	            this.state = 233;
	            this.selectQuery();
	            break;
	        case 7:
	            this.state = 234;
	            this.constructQuery();
	            break;
	        case 8:
	            this.state = 235;
	            this.describeQuery();
	            break;
	        case 9:
	            this.state = 236;
	            this.askQuery();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 239;
	        this.valuesClause();
	        this.state = 240;
	        this.match(SPARQLParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prologue() {
	    let localctx = new PrologueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, SPARQLParser.RULE_prologue);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 246;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===2 || _la===3) {
	            this.state = 244;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 2:
	                this.state = 242;
	                this.baseDecl();
	                break;
	            case 3:
	                this.state = 243;
	                this.prefixDecl();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 248;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	baseDecl() {
	    let localctx = new BaseDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, SPARQLParser.RULE_baseDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 249;
	        this.match(SPARQLParser.BASE);
	        this.state = 250;
	        this.match(SPARQLParser.IRIREF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prefixDecl() {
	    let localctx = new PrefixDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, SPARQLParser.RULE_prefixDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 252;
	        this.match(SPARQLParser.PREFIX);
	        this.state = 253;
	        this.match(SPARQLParser.PNAME_NS);
	        this.state = 254;
	        this.match(SPARQLParser.IRIREF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectQuery() {
	    let localctx = new SelectQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, SPARQLParser.RULE_selectQuery);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 256;
	        this.selectClause();
	        this.state = 260;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===10) {
	            this.state = 257;
	            this.datasetClause();
	            this.state = 262;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 263;
	        this.whereClause();
	        this.state = 264;
	        this.solutionModifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subSelect() {
	    let localctx = new SubSelectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, SPARQLParser.RULE_subSelect);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 266;
	        this.selectClause();
	        this.state = 267;
	        this.whereClause();
	        this.state = 268;
	        this.solutionModifier();
	        this.state = 269;
	        this.valuesClause();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectClause() {
	    let localctx = new SelectClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, SPARQLParser.RULE_selectClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 271;
	        this.match(SPARQLParser.SELECT);
	        this.state = 273;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===5 || _la===6) {
	            this.state = 272;
	            this.selectModifier();
	        }

	        this.state = 281;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 109:
	        case 110:
	        case 133:
	            this.state = 276; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 275;
	                this.selectVariables();
	                this.state = 278; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(((((_la - 109)) & ~0x1f) === 0 && ((1 << (_la - 109)) & 16777219) !== 0));
	            break;
	        case 143:
	            this.state = 280;
	            this.match(SPARQLParser.ASTERISK);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectModifier() {
	    let localctx = new SelectModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, SPARQLParser.RULE_selectModifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 283;
	        _la = this._input.LA(1);
	        if(!(_la===5 || _la===6)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectVariables() {
	    let localctx = new SelectVariablesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, SPARQLParser.RULE_selectVariables);
	    try {
	        this.state = 292;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 109:
	        case 110:
	            localctx = new SelectSingleVariableContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 285;
	            this.var_();
	            break;
	        case 133:
	            localctx = new SelectExpressionAsVariableContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 286;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 287;
	            this.expression();
	            this.state = 288;
	            this.match(SPARQLParser.AS);
	            this.state = 289;
	            this.var_();
	            this.state = 290;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructQuery() {
	    let localctx = new ConstructQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, SPARQLParser.RULE_constructQuery);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 294;
	        this.match(SPARQLParser.CONSTRUCT);
	        this.state = 318;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 135:
	            this.state = 295;
	            this.constructTemplate();
	            this.state = 299;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===10) {
	                this.state = 296;
	                this.datasetClause();
	                this.state = 301;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 302;
	            this.whereClause();
	            this.state = 303;
	            this.solutionModifier();
	            break;
	        case 10:
	        case 12:
	            this.state = 308;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===10) {
	                this.state = 305;
	                this.datasetClause();
	                this.state = 310;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 311;
	            this.match(SPARQLParser.WHERE);
	            this.state = 312;
	            this.match(SPARQLParser.OPEN_CURLY_BRACE);
	            this.state = 314;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===37 || _la===38 || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 269483967) !== 0) || _la===137) {
	                this.state = 313;
	                this.triplesTemplate();
	            }

	            this.state = 316;
	            this.match(SPARQLParser.CLOSE_CURLY_BRACE);
	            this.state = 317;
	            this.solutionModifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describeQuery() {
	    let localctx = new DescribeQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, SPARQLParser.RULE_describeQuery);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 320;
	        this.match(SPARQLParser.DESCRIBE);
	        this.state = 327;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 105:
	        case 106:
	        case 107:
	        case 109:
	        case 110:
	            this.state = 322; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 321;
	                this.varOrIRI();
	                this.state = 324; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 55) !== 0));
	            break;
	        case 143:
	            this.state = 326;
	            this.match(SPARQLParser.ASTERISK);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 332;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===10) {
	            this.state = 329;
	            this.datasetClause();
	            this.state = 334;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 336;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===12 || _la===135) {
	            this.state = 335;
	            this.whereClause();
	        }

	        this.state = 338;
	        this.solutionModifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	askQuery() {
	    let localctx = new AskQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, SPARQLParser.RULE_askQuery);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 340;
	        this.match(SPARQLParser.ASK);
	        this.state = 344;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===10) {
	            this.state = 341;
	            this.datasetClause();
	            this.state = 346;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 347;
	        this.whereClause();
	        this.state = 348;
	        this.solutionModifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	datasetClause() {
	    let localctx = new DatasetClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, SPARQLParser.RULE_datasetClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 350;
	        this.match(SPARQLParser.FROM);
	        this.state = 352;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===11) {
	            this.state = 351;
	            this.match(SPARQLParser.NAMED);
	        }

	        this.state = 354;
	        this.iri();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whereClause() {
	    let localctx = new WhereClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, SPARQLParser.RULE_whereClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 357;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===12) {
	            this.state = 356;
	            this.match(SPARQLParser.WHERE);
	        }

	        this.state = 359;
	        this.groupGraphPattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	solutionModifier() {
	    let localctx = new SolutionModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, SPARQLParser.RULE_solutionModifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 362;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===42) {
	            this.state = 361;
	            this.groupClause();
	        }

	        this.state = 365;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===43) {
	            this.state = 364;
	            this.havingClause();
	        }

	        this.state = 368;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===13) {
	            this.state = 367;
	            this.orderClause();
	        }

	        this.state = 371;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===17 || _la===18) {
	            this.state = 370;
	            this.limitOffsetClauses();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupClause() {
	    let localctx = new GroupClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, SPARQLParser.RULE_groupClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 373;
	        this.match(SPARQLParser.GROUP);
	        this.state = 374;
	        this.match(SPARQLParser.BY);
	        this.state = 376; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 375;
	            this.groupCondition();
	            this.state = 378; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 25)) & ~0x1f) === 0 && ((1 << (_la - 25)) & 4278194175) !== 0) || ((((_la - 57)) & ~0x1f) === 0 && ((1 << (_la - 57)) & 4294967295) !== 0) || ((((_la - 89)) & ~0x1f) === 0 && ((1 << (_la - 89)) & 3605247) !== 0) || _la===133);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupCondition() {
	    let localctx = new GroupConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, SPARQLParser.RULE_groupCondition);
	    var _la = 0;
	    try {
	        this.state = 391;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 25:
	        case 26:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 98:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 380;
	            this.builtInCall();
	            break;
	        case 105:
	        case 106:
	        case 107:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 381;
	            this.functionCall();
	            break;
	        case 133:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 382;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 383;
	            this.expression();
	            this.state = 386;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===41) {
	                this.state = 384;
	                this.match(SPARQLParser.AS);
	                this.state = 385;
	                this.var_();
	            }

	            this.state = 388;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 109:
	        case 110:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 390;
	            this.var_();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	havingClause() {
	    let localctx = new HavingClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, SPARQLParser.RULE_havingClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 393;
	        this.match(SPARQLParser.HAVING);
	        this.state = 395; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 394;
	            this.havingCondition();
	            this.state = 397; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 25)) & ~0x1f) === 0 && ((1 << (_la - 25)) & 4278194175) !== 0) || ((((_la - 57)) & ~0x1f) === 0 && ((1 << (_la - 57)) & 4294967295) !== 0) || ((((_la - 89)) & ~0x1f) === 0 && ((1 << (_la - 89)) & 459519) !== 0) || _la===133);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	havingCondition() {
	    let localctx = new HavingConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, SPARQLParser.RULE_havingCondition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 399;
	        this.constraint();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderClause() {
	    let localctx = new OrderClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, SPARQLParser.RULE_orderClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 401;
	        this.match(SPARQLParser.ORDER);
	        this.state = 402;
	        this.match(SPARQLParser.BY);
	        this.state = 404; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 403;
	            this.orderCondition();
	            this.state = 406; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 15)) & ~0x1f) === 0 && ((1 << (_la - 15)) & 4193283) !== 0) || ((((_la - 49)) & ~0x1f) === 0 && ((1 << (_la - 49)) & 4294967295) !== 0) || ((((_la - 81)) & ~0x1f) === 0 && ((1 << (_la - 81)) & 922943487) !== 0) || _la===133);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderCondition() {
	    let localctx = new OrderConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, SPARQLParser.RULE_orderCondition);
	    var _la = 0;
	    try {
	        this.state = 415;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 15:
	        case 16:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 408;
	            _la = this._input.LA(1);
	            if(!(_la===15 || _la===16)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 409;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 410;
	            this.expression();
	            this.state = 411;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 25:
	        case 26:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 98:
	        case 105:
	        case 106:
	        case 107:
	        case 133:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 413;
	            this.constraint();
	            break;
	        case 109:
	        case 110:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 414;
	            this.var_();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limitOffsetClauses() {
	    let localctx = new LimitOffsetClausesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, SPARQLParser.RULE_limitOffsetClauses);
	    var _la = 0;
	    try {
	        this.state = 425;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 17:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 417;
	            this.limitClause();
	            this.state = 419;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===18) {
	                this.state = 418;
	                this.offsetClause();
	            }

	            break;
	        case 18:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 421;
	            this.offsetClause();
	            this.state = 423;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===17) {
	                this.state = 422;
	                this.limitClause();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limitClause() {
	    let localctx = new LimitClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, SPARQLParser.RULE_limitClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 427;
	        this.match(SPARQLParser.LIMIT);
	        this.state = 428;
	        this.match(SPARQLParser.INTEGER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	offsetClause() {
	    let localctx = new OffsetClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, SPARQLParser.RULE_offsetClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 430;
	        this.match(SPARQLParser.OFFSET);
	        this.state = 431;
	        this.match(SPARQLParser.INTEGER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valuesClause() {
	    let localctx = new ValuesClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, SPARQLParser.RULE_valuesClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 435;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 433;
	            this.match(SPARQLParser.VALUES);
	            this.state = 434;
	            this.dataBlock();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	triplesTemplate() {
	    let localctx = new TriplesTemplateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, SPARQLParser.RULE_triplesTemplate);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 437;
	        this.triplesSameSubject();
	        this.state = 444;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===140) {
	            this.state = 438;
	            this.match(SPARQLParser.DOT);
	            this.state = 440;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===37 || _la===38 || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 269483967) !== 0) || _la===137) {
	                this.state = 439;
	                this.triplesSameSubject();
	            }

	            this.state = 446;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupGraphPattern() {
	    let localctx = new GroupGraphPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, SPARQLParser.RULE_groupGraphPattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 447;
	        this.match(SPARQLParser.OPEN_CURLY_BRACE);
	        this.state = 450;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 4:
	            this.state = 448;
	            this.subSelect();
	            break;
	        case 19:
	        case 20:
	        case 21:
	        case 23:
	        case 37:
	        case 38:
	        case 46:
	        case 47:
	        case 48:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 133:
	        case 135:
	        case 136:
	        case 137:
	            this.state = 449;
	            this.groupGraphPatternSub();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 452;
	        this.match(SPARQLParser.CLOSE_CURLY_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupGraphPatternSub() {
	    let localctx = new GroupGraphPatternSubContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, SPARQLParser.RULE_groupGraphPatternSub);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 455;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===37 || _la===38 || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 269483967) !== 0) || _la===137) {
	            this.state = 454;
	            this.triplesBlock();
	        }

	        this.state = 460;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 19)) & ~0x1f) === 0 && ((1 << (_la - 19)) & 939524119) !== 0) || _la===135) {
	            this.state = 457;
	            this.groupGraphPatternSubList();
	            this.state = 462;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupGraphPatternSubList() {
	    let localctx = new GroupGraphPatternSubListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, SPARQLParser.RULE_groupGraphPatternSubList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 463;
	        this.graphPatternNotTriples();
	        this.state = 465;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===140) {
	            this.state = 464;
	            this.match(SPARQLParser.DOT);
	        }

	        this.state = 468;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===37 || _la===38 || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 269483967) !== 0) || _la===137) {
	            this.state = 467;
	            this.triplesBlock();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	triplesBlock() {
	    let localctx = new TriplesBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, SPARQLParser.RULE_triplesBlock);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 470;
	        this.triplesSameSubjectPath();
	        this.state = 477;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===140) {
	            this.state = 471;
	            this.match(SPARQLParser.DOT);
	            this.state = 473;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===37 || _la===38 || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 269483967) !== 0) || _la===137) {
	                this.state = 472;
	                this.triplesSameSubjectPath();
	            }

	            this.state = 479;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphPatternNotTriples() {
	    let localctx = new GraphPatternNotTriplesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, SPARQLParser.RULE_graphPatternNotTriples);
	    try {
	        this.state = 488;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 135:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 480;
	            this.groupOrUnionGraphPattern();
	            break;
	        case 20:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 481;
	            this.optionalGraphPattern();
	            break;
	        case 48:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 482;
	            this.minusGraphPattern();
	            break;
	        case 21:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 483;
	            this.graphGraphPattern();
	            break;
	        case 46:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 484;
	            this.serviceGraphPattern();
	            break;
	        case 23:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 485;
	            this.filter();
	            break;
	        case 47:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 486;
	            this.bind();
	            break;
	        case 19:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 487;
	            this.inlineData();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionalGraphPattern() {
	    let localctx = new OptionalGraphPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, SPARQLParser.RULE_optionalGraphPattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 490;
	        this.match(SPARQLParser.OPTIONAL);
	        this.state = 491;
	        this.groupGraphPattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphGraphPattern() {
	    let localctx = new GraphGraphPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, SPARQLParser.RULE_graphGraphPattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 493;
	        this.match(SPARQLParser.GRAPH);
	        this.state = 494;
	        this.varOrIRI();
	        this.state = 495;
	        this.groupGraphPattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	serviceGraphPattern() {
	    let localctx = new ServiceGraphPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, SPARQLParser.RULE_serviceGraphPattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 497;
	        this.match(SPARQLParser.SERVICE);
	        this.state = 499;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===39) {
	            this.state = 498;
	            this.match(SPARQLParser.SILENT);
	        }

	        this.state = 501;
	        this.varOrIRI();
	        this.state = 502;
	        this.groupGraphPattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bind() {
	    let localctx = new BindContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, SPARQLParser.RULE_bind);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 504;
	        this.match(SPARQLParser.BIND);
	        this.state = 505;
	        this.match(SPARQLParser.OPEN_BRACE);
	        this.state = 506;
	        this.expression();
	        this.state = 507;
	        this.match(SPARQLParser.AS);
	        this.state = 508;
	        this.var_();
	        this.state = 509;
	        this.match(SPARQLParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inlineData() {
	    let localctx = new InlineDataContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, SPARQLParser.RULE_inlineData);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 511;
	        this.match(SPARQLParser.VALUES);
	        this.state = 512;
	        this.dataBlock();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataBlock() {
	    let localctx = new DataBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, SPARQLParser.RULE_dataBlock);
	    try {
	        this.state = 516;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 109:
	        case 110:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 514;
	            this.inlineDataOneVar();
	            break;
	        case 133:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 515;
	            this.inlineDataFull();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inlineDataOneVar() {
	    let localctx = new InlineDataOneVarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, SPARQLParser.RULE_inlineDataOneVar);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 518;
	        this.var_();
	        this.state = 519;
	        this.match(SPARQLParser.OPEN_CURLY_BRACE);
	        this.state = 523;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 131) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 1048455) !== 0)) {
	            this.state = 520;
	            this.dataBlockValue();
	            this.state = 525;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 526;
	        this.match(SPARQLParser.CLOSE_CURLY_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inlineDataFull() {
	    let localctx = new InlineDataFullContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, SPARQLParser.RULE_inlineDataFull);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 528;
	        this.match(SPARQLParser.OPEN_BRACE);
	        this.state = 532;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===109 || _la===110) {
	            this.state = 529;
	            this.var_();
	            this.state = 534;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 535;
	        this.match(SPARQLParser.CLOSE_BRACE);
	        this.state = 536;
	        this.match(SPARQLParser.OPEN_CURLY_BRACE);
	        this.state = 540;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===133) {
	            this.state = 537;
	            this.dataBlockValues();
	            this.state = 542;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 543;
	        this.match(SPARQLParser.CLOSE_CURLY_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataBlockValues() {
	    let localctx = new DataBlockValuesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, SPARQLParser.RULE_dataBlockValues);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 545;
	        this.match(SPARQLParser.OPEN_BRACE);
	        this.state = 549;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 131) !== 0) || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 1048455) !== 0)) {
	            this.state = 546;
	            this.dataBlockValue();
	            this.state = 551;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 552;
	        this.match(SPARQLParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataBlockValue() {
	    let localctx = new DataBlockValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, SPARQLParser.RULE_dataBlockValue);
	    try {
	        this.state = 559;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 105:
	        case 106:
	        case 107:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 554;
	            this.iri();
	            break;
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 555;
	            this.rdfLiteral();
	            break;
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 556;
	            this.numericLiteral();
	            break;
	        case 37:
	        case 38:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 557;
	            this.booleanLiteral();
	            break;
	        case 44:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 558;
	            this.match(SPARQLParser.UNDEF);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	minusGraphPattern() {
	    let localctx = new MinusGraphPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, SPARQLParser.RULE_minusGraphPattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 561;
	        this.match(SPARQLParser.MINUS);
	        this.state = 562;
	        this.groupGraphPattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupOrUnionGraphPattern() {
	    let localctx = new GroupOrUnionGraphPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, SPARQLParser.RULE_groupOrUnionGraphPattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 564;
	        this.groupGraphPattern();
	        this.state = 569;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===22) {
	            this.state = 565;
	            this.match(SPARQLParser.UNION);
	            this.state = 566;
	            this.groupGraphPattern();
	            this.state = 571;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	filter() {
	    let localctx = new FilterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, SPARQLParser.RULE_filter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 572;
	        this.match(SPARQLParser.FILTER);
	        this.state = 573;
	        this.constraint();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constraint() {
	    let localctx = new ConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, SPARQLParser.RULE_constraint);
	    try {
	        this.state = 581;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 133:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 575;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 576;
	            this.expression();
	            this.state = 577;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 25:
	        case 26:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 98:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 579;
	            this.builtInCall();
	            break;
	        case 105:
	        case 106:
	        case 107:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 580;
	            this.functionCall();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionCall() {
	    let localctx = new FunctionCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, SPARQLParser.RULE_functionCall);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 583;
	        this.iri();
	        this.state = 584;
	        this.argList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argList() {
	    let localctx = new ArgListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, SPARQLParser.RULE_argList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 586;
	        this.match(SPARQLParser.OPEN_BRACE);
	        this.state = 592;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 5:
	        case 25:
	        case 26:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 98:
	        case 105:
	        case 106:
	        case 107:
	        case 109:
	        case 110:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 133:
	        case 141:
	        case 142:
	        case 146:
	            this.state = 588;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5) {
	                this.state = 587;
	                this.match(SPARQLParser.DISTINCT);
	            }

	            this.state = 590;
	            this.expressionList();
	            break;
	        case 134:
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 594;
	        this.match(SPARQLParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionList() {
	    let localctx = new ExpressionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, SPARQLParser.RULE_expressionList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 596;
	        this.expression();
	        this.state = 601;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===145) {
	            this.state = 597;
	            this.match(SPARQLParser.COMMA);
	            this.state = 598;
	            this.expression();
	            this.state = 603;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructTemplate() {
	    let localctx = new ConstructTemplateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, SPARQLParser.RULE_constructTemplate);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 604;
	        this.match(SPARQLParser.OPEN_CURLY_BRACE);
	        this.state = 606;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===37 || _la===38 || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 269483967) !== 0) || _la===137) {
	            this.state = 605;
	            this.constructTriples();
	        }

	        this.state = 608;
	        this.match(SPARQLParser.CLOSE_CURLY_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructTriples() {
	    let localctx = new ConstructTriplesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, SPARQLParser.RULE_constructTriples);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 610;
	        this.triplesSameSubject();
	        this.state = 617;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,57,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 611;
	                this.match(SPARQLParser.DOT);
	                this.state = 613;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===37 || _la===38 || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 269483967) !== 0) || _la===137) {
	                    this.state = 612;
	                    this.constructTriples();
	                }
	         
	            }
	            this.state = 619;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,57,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	triplesSameSubject() {
	    let localctx = new TriplesSameSubjectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, SPARQLParser.RULE_triplesSameSubject);
	    try {
	        this.state = 626;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 620;
	            this.varOrTerm();
	            this.state = 621;
	            this.propertyListNotEmpty();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 623;
	            this.triplesNode();
	            this.state = 624;
	            this.propertyList();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyList() {
	    let localctx = new PropertyListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, SPARQLParser.RULE_propertyList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 629;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24 || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 55) !== 0)) {
	            this.state = 628;
	            this.propertyListNotEmpty();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyListNotEmpty() {
	    let localctx = new PropertyListNotEmptyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, SPARQLParser.RULE_propertyListNotEmpty);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 631;
	        this.verb();
	        this.state = 632;
	        this.objectList();
	        this.state = 641;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===139) {
	            this.state = 633;
	            this.match(SPARQLParser.SEMICOLON);
	            this.state = 637;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===24 || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 55) !== 0)) {
	                this.state = 634;
	                this.verb();
	                this.state = 635;
	                this.objectList();
	            }

	            this.state = 643;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	verb() {
	    let localctx = new VerbContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, SPARQLParser.RULE_verb);
	    try {
	        this.state = 646;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 105:
	        case 106:
	        case 107:
	        case 109:
	        case 110:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 644;
	            this.varOrIRI();
	            break;
	        case 24:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 645;
	            this.match(SPARQLParser.A);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	objectList() {
	    let localctx = new ObjectListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, SPARQLParser.RULE_objectList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 648;
	        this.object();
	        this.state = 653;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===145) {
	            this.state = 649;
	            this.match(SPARQLParser.COMMA);
	            this.state = 650;
	            this.object();
	            this.state = 655;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object() {
	    let localctx = new ObjectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, SPARQLParser.RULE_object);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 656;
	        this.graphNode();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	triplesSameSubjectPath() {
	    let localctx = new TriplesSameSubjectPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, SPARQLParser.RULE_triplesSameSubjectPath);
	    try {
	        this.state = 664;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 658;
	            this.varOrTerm();
	            this.state = 659;
	            this.propertyListPathNotEmpty();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 661;
	            this.triplesNodePath();
	            this.state = 662;
	            this.propertyListPath();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyListPath() {
	    let localctx = new PropertyListPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, SPARQLParser.RULE_propertyListPath);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 667;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24 || _la===40 || ((((_la - 100)) & ~0x1f) === 0 && ((1 << (_la - 100)) & 1761) !== 0) || ((((_la - 132)) & ~0x1f) === 0 && ((1 << (_la - 132)) & 16387) !== 0)) {
	            this.state = 666;
	            this.propertyListPathNotEmpty();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyListPathNotEmpty() {
	    let localctx = new PropertyListPathNotEmptyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, SPARQLParser.RULE_propertyListPathNotEmpty);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 671;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 24:
	        case 40:
	        case 100:
	        case 105:
	        case 106:
	        case 107:
	        case 132:
	        case 133:
	        case 146:
	            this.state = 669;
	            this.verbPath();
	            break;
	        case 109:
	        case 110:
	            this.state = 670;
	            this.verbSimple();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 673;
	        this.objectListPath();
	        this.state = 680;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===139) {
	            this.state = 674;
	            this.match(SPARQLParser.SEMICOLON);
	            this.state = 676;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===24 || _la===40 || ((((_la - 100)) & ~0x1f) === 0 && ((1 << (_la - 100)) & 1761) !== 0) || ((((_la - 132)) & ~0x1f) === 0 && ((1 << (_la - 132)) & 16387) !== 0)) {
	                this.state = 675;
	                this.propertyListPathNotEmptyList();
	            }

	            this.state = 682;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyListPathNotEmptyList() {
	    let localctx = new PropertyListPathNotEmptyListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, SPARQLParser.RULE_propertyListPathNotEmptyList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 685;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 24:
	        case 40:
	        case 100:
	        case 105:
	        case 106:
	        case 107:
	        case 132:
	        case 133:
	        case 146:
	            this.state = 683;
	            this.verbPath();
	            break;
	        case 109:
	        case 110:
	            this.state = 684;
	            this.verbSimple();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 687;
	        this.objectList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	verbPath() {
	    let localctx = new VerbPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, SPARQLParser.RULE_verbPath);
	    var _la = 0;
	    try {
	        this.state = 703;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 24:
	        case 105:
	        case 106:
	        case 107:
	        case 132:
	        case 133:
	        case 146:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 689;
	            this.path();
	            break;
	        case 40:
	        case 100:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 690;
	            _la = this._input.LA(1);
	            if(!(_la===40 || _la===100)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 692;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===101) {
	                this.state = 691;
	                this.match(SPARQLParser.SHORTEST);
	            }

	            this.state = 695;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 7) !== 0)) {
	                this.state = 694;
	                _la = this._input.LA(1);
	                if(!(((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 7) !== 0))) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 697;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 698;
	            this.path();
	            this.state = 699;
	            this.match(SPARQLParser.AS);
	            this.state = 700;
	            this.var_();
	            this.state = 701;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	verbSimple() {
	    let localctx = new VerbSimpleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, SPARQLParser.RULE_verbSimple);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 705;
	        this.var_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	objectListPath() {
	    let localctx = new ObjectListPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, SPARQLParser.RULE_objectListPath);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 707;
	        this.objectPath();
	        this.state = 712;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===145) {
	            this.state = 708;
	            this.match(SPARQLParser.COMMA);
	            this.state = 709;
	            this.objectPath();
	            this.state = 714;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	objectPath() {
	    let localctx = new ObjectPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, SPARQLParser.RULE_objectPath);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 715;
	        this.graphNodePath();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	path() {
	    let localctx = new PathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, SPARQLParser.RULE_path);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 717;
	        this.pathAlternative();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathAlternative() {
	    let localctx = new PathAlternativeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, SPARQLParser.RULE_pathAlternative);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 719;
	        this.pathSequence();
	        this.state = 724;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===151) {
	            this.state = 720;
	            this.match(SPARQLParser.PIPE);
	            this.state = 721;
	            this.pathSequence();
	            this.state = 726;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathSequence() {
	    let localctx = new PathSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, SPARQLParser.RULE_pathSequence);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 727;
	        this.pathEltOrInverse();
	        this.state = 732;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===147) {
	            this.state = 728;
	            this.match(SPARQLParser.DIVIDE);
	            this.state = 729;
	            this.pathEltOrInverse();
	            this.state = 734;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathElt() {
	    let localctx = new PathEltContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, SPARQLParser.RULE_pathElt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 735;
	        this.pathPrimary();
	        this.state = 737;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 141)) & ~0x1f) === 0 && ((1 << (_la - 141)) & 13) !== 0)) {
	            this.state = 736;
	            this.pathMod();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathEltOrInverse() {
	    let localctx = new PathEltOrInverseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, SPARQLParser.RULE_pathEltOrInverse);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 740;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===132) {
	            this.state = 739;
	            this.match(SPARQLParser.INVERSE);
	        }

	        this.state = 742;
	        this.pathElt();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathMod() {
	    let localctx = new PathModContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, SPARQLParser.RULE_pathMod);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 744;
	        localctx.op = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(((((_la - 141)) & ~0x1f) === 0 && ((1 << (_la - 141)) & 13) !== 0))) {
	            localctx.op = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathPrimary() {
	    let localctx = new PathPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, SPARQLParser.RULE_pathPrimary);
	    try {
	        this.state = 754;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 105:
	        case 106:
	        case 107:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 746;
	            this.iri();
	            break;
	        case 24:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 747;
	            this.match(SPARQLParser.A);
	            break;
	        case 146:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 748;
	            this.match(SPARQLParser.NEGATION);
	            this.state = 749;
	            this.pathNegatedPropertySet();
	            break;
	        case 133:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 750;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 751;
	            this.path();
	            this.state = 752;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathNegatedPropertySet() {
	    let localctx = new PathNegatedPropertySetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, SPARQLParser.RULE_pathNegatedPropertySet);
	    var _la = 0;
	    try {
	        this.state = 769;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 24:
	        case 105:
	        case 106:
	        case 107:
	        case 132:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 756;
	            this.pathOneInPropertySet();
	            break;
	        case 133:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 757;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 766;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===24 || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 134217735) !== 0)) {
	                this.state = 758;
	                this.pathOneInPropertySet();
	                this.state = 763;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===151) {
	                    this.state = 759;
	                    this.match(SPARQLParser.PIPE);
	                    this.state = 760;
	                    this.pathOneInPropertySet();
	                    this.state = 765;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 768;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathOneInPropertySet() {
	    let localctx = new PathOneInPropertySetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, SPARQLParser.RULE_pathOneInPropertySet);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 772;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===132) {
	            this.state = 771;
	            this.match(SPARQLParser.INVERSE);
	        }

	        this.state = 776;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 105:
	        case 106:
	        case 107:
	            this.state = 774;
	            this.iri();
	            break;
	        case 24:
	            this.state = 775;
	            this.match(SPARQLParser.A);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	integer() {
	    let localctx = new IntegerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, SPARQLParser.RULE_integer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 778;
	        this.match(SPARQLParser.INTEGER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	triplesNode() {
	    let localctx = new TriplesNodeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, SPARQLParser.RULE_triplesNode);
	    try {
	        this.state = 782;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 133:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 780;
	            this.collection();
	            break;
	        case 137:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 781;
	            this.blankNodePropertyList();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blankNodePropertyList() {
	    let localctx = new BlankNodePropertyListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, SPARQLParser.RULE_blankNodePropertyList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 784;
	        this.match(SPARQLParser.OPEN_SQUARE_BRACKET);
	        this.state = 785;
	        this.propertyListNotEmpty();
	        this.state = 786;
	        this.match(SPARQLParser.CLOSE_SQUARE_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	triplesNodePath() {
	    let localctx = new TriplesNodePathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, SPARQLParser.RULE_triplesNodePath);
	    try {
	        this.state = 790;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 133:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 788;
	            this.collectionPath();
	            break;
	        case 137:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 789;
	            this.blankNodePropertyListPath();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blankNodePropertyListPath() {
	    let localctx = new BlankNodePropertyListPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, SPARQLParser.RULE_blankNodePropertyListPath);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 792;
	        this.match(SPARQLParser.OPEN_SQUARE_BRACKET);
	        this.state = 793;
	        this.propertyListPathNotEmpty();
	        this.state = 794;
	        this.match(SPARQLParser.CLOSE_SQUARE_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	collection() {
	    let localctx = new CollectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, SPARQLParser.RULE_collection);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 796;
	        this.match(SPARQLParser.OPEN_BRACE);
	        this.state = 798; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 797;
	            this.graphNode();
	            this.state = 800; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===37 || _la===38 || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 269483967) !== 0) || _la===137);
	        this.state = 802;
	        this.match(SPARQLParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	collectionPath() {
	    let localctx = new CollectionPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, SPARQLParser.RULE_collectionPath);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 804;
	        this.match(SPARQLParser.OPEN_BRACE);
	        this.state = 806; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 805;
	            this.graphNodePath();
	            this.state = 808; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===37 || _la===38 || ((((_la - 105)) & ~0x1f) === 0 && ((1 << (_la - 105)) & 269483967) !== 0) || _la===137);
	        this.state = 810;
	        this.match(SPARQLParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphNode() {
	    let localctx = new GraphNodeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, SPARQLParser.RULE_graphNode);
	    try {
	        this.state = 814;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 812;
	            this.varOrTerm();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 813;
	            this.triplesNode();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphNodePath() {
	    let localctx = new GraphNodePathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, SPARQLParser.RULE_graphNodePath);
	    try {
	        this.state = 818;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,89,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 816;
	            this.varOrTerm();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 817;
	            this.triplesNodePath();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varOrTerm() {
	    let localctx = new VarOrTermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, SPARQLParser.RULE_varOrTerm);
	    try {
	        this.state = 822;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 109:
	        case 110:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 820;
	            this.var_();
	            break;
	        case 37:
	        case 38:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 133:
	        case 137:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 821;
	            this.graphTerm();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varOrIRI() {
	    let localctx = new VarOrIRIContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, SPARQLParser.RULE_varOrIRI);
	    try {
	        this.state = 826;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 109:
	        case 110:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 824;
	            this.var_();
	            break;
	        case 105:
	        case 106:
	        case 107:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 825;
	            this.iri();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	var_() {
	    let localctx = new VarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, SPARQLParser.RULE_var);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 828;
	        _la = this._input.LA(1);
	        if(!(_la===109 || _la===110)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphTerm() {
	    let localctx = new GraphTermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, SPARQLParser.RULE_graphTerm);
	    try {
	        this.state = 836;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 105:
	        case 106:
	        case 107:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 830;
	            this.iri();
	            break;
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 831;
	            this.rdfLiteral();
	            break;
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 832;
	            this.numericLiteral();
	            break;
	        case 37:
	        case 38:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 833;
	            this.booleanLiteral();
	            break;
	        case 108:
	        case 137:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 834;
	            this.blankNode();
	            break;
	        case 133:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 835;
	            this.nil();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nil() {
	    let localctx = new NilContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, SPARQLParser.RULE_nil);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 838;
	        this.match(SPARQLParser.OPEN_BRACE);
	        this.state = 839;
	        this.match(SPARQLParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, SPARQLParser.RULE_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 841;
	        this.conditionalOrExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionalOrExpression() {
	    let localctx = new ConditionalOrExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, SPARQLParser.RULE_conditionalOrExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 843;
	        this.conditionalAndExpression();
	        this.state = 848;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===131) {
	            this.state = 844;
	            this.match(SPARQLParser.OR);
	            this.state = 845;
	            this.conditionalAndExpression();
	            this.state = 850;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionalAndExpression() {
	    let localctx = new ConditionalAndExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, SPARQLParser.RULE_conditionalAndExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 851;
	        this.relationalExpression();
	        this.state = 856;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===130) {
	            this.state = 852;
	            this.match(SPARQLParser.AND);
	            this.state = 853;
	            this.relationalExpression();
	            this.state = 858;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationalExpression() {
	    let localctx = new RelationalExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, SPARQLParser.RULE_relationalExpression);
	    var _la = 0;
	    try {
	        this.state = 875;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 859;
	            this.additiveExpression();
	            this.state = 862;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 127)) & ~0x1f) === 0 && ((1 << (_la - 127)) & 14680071) !== 0)) {
	                this.state = 860;
	                localctx.op = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(((((_la - 127)) & ~0x1f) === 0 && ((1 << (_la - 127)) & 14680071) !== 0))) {
	                    localctx.op = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 861;
	                this.additiveExpression();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 864;
	            this.additiveExpression();
	            this.state = 866;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===96) {
	                this.state = 865;
	                this.match(SPARQLParser.NOT);
	            }

	            this.state = 868;
	            this.match(SPARQLParser.IN);
	            this.state = 869;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 871;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 25)) & ~0x1f) === 0 && ((1 << (_la - 25)) & 4278206463) !== 0) || ((((_la - 57)) & ~0x1f) === 0 && ((1 << (_la - 57)) & 4294967295) !== 0) || ((((_la - 89)) & ~0x1f) === 0 && ((1 << (_la - 89)) & 4290183935) !== 0) || ((((_la - 121)) & ~0x1f) === 0 && ((1 << (_la - 121)) & 36704271) !== 0)) {
	                this.state = 870;
	                this.expressionList();
	            }

	            this.state = 873;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	additiveExpression() {
	    let localctx = new AdditiveExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, SPARQLParser.RULE_additiveExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 877;
	        this.multiplicativeExpression();
	        this.state = 881;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 115)) & ~0x1f) === 0 && ((1 << (_la - 115)) & 201326655) !== 0)) {
	            this.state = 878;
	            this.rhsAdditiveExpression();
	            this.state = 883;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rhsAdditiveExpression() {
	    let localctx = new RhsAdditiveExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, SPARQLParser.RULE_rhsAdditiveExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 884;
	        this.rhsAdditiveExpressionSub();
	        this.state = 889;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===143 || _la===147) {
	            this.state = 885;
	            localctx._tset1636 = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===143 || _la===147)) {
	                localctx._tset1636 = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            localctx.op.push(localctx._tset1636);
	            this.state = 886;
	            this.unaryExpression();
	            this.state = 891;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rhsAdditiveExpressionSub() {
	    let localctx = new RhsAdditiveExpressionSubContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, SPARQLParser.RULE_rhsAdditiveExpressionSub);
	    var _la = 0;
	    try {
	        this.state = 896;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 141:
	        case 142:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 892;
	            _la = this._input.LA(1);
	            if(!(_la===141 || _la===142)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 893;
	            this.multiplicativeExpression();
	            break;
	        case 115:
	        case 116:
	        case 117:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 894;
	            this.numericLiteralPositive();
	            break;
	        case 118:
	        case 119:
	        case 120:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 895;
	            this.numericLiteralNegative();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiplicativeExpression() {
	    let localctx = new MultiplicativeExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, SPARQLParser.RULE_multiplicativeExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 898;
	        this.unaryExpression();
	        this.state = 903;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,102,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 899;
	                localctx._tset1679 = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===143 || _la===147)) {
	                    localctx._tset1679 = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                localctx.op.push(localctx._tset1679);
	                this.state = 900;
	                this.unaryExpression(); 
	            }
	            this.state = 905;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,102,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryExpression() {
	    let localctx = new UnaryExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, SPARQLParser.RULE_unaryExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 907;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 141)) & ~0x1f) === 0 && ((1 << (_la - 141)) & 35) !== 0)) {
	            this.state = 906;
	            localctx.op = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 141)) & ~0x1f) === 0 && ((1 << (_la - 141)) & 35) !== 0))) {
	                localctx.op = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 909;
	        this.primaryExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primaryExpression() {
	    let localctx = new PrimaryExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, SPARQLParser.RULE_primaryExpression);
	    try {
	        this.state = 921;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 133:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 911;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 912;
	            this.expression();
	            this.state = 913;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 25:
	        case 26:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 98:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 915;
	            this.builtInCall();
	            break;
	        case 105:
	        case 106:
	        case 107:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 916;
	            this.iriOrFunction();
	            break;
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 917;
	            this.rdfLiteral();
	            break;
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 918;
	            this.numericLiteral();
	            break;
	        case 37:
	        case 38:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 919;
	            this.booleanLiteral();
	            break;
	        case 109:
	        case 110:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 920;
	            this.var_();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	builtInCall() {
	    let localctx = new BuiltInCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, SPARQLParser.RULE_builtInCall);
	    var _la = 0;
	    try {
	        this.state = 1191;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 923;
	            this.aggregate();
	            break;
	        case 25:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 924;
	            this.match(SPARQLParser.STR);
	            this.state = 925;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 926;
	            this.expression();
	            this.state = 927;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 26:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 929;
	            this.match(SPARQLParser.LANG);
	            this.state = 930;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 931;
	            this.expression();
	            this.state = 932;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 27:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 934;
	            this.match(SPARQLParser.LANGMATCHES);
	            this.state = 935;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 936;
	            this.expression();
	            this.state = 937;
	            this.match(SPARQLParser.COMMA);
	            this.state = 938;
	            this.expression();
	            this.state = 939;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 28:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 941;
	            this.match(SPARQLParser.DATATYPE);
	            this.state = 942;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 943;
	            this.expression();
	            this.state = 944;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 29:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 946;
	            this.match(SPARQLParser.BOUND);
	            this.state = 947;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 948;
	            this.var_();
	            this.state = 949;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 49:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 951;
	            this.match(SPARQLParser.IRI);
	            this.state = 952;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 953;
	            this.expression();
	            this.state = 954;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 50:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 956;
	            this.match(SPARQLParser.URI);
	            this.state = 957;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 958;
	            this.expression();
	            this.state = 959;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 51:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 961;
	            this.match(SPARQLParser.BNODE);
	            this.state = 962;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 964;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 25)) & ~0x1f) === 0 && ((1 << (_la - 25)) & 4278206463) !== 0) || ((((_la - 57)) & ~0x1f) === 0 && ((1 << (_la - 57)) & 4294967295) !== 0) || ((((_la - 89)) & ~0x1f) === 0 && ((1 << (_la - 89)) & 4290183935) !== 0) || ((((_la - 121)) & ~0x1f) === 0 && ((1 << (_la - 121)) & 36704271) !== 0)) {
	                this.state = 963;
	                this.expression();
	            }

	            this.state = 966;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 52:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 967;
	            this.match(SPARQLParser.RAND);
	            this.state = 968;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 969;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 53:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 970;
	            this.match(SPARQLParser.ABS);
	            this.state = 971;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 972;
	            this.expression();
	            this.state = 973;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 54:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 975;
	            this.match(SPARQLParser.CEIL);
	            this.state = 976;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 977;
	            this.expression();
	            this.state = 978;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 55:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 980;
	            this.match(SPARQLParser.FLOOR);
	            this.state = 981;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 982;
	            this.expression();
	            this.state = 983;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 56:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 985;
	            this.match(SPARQLParser.ROUND);
	            this.state = 986;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 987;
	            this.expression();
	            this.state = 988;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 57:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 990;
	            this.match(SPARQLParser.CONCAT);
	            this.state = 991;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 993;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 25)) & ~0x1f) === 0 && ((1 << (_la - 25)) & 4278206463) !== 0) || ((((_la - 57)) & ~0x1f) === 0 && ((1 << (_la - 57)) & 4294967295) !== 0) || ((((_la - 89)) & ~0x1f) === 0 && ((1 << (_la - 89)) & 4290183935) !== 0) || ((((_la - 121)) & ~0x1f) === 0 && ((1 << (_la - 121)) & 36704271) !== 0)) {
	                this.state = 992;
	                this.expressionList();
	            }

	            this.state = 995;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 36:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 996;
	            this.subStringExpression();
	            break;
	        case 58:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 997;
	            this.match(SPARQLParser.STRLEN);
	            this.state = 998;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 999;
	            this.expression();
	            this.state = 1000;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 67:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 1002;
	            this.strReplaceExpression();
	            break;
	        case 59:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 1003;
	            this.match(SPARQLParser.UCASE);
	            this.state = 1004;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1005;
	            this.expression();
	            this.state = 1006;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 60:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 1008;
	            this.match(SPARQLParser.LCASE);
	            this.state = 1009;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1010;
	            this.expression();
	            this.state = 1011;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 61:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 1013;
	            this.match(SPARQLParser.ENCODE_FOR_URI);
	            this.state = 1014;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1015;
	            this.expression();
	            this.state = 1016;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 62:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 1018;
	            this.match(SPARQLParser.CONTAINS);
	            this.state = 1019;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1020;
	            this.expression();
	            this.state = 1021;
	            this.match(SPARQLParser.COMMA);
	            this.state = 1022;
	            this.expression();
	            this.state = 1023;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 63:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 1025;
	            this.match(SPARQLParser.STRSTARTS);
	            this.state = 1026;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1027;
	            this.expression();
	            this.state = 1028;
	            this.match(SPARQLParser.COMMA);
	            this.state = 1029;
	            this.expression();
	            this.state = 1030;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 64:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 1032;
	            this.match(SPARQLParser.STRENDS);
	            this.state = 1033;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1034;
	            this.expression();
	            this.state = 1035;
	            this.match(SPARQLParser.COMMA);
	            this.state = 1036;
	            this.expression();
	            this.state = 1037;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 65:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 1039;
	            this.match(SPARQLParser.STRBEFORE);
	            this.state = 1040;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1041;
	            this.expression();
	            this.state = 1042;
	            this.match(SPARQLParser.COMMA);
	            this.state = 1043;
	            this.expression();
	            this.state = 1044;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 66:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 1046;
	            this.match(SPARQLParser.STRAFTER);
	            this.state = 1047;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1048;
	            this.expression();
	            this.state = 1049;
	            this.match(SPARQLParser.COMMA);
	            this.state = 1050;
	            this.expression();
	            this.state = 1051;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 68:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 1053;
	            this.match(SPARQLParser.YEAR);
	            this.state = 1054;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1055;
	            this.expression();
	            this.state = 1056;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 69:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 1058;
	            this.match(SPARQLParser.MONTH);
	            this.state = 1059;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1060;
	            this.expression();
	            this.state = 1061;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 70:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 1063;
	            this.match(SPARQLParser.DAY);
	            this.state = 1064;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1065;
	            this.expression();
	            this.state = 1066;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 71:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 1068;
	            this.match(SPARQLParser.HOURS);
	            this.state = 1069;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1070;
	            this.expression();
	            this.state = 1071;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 72:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 1073;
	            this.match(SPARQLParser.MINUTES);
	            this.state = 1074;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1075;
	            this.expression();
	            this.state = 1076;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 73:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 1078;
	            this.match(SPARQLParser.SECONDS);
	            this.state = 1079;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1080;
	            this.expression();
	            this.state = 1081;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 74:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 1083;
	            this.match(SPARQLParser.TIMEZONE);
	            this.state = 1084;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1085;
	            this.expression();
	            this.state = 1086;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 75:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 1088;
	            this.match(SPARQLParser.TZ);
	            this.state = 1089;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1090;
	            this.expression();
	            this.state = 1091;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 76:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 1093;
	            this.match(SPARQLParser.NOW);
	            this.state = 1094;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1095;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 77:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 1096;
	            this.match(SPARQLParser.UUID);
	            this.state = 1097;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1098;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 78:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 1099;
	            this.match(SPARQLParser.STRUUID);
	            this.state = 1100;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1101;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 79:
	            this.enterOuterAlt(localctx, 38);
	            this.state = 1102;
	            this.match(SPARQLParser.MD5);
	            this.state = 1103;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1104;
	            this.expression();
	            this.state = 1105;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 80:
	            this.enterOuterAlt(localctx, 39);
	            this.state = 1107;
	            this.match(SPARQLParser.SHA1);
	            this.state = 1108;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1109;
	            this.expression();
	            this.state = 1110;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 81:
	            this.enterOuterAlt(localctx, 40);
	            this.state = 1112;
	            this.match(SPARQLParser.SHA256);
	            this.state = 1113;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1114;
	            this.expression();
	            this.state = 1115;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 82:
	            this.enterOuterAlt(localctx, 41);
	            this.state = 1117;
	            this.match(SPARQLParser.SHA384);
	            this.state = 1118;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1119;
	            this.expression();
	            this.state = 1120;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 83:
	            this.enterOuterAlt(localctx, 42);
	            this.state = 1122;
	            this.match(SPARQLParser.SHA512);
	            this.state = 1123;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1124;
	            this.expression();
	            this.state = 1125;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 84:
	            this.enterOuterAlt(localctx, 43);
	            this.state = 1127;
	            this.match(SPARQLParser.COALESCE);
	            this.state = 1128;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1130;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 25)) & ~0x1f) === 0 && ((1 << (_la - 25)) & 4278206463) !== 0) || ((((_la - 57)) & ~0x1f) === 0 && ((1 << (_la - 57)) & 4294967295) !== 0) || ((((_la - 89)) & ~0x1f) === 0 && ((1 << (_la - 89)) & 4290183935) !== 0) || ((((_la - 121)) & ~0x1f) === 0 && ((1 << (_la - 121)) & 36704271) !== 0)) {
	                this.state = 1129;
	                this.expressionList();
	            }

	            this.state = 1132;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 85:
	            this.enterOuterAlt(localctx, 44);
	            this.state = 1133;
	            this.match(SPARQLParser.IF);
	            this.state = 1134;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1135;
	            this.expression();
	            this.state = 1136;
	            this.match(SPARQLParser.COMMA);
	            this.state = 1137;
	            this.expression();
	            this.state = 1138;
	            this.match(SPARQLParser.COMMA);
	            this.state = 1139;
	            this.expression();
	            this.state = 1140;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 86:
	            this.enterOuterAlt(localctx, 45);
	            this.state = 1142;
	            this.match(SPARQLParser.STRLANG);
	            this.state = 1143;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1144;
	            this.expression();
	            this.state = 1145;
	            this.match(SPARQLParser.COMMA);
	            this.state = 1146;
	            this.expression();
	            this.state = 1147;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 87:
	            this.enterOuterAlt(localctx, 46);
	            this.state = 1149;
	            this.match(SPARQLParser.STRDT);
	            this.state = 1150;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1151;
	            this.expression();
	            this.state = 1152;
	            this.match(SPARQLParser.COMMA);
	            this.state = 1153;
	            this.expression();
	            this.state = 1154;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 30:
	            this.enterOuterAlt(localctx, 47);
	            this.state = 1156;
	            this.match(SPARQLParser.SAMETERM);
	            this.state = 1157;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1158;
	            this.expression();
	            this.state = 1159;
	            this.match(SPARQLParser.COMMA);
	            this.state = 1160;
	            this.expression();
	            this.state = 1161;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 31:
	            this.enterOuterAlt(localctx, 48);
	            this.state = 1163;
	            this.match(SPARQLParser.ISIRI);
	            this.state = 1164;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1165;
	            this.expression();
	            this.state = 1166;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 32:
	            this.enterOuterAlt(localctx, 49);
	            this.state = 1168;
	            this.match(SPARQLParser.ISURI);
	            this.state = 1169;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1170;
	            this.expression();
	            this.state = 1171;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 33:
	            this.enterOuterAlt(localctx, 50);
	            this.state = 1173;
	            this.match(SPARQLParser.ISBLANK);
	            this.state = 1174;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1175;
	            this.expression();
	            this.state = 1176;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 34:
	            this.enterOuterAlt(localctx, 51);
	            this.state = 1178;
	            this.match(SPARQLParser.ISLITERAL);
	            this.state = 1179;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1180;
	            this.expression();
	            this.state = 1181;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 88:
	            this.enterOuterAlt(localctx, 52);
	            this.state = 1183;
	            this.match(SPARQLParser.ISNUMERIC);
	            this.state = 1184;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1185;
	            this.expression();
	            this.state = 1186;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 35:
	            this.enterOuterAlt(localctx, 53);
	            this.state = 1188;
	            this.regexExpression();
	            break;
	        case 98:
	            this.enterOuterAlt(localctx, 54);
	            this.state = 1189;
	            this.existsFunction();
	            break;
	        case 96:
	            this.enterOuterAlt(localctx, 55);
	            this.state = 1190;
	            this.notExistsFunction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	regexExpression() {
	    let localctx = new RegexExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, SPARQLParser.RULE_regexExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1193;
	        this.match(SPARQLParser.REGEX);
	        this.state = 1194;
	        this.match(SPARQLParser.OPEN_BRACE);
	        this.state = 1195;
	        this.expression();
	        this.state = 1196;
	        this.match(SPARQLParser.COMMA);
	        this.state = 1197;
	        this.expression();
	        this.state = 1200;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===145) {
	            this.state = 1198;
	            this.match(SPARQLParser.COMMA);
	            this.state = 1199;
	            this.expression();
	        }

	        this.state = 1202;
	        this.match(SPARQLParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subStringExpression() {
	    let localctx = new SubStringExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, SPARQLParser.RULE_subStringExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1204;
	        this.match(SPARQLParser.SUBSTR);
	        this.state = 1205;
	        this.match(SPARQLParser.OPEN_BRACE);
	        this.state = 1206;
	        this.expression();
	        this.state = 1207;
	        this.match(SPARQLParser.COMMA);
	        this.state = 1208;
	        this.expression();
	        this.state = 1211;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===145) {
	            this.state = 1209;
	            this.match(SPARQLParser.COMMA);
	            this.state = 1210;
	            this.expression();
	        }

	        this.state = 1213;
	        this.match(SPARQLParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	strReplaceExpression() {
	    let localctx = new StrReplaceExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, SPARQLParser.RULE_strReplaceExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1215;
	        this.match(SPARQLParser.REPLACE);
	        this.state = 1216;
	        this.match(SPARQLParser.OPEN_BRACE);
	        this.state = 1217;
	        this.expression();
	        this.state = 1218;
	        this.match(SPARQLParser.COMMA);
	        this.state = 1219;
	        this.expression();
	        this.state = 1220;
	        this.match(SPARQLParser.COMMA);
	        this.state = 1221;
	        this.expression();
	        this.state = 1224;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===145) {
	            this.state = 1222;
	            this.match(SPARQLParser.COMMA);
	            this.state = 1223;
	            this.expression();
	        }

	        this.state = 1226;
	        this.match(SPARQLParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	existsFunction() {
	    let localctx = new ExistsFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, SPARQLParser.RULE_existsFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1228;
	        this.match(SPARQLParser.EXISTS);
	        this.state = 1229;
	        this.groupGraphPattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	notExistsFunction() {
	    let localctx = new NotExistsFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, SPARQLParser.RULE_notExistsFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1231;
	        this.match(SPARQLParser.NOT);
	        this.state = 1232;
	        this.match(SPARQLParser.EXISTS);
	        this.state = 1233;
	        this.groupGraphPattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aggregate() {
	    let localctx = new AggregateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, SPARQLParser.RULE_aggregate);
	    var _la = 0;
	    try {
	        this.state = 1299;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 89:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1235;
	            this.match(SPARQLParser.COUNT);
	            this.state = 1236;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1238;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5) {
	                this.state = 1237;
	                this.match(SPARQLParser.DISTINCT);
	            }

	            this.state = 1242;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 143:
	                this.state = 1240;
	                this.match(SPARQLParser.ASTERISK);
	                break;
	            case 25:
	            case 26:
	            case 27:
	            case 28:
	            case 29:
	            case 30:
	            case 31:
	            case 32:
	            case 33:
	            case 34:
	            case 35:
	            case 36:
	            case 37:
	            case 38:
	            case 49:
	            case 50:
	            case 51:
	            case 52:
	            case 53:
	            case 54:
	            case 55:
	            case 56:
	            case 57:
	            case 58:
	            case 59:
	            case 60:
	            case 61:
	            case 62:
	            case 63:
	            case 64:
	            case 65:
	            case 66:
	            case 67:
	            case 68:
	            case 69:
	            case 70:
	            case 71:
	            case 72:
	            case 73:
	            case 74:
	            case 75:
	            case 76:
	            case 77:
	            case 78:
	            case 79:
	            case 80:
	            case 81:
	            case 82:
	            case 83:
	            case 84:
	            case 85:
	            case 86:
	            case 87:
	            case 88:
	            case 89:
	            case 90:
	            case 91:
	            case 92:
	            case 93:
	            case 94:
	            case 95:
	            case 96:
	            case 98:
	            case 105:
	            case 106:
	            case 107:
	            case 109:
	            case 110:
	            case 112:
	            case 113:
	            case 114:
	            case 115:
	            case 116:
	            case 117:
	            case 118:
	            case 119:
	            case 120:
	            case 121:
	            case 122:
	            case 123:
	            case 124:
	            case 133:
	            case 141:
	            case 142:
	            case 146:
	                this.state = 1241;
	                this.expression();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1244;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 90:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1245;
	            this.match(SPARQLParser.SUM);
	            this.state = 1246;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1248;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5) {
	                this.state = 1247;
	                this.match(SPARQLParser.DISTINCT);
	            }

	            this.state = 1250;
	            this.expression();
	            this.state = 1251;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 91:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1253;
	            this.match(SPARQLParser.MIN);
	            this.state = 1254;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1256;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5) {
	                this.state = 1255;
	                this.match(SPARQLParser.DISTINCT);
	            }

	            this.state = 1258;
	            this.expression();
	            this.state = 1259;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 92:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1261;
	            this.match(SPARQLParser.MAX);
	            this.state = 1262;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1264;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5) {
	                this.state = 1263;
	                this.match(SPARQLParser.DISTINCT);
	            }

	            this.state = 1266;
	            this.expression();
	            this.state = 1267;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 93:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1269;
	            this.match(SPARQLParser.AVG);
	            this.state = 1270;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1272;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5) {
	                this.state = 1271;
	                this.match(SPARQLParser.DISTINCT);
	            }

	            this.state = 1274;
	            this.expression();
	            this.state = 1275;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 94:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1277;
	            this.match(SPARQLParser.SAMPLE);
	            this.state = 1278;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1280;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5) {
	                this.state = 1279;
	                this.match(SPARQLParser.DISTINCT);
	            }

	            this.state = 1282;
	            this.expression();
	            this.state = 1283;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        case 95:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1285;
	            this.match(SPARQLParser.GROUP_CONCAT);
	            this.state = 1286;
	            this.match(SPARQLParser.OPEN_BRACE);
	            this.state = 1288;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5) {
	                this.state = 1287;
	                this.match(SPARQLParser.DISTINCT);
	            }

	            this.state = 1290;
	            this.expression();
	            this.state = 1295;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===139) {
	                this.state = 1291;
	                this.match(SPARQLParser.SEMICOLON);
	                this.state = 1292;
	                this.match(SPARQLParser.SEPARATOR);
	                this.state = 1293;
	                this.match(SPARQLParser.EQUAL);
	                this.state = 1294;
	                this.string();
	            }

	            this.state = 1297;
	            this.match(SPARQLParser.CLOSE_BRACE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iriOrFunction() {
	    let localctx = new IriOrFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, SPARQLParser.RULE_iriOrFunction);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1301;
	        this.iri();
	        this.state = 1303;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===133) {
	            this.state = 1302;
	            this.argList();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rdfLiteral() {
	    let localctx = new RdfLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, SPARQLParser.RULE_rdfLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1305;
	        this.string();
	        this.state = 1309;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 111:
	        	this.state = 1306;
	        	this.match(SPARQLParser.LANGTAG);
	        	break;
	        case 126:
	        	this.state = 1307;
	        	this.match(SPARQLParser.REFERENCE);
	        	this.state = 1308;
	        	this.iri();
	        	break;
	        case 19:
	        case 20:
	        case 21:
	        case 23:
	        case 24:
	        case 37:
	        case 38:
	        case 40:
	        case 41:
	        case 44:
	        case 46:
	        case 47:
	        case 48:
	        case 96:
	        case 97:
	        case 100:
	        case 105:
	        case 106:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 112:
	        case 113:
	        case 114:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 127:
	        case 128:
	        case 129:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 145:
	        case 146:
	        case 147:
	        case 148:
	        case 149:
	        case 150:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericLiteral() {
	    let localctx = new NumericLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, SPARQLParser.RULE_numericLiteral);
	    try {
	        this.state = 1314;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 112:
	        case 113:
	        case 114:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1311;
	            this.numericLiteralUnsigned();
	            break;
	        case 115:
	        case 116:
	        case 117:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1312;
	            this.numericLiteralPositive();
	            break;
	        case 118:
	        case 119:
	        case 120:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1313;
	            this.numericLiteralNegative();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericLiteralUnsigned() {
	    let localctx = new NumericLiteralUnsignedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, SPARQLParser.RULE_numericLiteralUnsigned);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1316;
	        _la = this._input.LA(1);
	        if(!(((((_la - 112)) & ~0x1f) === 0 && ((1 << (_la - 112)) & 7) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericLiteralPositive() {
	    let localctx = new NumericLiteralPositiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, SPARQLParser.RULE_numericLiteralPositive);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1318;
	        _la = this._input.LA(1);
	        if(!(((((_la - 115)) & ~0x1f) === 0 && ((1 << (_la - 115)) & 7) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericLiteralNegative() {
	    let localctx = new NumericLiteralNegativeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, SPARQLParser.RULE_numericLiteralNegative);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1320;
	        _la = this._input.LA(1);
	        if(!(((((_la - 118)) & ~0x1f) === 0 && ((1 << (_la - 118)) & 7) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanLiteral() {
	    let localctx = new BooleanLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, SPARQLParser.RULE_booleanLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1322;
	        _la = this._input.LA(1);
	        if(!(_la===37 || _la===38)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	string() {
	    let localctx = new StringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, SPARQLParser.RULE_string);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1324;
	        _la = this._input.LA(1);
	        if(!(((((_la - 121)) & ~0x1f) === 0 && ((1 << (_la - 121)) & 15) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iri() {
	    let localctx = new IriContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, SPARQLParser.RULE_iri);
	    try {
	        this.state = 1328;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 105:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1326;
	            this.match(SPARQLParser.IRIREF);
	            break;
	        case 106:
	        case 107:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1327;
	            this.prefixedName();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prefixedName() {
	    let localctx = new PrefixedNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, SPARQLParser.RULE_prefixedName);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1330;
	        _la = this._input.LA(1);
	        if(!(_la===106 || _la===107)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blankNode() {
	    let localctx = new BlankNodeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, SPARQLParser.RULE_blankNode);
	    try {
	        this.state = 1334;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 108:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1332;
	            this.match(SPARQLParser.BLANK_NODE_LABEL);
	            break;
	        case 137:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1333;
	            this.anon();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	anon() {
	    let localctx = new AnonContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, SPARQLParser.RULE_anon);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1336;
	        this.match(SPARQLParser.OPEN_SQUARE_BRACKET);
	        this.state = 1337;
	        this.match(SPARQLParser.CLOSE_SQUARE_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

SPARQLParser.EOF = antlr4.Token.EOF;
SPARQLParser.WS = 1;
SPARQLParser.BASE = 2;
SPARQLParser.PREFIX = 3;
SPARQLParser.SELECT = 4;
SPARQLParser.DISTINCT = 5;
SPARQLParser.REDUCED = 6;
SPARQLParser.CONSTRUCT = 7;
SPARQLParser.DESCRIBE = 8;
SPARQLParser.ASK = 9;
SPARQLParser.FROM = 10;
SPARQLParser.NAMED = 11;
SPARQLParser.WHERE = 12;
SPARQLParser.ORDER = 13;
SPARQLParser.BY = 14;
SPARQLParser.ASC = 15;
SPARQLParser.DESC = 16;
SPARQLParser.LIMIT = 17;
SPARQLParser.OFFSET = 18;
SPARQLParser.VALUES = 19;
SPARQLParser.OPTIONAL = 20;
SPARQLParser.GRAPH = 21;
SPARQLParser.UNION = 22;
SPARQLParser.FILTER = 23;
SPARQLParser.A = 24;
SPARQLParser.STR = 25;
SPARQLParser.LANG = 26;
SPARQLParser.LANGMATCHES = 27;
SPARQLParser.DATATYPE = 28;
SPARQLParser.BOUND = 29;
SPARQLParser.SAMETERM = 30;
SPARQLParser.ISIRI = 31;
SPARQLParser.ISURI = 32;
SPARQLParser.ISBLANK = 33;
SPARQLParser.ISLITERAL = 34;
SPARQLParser.REGEX = 35;
SPARQLParser.SUBSTR = 36;
SPARQLParser.TRUE = 37;
SPARQLParser.FALSE = 38;
SPARQLParser.SILENT = 39;
SPARQLParser.ALL = 40;
SPARQLParser.AS = 41;
SPARQLParser.GROUP = 42;
SPARQLParser.HAVING = 43;
SPARQLParser.UNDEF = 44;
SPARQLParser.BINDINGS = 45;
SPARQLParser.SERVICE = 46;
SPARQLParser.BIND = 47;
SPARQLParser.MINUS = 48;
SPARQLParser.IRI = 49;
SPARQLParser.URI = 50;
SPARQLParser.BNODE = 51;
SPARQLParser.RAND = 52;
SPARQLParser.ABS = 53;
SPARQLParser.CEIL = 54;
SPARQLParser.FLOOR = 55;
SPARQLParser.ROUND = 56;
SPARQLParser.CONCAT = 57;
SPARQLParser.STRLEN = 58;
SPARQLParser.UCASE = 59;
SPARQLParser.LCASE = 60;
SPARQLParser.ENCODE_FOR_URI = 61;
SPARQLParser.CONTAINS = 62;
SPARQLParser.STRSTARTS = 63;
SPARQLParser.STRENDS = 64;
SPARQLParser.STRBEFORE = 65;
SPARQLParser.STRAFTER = 66;
SPARQLParser.REPLACE = 67;
SPARQLParser.YEAR = 68;
SPARQLParser.MONTH = 69;
SPARQLParser.DAY = 70;
SPARQLParser.HOURS = 71;
SPARQLParser.MINUTES = 72;
SPARQLParser.SECONDS = 73;
SPARQLParser.TIMEZONE = 74;
SPARQLParser.TZ = 75;
SPARQLParser.NOW = 76;
SPARQLParser.UUID = 77;
SPARQLParser.STRUUID = 78;
SPARQLParser.MD5 = 79;
SPARQLParser.SHA1 = 80;
SPARQLParser.SHA256 = 81;
SPARQLParser.SHA384 = 82;
SPARQLParser.SHA512 = 83;
SPARQLParser.COALESCE = 84;
SPARQLParser.IF = 85;
SPARQLParser.STRLANG = 86;
SPARQLParser.STRDT = 87;
SPARQLParser.ISNUMERIC = 88;
SPARQLParser.COUNT = 89;
SPARQLParser.SUM = 90;
SPARQLParser.MIN = 91;
SPARQLParser.MAX = 92;
SPARQLParser.AVG = 93;
SPARQLParser.SAMPLE = 94;
SPARQLParser.GROUP_CONCAT = 95;
SPARQLParser.NOT = 96;
SPARQLParser.IN = 97;
SPARQLParser.EXISTS = 98;
SPARQLParser.SEPARATOR = 99;
SPARQLParser.ANY = 100;
SPARQLParser.SHORTEST = 101;
SPARQLParser.SIMPLE = 102;
SPARQLParser.ACYCLIC = 103;
SPARQLParser.WALKS = 104;
SPARQLParser.IRIREF = 105;
SPARQLParser.PNAME_NS = 106;
SPARQLParser.PNAME_LN = 107;
SPARQLParser.BLANK_NODE_LABEL = 108;
SPARQLParser.VAR1 = 109;
SPARQLParser.VAR2 = 110;
SPARQLParser.LANGTAG = 111;
SPARQLParser.INTEGER = 112;
SPARQLParser.DECIMAL = 113;
SPARQLParser.DOUBLE = 114;
SPARQLParser.INTEGER_POSITIVE = 115;
SPARQLParser.DECIMAL_POSITIVE = 116;
SPARQLParser.DOUBLE_POSITIVE = 117;
SPARQLParser.INTEGER_NEGATIVE = 118;
SPARQLParser.DECIMAL_NEGATIVE = 119;
SPARQLParser.DOUBLE_NEGATIVE = 120;
SPARQLParser.STRING_LITERAL1 = 121;
SPARQLParser.STRING_LITERAL2 = 122;
SPARQLParser.STRING_LITERAL_LONG1 = 123;
SPARQLParser.STRING_LITERAL_LONG2 = 124;
SPARQLParser.COMMENT = 125;
SPARQLParser.REFERENCE = 126;
SPARQLParser.LESS_EQUAL = 127;
SPARQLParser.GREATER_EQUAL = 128;
SPARQLParser.NOT_EQUAL = 129;
SPARQLParser.AND = 130;
SPARQLParser.OR = 131;
SPARQLParser.INVERSE = 132;
SPARQLParser.OPEN_BRACE = 133;
SPARQLParser.CLOSE_BRACE = 134;
SPARQLParser.OPEN_CURLY_BRACE = 135;
SPARQLParser.CLOSE_CURLY_BRACE = 136;
SPARQLParser.OPEN_SQUARE_BRACKET = 137;
SPARQLParser.CLOSE_SQUARE_BRACKET = 138;
SPARQLParser.SEMICOLON = 139;
SPARQLParser.DOT = 140;
SPARQLParser.PLUS_SIGN = 141;
SPARQLParser.MINUS_SIGN = 142;
SPARQLParser.ASTERISK = 143;
SPARQLParser.QUESTION_MARK = 144;
SPARQLParser.COMMA = 145;
SPARQLParser.NEGATION = 146;
SPARQLParser.DIVIDE = 147;
SPARQLParser.EQUAL = 148;
SPARQLParser.LESS = 149;
SPARQLParser.GREATER = 150;
SPARQLParser.PIPE = 151;
SPARQLParser.ANY_OTHER = 152;

SPARQLParser.RULE_query = 0;
SPARQLParser.RULE_prologue = 1;
SPARQLParser.RULE_baseDecl = 2;
SPARQLParser.RULE_prefixDecl = 3;
SPARQLParser.RULE_selectQuery = 4;
SPARQLParser.RULE_subSelect = 5;
SPARQLParser.RULE_selectClause = 6;
SPARQLParser.RULE_selectModifier = 7;
SPARQLParser.RULE_selectVariables = 8;
SPARQLParser.RULE_constructQuery = 9;
SPARQLParser.RULE_describeQuery = 10;
SPARQLParser.RULE_askQuery = 11;
SPARQLParser.RULE_datasetClause = 12;
SPARQLParser.RULE_whereClause = 13;
SPARQLParser.RULE_solutionModifier = 14;
SPARQLParser.RULE_groupClause = 15;
SPARQLParser.RULE_groupCondition = 16;
SPARQLParser.RULE_havingClause = 17;
SPARQLParser.RULE_havingCondition = 18;
SPARQLParser.RULE_orderClause = 19;
SPARQLParser.RULE_orderCondition = 20;
SPARQLParser.RULE_limitOffsetClauses = 21;
SPARQLParser.RULE_limitClause = 22;
SPARQLParser.RULE_offsetClause = 23;
SPARQLParser.RULE_valuesClause = 24;
SPARQLParser.RULE_triplesTemplate = 25;
SPARQLParser.RULE_groupGraphPattern = 26;
SPARQLParser.RULE_groupGraphPatternSub = 27;
SPARQLParser.RULE_groupGraphPatternSubList = 28;
SPARQLParser.RULE_triplesBlock = 29;
SPARQLParser.RULE_graphPatternNotTriples = 30;
SPARQLParser.RULE_optionalGraphPattern = 31;
SPARQLParser.RULE_graphGraphPattern = 32;
SPARQLParser.RULE_serviceGraphPattern = 33;
SPARQLParser.RULE_bind = 34;
SPARQLParser.RULE_inlineData = 35;
SPARQLParser.RULE_dataBlock = 36;
SPARQLParser.RULE_inlineDataOneVar = 37;
SPARQLParser.RULE_inlineDataFull = 38;
SPARQLParser.RULE_dataBlockValues = 39;
SPARQLParser.RULE_dataBlockValue = 40;
SPARQLParser.RULE_minusGraphPattern = 41;
SPARQLParser.RULE_groupOrUnionGraphPattern = 42;
SPARQLParser.RULE_filter = 43;
SPARQLParser.RULE_constraint = 44;
SPARQLParser.RULE_functionCall = 45;
SPARQLParser.RULE_argList = 46;
SPARQLParser.RULE_expressionList = 47;
SPARQLParser.RULE_constructTemplate = 48;
SPARQLParser.RULE_constructTriples = 49;
SPARQLParser.RULE_triplesSameSubject = 50;
SPARQLParser.RULE_propertyList = 51;
SPARQLParser.RULE_propertyListNotEmpty = 52;
SPARQLParser.RULE_verb = 53;
SPARQLParser.RULE_objectList = 54;
SPARQLParser.RULE_object = 55;
SPARQLParser.RULE_triplesSameSubjectPath = 56;
SPARQLParser.RULE_propertyListPath = 57;
SPARQLParser.RULE_propertyListPathNotEmpty = 58;
SPARQLParser.RULE_propertyListPathNotEmptyList = 59;
SPARQLParser.RULE_verbPath = 60;
SPARQLParser.RULE_verbSimple = 61;
SPARQLParser.RULE_objectListPath = 62;
SPARQLParser.RULE_objectPath = 63;
SPARQLParser.RULE_path = 64;
SPARQLParser.RULE_pathAlternative = 65;
SPARQLParser.RULE_pathSequence = 66;
SPARQLParser.RULE_pathElt = 67;
SPARQLParser.RULE_pathEltOrInverse = 68;
SPARQLParser.RULE_pathMod = 69;
SPARQLParser.RULE_pathPrimary = 70;
SPARQLParser.RULE_pathNegatedPropertySet = 71;
SPARQLParser.RULE_pathOneInPropertySet = 72;
SPARQLParser.RULE_integer = 73;
SPARQLParser.RULE_triplesNode = 74;
SPARQLParser.RULE_blankNodePropertyList = 75;
SPARQLParser.RULE_triplesNodePath = 76;
SPARQLParser.RULE_blankNodePropertyListPath = 77;
SPARQLParser.RULE_collection = 78;
SPARQLParser.RULE_collectionPath = 79;
SPARQLParser.RULE_graphNode = 80;
SPARQLParser.RULE_graphNodePath = 81;
SPARQLParser.RULE_varOrTerm = 82;
SPARQLParser.RULE_varOrIRI = 83;
SPARQLParser.RULE_var = 84;
SPARQLParser.RULE_graphTerm = 85;
SPARQLParser.RULE_nil = 86;
SPARQLParser.RULE_expression = 87;
SPARQLParser.RULE_conditionalOrExpression = 88;
SPARQLParser.RULE_conditionalAndExpression = 89;
SPARQLParser.RULE_relationalExpression = 90;
SPARQLParser.RULE_additiveExpression = 91;
SPARQLParser.RULE_rhsAdditiveExpression = 92;
SPARQLParser.RULE_rhsAdditiveExpressionSub = 93;
SPARQLParser.RULE_multiplicativeExpression = 94;
SPARQLParser.RULE_unaryExpression = 95;
SPARQLParser.RULE_primaryExpression = 96;
SPARQLParser.RULE_builtInCall = 97;
SPARQLParser.RULE_regexExpression = 98;
SPARQLParser.RULE_subStringExpression = 99;
SPARQLParser.RULE_strReplaceExpression = 100;
SPARQLParser.RULE_existsFunction = 101;
SPARQLParser.RULE_notExistsFunction = 102;
SPARQLParser.RULE_aggregate = 103;
SPARQLParser.RULE_iriOrFunction = 104;
SPARQLParser.RULE_rdfLiteral = 105;
SPARQLParser.RULE_numericLiteral = 106;
SPARQLParser.RULE_numericLiteralUnsigned = 107;
SPARQLParser.RULE_numericLiteralPositive = 108;
SPARQLParser.RULE_numericLiteralNegative = 109;
SPARQLParser.RULE_booleanLiteral = 110;
SPARQLParser.RULE_string = 111;
SPARQLParser.RULE_iri = 112;
SPARQLParser.RULE_prefixedName = 113;
SPARQLParser.RULE_blankNode = 114;
SPARQLParser.RULE_anon = 115;

class QueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_query;
    }

	prologue() {
	    return this.getTypedRuleContext(PrologueContext,0);
	};

	valuesClause() {
	    return this.getTypedRuleContext(ValuesClauseContext,0);
	};

	EOF() {
	    return this.getToken(SPARQLParser.EOF, 0);
	};

	selectQuery() {
	    return this.getTypedRuleContext(SelectQueryContext,0);
	};

	constructQuery() {
	    return this.getTypedRuleContext(ConstructQueryContext,0);
	};

	describeQuery() {
	    return this.getTypedRuleContext(DescribeQueryContext,0);
	};

	askQuery() {
	    return this.getTypedRuleContext(AskQueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitQuery(this);
		}
	}


}



class PrologueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_prologue;
    }

	baseDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BaseDeclContext);
	    } else {
	        return this.getTypedRuleContext(BaseDeclContext,i);
	    }
	};

	prefixDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrefixDeclContext);
	    } else {
	        return this.getTypedRuleContext(PrefixDeclContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterPrologue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitPrologue(this);
		}
	}


}



class BaseDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_baseDecl;
    }

	BASE() {
	    return this.getToken(SPARQLParser.BASE, 0);
	};

	IRIREF() {
	    return this.getToken(SPARQLParser.IRIREF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterBaseDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitBaseDecl(this);
		}
	}


}



class PrefixDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_prefixDecl;
    }

	PREFIX() {
	    return this.getToken(SPARQLParser.PREFIX, 0);
	};

	PNAME_NS() {
	    return this.getToken(SPARQLParser.PNAME_NS, 0);
	};

	IRIREF() {
	    return this.getToken(SPARQLParser.IRIREF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterPrefixDecl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitPrefixDecl(this);
		}
	}


}



class SelectQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_selectQuery;
    }

	selectClause() {
	    return this.getTypedRuleContext(SelectClauseContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	solutionModifier() {
	    return this.getTypedRuleContext(SolutionModifierContext,0);
	};

	datasetClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DatasetClauseContext);
	    } else {
	        return this.getTypedRuleContext(DatasetClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterSelectQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitSelectQuery(this);
		}
	}


}



class SubSelectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_subSelect;
    }

	selectClause() {
	    return this.getTypedRuleContext(SelectClauseContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	solutionModifier() {
	    return this.getTypedRuleContext(SolutionModifierContext,0);
	};

	valuesClause() {
	    return this.getTypedRuleContext(ValuesClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterSubSelect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitSubSelect(this);
		}
	}


}



class SelectClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_selectClause;
    }

	SELECT() {
	    return this.getToken(SPARQLParser.SELECT, 0);
	};

	ASTERISK() {
	    return this.getToken(SPARQLParser.ASTERISK, 0);
	};

	selectModifier() {
	    return this.getTypedRuleContext(SelectModifierContext,0);
	};

	selectVariables = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectVariablesContext);
	    } else {
	        return this.getTypedRuleContext(SelectVariablesContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterSelectClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitSelectClause(this);
		}
	}


}



class SelectModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_selectModifier;
    }

	DISTINCT() {
	    return this.getToken(SPARQLParser.DISTINCT, 0);
	};

	REDUCED() {
	    return this.getToken(SPARQLParser.REDUCED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterSelectModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitSelectModifier(this);
		}
	}


}



class SelectVariablesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_selectVariables;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SelectSingleVariableContext extends SelectVariablesContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	var_() {
	    return this.getTypedRuleContext(VarContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterSelectSingleVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitSelectSingleVariable(this);
		}
	}


}

SPARQLParser.SelectSingleVariableContext = SelectSingleVariableContext;

class SelectExpressionAsVariableContext extends SelectVariablesContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OPEN_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_BRACE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	AS() {
	    return this.getToken(SPARQLParser.AS, 0);
	};

	var_() {
	    return this.getTypedRuleContext(VarContext,0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterSelectExpressionAsVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitSelectExpressionAsVariable(this);
		}
	}


}

SPARQLParser.SelectExpressionAsVariableContext = SelectExpressionAsVariableContext;

class ConstructQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_constructQuery;
    }

	CONSTRUCT() {
	    return this.getToken(SPARQLParser.CONSTRUCT, 0);
	};

	constructTemplate() {
	    return this.getTypedRuleContext(ConstructTemplateContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	solutionModifier() {
	    return this.getTypedRuleContext(SolutionModifierContext,0);
	};

	WHERE() {
	    return this.getToken(SPARQLParser.WHERE, 0);
	};

	OPEN_CURLY_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_CURLY_BRACE, 0);
	};

	CLOSE_CURLY_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_CURLY_BRACE, 0);
	};

	datasetClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DatasetClauseContext);
	    } else {
	        return this.getTypedRuleContext(DatasetClauseContext,i);
	    }
	};

	triplesTemplate() {
	    return this.getTypedRuleContext(TriplesTemplateContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterConstructQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitConstructQuery(this);
		}
	}


}



class DescribeQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_describeQuery;
    }

	DESCRIBE() {
	    return this.getToken(SPARQLParser.DESCRIBE, 0);
	};

	solutionModifier() {
	    return this.getTypedRuleContext(SolutionModifierContext,0);
	};

	ASTERISK() {
	    return this.getToken(SPARQLParser.ASTERISK, 0);
	};

	datasetClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DatasetClauseContext);
	    } else {
	        return this.getTypedRuleContext(DatasetClauseContext,i);
	    }
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	varOrIRI = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VarOrIRIContext);
	    } else {
	        return this.getTypedRuleContext(VarOrIRIContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterDescribeQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitDescribeQuery(this);
		}
	}


}



class AskQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_askQuery;
    }

	ASK() {
	    return this.getToken(SPARQLParser.ASK, 0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	solutionModifier() {
	    return this.getTypedRuleContext(SolutionModifierContext,0);
	};

	datasetClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DatasetClauseContext);
	    } else {
	        return this.getTypedRuleContext(DatasetClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterAskQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitAskQuery(this);
		}
	}


}



class DatasetClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_datasetClause;
    }

	FROM() {
	    return this.getToken(SPARQLParser.FROM, 0);
	};

	iri() {
	    return this.getTypedRuleContext(IriContext,0);
	};

	NAMED() {
	    return this.getToken(SPARQLParser.NAMED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterDatasetClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitDatasetClause(this);
		}
	}


}



class WhereClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_whereClause;
    }

	groupGraphPattern() {
	    return this.getTypedRuleContext(GroupGraphPatternContext,0);
	};

	WHERE() {
	    return this.getToken(SPARQLParser.WHERE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterWhereClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitWhereClause(this);
		}
	}


}



class SolutionModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_solutionModifier;
    }

	groupClause() {
	    return this.getTypedRuleContext(GroupClauseContext,0);
	};

	havingClause() {
	    return this.getTypedRuleContext(HavingClauseContext,0);
	};

	orderClause() {
	    return this.getTypedRuleContext(OrderClauseContext,0);
	};

	limitOffsetClauses() {
	    return this.getTypedRuleContext(LimitOffsetClausesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterSolutionModifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitSolutionModifier(this);
		}
	}


}



class GroupClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_groupClause;
    }

	GROUP() {
	    return this.getToken(SPARQLParser.GROUP, 0);
	};

	BY() {
	    return this.getToken(SPARQLParser.BY, 0);
	};

	groupCondition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GroupConditionContext);
	    } else {
	        return this.getTypedRuleContext(GroupConditionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterGroupClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitGroupClause(this);
		}
	}


}



class GroupConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_groupCondition;
    }

	builtInCall() {
	    return this.getTypedRuleContext(BuiltInCallContext,0);
	};

	functionCall() {
	    return this.getTypedRuleContext(FunctionCallContext,0);
	};

	OPEN_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_BRACE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_BRACE, 0);
	};

	AS() {
	    return this.getToken(SPARQLParser.AS, 0);
	};

	var_() {
	    return this.getTypedRuleContext(VarContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterGroupCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitGroupCondition(this);
		}
	}


}



class HavingClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_havingClause;
    }

	HAVING() {
	    return this.getToken(SPARQLParser.HAVING, 0);
	};

	havingCondition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(HavingConditionContext);
	    } else {
	        return this.getTypedRuleContext(HavingConditionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterHavingClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitHavingClause(this);
		}
	}


}



class HavingConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_havingCondition;
    }

	constraint() {
	    return this.getTypedRuleContext(ConstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterHavingCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitHavingCondition(this);
		}
	}


}



class OrderClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_orderClause;
    }

	ORDER() {
	    return this.getToken(SPARQLParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(SPARQLParser.BY, 0);
	};

	orderCondition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OrderConditionContext);
	    } else {
	        return this.getTypedRuleContext(OrderConditionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterOrderClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitOrderClause(this);
		}
	}


}



class OrderConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_orderCondition;
    }

	OPEN_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_BRACE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_BRACE, 0);
	};

	ASC() {
	    return this.getToken(SPARQLParser.ASC, 0);
	};

	DESC() {
	    return this.getToken(SPARQLParser.DESC, 0);
	};

	constraint() {
	    return this.getTypedRuleContext(ConstraintContext,0);
	};

	var_() {
	    return this.getTypedRuleContext(VarContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterOrderCondition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitOrderCondition(this);
		}
	}


}



class LimitOffsetClausesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_limitOffsetClauses;
    }

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	offsetClause() {
	    return this.getTypedRuleContext(OffsetClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterLimitOffsetClauses(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitLimitOffsetClauses(this);
		}
	}


}



class LimitClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_limitClause;
    }

	LIMIT() {
	    return this.getToken(SPARQLParser.LIMIT, 0);
	};

	INTEGER() {
	    return this.getToken(SPARQLParser.INTEGER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterLimitClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitLimitClause(this);
		}
	}


}



class OffsetClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_offsetClause;
    }

	OFFSET() {
	    return this.getToken(SPARQLParser.OFFSET, 0);
	};

	INTEGER() {
	    return this.getToken(SPARQLParser.INTEGER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterOffsetClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitOffsetClause(this);
		}
	}


}



class ValuesClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_valuesClause;
    }

	VALUES() {
	    return this.getToken(SPARQLParser.VALUES, 0);
	};

	dataBlock() {
	    return this.getTypedRuleContext(DataBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterValuesClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitValuesClause(this);
		}
	}


}



class TriplesTemplateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_triplesTemplate;
    }

	triplesSameSubject = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TriplesSameSubjectContext);
	    } else {
	        return this.getTypedRuleContext(TriplesSameSubjectContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SPARQLParser.DOT);
	    } else {
	        return this.getToken(SPARQLParser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterTriplesTemplate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitTriplesTemplate(this);
		}
	}


}



class GroupGraphPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_groupGraphPattern;
    }

	OPEN_CURLY_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_CURLY_BRACE, 0);
	};

	CLOSE_CURLY_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_CURLY_BRACE, 0);
	};

	subSelect() {
	    return this.getTypedRuleContext(SubSelectContext,0);
	};

	groupGraphPatternSub() {
	    return this.getTypedRuleContext(GroupGraphPatternSubContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterGroupGraphPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitGroupGraphPattern(this);
		}
	}


}



class GroupGraphPatternSubContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_groupGraphPatternSub;
    }

	triplesBlock() {
	    return this.getTypedRuleContext(TriplesBlockContext,0);
	};

	groupGraphPatternSubList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GroupGraphPatternSubListContext);
	    } else {
	        return this.getTypedRuleContext(GroupGraphPatternSubListContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterGroupGraphPatternSub(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitGroupGraphPatternSub(this);
		}
	}


}



class GroupGraphPatternSubListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_groupGraphPatternSubList;
    }

	graphPatternNotTriples() {
	    return this.getTypedRuleContext(GraphPatternNotTriplesContext,0);
	};

	DOT() {
	    return this.getToken(SPARQLParser.DOT, 0);
	};

	triplesBlock() {
	    return this.getTypedRuleContext(TriplesBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterGroupGraphPatternSubList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitGroupGraphPatternSubList(this);
		}
	}


}



class TriplesBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_triplesBlock;
    }

	triplesSameSubjectPath = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TriplesSameSubjectPathContext);
	    } else {
	        return this.getTypedRuleContext(TriplesSameSubjectPathContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SPARQLParser.DOT);
	    } else {
	        return this.getToken(SPARQLParser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterTriplesBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitTriplesBlock(this);
		}
	}


}



class GraphPatternNotTriplesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_graphPatternNotTriples;
    }

	groupOrUnionGraphPattern() {
	    return this.getTypedRuleContext(GroupOrUnionGraphPatternContext,0);
	};

	optionalGraphPattern() {
	    return this.getTypedRuleContext(OptionalGraphPatternContext,0);
	};

	minusGraphPattern() {
	    return this.getTypedRuleContext(MinusGraphPatternContext,0);
	};

	graphGraphPattern() {
	    return this.getTypedRuleContext(GraphGraphPatternContext,0);
	};

	serviceGraphPattern() {
	    return this.getTypedRuleContext(ServiceGraphPatternContext,0);
	};

	filter() {
	    return this.getTypedRuleContext(FilterContext,0);
	};

	bind() {
	    return this.getTypedRuleContext(BindContext,0);
	};

	inlineData() {
	    return this.getTypedRuleContext(InlineDataContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterGraphPatternNotTriples(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitGraphPatternNotTriples(this);
		}
	}


}



class OptionalGraphPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_optionalGraphPattern;
    }

	OPTIONAL() {
	    return this.getToken(SPARQLParser.OPTIONAL, 0);
	};

	groupGraphPattern() {
	    return this.getTypedRuleContext(GroupGraphPatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterOptionalGraphPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitOptionalGraphPattern(this);
		}
	}


}



class GraphGraphPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_graphGraphPattern;
    }

	GRAPH() {
	    return this.getToken(SPARQLParser.GRAPH, 0);
	};

	varOrIRI() {
	    return this.getTypedRuleContext(VarOrIRIContext,0);
	};

	groupGraphPattern() {
	    return this.getTypedRuleContext(GroupGraphPatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterGraphGraphPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitGraphGraphPattern(this);
		}
	}


}



class ServiceGraphPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_serviceGraphPattern;
    }

	SERVICE() {
	    return this.getToken(SPARQLParser.SERVICE, 0);
	};

	varOrIRI() {
	    return this.getTypedRuleContext(VarOrIRIContext,0);
	};

	groupGraphPattern() {
	    return this.getTypedRuleContext(GroupGraphPatternContext,0);
	};

	SILENT() {
	    return this.getToken(SPARQLParser.SILENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterServiceGraphPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitServiceGraphPattern(this);
		}
	}


}



class BindContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_bind;
    }

	BIND() {
	    return this.getToken(SPARQLParser.BIND, 0);
	};

	OPEN_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_BRACE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	AS() {
	    return this.getToken(SPARQLParser.AS, 0);
	};

	var_() {
	    return this.getTypedRuleContext(VarContext,0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterBind(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitBind(this);
		}
	}


}



class InlineDataContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_inlineData;
    }

	VALUES() {
	    return this.getToken(SPARQLParser.VALUES, 0);
	};

	dataBlock() {
	    return this.getTypedRuleContext(DataBlockContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterInlineData(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitInlineData(this);
		}
	}


}



class DataBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_dataBlock;
    }

	inlineDataOneVar() {
	    return this.getTypedRuleContext(InlineDataOneVarContext,0);
	};

	inlineDataFull() {
	    return this.getTypedRuleContext(InlineDataFullContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterDataBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitDataBlock(this);
		}
	}


}



class InlineDataOneVarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_inlineDataOneVar;
    }

	var_() {
	    return this.getTypedRuleContext(VarContext,0);
	};

	OPEN_CURLY_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_CURLY_BRACE, 0);
	};

	CLOSE_CURLY_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_CURLY_BRACE, 0);
	};

	dataBlockValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataBlockValueContext);
	    } else {
	        return this.getTypedRuleContext(DataBlockValueContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterInlineDataOneVar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitInlineDataOneVar(this);
		}
	}


}



class InlineDataFullContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_inlineDataFull;
    }

	OPEN_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_BRACE, 0);
	};

	OPEN_CURLY_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_CURLY_BRACE, 0);
	};

	CLOSE_CURLY_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_CURLY_BRACE, 0);
	};

	var_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VarContext);
	    } else {
	        return this.getTypedRuleContext(VarContext,i);
	    }
	};

	dataBlockValues = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataBlockValuesContext);
	    } else {
	        return this.getTypedRuleContext(DataBlockValuesContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterInlineDataFull(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitInlineDataFull(this);
		}
	}


}



class DataBlockValuesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_dataBlockValues;
    }

	OPEN_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_BRACE, 0);
	};

	dataBlockValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataBlockValueContext);
	    } else {
	        return this.getTypedRuleContext(DataBlockValueContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterDataBlockValues(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitDataBlockValues(this);
		}
	}


}



class DataBlockValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_dataBlockValue;
    }

	iri() {
	    return this.getTypedRuleContext(IriContext,0);
	};

	rdfLiteral() {
	    return this.getTypedRuleContext(RdfLiteralContext,0);
	};

	numericLiteral() {
	    return this.getTypedRuleContext(NumericLiteralContext,0);
	};

	booleanLiteral() {
	    return this.getTypedRuleContext(BooleanLiteralContext,0);
	};

	UNDEF() {
	    return this.getToken(SPARQLParser.UNDEF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterDataBlockValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitDataBlockValue(this);
		}
	}


}



class MinusGraphPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_minusGraphPattern;
    }

	MINUS() {
	    return this.getToken(SPARQLParser.MINUS, 0);
	};

	groupGraphPattern() {
	    return this.getTypedRuleContext(GroupGraphPatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterMinusGraphPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitMinusGraphPattern(this);
		}
	}


}



class GroupOrUnionGraphPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_groupOrUnionGraphPattern;
    }

	groupGraphPattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GroupGraphPatternContext);
	    } else {
	        return this.getTypedRuleContext(GroupGraphPatternContext,i);
	    }
	};

	UNION = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SPARQLParser.UNION);
	    } else {
	        return this.getToken(SPARQLParser.UNION, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterGroupOrUnionGraphPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitGroupOrUnionGraphPattern(this);
		}
	}


}



class FilterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_filter;
    }

	FILTER() {
	    return this.getToken(SPARQLParser.FILTER, 0);
	};

	constraint() {
	    return this.getTypedRuleContext(ConstraintContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterFilter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitFilter(this);
		}
	}


}



class ConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_constraint;
    }

	OPEN_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_BRACE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_BRACE, 0);
	};

	builtInCall() {
	    return this.getTypedRuleContext(BuiltInCallContext,0);
	};

	functionCall() {
	    return this.getTypedRuleContext(FunctionCallContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitConstraint(this);
		}
	}


}



class FunctionCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_functionCall;
    }

	iri() {
	    return this.getTypedRuleContext(IriContext,0);
	};

	argList() {
	    return this.getTypedRuleContext(ArgListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterFunctionCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitFunctionCall(this);
		}
	}


}



class ArgListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_argList;
    }

	OPEN_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_BRACE, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	DISTINCT() {
	    return this.getToken(SPARQLParser.DISTINCT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterArgList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitArgList(this);
		}
	}


}



class ExpressionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_expressionList;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SPARQLParser.COMMA);
	    } else {
	        return this.getToken(SPARQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterExpressionList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitExpressionList(this);
		}
	}


}



class ConstructTemplateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_constructTemplate;
    }

	OPEN_CURLY_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_CURLY_BRACE, 0);
	};

	CLOSE_CURLY_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_CURLY_BRACE, 0);
	};

	constructTriples() {
	    return this.getTypedRuleContext(ConstructTriplesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterConstructTemplate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitConstructTemplate(this);
		}
	}


}



class ConstructTriplesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_constructTriples;
    }

	triplesSameSubject() {
	    return this.getTypedRuleContext(TriplesSameSubjectContext,0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SPARQLParser.DOT);
	    } else {
	        return this.getToken(SPARQLParser.DOT, i);
	    }
	};


	constructTriples = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstructTriplesContext);
	    } else {
	        return this.getTypedRuleContext(ConstructTriplesContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterConstructTriples(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitConstructTriples(this);
		}
	}


}



class TriplesSameSubjectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_triplesSameSubject;
    }

	varOrTerm() {
	    return this.getTypedRuleContext(VarOrTermContext,0);
	};

	propertyListNotEmpty() {
	    return this.getTypedRuleContext(PropertyListNotEmptyContext,0);
	};

	triplesNode() {
	    return this.getTypedRuleContext(TriplesNodeContext,0);
	};

	propertyList() {
	    return this.getTypedRuleContext(PropertyListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterTriplesSameSubject(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitTriplesSameSubject(this);
		}
	}


}



class PropertyListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_propertyList;
    }

	propertyListNotEmpty() {
	    return this.getTypedRuleContext(PropertyListNotEmptyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterPropertyList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitPropertyList(this);
		}
	}


}



class PropertyListNotEmptyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_propertyListNotEmpty;
    }

	verb = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VerbContext);
	    } else {
	        return this.getTypedRuleContext(VerbContext,i);
	    }
	};

	objectList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ObjectListContext);
	    } else {
	        return this.getTypedRuleContext(ObjectListContext,i);
	    }
	};

	SEMICOLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SPARQLParser.SEMICOLON);
	    } else {
	        return this.getToken(SPARQLParser.SEMICOLON, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterPropertyListNotEmpty(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitPropertyListNotEmpty(this);
		}
	}


}



class VerbContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_verb;
    }

	varOrIRI() {
	    return this.getTypedRuleContext(VarOrIRIContext,0);
	};

	A() {
	    return this.getToken(SPARQLParser.A, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterVerb(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitVerb(this);
		}
	}


}



class ObjectListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_objectList;
    }

	object = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ObjectContext);
	    } else {
	        return this.getTypedRuleContext(ObjectContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SPARQLParser.COMMA);
	    } else {
	        return this.getToken(SPARQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterObjectList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitObjectList(this);
		}
	}


}



class ObjectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_object;
    }

	graphNode() {
	    return this.getTypedRuleContext(GraphNodeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterObject(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitObject(this);
		}
	}


}



class TriplesSameSubjectPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_triplesSameSubjectPath;
    }

	varOrTerm() {
	    return this.getTypedRuleContext(VarOrTermContext,0);
	};

	propertyListPathNotEmpty() {
	    return this.getTypedRuleContext(PropertyListPathNotEmptyContext,0);
	};

	triplesNodePath() {
	    return this.getTypedRuleContext(TriplesNodePathContext,0);
	};

	propertyListPath() {
	    return this.getTypedRuleContext(PropertyListPathContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterTriplesSameSubjectPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitTriplesSameSubjectPath(this);
		}
	}


}



class PropertyListPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_propertyListPath;
    }

	propertyListPathNotEmpty() {
	    return this.getTypedRuleContext(PropertyListPathNotEmptyContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterPropertyListPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitPropertyListPath(this);
		}
	}


}



class PropertyListPathNotEmptyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_propertyListPathNotEmpty;
    }

	objectListPath() {
	    return this.getTypedRuleContext(ObjectListPathContext,0);
	};

	verbPath() {
	    return this.getTypedRuleContext(VerbPathContext,0);
	};

	verbSimple() {
	    return this.getTypedRuleContext(VerbSimpleContext,0);
	};

	SEMICOLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SPARQLParser.SEMICOLON);
	    } else {
	        return this.getToken(SPARQLParser.SEMICOLON, i);
	    }
	};


	propertyListPathNotEmptyList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PropertyListPathNotEmptyListContext);
	    } else {
	        return this.getTypedRuleContext(PropertyListPathNotEmptyListContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterPropertyListPathNotEmpty(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitPropertyListPathNotEmpty(this);
		}
	}


}



class PropertyListPathNotEmptyListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_propertyListPathNotEmptyList;
    }

	objectList() {
	    return this.getTypedRuleContext(ObjectListContext,0);
	};

	verbPath() {
	    return this.getTypedRuleContext(VerbPathContext,0);
	};

	verbSimple() {
	    return this.getTypedRuleContext(VerbSimpleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterPropertyListPathNotEmptyList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitPropertyListPathNotEmptyList(this);
		}
	}


}



class VerbPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_verbPath;
    }

	path() {
	    return this.getTypedRuleContext(PathContext,0);
	};

	OPEN_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_BRACE, 0);
	};

	AS() {
	    return this.getToken(SPARQLParser.AS, 0);
	};

	var_() {
	    return this.getTypedRuleContext(VarContext,0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_BRACE, 0);
	};

	ANY() {
	    return this.getToken(SPARQLParser.ANY, 0);
	};

	ALL() {
	    return this.getToken(SPARQLParser.ALL, 0);
	};

	SHORTEST() {
	    return this.getToken(SPARQLParser.SHORTEST, 0);
	};

	WALKS() {
	    return this.getToken(SPARQLParser.WALKS, 0);
	};

	SIMPLE() {
	    return this.getToken(SPARQLParser.SIMPLE, 0);
	};

	ACYCLIC() {
	    return this.getToken(SPARQLParser.ACYCLIC, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterVerbPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitVerbPath(this);
		}
	}


}



class VerbSimpleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_verbSimple;
    }

	var_() {
	    return this.getTypedRuleContext(VarContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterVerbSimple(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitVerbSimple(this);
		}
	}


}



class ObjectListPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_objectListPath;
    }

	objectPath = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ObjectPathContext);
	    } else {
	        return this.getTypedRuleContext(ObjectPathContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SPARQLParser.COMMA);
	    } else {
	        return this.getToken(SPARQLParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterObjectListPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitObjectListPath(this);
		}
	}


}



class ObjectPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_objectPath;
    }

	graphNodePath() {
	    return this.getTypedRuleContext(GraphNodePathContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterObjectPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitObjectPath(this);
		}
	}


}



class PathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_path;
    }

	pathAlternative() {
	    return this.getTypedRuleContext(PathAlternativeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitPath(this);
		}
	}


}



class PathAlternativeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_pathAlternative;
    }

	pathSequence = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathSequenceContext);
	    } else {
	        return this.getTypedRuleContext(PathSequenceContext,i);
	    }
	};

	PIPE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SPARQLParser.PIPE);
	    } else {
	        return this.getToken(SPARQLParser.PIPE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterPathAlternative(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitPathAlternative(this);
		}
	}


}



class PathSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_pathSequence;
    }

	pathEltOrInverse = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathEltOrInverseContext);
	    } else {
	        return this.getTypedRuleContext(PathEltOrInverseContext,i);
	    }
	};

	DIVIDE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SPARQLParser.DIVIDE);
	    } else {
	        return this.getToken(SPARQLParser.DIVIDE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterPathSequence(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitPathSequence(this);
		}
	}


}



class PathEltContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_pathElt;
    }

	pathPrimary() {
	    return this.getTypedRuleContext(PathPrimaryContext,0);
	};

	pathMod() {
	    return this.getTypedRuleContext(PathModContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterPathElt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitPathElt(this);
		}
	}


}



class PathEltOrInverseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_pathEltOrInverse;
    }

	pathElt() {
	    return this.getTypedRuleContext(PathEltContext,0);
	};

	INVERSE() {
	    return this.getToken(SPARQLParser.INVERSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterPathEltOrInverse(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitPathEltOrInverse(this);
		}
	}


}



class PathModContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_pathMod;
        this.op = null;
    }

	QUESTION_MARK() {
	    return this.getToken(SPARQLParser.QUESTION_MARK, 0);
	};

	ASTERISK() {
	    return this.getToken(SPARQLParser.ASTERISK, 0);
	};

	PLUS_SIGN() {
	    return this.getToken(SPARQLParser.PLUS_SIGN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterPathMod(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitPathMod(this);
		}
	}


}



class PathPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_pathPrimary;
    }

	iri() {
	    return this.getTypedRuleContext(IriContext,0);
	};

	A() {
	    return this.getToken(SPARQLParser.A, 0);
	};

	NEGATION() {
	    return this.getToken(SPARQLParser.NEGATION, 0);
	};

	pathNegatedPropertySet() {
	    return this.getTypedRuleContext(PathNegatedPropertySetContext,0);
	};

	OPEN_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_BRACE, 0);
	};

	path() {
	    return this.getTypedRuleContext(PathContext,0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterPathPrimary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitPathPrimary(this);
		}
	}


}



class PathNegatedPropertySetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_pathNegatedPropertySet;
    }

	pathOneInPropertySet = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathOneInPropertySetContext);
	    } else {
	        return this.getTypedRuleContext(PathOneInPropertySetContext,i);
	    }
	};

	OPEN_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_BRACE, 0);
	};

	PIPE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SPARQLParser.PIPE);
	    } else {
	        return this.getToken(SPARQLParser.PIPE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterPathNegatedPropertySet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitPathNegatedPropertySet(this);
		}
	}


}



class PathOneInPropertySetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_pathOneInPropertySet;
    }

	iri() {
	    return this.getTypedRuleContext(IriContext,0);
	};

	A() {
	    return this.getToken(SPARQLParser.A, 0);
	};

	INVERSE() {
	    return this.getToken(SPARQLParser.INVERSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterPathOneInPropertySet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitPathOneInPropertySet(this);
		}
	}


}



class IntegerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_integer;
    }

	INTEGER() {
	    return this.getToken(SPARQLParser.INTEGER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterInteger(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitInteger(this);
		}
	}


}



class TriplesNodeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_triplesNode;
    }

	collection() {
	    return this.getTypedRuleContext(CollectionContext,0);
	};

	blankNodePropertyList() {
	    return this.getTypedRuleContext(BlankNodePropertyListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterTriplesNode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitTriplesNode(this);
		}
	}


}



class BlankNodePropertyListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_blankNodePropertyList;
    }

	OPEN_SQUARE_BRACKET() {
	    return this.getToken(SPARQLParser.OPEN_SQUARE_BRACKET, 0);
	};

	propertyListNotEmpty() {
	    return this.getTypedRuleContext(PropertyListNotEmptyContext,0);
	};

	CLOSE_SQUARE_BRACKET() {
	    return this.getToken(SPARQLParser.CLOSE_SQUARE_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterBlankNodePropertyList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitBlankNodePropertyList(this);
		}
	}


}



class TriplesNodePathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_triplesNodePath;
    }

	collectionPath() {
	    return this.getTypedRuleContext(CollectionPathContext,0);
	};

	blankNodePropertyListPath() {
	    return this.getTypedRuleContext(BlankNodePropertyListPathContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterTriplesNodePath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitTriplesNodePath(this);
		}
	}


}



class BlankNodePropertyListPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_blankNodePropertyListPath;
    }

	OPEN_SQUARE_BRACKET() {
	    return this.getToken(SPARQLParser.OPEN_SQUARE_BRACKET, 0);
	};

	propertyListPathNotEmpty() {
	    return this.getTypedRuleContext(PropertyListPathNotEmptyContext,0);
	};

	CLOSE_SQUARE_BRACKET() {
	    return this.getToken(SPARQLParser.CLOSE_SQUARE_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterBlankNodePropertyListPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitBlankNodePropertyListPath(this);
		}
	}


}



class CollectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_collection;
    }

	OPEN_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_BRACE, 0);
	};

	graphNode = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GraphNodeContext);
	    } else {
	        return this.getTypedRuleContext(GraphNodeContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterCollection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitCollection(this);
		}
	}


}



class CollectionPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_collectionPath;
    }

	OPEN_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_BRACE, 0);
	};

	graphNodePath = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GraphNodePathContext);
	    } else {
	        return this.getTypedRuleContext(GraphNodePathContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterCollectionPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitCollectionPath(this);
		}
	}


}



class GraphNodeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_graphNode;
    }

	varOrTerm() {
	    return this.getTypedRuleContext(VarOrTermContext,0);
	};

	triplesNode() {
	    return this.getTypedRuleContext(TriplesNodeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterGraphNode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitGraphNode(this);
		}
	}


}



class GraphNodePathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_graphNodePath;
    }

	varOrTerm() {
	    return this.getTypedRuleContext(VarOrTermContext,0);
	};

	triplesNodePath() {
	    return this.getTypedRuleContext(TriplesNodePathContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterGraphNodePath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitGraphNodePath(this);
		}
	}


}



class VarOrTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_varOrTerm;
    }

	var_() {
	    return this.getTypedRuleContext(VarContext,0);
	};

	graphTerm() {
	    return this.getTypedRuleContext(GraphTermContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterVarOrTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitVarOrTerm(this);
		}
	}


}



class VarOrIRIContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_varOrIRI;
    }

	var_() {
	    return this.getTypedRuleContext(VarContext,0);
	};

	iri() {
	    return this.getTypedRuleContext(IriContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterVarOrIRI(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitVarOrIRI(this);
		}
	}


}



class VarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_var;
    }

	VAR1() {
	    return this.getToken(SPARQLParser.VAR1, 0);
	};

	VAR2() {
	    return this.getToken(SPARQLParser.VAR2, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterVar(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitVar(this);
		}
	}


}



class GraphTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_graphTerm;
    }

	iri() {
	    return this.getTypedRuleContext(IriContext,0);
	};

	rdfLiteral() {
	    return this.getTypedRuleContext(RdfLiteralContext,0);
	};

	numericLiteral() {
	    return this.getTypedRuleContext(NumericLiteralContext,0);
	};

	booleanLiteral() {
	    return this.getTypedRuleContext(BooleanLiteralContext,0);
	};

	blankNode() {
	    return this.getTypedRuleContext(BlankNodeContext,0);
	};

	nil() {
	    return this.getTypedRuleContext(NilContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterGraphTerm(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitGraphTerm(this);
		}
	}


}



class NilContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_nil;
    }

	OPEN_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterNil(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitNil(this);
		}
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_expression;
    }

	conditionalOrExpression() {
	    return this.getTypedRuleContext(ConditionalOrExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitExpression(this);
		}
	}


}



class ConditionalOrExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_conditionalOrExpression;
    }

	conditionalAndExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionalAndExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ConditionalAndExpressionContext,i);
	    }
	};

	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SPARQLParser.OR);
	    } else {
	        return this.getToken(SPARQLParser.OR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterConditionalOrExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitConditionalOrExpression(this);
		}
	}


}



class ConditionalAndExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_conditionalAndExpression;
    }

	relationalExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RelationalExpressionContext);
	    } else {
	        return this.getTypedRuleContext(RelationalExpressionContext,i);
	    }
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SPARQLParser.AND);
	    } else {
	        return this.getToken(SPARQLParser.AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterConditionalAndExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitConditionalAndExpression(this);
		}
	}


}



class RelationalExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_relationalExpression;
        this.op = null;
    }

	additiveExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AdditiveExpressionContext);
	    } else {
	        return this.getTypedRuleContext(AdditiveExpressionContext,i);
	    }
	};

	EQUAL() {
	    return this.getToken(SPARQLParser.EQUAL, 0);
	};

	NOT_EQUAL() {
	    return this.getToken(SPARQLParser.NOT_EQUAL, 0);
	};

	LESS() {
	    return this.getToken(SPARQLParser.LESS, 0);
	};

	GREATER() {
	    return this.getToken(SPARQLParser.GREATER, 0);
	};

	LESS_EQUAL() {
	    return this.getToken(SPARQLParser.LESS_EQUAL, 0);
	};

	GREATER_EQUAL() {
	    return this.getToken(SPARQLParser.GREATER_EQUAL, 0);
	};

	IN() {
	    return this.getToken(SPARQLParser.IN, 0);
	};

	OPEN_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_BRACE, 0);
	};

	NOT() {
	    return this.getToken(SPARQLParser.NOT, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterRelationalExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitRelationalExpression(this);
		}
	}


}



class AdditiveExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_additiveExpression;
    }

	multiplicativeExpression() {
	    return this.getTypedRuleContext(MultiplicativeExpressionContext,0);
	};

	rhsAdditiveExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RhsAdditiveExpressionContext);
	    } else {
	        return this.getTypedRuleContext(RhsAdditiveExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterAdditiveExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitAdditiveExpression(this);
		}
	}


}



class RhsAdditiveExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_rhsAdditiveExpression;
        this.s143 = null;
        this.op = [];
        this.s147 = null;
        this._tset1636 = null;
    }

	rhsAdditiveExpressionSub() {
	    return this.getTypedRuleContext(RhsAdditiveExpressionSubContext,0);
	};

	unaryExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnaryExpressionContext);
	    } else {
	        return this.getTypedRuleContext(UnaryExpressionContext,i);
	    }
	};

	ASTERISK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SPARQLParser.ASTERISK);
	    } else {
	        return this.getToken(SPARQLParser.ASTERISK, i);
	    }
	};


	DIVIDE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SPARQLParser.DIVIDE);
	    } else {
	        return this.getToken(SPARQLParser.DIVIDE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterRhsAdditiveExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitRhsAdditiveExpression(this);
		}
	}


}



class RhsAdditiveExpressionSubContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_rhsAdditiveExpressionSub;
    }

	multiplicativeExpression() {
	    return this.getTypedRuleContext(MultiplicativeExpressionContext,0);
	};

	PLUS_SIGN() {
	    return this.getToken(SPARQLParser.PLUS_SIGN, 0);
	};

	MINUS_SIGN() {
	    return this.getToken(SPARQLParser.MINUS_SIGN, 0);
	};

	numericLiteralPositive() {
	    return this.getTypedRuleContext(NumericLiteralPositiveContext,0);
	};

	numericLiteralNegative() {
	    return this.getTypedRuleContext(NumericLiteralNegativeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterRhsAdditiveExpressionSub(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitRhsAdditiveExpressionSub(this);
		}
	}


}



class MultiplicativeExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_multiplicativeExpression;
        this.s143 = null;
        this.op = [];
        this.s147 = null;
        this._tset1679 = null;
    }

	unaryExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnaryExpressionContext);
	    } else {
	        return this.getTypedRuleContext(UnaryExpressionContext,i);
	    }
	};

	ASTERISK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SPARQLParser.ASTERISK);
	    } else {
	        return this.getToken(SPARQLParser.ASTERISK, i);
	    }
	};


	DIVIDE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SPARQLParser.DIVIDE);
	    } else {
	        return this.getToken(SPARQLParser.DIVIDE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterMultiplicativeExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitMultiplicativeExpression(this);
		}
	}


}



class UnaryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_unaryExpression;
        this.op = null;
    }

	primaryExpression() {
	    return this.getTypedRuleContext(PrimaryExpressionContext,0);
	};

	NEGATION() {
	    return this.getToken(SPARQLParser.NEGATION, 0);
	};

	PLUS_SIGN() {
	    return this.getToken(SPARQLParser.PLUS_SIGN, 0);
	};

	MINUS_SIGN() {
	    return this.getToken(SPARQLParser.MINUS_SIGN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterUnaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitUnaryExpression(this);
		}
	}


}



class PrimaryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_primaryExpression;
    }

	OPEN_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_BRACE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_BRACE, 0);
	};

	builtInCall() {
	    return this.getTypedRuleContext(BuiltInCallContext,0);
	};

	iriOrFunction() {
	    return this.getTypedRuleContext(IriOrFunctionContext,0);
	};

	rdfLiteral() {
	    return this.getTypedRuleContext(RdfLiteralContext,0);
	};

	numericLiteral() {
	    return this.getTypedRuleContext(NumericLiteralContext,0);
	};

	booleanLiteral() {
	    return this.getTypedRuleContext(BooleanLiteralContext,0);
	};

	var_() {
	    return this.getTypedRuleContext(VarContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterPrimaryExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitPrimaryExpression(this);
		}
	}


}



class BuiltInCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_builtInCall;
    }

	aggregate() {
	    return this.getTypedRuleContext(AggregateContext,0);
	};

	STR() {
	    return this.getToken(SPARQLParser.STR, 0);
	};

	OPEN_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_BRACE, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	CLOSE_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_BRACE, 0);
	};

	LANG() {
	    return this.getToken(SPARQLParser.LANG, 0);
	};

	LANGMATCHES() {
	    return this.getToken(SPARQLParser.LANGMATCHES, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SPARQLParser.COMMA);
	    } else {
	        return this.getToken(SPARQLParser.COMMA, i);
	    }
	};


	DATATYPE() {
	    return this.getToken(SPARQLParser.DATATYPE, 0);
	};

	BOUND() {
	    return this.getToken(SPARQLParser.BOUND, 0);
	};

	var_() {
	    return this.getTypedRuleContext(VarContext,0);
	};

	IRI() {
	    return this.getToken(SPARQLParser.IRI, 0);
	};

	URI() {
	    return this.getToken(SPARQLParser.URI, 0);
	};

	BNODE() {
	    return this.getToken(SPARQLParser.BNODE, 0);
	};

	RAND() {
	    return this.getToken(SPARQLParser.RAND, 0);
	};

	ABS() {
	    return this.getToken(SPARQLParser.ABS, 0);
	};

	CEIL() {
	    return this.getToken(SPARQLParser.CEIL, 0);
	};

	FLOOR() {
	    return this.getToken(SPARQLParser.FLOOR, 0);
	};

	ROUND() {
	    return this.getToken(SPARQLParser.ROUND, 0);
	};

	CONCAT() {
	    return this.getToken(SPARQLParser.CONCAT, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	subStringExpression() {
	    return this.getTypedRuleContext(SubStringExpressionContext,0);
	};

	STRLEN() {
	    return this.getToken(SPARQLParser.STRLEN, 0);
	};

	strReplaceExpression() {
	    return this.getTypedRuleContext(StrReplaceExpressionContext,0);
	};

	UCASE() {
	    return this.getToken(SPARQLParser.UCASE, 0);
	};

	LCASE() {
	    return this.getToken(SPARQLParser.LCASE, 0);
	};

	ENCODE_FOR_URI() {
	    return this.getToken(SPARQLParser.ENCODE_FOR_URI, 0);
	};

	CONTAINS() {
	    return this.getToken(SPARQLParser.CONTAINS, 0);
	};

	STRSTARTS() {
	    return this.getToken(SPARQLParser.STRSTARTS, 0);
	};

	STRENDS() {
	    return this.getToken(SPARQLParser.STRENDS, 0);
	};

	STRBEFORE() {
	    return this.getToken(SPARQLParser.STRBEFORE, 0);
	};

	STRAFTER() {
	    return this.getToken(SPARQLParser.STRAFTER, 0);
	};

	YEAR() {
	    return this.getToken(SPARQLParser.YEAR, 0);
	};

	MONTH() {
	    return this.getToken(SPARQLParser.MONTH, 0);
	};

	DAY() {
	    return this.getToken(SPARQLParser.DAY, 0);
	};

	HOURS() {
	    return this.getToken(SPARQLParser.HOURS, 0);
	};

	MINUTES() {
	    return this.getToken(SPARQLParser.MINUTES, 0);
	};

	SECONDS() {
	    return this.getToken(SPARQLParser.SECONDS, 0);
	};

	TIMEZONE() {
	    return this.getToken(SPARQLParser.TIMEZONE, 0);
	};

	TZ() {
	    return this.getToken(SPARQLParser.TZ, 0);
	};

	NOW() {
	    return this.getToken(SPARQLParser.NOW, 0);
	};

	UUID() {
	    return this.getToken(SPARQLParser.UUID, 0);
	};

	STRUUID() {
	    return this.getToken(SPARQLParser.STRUUID, 0);
	};

	MD5() {
	    return this.getToken(SPARQLParser.MD5, 0);
	};

	SHA1() {
	    return this.getToken(SPARQLParser.SHA1, 0);
	};

	SHA256() {
	    return this.getToken(SPARQLParser.SHA256, 0);
	};

	SHA384() {
	    return this.getToken(SPARQLParser.SHA384, 0);
	};

	SHA512() {
	    return this.getToken(SPARQLParser.SHA512, 0);
	};

	COALESCE() {
	    return this.getToken(SPARQLParser.COALESCE, 0);
	};

	IF() {
	    return this.getToken(SPARQLParser.IF, 0);
	};

	STRLANG() {
	    return this.getToken(SPARQLParser.STRLANG, 0);
	};

	STRDT() {
	    return this.getToken(SPARQLParser.STRDT, 0);
	};

	SAMETERM() {
	    return this.getToken(SPARQLParser.SAMETERM, 0);
	};

	ISIRI() {
	    return this.getToken(SPARQLParser.ISIRI, 0);
	};

	ISURI() {
	    return this.getToken(SPARQLParser.ISURI, 0);
	};

	ISBLANK() {
	    return this.getToken(SPARQLParser.ISBLANK, 0);
	};

	ISLITERAL() {
	    return this.getToken(SPARQLParser.ISLITERAL, 0);
	};

	ISNUMERIC() {
	    return this.getToken(SPARQLParser.ISNUMERIC, 0);
	};

	regexExpression() {
	    return this.getTypedRuleContext(RegexExpressionContext,0);
	};

	existsFunction() {
	    return this.getTypedRuleContext(ExistsFunctionContext,0);
	};

	notExistsFunction() {
	    return this.getTypedRuleContext(NotExistsFunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterBuiltInCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitBuiltInCall(this);
		}
	}


}



class RegexExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_regexExpression;
    }

	REGEX() {
	    return this.getToken(SPARQLParser.REGEX, 0);
	};

	OPEN_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_BRACE, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SPARQLParser.COMMA);
	    } else {
	        return this.getToken(SPARQLParser.COMMA, i);
	    }
	};


	CLOSE_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterRegexExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitRegexExpression(this);
		}
	}


}



class SubStringExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_subStringExpression;
    }

	SUBSTR() {
	    return this.getToken(SPARQLParser.SUBSTR, 0);
	};

	OPEN_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_BRACE, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SPARQLParser.COMMA);
	    } else {
	        return this.getToken(SPARQLParser.COMMA, i);
	    }
	};


	CLOSE_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterSubStringExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitSubStringExpression(this);
		}
	}


}



class StrReplaceExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_strReplaceExpression;
    }

	REPLACE() {
	    return this.getToken(SPARQLParser.REPLACE, 0);
	};

	OPEN_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_BRACE, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SPARQLParser.COMMA);
	    } else {
	        return this.getToken(SPARQLParser.COMMA, i);
	    }
	};


	CLOSE_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_BRACE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterStrReplaceExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitStrReplaceExpression(this);
		}
	}


}



class ExistsFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_existsFunction;
    }

	EXISTS() {
	    return this.getToken(SPARQLParser.EXISTS, 0);
	};

	groupGraphPattern() {
	    return this.getTypedRuleContext(GroupGraphPatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterExistsFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitExistsFunction(this);
		}
	}


}



class NotExistsFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_notExistsFunction;
    }

	NOT() {
	    return this.getToken(SPARQLParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(SPARQLParser.EXISTS, 0);
	};

	groupGraphPattern() {
	    return this.getTypedRuleContext(GroupGraphPatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterNotExistsFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitNotExistsFunction(this);
		}
	}


}



class AggregateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_aggregate;
    }

	COUNT() {
	    return this.getToken(SPARQLParser.COUNT, 0);
	};

	OPEN_BRACE() {
	    return this.getToken(SPARQLParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SPARQLParser.CLOSE_BRACE, 0);
	};

	ASTERISK() {
	    return this.getToken(SPARQLParser.ASTERISK, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	DISTINCT() {
	    return this.getToken(SPARQLParser.DISTINCT, 0);
	};

	SUM() {
	    return this.getToken(SPARQLParser.SUM, 0);
	};

	MIN() {
	    return this.getToken(SPARQLParser.MIN, 0);
	};

	MAX() {
	    return this.getToken(SPARQLParser.MAX, 0);
	};

	AVG() {
	    return this.getToken(SPARQLParser.AVG, 0);
	};

	SAMPLE() {
	    return this.getToken(SPARQLParser.SAMPLE, 0);
	};

	GROUP_CONCAT() {
	    return this.getToken(SPARQLParser.GROUP_CONCAT, 0);
	};

	SEMICOLON() {
	    return this.getToken(SPARQLParser.SEMICOLON, 0);
	};

	SEPARATOR() {
	    return this.getToken(SPARQLParser.SEPARATOR, 0);
	};

	EQUAL() {
	    return this.getToken(SPARQLParser.EQUAL, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterAggregate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitAggregate(this);
		}
	}


}



class IriOrFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_iriOrFunction;
    }

	iri() {
	    return this.getTypedRuleContext(IriContext,0);
	};

	argList() {
	    return this.getTypedRuleContext(ArgListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterIriOrFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitIriOrFunction(this);
		}
	}


}



class RdfLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_rdfLiteral;
    }

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	LANGTAG() {
	    return this.getToken(SPARQLParser.LANGTAG, 0);
	};

	REFERENCE() {
	    return this.getToken(SPARQLParser.REFERENCE, 0);
	};

	iri() {
	    return this.getTypedRuleContext(IriContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterRdfLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitRdfLiteral(this);
		}
	}


}



class NumericLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_numericLiteral;
    }

	numericLiteralUnsigned() {
	    return this.getTypedRuleContext(NumericLiteralUnsignedContext,0);
	};

	numericLiteralPositive() {
	    return this.getTypedRuleContext(NumericLiteralPositiveContext,0);
	};

	numericLiteralNegative() {
	    return this.getTypedRuleContext(NumericLiteralNegativeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterNumericLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitNumericLiteral(this);
		}
	}


}



class NumericLiteralUnsignedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_numericLiteralUnsigned;
    }

	INTEGER() {
	    return this.getToken(SPARQLParser.INTEGER, 0);
	};

	DECIMAL() {
	    return this.getToken(SPARQLParser.DECIMAL, 0);
	};

	DOUBLE() {
	    return this.getToken(SPARQLParser.DOUBLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterNumericLiteralUnsigned(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitNumericLiteralUnsigned(this);
		}
	}


}



class NumericLiteralPositiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_numericLiteralPositive;
    }

	INTEGER_POSITIVE() {
	    return this.getToken(SPARQLParser.INTEGER_POSITIVE, 0);
	};

	DECIMAL_POSITIVE() {
	    return this.getToken(SPARQLParser.DECIMAL_POSITIVE, 0);
	};

	DOUBLE_POSITIVE() {
	    return this.getToken(SPARQLParser.DOUBLE_POSITIVE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterNumericLiteralPositive(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitNumericLiteralPositive(this);
		}
	}


}



class NumericLiteralNegativeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_numericLiteralNegative;
    }

	INTEGER_NEGATIVE() {
	    return this.getToken(SPARQLParser.INTEGER_NEGATIVE, 0);
	};

	DECIMAL_NEGATIVE() {
	    return this.getToken(SPARQLParser.DECIMAL_NEGATIVE, 0);
	};

	DOUBLE_NEGATIVE() {
	    return this.getToken(SPARQLParser.DOUBLE_NEGATIVE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterNumericLiteralNegative(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitNumericLiteralNegative(this);
		}
	}


}



class BooleanLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_booleanLiteral;
    }

	TRUE() {
	    return this.getToken(SPARQLParser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(SPARQLParser.FALSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterBooleanLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitBooleanLiteral(this);
		}
	}


}



class StringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_string;
    }

	STRING_LITERAL1() {
	    return this.getToken(SPARQLParser.STRING_LITERAL1, 0);
	};

	STRING_LITERAL2() {
	    return this.getToken(SPARQLParser.STRING_LITERAL2, 0);
	};

	STRING_LITERAL_LONG1() {
	    return this.getToken(SPARQLParser.STRING_LITERAL_LONG1, 0);
	};

	STRING_LITERAL_LONG2() {
	    return this.getToken(SPARQLParser.STRING_LITERAL_LONG2, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterString(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitString(this);
		}
	}


}



class IriContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_iri;
    }

	IRIREF() {
	    return this.getToken(SPARQLParser.IRIREF, 0);
	};

	prefixedName() {
	    return this.getTypedRuleContext(PrefixedNameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterIri(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitIri(this);
		}
	}


}



class PrefixedNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_prefixedName;
    }

	PNAME_LN() {
	    return this.getToken(SPARQLParser.PNAME_LN, 0);
	};

	PNAME_NS() {
	    return this.getToken(SPARQLParser.PNAME_NS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterPrefixedName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitPrefixedName(this);
		}
	}


}



class BlankNodeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_blankNode;
    }

	BLANK_NODE_LABEL() {
	    return this.getToken(SPARQLParser.BLANK_NODE_LABEL, 0);
	};

	anon() {
	    return this.getTypedRuleContext(AnonContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterBlankNode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitBlankNode(this);
		}
	}


}



class AnonContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SPARQLParser.RULE_anon;
    }

	OPEN_SQUARE_BRACKET() {
	    return this.getToken(SPARQLParser.OPEN_SQUARE_BRACKET, 0);
	};

	CLOSE_SQUARE_BRACKET() {
	    return this.getToken(SPARQLParser.CLOSE_SQUARE_BRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.enterAnon(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof SPARQLParserListener ) {
	        listener.exitAnon(this);
		}
	}


}




SPARQLParser.QueryContext = QueryContext; 
SPARQLParser.PrologueContext = PrologueContext; 
SPARQLParser.BaseDeclContext = BaseDeclContext; 
SPARQLParser.PrefixDeclContext = PrefixDeclContext; 
SPARQLParser.SelectQueryContext = SelectQueryContext; 
SPARQLParser.SubSelectContext = SubSelectContext; 
SPARQLParser.SelectClauseContext = SelectClauseContext; 
SPARQLParser.SelectModifierContext = SelectModifierContext; 
SPARQLParser.SelectVariablesContext = SelectVariablesContext; 
SPARQLParser.ConstructQueryContext = ConstructQueryContext; 
SPARQLParser.DescribeQueryContext = DescribeQueryContext; 
SPARQLParser.AskQueryContext = AskQueryContext; 
SPARQLParser.DatasetClauseContext = DatasetClauseContext; 
SPARQLParser.WhereClauseContext = WhereClauseContext; 
SPARQLParser.SolutionModifierContext = SolutionModifierContext; 
SPARQLParser.GroupClauseContext = GroupClauseContext; 
SPARQLParser.GroupConditionContext = GroupConditionContext; 
SPARQLParser.HavingClauseContext = HavingClauseContext; 
SPARQLParser.HavingConditionContext = HavingConditionContext; 
SPARQLParser.OrderClauseContext = OrderClauseContext; 
SPARQLParser.OrderConditionContext = OrderConditionContext; 
SPARQLParser.LimitOffsetClausesContext = LimitOffsetClausesContext; 
SPARQLParser.LimitClauseContext = LimitClauseContext; 
SPARQLParser.OffsetClauseContext = OffsetClauseContext; 
SPARQLParser.ValuesClauseContext = ValuesClauseContext; 
SPARQLParser.TriplesTemplateContext = TriplesTemplateContext; 
SPARQLParser.GroupGraphPatternContext = GroupGraphPatternContext; 
SPARQLParser.GroupGraphPatternSubContext = GroupGraphPatternSubContext; 
SPARQLParser.GroupGraphPatternSubListContext = GroupGraphPatternSubListContext; 
SPARQLParser.TriplesBlockContext = TriplesBlockContext; 
SPARQLParser.GraphPatternNotTriplesContext = GraphPatternNotTriplesContext; 
SPARQLParser.OptionalGraphPatternContext = OptionalGraphPatternContext; 
SPARQLParser.GraphGraphPatternContext = GraphGraphPatternContext; 
SPARQLParser.ServiceGraphPatternContext = ServiceGraphPatternContext; 
SPARQLParser.BindContext = BindContext; 
SPARQLParser.InlineDataContext = InlineDataContext; 
SPARQLParser.DataBlockContext = DataBlockContext; 
SPARQLParser.InlineDataOneVarContext = InlineDataOneVarContext; 
SPARQLParser.InlineDataFullContext = InlineDataFullContext; 
SPARQLParser.DataBlockValuesContext = DataBlockValuesContext; 
SPARQLParser.DataBlockValueContext = DataBlockValueContext; 
SPARQLParser.MinusGraphPatternContext = MinusGraphPatternContext; 
SPARQLParser.GroupOrUnionGraphPatternContext = GroupOrUnionGraphPatternContext; 
SPARQLParser.FilterContext = FilterContext; 
SPARQLParser.ConstraintContext = ConstraintContext; 
SPARQLParser.FunctionCallContext = FunctionCallContext; 
SPARQLParser.ArgListContext = ArgListContext; 
SPARQLParser.ExpressionListContext = ExpressionListContext; 
SPARQLParser.ConstructTemplateContext = ConstructTemplateContext; 
SPARQLParser.ConstructTriplesContext = ConstructTriplesContext; 
SPARQLParser.TriplesSameSubjectContext = TriplesSameSubjectContext; 
SPARQLParser.PropertyListContext = PropertyListContext; 
SPARQLParser.PropertyListNotEmptyContext = PropertyListNotEmptyContext; 
SPARQLParser.VerbContext = VerbContext; 
SPARQLParser.ObjectListContext = ObjectListContext; 
SPARQLParser.ObjectContext = ObjectContext; 
SPARQLParser.TriplesSameSubjectPathContext = TriplesSameSubjectPathContext; 
SPARQLParser.PropertyListPathContext = PropertyListPathContext; 
SPARQLParser.PropertyListPathNotEmptyContext = PropertyListPathNotEmptyContext; 
SPARQLParser.PropertyListPathNotEmptyListContext = PropertyListPathNotEmptyListContext; 
SPARQLParser.VerbPathContext = VerbPathContext; 
SPARQLParser.VerbSimpleContext = VerbSimpleContext; 
SPARQLParser.ObjectListPathContext = ObjectListPathContext; 
SPARQLParser.ObjectPathContext = ObjectPathContext; 
SPARQLParser.PathContext = PathContext; 
SPARQLParser.PathAlternativeContext = PathAlternativeContext; 
SPARQLParser.PathSequenceContext = PathSequenceContext; 
SPARQLParser.PathEltContext = PathEltContext; 
SPARQLParser.PathEltOrInverseContext = PathEltOrInverseContext; 
SPARQLParser.PathModContext = PathModContext; 
SPARQLParser.PathPrimaryContext = PathPrimaryContext; 
SPARQLParser.PathNegatedPropertySetContext = PathNegatedPropertySetContext; 
SPARQLParser.PathOneInPropertySetContext = PathOneInPropertySetContext; 
SPARQLParser.IntegerContext = IntegerContext; 
SPARQLParser.TriplesNodeContext = TriplesNodeContext; 
SPARQLParser.BlankNodePropertyListContext = BlankNodePropertyListContext; 
SPARQLParser.TriplesNodePathContext = TriplesNodePathContext; 
SPARQLParser.BlankNodePropertyListPathContext = BlankNodePropertyListPathContext; 
SPARQLParser.CollectionContext = CollectionContext; 
SPARQLParser.CollectionPathContext = CollectionPathContext; 
SPARQLParser.GraphNodeContext = GraphNodeContext; 
SPARQLParser.GraphNodePathContext = GraphNodePathContext; 
SPARQLParser.VarOrTermContext = VarOrTermContext; 
SPARQLParser.VarOrIRIContext = VarOrIRIContext; 
SPARQLParser.VarContext = VarContext; 
SPARQLParser.GraphTermContext = GraphTermContext; 
SPARQLParser.NilContext = NilContext; 
SPARQLParser.ExpressionContext = ExpressionContext; 
SPARQLParser.ConditionalOrExpressionContext = ConditionalOrExpressionContext; 
SPARQLParser.ConditionalAndExpressionContext = ConditionalAndExpressionContext; 
SPARQLParser.RelationalExpressionContext = RelationalExpressionContext; 
SPARQLParser.AdditiveExpressionContext = AdditiveExpressionContext; 
SPARQLParser.RhsAdditiveExpressionContext = RhsAdditiveExpressionContext; 
SPARQLParser.RhsAdditiveExpressionSubContext = RhsAdditiveExpressionSubContext; 
SPARQLParser.MultiplicativeExpressionContext = MultiplicativeExpressionContext; 
SPARQLParser.UnaryExpressionContext = UnaryExpressionContext; 
SPARQLParser.PrimaryExpressionContext = PrimaryExpressionContext; 
SPARQLParser.BuiltInCallContext = BuiltInCallContext; 
SPARQLParser.RegexExpressionContext = RegexExpressionContext; 
SPARQLParser.SubStringExpressionContext = SubStringExpressionContext; 
SPARQLParser.StrReplaceExpressionContext = StrReplaceExpressionContext; 
SPARQLParser.ExistsFunctionContext = ExistsFunctionContext; 
SPARQLParser.NotExistsFunctionContext = NotExistsFunctionContext; 
SPARQLParser.AggregateContext = AggregateContext; 
SPARQLParser.IriOrFunctionContext = IriOrFunctionContext; 
SPARQLParser.RdfLiteralContext = RdfLiteralContext; 
SPARQLParser.NumericLiteralContext = NumericLiteralContext; 
SPARQLParser.NumericLiteralUnsignedContext = NumericLiteralUnsignedContext; 
SPARQLParser.NumericLiteralPositiveContext = NumericLiteralPositiveContext; 
SPARQLParser.NumericLiteralNegativeContext = NumericLiteralNegativeContext; 
SPARQLParser.BooleanLiteralContext = BooleanLiteralContext; 
SPARQLParser.StringContext = StringContext; 
SPARQLParser.IriContext = IriContext; 
SPARQLParser.PrefixedNameContext = PrefixedNameContext; 
SPARQLParser.BlankNodeContext = BlankNodeContext; 
SPARQLParser.AnonContext = AnonContext; 
