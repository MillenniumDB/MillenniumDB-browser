// Generated from src/grammar/sparql/SparqlQueryParser.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';
const serializedATN = [4,1,155,1422,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,1,0,1,0,1,0,1,0,1,0,3,0,256,8,0,1,0,1,0,1,0,1,0,3,0,262,8,0,
1,1,1,1,1,1,1,1,1,2,1,2,5,2,270,8,2,10,2,12,2,273,9,2,1,3,1,3,1,3,1,4,1,
4,1,4,1,4,1,5,1,5,5,5,284,8,5,10,5,12,5,287,9,5,1,5,1,5,1,5,1,6,1,6,1,6,
1,6,1,6,1,7,1,7,3,7,299,8,7,1,7,4,7,302,8,7,11,7,12,7,303,1,7,3,7,307,8,
7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,318,8,9,1,10,1,10,1,10,5,10,323,
8,10,10,10,12,10,326,9,10,1,10,1,10,1,10,1,10,5,10,332,8,10,10,10,12,10,
335,9,10,1,10,1,10,1,10,3,10,340,8,10,1,10,1,10,3,10,344,8,10,1,11,1,11,
4,11,348,8,11,11,11,12,11,349,1,11,3,11,353,8,11,1,11,5,11,356,8,11,10,11,
12,11,359,9,11,1,11,3,11,362,8,11,1,11,1,11,1,12,1,12,5,12,368,8,12,10,12,
12,12,371,9,12,1,12,1,12,1,12,1,13,1,13,3,13,378,8,13,1,13,1,13,1,14,3,14,
383,8,14,1,14,1,14,1,15,3,15,388,8,15,1,15,3,15,391,8,15,1,15,3,15,394,8,
15,1,15,3,15,397,8,15,1,16,1,16,1,16,4,16,402,8,16,11,16,12,16,403,1,17,
1,17,1,17,1,17,1,17,1,17,3,17,412,8,17,1,17,1,17,1,17,3,17,417,8,17,1,18,
1,18,4,18,421,8,18,11,18,12,18,422,1,19,1,19,1,20,1,20,1,20,4,20,430,8,20,
11,20,12,20,431,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,441,8,21,1,22,1,
22,3,22,445,8,22,1,22,1,22,3,22,449,8,22,3,22,451,8,22,1,23,1,23,1,23,1,
24,1,24,1,24,1,25,1,25,3,25,461,8,25,1,26,1,26,1,26,3,26,466,8,26,5,26,468,
8,26,10,26,12,26,471,9,26,1,27,1,27,1,27,3,27,476,8,27,1,27,1,27,1,28,3,
28,481,8,28,1,28,5,28,484,8,28,10,28,12,28,487,9,28,1,29,1,29,3,29,491,8,
29,1,29,3,29,494,8,29,1,30,1,30,1,30,3,30,499,8,30,5,30,501,8,30,10,30,12,
30,504,9,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,515,8,31,1,
32,1,32,1,32,1,33,1,33,1,33,1,33,1,34,1,34,3,34,526,8,34,1,34,1,34,1,34,
1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,3,37,543,8,37,
1,38,1,38,1,38,5,38,548,8,38,10,38,12,38,551,9,38,1,38,1,38,1,39,1,39,5,
39,557,8,39,10,39,12,39,560,9,39,1,39,1,39,1,39,5,39,565,8,39,10,39,12,39,
568,9,39,1,39,1,39,1,40,1,40,5,40,574,8,40,10,40,12,40,577,9,40,1,40,1,40,
1,41,1,41,1,41,1,41,1,41,3,41,586,8,41,1,42,1,42,1,42,1,43,1,43,1,43,5,43,
594,8,43,10,43,12,43,597,9,43,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,
45,3,45,608,8,45,1,46,1,46,1,46,1,47,1,47,3,47,615,8,47,1,47,1,47,3,47,619,
8,47,1,47,1,47,1,48,1,48,1,48,5,48,626,8,48,10,48,12,48,629,9,48,1,49,1,
49,3,49,633,8,49,1,49,1,49,1,50,1,50,1,50,3,50,640,8,50,5,50,642,8,50,10,
50,12,50,645,9,50,1,51,1,51,1,51,1,51,1,51,1,51,3,51,653,8,51,1,52,3,52,
656,8,52,1,53,1,53,1,53,1,53,1,53,1,53,3,53,664,8,53,5,53,666,8,53,10,53,
12,53,669,9,53,1,54,1,54,3,54,673,8,54,1,55,1,55,1,55,5,55,678,8,55,10,55,
12,55,681,9,55,1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,57,3,57,691,8,57,1,58,
3,58,694,8,58,1,59,1,59,3,59,698,8,59,1,59,1,59,1,59,3,59,703,8,59,5,59,
705,8,59,10,59,12,59,708,9,59,1,60,1,60,3,60,712,8,60,1,60,1,60,1,61,1,61,
1,61,3,61,719,8,61,1,61,3,61,722,8,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,
730,8,61,1,62,1,62,1,63,1,63,1,63,5,63,737,8,63,10,63,12,63,740,9,63,1,64,
1,64,1,65,1,65,1,66,1,66,1,66,5,66,749,8,66,10,66,12,66,752,9,66,1,67,1,
67,1,67,5,67,757,8,67,10,67,12,67,760,9,67,1,68,1,68,3,68,764,8,68,1,69,
3,69,767,8,69,1,69,1,69,1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,778,8,70,
1,71,1,71,1,71,1,71,3,71,784,8,71,1,72,1,72,1,73,1,73,1,73,1,73,1,74,1,74,
1,74,1,75,1,75,1,75,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,806,8,76,
1,77,1,77,1,77,1,77,1,77,5,77,813,8,77,10,77,12,77,816,9,77,3,77,818,8,77,
1,77,3,77,821,8,77,1,78,3,78,824,8,78,1,78,1,78,3,78,828,8,78,1,79,1,79,
1,80,1,80,3,80,834,8,80,1,81,1,81,1,81,1,81,1,82,1,82,3,82,842,8,82,1,83,
1,83,1,83,1,83,1,84,1,84,4,84,850,8,84,11,84,12,84,851,1,84,1,84,1,85,1,
85,4,85,858,8,85,11,85,12,85,859,1,85,1,85,1,86,1,86,3,86,866,8,86,1,87,
1,87,3,87,870,8,87,1,88,1,88,3,88,874,8,88,1,89,1,89,3,89,878,8,89,1,90,
1,90,1,91,1,91,1,91,1,91,1,91,1,91,3,91,888,8,91,1,92,1,92,1,92,1,93,1,93,
1,94,1,94,1,94,5,94,898,8,94,10,94,12,94,901,9,94,1,95,1,95,1,95,5,95,906,
8,95,10,95,12,95,909,9,95,1,96,1,96,1,96,3,96,914,8,96,1,96,1,96,3,96,918,
8,96,1,96,1,96,1,96,3,96,923,8,96,1,96,1,96,3,96,927,8,96,1,97,1,97,5,97,
931,8,97,10,97,12,97,934,9,97,1,98,1,98,1,98,5,98,939,8,98,10,98,12,98,942,
9,98,1,99,1,99,1,99,1,99,3,99,948,8,99,1,100,1,100,1,100,5,100,953,8,100,
10,100,12,100,956,9,100,1,101,3,101,959,8,101,1,101,1,101,1,102,1,102,1,
102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,3,102,973,8,102,1,103,1,103,
1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
1,103,1,103,1,103,3,103,1016,8,103,1,103,1,103,1,103,1,103,1,103,1,103,1,
103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,
103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,3,103,1045,8,103,1,103,
1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,
1,103,1,103,3,103,1182,8,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,
103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,
103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,
103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,
103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,103,1,
103,1,103,1,103,1,103,3,103,1243,8,103,1,104,1,104,1,104,3,104,1248,8,104,
1,104,1,104,1,104,1,104,1,105,1,105,1,105,5,105,1257,8,105,10,105,12,105,
1260,9,105,1,106,1,106,1,106,1,106,1,106,5,106,1267,8,106,10,106,12,106,
1270,9,106,1,106,1,106,3,106,1274,8,106,1,107,1,107,1,107,1,107,1,107,1,
107,1,107,3,107,1283,8,107,1,107,1,107,1,108,1,108,1,108,1,108,1,108,1,108,
1,108,3,108,1294,8,108,1,108,1,108,1,109,1,109,1,109,1,109,1,109,1,109,1,
109,1,109,1,109,3,109,1307,8,109,1,109,1,109,1,110,1,110,1,110,1,111,1,111,
1,111,1,111,1,112,1,112,1,112,3,112,1321,8,112,1,112,1,112,3,112,1325,8,
112,1,112,1,112,1,112,1,112,3,112,1331,8,112,1,112,1,112,1,112,1,112,1,112,
1,112,3,112,1339,8,112,1,112,1,112,1,112,1,112,1,112,1,112,3,112,1347,8,
112,1,112,1,112,1,112,1,112,1,112,1,112,3,112,1355,8,112,1,112,1,112,1,112,
1,112,1,112,1,112,3,112,1363,8,112,1,112,1,112,1,112,1,112,1,112,1,112,3,
112,1371,8,112,1,112,1,112,1,112,1,112,1,112,3,112,1378,8,112,1,112,1,112,
3,112,1382,8,112,1,113,1,113,3,113,1386,8,113,1,114,1,114,1,114,1,114,3,
114,1392,8,114,1,115,1,115,1,115,3,115,1397,8,115,1,116,1,116,1,117,1,117,
1,118,1,118,1,119,1,119,1,120,1,120,1,121,1,121,3,121,1411,8,121,1,122,1,
122,1,123,1,123,3,123,1417,8,123,1,124,1,124,1,124,1,124,0,0,125,0,2,4,6,
8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,
106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,
142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,
178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,
214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,
0,15,1,0,5,6,1,0,15,16,2,0,40,40,100,100,1,0,102,104,1,0,112,113,2,0,130,
132,151,153,2,0,146,146,150,150,1,0,144,145,2,0,144,145,149,149,1,0,115,
117,1,0,118,120,1,0,121,123,1,0,37,38,1,0,124,127,1,0,109,110,1522,0,261,
1,0,0,0,2,263,1,0,0,0,4,271,1,0,0,0,6,274,1,0,0,0,8,277,1,0,0,0,10,281,1,
0,0,0,12,291,1,0,0,0,14,296,1,0,0,0,16,308,1,0,0,0,18,317,1,0,0,0,20,319,
1,0,0,0,22,345,1,0,0,0,24,365,1,0,0,0,26,375,1,0,0,0,28,382,1,0,0,0,30,387,
1,0,0,0,32,398,1,0,0,0,34,416,1,0,0,0,36,418,1,0,0,0,38,424,1,0,0,0,40,426,
1,0,0,0,42,440,1,0,0,0,44,450,1,0,0,0,46,452,1,0,0,0,48,455,1,0,0,0,50,460,
1,0,0,0,52,462,1,0,0,0,54,472,1,0,0,0,56,480,1,0,0,0,58,488,1,0,0,0,60,495,
1,0,0,0,62,514,1,0,0,0,64,516,1,0,0,0,66,519,1,0,0,0,68,523,1,0,0,0,70,530,
1,0,0,0,72,537,1,0,0,0,74,542,1,0,0,0,76,544,1,0,0,0,78,554,1,0,0,0,80,571,
1,0,0,0,82,585,1,0,0,0,84,587,1,0,0,0,86,590,1,0,0,0,88,598,1,0,0,0,90,607,
1,0,0,0,92,609,1,0,0,0,94,612,1,0,0,0,96,622,1,0,0,0,98,630,1,0,0,0,100,
636,1,0,0,0,102,652,1,0,0,0,104,655,1,0,0,0,106,657,1,0,0,0,108,672,1,0,
0,0,110,674,1,0,0,0,112,682,1,0,0,0,114,690,1,0,0,0,116,693,1,0,0,0,118,
697,1,0,0,0,120,711,1,0,0,0,122,729,1,0,0,0,124,731,1,0,0,0,126,733,1,0,
0,0,128,741,1,0,0,0,130,743,1,0,0,0,132,745,1,0,0,0,134,753,1,0,0,0,136,
761,1,0,0,0,138,766,1,0,0,0,140,777,1,0,0,0,142,783,1,0,0,0,144,785,1,0,
0,0,146,787,1,0,0,0,148,791,1,0,0,0,150,794,1,0,0,0,152,805,1,0,0,0,154,
820,1,0,0,0,156,823,1,0,0,0,158,829,1,0,0,0,160,833,1,0,0,0,162,835,1,0,
0,0,164,841,1,0,0,0,166,843,1,0,0,0,168,847,1,0,0,0,170,855,1,0,0,0,172,
865,1,0,0,0,174,869,1,0,0,0,176,873,1,0,0,0,178,877,1,0,0,0,180,879,1,0,
0,0,182,887,1,0,0,0,184,889,1,0,0,0,186,892,1,0,0,0,188,894,1,0,0,0,190,
902,1,0,0,0,192,926,1,0,0,0,194,928,1,0,0,0,196,935,1,0,0,0,198,947,1,0,
0,0,200,949,1,0,0,0,202,958,1,0,0,0,204,972,1,0,0,0,206,1242,1,0,0,0,208,
1244,1,0,0,0,210,1253,1,0,0,0,212,1273,1,0,0,0,214,1275,1,0,0,0,216,1286,
1,0,0,0,218,1297,1,0,0,0,220,1310,1,0,0,0,222,1313,1,0,0,0,224,1381,1,0,
0,0,226,1383,1,0,0,0,228,1387,1,0,0,0,230,1396,1,0,0,0,232,1398,1,0,0,0,
234,1400,1,0,0,0,236,1402,1,0,0,0,238,1404,1,0,0,0,240,1406,1,0,0,0,242,
1410,1,0,0,0,244,1412,1,0,0,0,246,1416,1,0,0,0,248,1418,1,0,0,0,250,255,
3,4,2,0,251,256,3,10,5,0,252,256,3,20,10,0,253,256,3,22,11,0,254,256,3,24,
12,0,255,251,1,0,0,0,255,252,1,0,0,0,255,253,1,0,0,0,255,254,1,0,0,0,256,
257,1,0,0,0,257,258,3,50,25,0,258,259,5,0,0,1,259,262,1,0,0,0,260,262,3,
2,1,0,261,250,1,0,0,0,261,260,1,0,0,0,262,1,1,0,0,0,263,264,5,105,0,0,264,
265,5,107,0,0,265,266,5,106,0,0,266,3,1,0,0,0,267,270,3,6,3,0,268,270,3,
8,4,0,269,267,1,0,0,0,269,268,1,0,0,0,270,273,1,0,0,0,271,269,1,0,0,0,271,
272,1,0,0,0,272,5,1,0,0,0,273,271,1,0,0,0,274,275,5,2,0,0,275,276,5,108,
0,0,276,7,1,0,0,0,277,278,5,3,0,0,278,279,5,109,0,0,279,280,5,108,0,0,280,
9,1,0,0,0,281,285,3,14,7,0,282,284,3,26,13,0,283,282,1,0,0,0,284,287,1,0,
0,0,285,283,1,0,0,0,285,286,1,0,0,0,286,288,1,0,0,0,287,285,1,0,0,0,288,
289,3,28,14,0,289,290,3,30,15,0,290,11,1,0,0,0,291,292,3,14,7,0,292,293,
3,28,14,0,293,294,3,30,15,0,294,295,3,50,25,0,295,13,1,0,0,0,296,298,5,4,
0,0,297,299,3,16,8,0,298,297,1,0,0,0,298,299,1,0,0,0,299,306,1,0,0,0,300,
302,3,18,9,0,301,300,1,0,0,0,302,303,1,0,0,0,303,301,1,0,0,0,303,304,1,0,
0,0,304,307,1,0,0,0,305,307,5,146,0,0,306,301,1,0,0,0,306,305,1,0,0,0,307,
15,1,0,0,0,308,309,7,0,0,0,309,17,1,0,0,0,310,318,3,180,90,0,311,312,5,136,
0,0,312,313,3,186,93,0,313,314,5,41,0,0,314,315,3,180,90,0,315,316,5,137,
0,0,316,318,1,0,0,0,317,310,1,0,0,0,317,311,1,0,0,0,318,19,1,0,0,0,319,343,
5,7,0,0,320,324,3,98,49,0,321,323,3,26,13,0,322,321,1,0,0,0,323,326,1,0,
0,0,324,322,1,0,0,0,324,325,1,0,0,0,325,327,1,0,0,0,326,324,1,0,0,0,327,
328,3,28,14,0,328,329,3,30,15,0,329,344,1,0,0,0,330,332,3,26,13,0,331,330,
1,0,0,0,332,335,1,0,0,0,333,331,1,0,0,0,333,334,1,0,0,0,334,336,1,0,0,0,
335,333,1,0,0,0,336,337,5,12,0,0,337,339,5,138,0,0,338,340,3,52,26,0,339,
338,1,0,0,0,339,340,1,0,0,0,340,341,1,0,0,0,341,342,5,139,0,0,342,344,3,
30,15,0,343,320,1,0,0,0,343,333,1,0,0,0,344,21,1,0,0,0,345,352,5,8,0,0,346,
348,3,178,89,0,347,346,1,0,0,0,348,349,1,0,0,0,349,347,1,0,0,0,349,350,1,
0,0,0,350,353,1,0,0,0,351,353,5,146,0,0,352,347,1,0,0,0,352,351,1,0,0,0,
353,357,1,0,0,0,354,356,3,26,13,0,355,354,1,0,0,0,356,359,1,0,0,0,357,355,
1,0,0,0,357,358,1,0,0,0,358,361,1,0,0,0,359,357,1,0,0,0,360,362,3,28,14,
0,361,360,1,0,0,0,361,362,1,0,0,0,362,363,1,0,0,0,363,364,3,30,15,0,364,
23,1,0,0,0,365,369,5,9,0,0,366,368,3,26,13,0,367,366,1,0,0,0,368,371,1,0,
0,0,369,367,1,0,0,0,369,370,1,0,0,0,370,372,1,0,0,0,371,369,1,0,0,0,372,
373,3,28,14,0,373,374,3,30,15,0,374,25,1,0,0,0,375,377,5,10,0,0,376,378,
5,11,0,0,377,376,1,0,0,0,377,378,1,0,0,0,378,379,1,0,0,0,379,380,3,242,121,
0,380,27,1,0,0,0,381,383,5,12,0,0,382,381,1,0,0,0,382,383,1,0,0,0,383,384,
1,0,0,0,384,385,3,54,27,0,385,29,1,0,0,0,386,388,3,32,16,0,387,386,1,0,0,
0,387,388,1,0,0,0,388,390,1,0,0,0,389,391,3,36,18,0,390,389,1,0,0,0,390,
391,1,0,0,0,391,393,1,0,0,0,392,394,3,40,20,0,393,392,1,0,0,0,393,394,1,
0,0,0,394,396,1,0,0,0,395,397,3,44,22,0,396,395,1,0,0,0,396,397,1,0,0,0,
397,31,1,0,0,0,398,399,5,42,0,0,399,401,5,14,0,0,400,402,3,34,17,0,401,400,
1,0,0,0,402,403,1,0,0,0,403,401,1,0,0,0,403,404,1,0,0,0,404,33,1,0,0,0,405,
417,3,206,103,0,406,417,3,92,46,0,407,408,5,136,0,0,408,411,3,186,93,0,409,
410,5,41,0,0,410,412,3,180,90,0,411,409,1,0,0,0,411,412,1,0,0,0,412,413,
1,0,0,0,413,414,5,137,0,0,414,417,1,0,0,0,415,417,3,180,90,0,416,405,1,0,
0,0,416,406,1,0,0,0,416,407,1,0,0,0,416,415,1,0,0,0,417,35,1,0,0,0,418,420,
5,43,0,0,419,421,3,38,19,0,420,419,1,0,0,0,421,422,1,0,0,0,422,420,1,0,0,
0,422,423,1,0,0,0,423,37,1,0,0,0,424,425,3,90,45,0,425,39,1,0,0,0,426,427,
5,13,0,0,427,429,5,14,0,0,428,430,3,42,21,0,429,428,1,0,0,0,430,431,1,0,
0,0,431,429,1,0,0,0,431,432,1,0,0,0,432,41,1,0,0,0,433,434,7,1,0,0,434,435,
5,136,0,0,435,436,3,186,93,0,436,437,5,137,0,0,437,441,1,0,0,0,438,441,3,
90,45,0,439,441,3,180,90,0,440,433,1,0,0,0,440,438,1,0,0,0,440,439,1,0,0,
0,441,43,1,0,0,0,442,444,3,46,23,0,443,445,3,48,24,0,444,443,1,0,0,0,444,
445,1,0,0,0,445,451,1,0,0,0,446,448,3,48,24,0,447,449,3,46,23,0,448,447,
1,0,0,0,448,449,1,0,0,0,449,451,1,0,0,0,450,442,1,0,0,0,450,446,1,0,0,0,
451,45,1,0,0,0,452,453,5,17,0,0,453,454,5,115,0,0,454,47,1,0,0,0,455,456,
5,18,0,0,456,457,5,115,0,0,457,49,1,0,0,0,458,459,5,19,0,0,459,461,3,74,
37,0,460,458,1,0,0,0,460,461,1,0,0,0,461,51,1,0,0,0,462,469,3,102,51,0,463,
465,5,143,0,0,464,466,3,102,51,0,465,464,1,0,0,0,465,466,1,0,0,0,466,468,
1,0,0,0,467,463,1,0,0,0,468,471,1,0,0,0,469,467,1,0,0,0,469,470,1,0,0,0,
470,53,1,0,0,0,471,469,1,0,0,0,472,475,5,138,0,0,473,476,3,12,6,0,474,476,
3,56,28,0,475,473,1,0,0,0,475,474,1,0,0,0,476,477,1,0,0,0,477,478,5,139,
0,0,478,55,1,0,0,0,479,481,3,60,30,0,480,479,1,0,0,0,480,481,1,0,0,0,481,
485,1,0,0,0,482,484,3,58,29,0,483,482,1,0,0,0,484,487,1,0,0,0,485,483,1,
0,0,0,485,486,1,0,0,0,486,57,1,0,0,0,487,485,1,0,0,0,488,490,3,62,31,0,489,
491,5,143,0,0,490,489,1,0,0,0,490,491,1,0,0,0,491,493,1,0,0,0,492,494,3,
60,30,0,493,492,1,0,0,0,493,494,1,0,0,0,494,59,1,0,0,0,495,502,3,114,57,
0,496,498,5,143,0,0,497,499,3,114,57,0,498,497,1,0,0,0,498,499,1,0,0,0,499,
501,1,0,0,0,500,496,1,0,0,0,501,504,1,0,0,0,502,500,1,0,0,0,502,503,1,0,
0,0,503,61,1,0,0,0,504,502,1,0,0,0,505,515,3,86,43,0,506,515,3,64,32,0,507,
515,3,84,42,0,508,515,3,66,33,0,509,515,3,68,34,0,510,515,3,88,44,0,511,
515,3,70,35,0,512,515,3,72,36,0,513,515,3,208,104,0,514,505,1,0,0,0,514,
506,1,0,0,0,514,507,1,0,0,0,514,508,1,0,0,0,514,509,1,0,0,0,514,510,1,0,
0,0,514,511,1,0,0,0,514,512,1,0,0,0,514,513,1,0,0,0,515,63,1,0,0,0,516,517,
5,20,0,0,517,518,3,54,27,0,518,65,1,0,0,0,519,520,5,21,0,0,520,521,3,178,
89,0,521,522,3,54,27,0,522,67,1,0,0,0,523,525,5,46,0,0,524,526,5,39,0,0,
525,524,1,0,0,0,525,526,1,0,0,0,526,527,1,0,0,0,527,528,3,178,89,0,528,529,
3,54,27,0,529,69,1,0,0,0,530,531,5,47,0,0,531,532,5,136,0,0,532,533,3,186,
93,0,533,534,5,41,0,0,534,535,3,180,90,0,535,536,5,137,0,0,536,71,1,0,0,
0,537,538,5,19,0,0,538,539,3,74,37,0,539,73,1,0,0,0,540,543,3,76,38,0,541,
543,3,78,39,0,542,540,1,0,0,0,542,541,1,0,0,0,543,75,1,0,0,0,544,545,3,180,
90,0,545,549,5,138,0,0,546,548,3,82,41,0,547,546,1,0,0,0,548,551,1,0,0,0,
549,547,1,0,0,0,549,550,1,0,0,0,550,552,1,0,0,0,551,549,1,0,0,0,552,553,
5,139,0,0,553,77,1,0,0,0,554,558,5,136,0,0,555,557,3,180,90,0,556,555,1,
0,0,0,557,560,1,0,0,0,558,556,1,0,0,0,558,559,1,0,0,0,559,561,1,0,0,0,560,
558,1,0,0,0,561,562,5,137,0,0,562,566,5,138,0,0,563,565,3,80,40,0,564,563,
1,0,0,0,565,568,1,0,0,0,566,564,1,0,0,0,566,567,1,0,0,0,567,569,1,0,0,0,
568,566,1,0,0,0,569,570,5,139,0,0,570,79,1,0,0,0,571,575,5,136,0,0,572,574,
3,82,41,0,573,572,1,0,0,0,574,577,1,0,0,0,575,573,1,0,0,0,575,576,1,0,0,
0,576,578,1,0,0,0,577,575,1,0,0,0,578,579,5,137,0,0,579,81,1,0,0,0,580,586,
3,242,121,0,581,586,3,228,114,0,582,586,3,230,115,0,583,586,3,238,119,0,
584,586,5,44,0,0,585,580,1,0,0,0,585,581,1,0,0,0,585,582,1,0,0,0,585,583,
1,0,0,0,585,584,1,0,0,0,586,83,1,0,0,0,587,588,5,48,0,0,588,589,3,54,27,
0,589,85,1,0,0,0,590,595,3,54,27,0,591,592,5,22,0,0,592,594,3,54,27,0,593,
591,1,0,0,0,594,597,1,0,0,0,595,593,1,0,0,0,595,596,1,0,0,0,596,87,1,0,0,
0,597,595,1,0,0,0,598,599,5,23,0,0,599,600,3,90,45,0,600,89,1,0,0,0,601,
602,5,136,0,0,602,603,3,186,93,0,603,604,5,137,0,0,604,608,1,0,0,0,605,608,
3,206,103,0,606,608,3,92,46,0,607,601,1,0,0,0,607,605,1,0,0,0,607,606,1,
0,0,0,608,91,1,0,0,0,609,610,3,242,121,0,610,611,3,94,47,0,611,93,1,0,0,
0,612,618,5,136,0,0,613,615,5,5,0,0,614,613,1,0,0,0,614,615,1,0,0,0,615,
616,1,0,0,0,616,619,3,96,48,0,617,619,1,0,0,0,618,614,1,0,0,0,618,617,1,
0,0,0,619,620,1,0,0,0,620,621,5,137,0,0,621,95,1,0,0,0,622,627,3,186,93,
0,623,624,5,148,0,0,624,626,3,186,93,0,625,623,1,0,0,0,626,629,1,0,0,0,627,
625,1,0,0,0,627,628,1,0,0,0,628,97,1,0,0,0,629,627,1,0,0,0,630,632,5,138,
0,0,631,633,3,100,50,0,632,631,1,0,0,0,632,633,1,0,0,0,633,634,1,0,0,0,634,
635,5,139,0,0,635,99,1,0,0,0,636,643,3,102,51,0,637,639,5,143,0,0,638,640,
3,100,50,0,639,638,1,0,0,0,639,640,1,0,0,0,640,642,1,0,0,0,641,637,1,0,0,
0,642,645,1,0,0,0,643,641,1,0,0,0,643,644,1,0,0,0,644,101,1,0,0,0,645,643,
1,0,0,0,646,647,3,176,88,0,647,648,3,106,53,0,648,653,1,0,0,0,649,650,3,
160,80,0,650,651,3,104,52,0,651,653,1,0,0,0,652,646,1,0,0,0,652,649,1,0,
0,0,653,103,1,0,0,0,654,656,3,106,53,0,655,654,1,0,0,0,655,656,1,0,0,0,656,
105,1,0,0,0,657,658,3,108,54,0,658,667,3,110,55,0,659,663,5,142,0,0,660,
661,3,108,54,0,661,662,3,110,55,0,662,664,1,0,0,0,663,660,1,0,0,0,663,664,
1,0,0,0,664,666,1,0,0,0,665,659,1,0,0,0,666,669,1,0,0,0,667,665,1,0,0,0,
667,668,1,0,0,0,668,107,1,0,0,0,669,667,1,0,0,0,670,673,3,178,89,0,671,673,
5,24,0,0,672,670,1,0,0,0,672,671,1,0,0,0,673,109,1,0,0,0,674,679,3,112,56,
0,675,676,5,148,0,0,676,678,3,112,56,0,677,675,1,0,0,0,678,681,1,0,0,0,679,
677,1,0,0,0,679,680,1,0,0,0,680,111,1,0,0,0,681,679,1,0,0,0,682,683,3,172,
86,0,683,113,1,0,0,0,684,685,3,176,88,0,685,686,3,118,59,0,686,691,1,0,0,
0,687,688,3,164,82,0,688,689,3,116,58,0,689,691,1,0,0,0,690,684,1,0,0,0,
690,687,1,0,0,0,691,115,1,0,0,0,692,694,3,118,59,0,693,692,1,0,0,0,693,694,
1,0,0,0,694,117,1,0,0,0,695,698,3,122,61,0,696,698,3,124,62,0,697,695,1,
0,0,0,697,696,1,0,0,0,698,699,1,0,0,0,699,706,3,126,63,0,700,702,5,142,0,
0,701,703,3,120,60,0,702,701,1,0,0,0,702,703,1,0,0,0,703,705,1,0,0,0,704,
700,1,0,0,0,705,708,1,0,0,0,706,704,1,0,0,0,706,707,1,0,0,0,707,119,1,0,
0,0,708,706,1,0,0,0,709,712,3,122,61,0,710,712,3,124,62,0,711,709,1,0,0,
0,711,710,1,0,0,0,712,713,1,0,0,0,713,714,3,110,55,0,714,121,1,0,0,0,715,
730,3,130,65,0,716,718,7,2,0,0,717,719,5,101,0,0,718,717,1,0,0,0,718,719,
1,0,0,0,719,721,1,0,0,0,720,722,7,3,0,0,721,720,1,0,0,0,721,722,1,0,0,0,
722,723,1,0,0,0,723,724,5,136,0,0,724,725,3,130,65,0,725,726,5,41,0,0,726,
727,3,180,90,0,727,728,5,137,0,0,728,730,1,0,0,0,729,715,1,0,0,0,729,716,
1,0,0,0,730,123,1,0,0,0,731,732,3,180,90,0,732,125,1,0,0,0,733,738,3,128,
64,0,734,735,5,148,0,0,735,737,3,128,64,0,736,734,1,0,0,0,737,740,1,0,0,
0,738,736,1,0,0,0,738,739,1,0,0,0,739,127,1,0,0,0,740,738,1,0,0,0,741,742,
3,174,87,0,742,129,1,0,0,0,743,744,3,132,66,0,744,131,1,0,0,0,745,750,3,
134,67,0,746,747,5,154,0,0,747,749,3,134,67,0,748,746,1,0,0,0,749,752,1,
0,0,0,750,748,1,0,0,0,750,751,1,0,0,0,751,133,1,0,0,0,752,750,1,0,0,0,753,
758,3,138,69,0,754,755,5,150,0,0,755,757,3,138,69,0,756,754,1,0,0,0,757,
760,1,0,0,0,758,756,1,0,0,0,758,759,1,0,0,0,759,135,1,0,0,0,760,758,1,0,
0,0,761,763,3,152,76,0,762,764,3,140,70,0,763,762,1,0,0,0,763,764,1,0,0,
0,764,137,1,0,0,0,765,767,5,135,0,0,766,765,1,0,0,0,766,767,1,0,0,0,767,
768,1,0,0,0,768,769,3,136,68,0,769,139,1,0,0,0,770,778,5,147,0,0,771,778,
5,146,0,0,772,778,5,144,0,0,773,774,5,138,0,0,774,775,3,142,71,0,775,776,
5,139,0,0,776,778,1,0,0,0,777,770,1,0,0,0,777,771,1,0,0,0,777,772,1,0,0,
0,777,773,1,0,0,0,778,141,1,0,0,0,779,784,3,144,72,0,780,784,3,146,73,0,
781,784,3,148,74,0,782,784,3,150,75,0,783,779,1,0,0,0,783,780,1,0,0,0,783,
781,1,0,0,0,783,782,1,0,0,0,784,143,1,0,0,0,785,786,5,115,0,0,786,145,1,
0,0,0,787,788,5,115,0,0,788,789,5,148,0,0,789,790,5,115,0,0,790,147,1,0,
0,0,791,792,5,115,0,0,792,793,5,148,0,0,793,149,1,0,0,0,794,795,5,148,0,
0,795,796,5,115,0,0,796,151,1,0,0,0,797,806,3,242,121,0,798,806,5,24,0,0,
799,800,5,149,0,0,800,806,3,154,77,0,801,802,5,136,0,0,802,803,3,130,65,
0,803,804,5,137,0,0,804,806,1,0,0,0,805,797,1,0,0,0,805,798,1,0,0,0,805,
799,1,0,0,0,805,801,1,0,0,0,806,153,1,0,0,0,807,821,3,156,78,0,808,817,5,
136,0,0,809,814,3,156,78,0,810,811,5,154,0,0,811,813,3,156,78,0,812,810,
1,0,0,0,813,816,1,0,0,0,814,812,1,0,0,0,814,815,1,0,0,0,815,818,1,0,0,0,
816,814,1,0,0,0,817,809,1,0,0,0,817,818,1,0,0,0,818,819,1,0,0,0,819,821,
5,137,0,0,820,807,1,0,0,0,820,808,1,0,0,0,821,155,1,0,0,0,822,824,5,135,
0,0,823,822,1,0,0,0,823,824,1,0,0,0,824,827,1,0,0,0,825,828,3,242,121,0,
826,828,5,24,0,0,827,825,1,0,0,0,827,826,1,0,0,0,828,157,1,0,0,0,829,830,
5,115,0,0,830,159,1,0,0,0,831,834,3,168,84,0,832,834,3,162,81,0,833,831,
1,0,0,0,833,832,1,0,0,0,834,161,1,0,0,0,835,836,5,140,0,0,836,837,3,106,
53,0,837,838,5,141,0,0,838,163,1,0,0,0,839,842,3,170,85,0,840,842,3,166,
83,0,841,839,1,0,0,0,841,840,1,0,0,0,842,165,1,0,0,0,843,844,5,140,0,0,844,
845,3,118,59,0,845,846,5,141,0,0,846,167,1,0,0,0,847,849,5,136,0,0,848,850,
3,172,86,0,849,848,1,0,0,0,850,851,1,0,0,0,851,849,1,0,0,0,851,852,1,0,0,
0,852,853,1,0,0,0,853,854,5,137,0,0,854,169,1,0,0,0,855,857,5,136,0,0,856,
858,3,174,87,0,857,856,1,0,0,0,858,859,1,0,0,0,859,857,1,0,0,0,859,860,1,
0,0,0,860,861,1,0,0,0,861,862,5,137,0,0,862,171,1,0,0,0,863,866,3,176,88,
0,864,866,3,160,80,0,865,863,1,0,0,0,865,864,1,0,0,0,866,173,1,0,0,0,867,
870,3,176,88,0,868,870,3,164,82,0,869,867,1,0,0,0,869,868,1,0,0,0,870,175,
1,0,0,0,871,874,3,180,90,0,872,874,3,182,91,0,873,871,1,0,0,0,873,872,1,
0,0,0,874,177,1,0,0,0,875,878,3,180,90,0,876,878,3,242,121,0,877,875,1,0,
0,0,877,876,1,0,0,0,878,179,1,0,0,0,879,880,7,4,0,0,880,181,1,0,0,0,881,
888,3,242,121,0,882,888,3,228,114,0,883,888,3,230,115,0,884,888,3,238,119,
0,885,888,3,246,123,0,886,888,3,184,92,0,887,881,1,0,0,0,887,882,1,0,0,0,
887,883,1,0,0,0,887,884,1,0,0,0,887,885,1,0,0,0,887,886,1,0,0,0,888,183,
1,0,0,0,889,890,5,136,0,0,890,891,5,137,0,0,891,185,1,0,0,0,892,893,3,188,
94,0,893,187,1,0,0,0,894,899,3,190,95,0,895,896,5,134,0,0,896,898,3,190,
95,0,897,895,1,0,0,0,898,901,1,0,0,0,899,897,1,0,0,0,899,900,1,0,0,0,900,
189,1,0,0,0,901,899,1,0,0,0,902,907,3,192,96,0,903,904,5,133,0,0,904,906,
3,192,96,0,905,903,1,0,0,0,906,909,1,0,0,0,907,905,1,0,0,0,907,908,1,0,0,
0,908,191,1,0,0,0,909,907,1,0,0,0,910,913,3,194,97,0,911,912,7,5,0,0,912,
914,3,194,97,0,913,911,1,0,0,0,913,914,1,0,0,0,914,927,1,0,0,0,915,917,3,
194,97,0,916,918,5,96,0,0,917,916,1,0,0,0,917,918,1,0,0,0,918,919,1,0,0,
0,919,920,5,97,0,0,920,922,5,136,0,0,921,923,3,96,48,0,922,921,1,0,0,0,922,
923,1,0,0,0,923,924,1,0,0,0,924,925,5,137,0,0,925,927,1,0,0,0,926,910,1,
0,0,0,926,915,1,0,0,0,927,193,1,0,0,0,928,932,3,200,100,0,929,931,3,196,
98,0,930,929,1,0,0,0,931,934,1,0,0,0,932,930,1,0,0,0,932,933,1,0,0,0,933,
195,1,0,0,0,934,932,1,0,0,0,935,940,3,198,99,0,936,937,7,6,0,0,937,939,3,
202,101,0,938,936,1,0,0,0,939,942,1,0,0,0,940,938,1,0,0,0,940,941,1,0,0,
0,941,197,1,0,0,0,942,940,1,0,0,0,943,944,7,7,0,0,944,948,3,200,100,0,945,
948,3,234,117,0,946,948,3,236,118,0,947,943,1,0,0,0,947,945,1,0,0,0,947,
946,1,0,0,0,948,199,1,0,0,0,949,954,3,202,101,0,950,951,7,6,0,0,951,953,
3,202,101,0,952,950,1,0,0,0,953,956,1,0,0,0,954,952,1,0,0,0,954,955,1,0,
0,0,955,201,1,0,0,0,956,954,1,0,0,0,957,959,7,8,0,0,958,957,1,0,0,0,958,
959,1,0,0,0,959,960,1,0,0,0,960,961,3,204,102,0,961,203,1,0,0,0,962,963,
5,136,0,0,963,964,3,186,93,0,964,965,5,137,0,0,965,973,1,0,0,0,966,973,3,
206,103,0,967,973,3,226,113,0,968,973,3,228,114,0,969,973,3,230,115,0,970,
973,3,238,119,0,971,973,3,180,90,0,972,962,1,0,0,0,972,966,1,0,0,0,972,967,
1,0,0,0,972,968,1,0,0,0,972,969,1,0,0,0,972,970,1,0,0,0,972,971,1,0,0,0,
973,205,1,0,0,0,974,1243,3,224,112,0,975,976,5,25,0,0,976,977,5,136,0,0,
977,978,3,186,93,0,978,979,5,137,0,0,979,1243,1,0,0,0,980,981,5,26,0,0,981,
982,5,136,0,0,982,983,3,186,93,0,983,984,5,137,0,0,984,1243,1,0,0,0,985,
986,5,27,0,0,986,987,5,136,0,0,987,988,3,186,93,0,988,989,5,148,0,0,989,
990,3,186,93,0,990,991,5,137,0,0,991,1243,1,0,0,0,992,993,5,28,0,0,993,994,
5,136,0,0,994,995,3,186,93,0,995,996,5,137,0,0,996,1243,1,0,0,0,997,998,
5,29,0,0,998,999,5,136,0,0,999,1000,3,180,90,0,1000,1001,5,137,0,0,1001,
1243,1,0,0,0,1002,1003,5,49,0,0,1003,1004,5,136,0,0,1004,1005,3,186,93,0,
1005,1006,5,137,0,0,1006,1243,1,0,0,0,1007,1008,5,50,0,0,1008,1009,5,136,
0,0,1009,1010,3,186,93,0,1010,1011,5,137,0,0,1011,1243,1,0,0,0,1012,1013,
5,51,0,0,1013,1015,5,136,0,0,1014,1016,3,186,93,0,1015,1014,1,0,0,0,1015,
1016,1,0,0,0,1016,1017,1,0,0,0,1017,1243,5,137,0,0,1018,1019,5,52,0,0,1019,
1020,5,136,0,0,1020,1243,5,137,0,0,1021,1022,5,53,0,0,1022,1023,5,136,0,
0,1023,1024,3,186,93,0,1024,1025,5,137,0,0,1025,1243,1,0,0,0,1026,1027,5,
54,0,0,1027,1028,5,136,0,0,1028,1029,3,186,93,0,1029,1030,5,137,0,0,1030,
1243,1,0,0,0,1031,1032,5,55,0,0,1032,1033,5,136,0,0,1033,1034,3,186,93,0,
1034,1035,5,137,0,0,1035,1243,1,0,0,0,1036,1037,5,56,0,0,1037,1038,5,136,
0,0,1038,1039,3,186,93,0,1039,1040,5,137,0,0,1040,1243,1,0,0,0,1041,1042,
5,57,0,0,1042,1044,5,136,0,0,1043,1045,3,96,48,0,1044,1043,1,0,0,0,1044,
1045,1,0,0,0,1045,1046,1,0,0,0,1046,1243,5,137,0,0,1047,1243,3,216,108,0,
1048,1049,5,58,0,0,1049,1050,5,136,0,0,1050,1051,3,186,93,0,1051,1052,5,
137,0,0,1052,1243,1,0,0,0,1053,1243,3,218,109,0,1054,1055,5,59,0,0,1055,
1056,5,136,0,0,1056,1057,3,186,93,0,1057,1058,5,137,0,0,1058,1243,1,0,0,
0,1059,1060,5,60,0,0,1060,1061,5,136,0,0,1061,1062,3,186,93,0,1062,1063,
5,137,0,0,1063,1243,1,0,0,0,1064,1065,5,61,0,0,1065,1066,5,136,0,0,1066,
1067,3,186,93,0,1067,1068,5,137,0,0,1068,1243,1,0,0,0,1069,1070,5,62,0,0,
1070,1071,5,136,0,0,1071,1072,3,186,93,0,1072,1073,5,148,0,0,1073,1074,3,
186,93,0,1074,1075,5,137,0,0,1075,1243,1,0,0,0,1076,1077,5,63,0,0,1077,1078,
5,136,0,0,1078,1079,3,186,93,0,1079,1080,5,148,0,0,1080,1081,3,186,93,0,
1081,1082,5,137,0,0,1082,1243,1,0,0,0,1083,1084,5,64,0,0,1084,1085,5,136,
0,0,1085,1086,3,186,93,0,1086,1087,5,148,0,0,1087,1088,3,186,93,0,1088,1089,
5,137,0,0,1089,1243,1,0,0,0,1090,1091,5,65,0,0,1091,1092,5,136,0,0,1092,
1093,3,186,93,0,1093,1094,5,148,0,0,1094,1095,3,186,93,0,1095,1096,5,137,
0,0,1096,1243,1,0,0,0,1097,1098,5,66,0,0,1098,1099,5,136,0,0,1099,1100,3,
186,93,0,1100,1101,5,148,0,0,1101,1102,3,186,93,0,1102,1103,5,137,0,0,1103,
1243,1,0,0,0,1104,1105,5,68,0,0,1105,1106,5,136,0,0,1106,1107,3,186,93,0,
1107,1108,5,137,0,0,1108,1243,1,0,0,0,1109,1110,5,69,0,0,1110,1111,5,136,
0,0,1111,1112,3,186,93,0,1112,1113,5,137,0,0,1113,1243,1,0,0,0,1114,1115,
5,70,0,0,1115,1116,5,136,0,0,1116,1117,3,186,93,0,1117,1118,5,137,0,0,1118,
1243,1,0,0,0,1119,1120,5,71,0,0,1120,1121,5,136,0,0,1121,1122,3,186,93,0,
1122,1123,5,137,0,0,1123,1243,1,0,0,0,1124,1125,5,72,0,0,1125,1126,5,136,
0,0,1126,1127,3,186,93,0,1127,1128,5,137,0,0,1128,1243,1,0,0,0,1129,1130,
5,73,0,0,1130,1131,5,136,0,0,1131,1132,3,186,93,0,1132,1133,5,137,0,0,1133,
1243,1,0,0,0,1134,1135,5,74,0,0,1135,1136,5,136,0,0,1136,1137,3,186,93,0,
1137,1138,5,137,0,0,1138,1243,1,0,0,0,1139,1140,5,75,0,0,1140,1141,5,136,
0,0,1141,1142,3,186,93,0,1142,1143,5,137,0,0,1143,1243,1,0,0,0,1144,1145,
5,76,0,0,1145,1146,5,136,0,0,1146,1243,5,137,0,0,1147,1148,5,77,0,0,1148,
1149,5,136,0,0,1149,1243,5,137,0,0,1150,1151,5,78,0,0,1151,1152,5,136,0,
0,1152,1243,5,137,0,0,1153,1154,5,79,0,0,1154,1155,5,136,0,0,1155,1156,3,
186,93,0,1156,1157,5,137,0,0,1157,1243,1,0,0,0,1158,1159,5,80,0,0,1159,1160,
5,136,0,0,1160,1161,3,186,93,0,1161,1162,5,137,0,0,1162,1243,1,0,0,0,1163,
1164,5,81,0,0,1164,1165,5,136,0,0,1165,1166,3,186,93,0,1166,1167,5,137,0,
0,1167,1243,1,0,0,0,1168,1169,5,82,0,0,1169,1170,5,136,0,0,1170,1171,3,186,
93,0,1171,1172,5,137,0,0,1172,1243,1,0,0,0,1173,1174,5,83,0,0,1174,1175,
5,136,0,0,1175,1176,3,186,93,0,1176,1177,5,137,0,0,1177,1243,1,0,0,0,1178,
1179,5,84,0,0,1179,1181,5,136,0,0,1180,1182,3,96,48,0,1181,1180,1,0,0,0,
1181,1182,1,0,0,0,1182,1183,1,0,0,0,1183,1243,5,137,0,0,1184,1185,5,85,0,
0,1185,1186,5,136,0,0,1186,1187,3,186,93,0,1187,1188,5,148,0,0,1188,1189,
3,186,93,0,1189,1190,5,148,0,0,1190,1191,3,186,93,0,1191,1192,5,137,0,0,
1192,1243,1,0,0,0,1193,1194,5,86,0,0,1194,1195,5,136,0,0,1195,1196,3,186,
93,0,1196,1197,5,148,0,0,1197,1198,3,186,93,0,1198,1199,5,137,0,0,1199,1243,
1,0,0,0,1200,1201,5,87,0,0,1201,1202,5,136,0,0,1202,1203,3,186,93,0,1203,
1204,5,148,0,0,1204,1205,3,186,93,0,1205,1206,5,137,0,0,1206,1243,1,0,0,
0,1207,1208,5,30,0,0,1208,1209,5,136,0,0,1209,1210,3,186,93,0,1210,1211,
5,148,0,0,1211,1212,3,186,93,0,1212,1213,5,137,0,0,1213,1243,1,0,0,0,1214,
1215,5,31,0,0,1215,1216,5,136,0,0,1216,1217,3,186,93,0,1217,1218,5,137,0,
0,1218,1243,1,0,0,0,1219,1220,5,32,0,0,1220,1221,5,136,0,0,1221,1222,3,186,
93,0,1222,1223,5,137,0,0,1223,1243,1,0,0,0,1224,1225,5,33,0,0,1225,1226,
5,136,0,0,1226,1227,3,186,93,0,1227,1228,5,137,0,0,1228,1243,1,0,0,0,1229,
1230,5,34,0,0,1230,1231,5,136,0,0,1231,1232,3,186,93,0,1232,1233,5,137,0,
0,1233,1243,1,0,0,0,1234,1235,5,88,0,0,1235,1236,5,136,0,0,1236,1237,3,186,
93,0,1237,1238,5,137,0,0,1238,1243,1,0,0,0,1239,1243,3,214,107,0,1240,1243,
3,220,110,0,1241,1243,3,222,111,0,1242,974,1,0,0,0,1242,975,1,0,0,0,1242,
980,1,0,0,0,1242,985,1,0,0,0,1242,992,1,0,0,0,1242,997,1,0,0,0,1242,1002,
1,0,0,0,1242,1007,1,0,0,0,1242,1012,1,0,0,0,1242,1018,1,0,0,0,1242,1021,
1,0,0,0,1242,1026,1,0,0,0,1242,1031,1,0,0,0,1242,1036,1,0,0,0,1242,1041,
1,0,0,0,1242,1047,1,0,0,0,1242,1048,1,0,0,0,1242,1053,1,0,0,0,1242,1054,
1,0,0,0,1242,1059,1,0,0,0,1242,1064,1,0,0,0,1242,1069,1,0,0,0,1242,1076,
1,0,0,0,1242,1083,1,0,0,0,1242,1090,1,0,0,0,1242,1097,1,0,0,0,1242,1104,
1,0,0,0,1242,1109,1,0,0,0,1242,1114,1,0,0,0,1242,1119,1,0,0,0,1242,1124,
1,0,0,0,1242,1129,1,0,0,0,1242,1134,1,0,0,0,1242,1139,1,0,0,0,1242,1144,
1,0,0,0,1242,1147,1,0,0,0,1242,1150,1,0,0,0,1242,1153,1,0,0,0,1242,1158,
1,0,0,0,1242,1163,1,0,0,0,1242,1168,1,0,0,0,1242,1173,1,0,0,0,1242,1178,
1,0,0,0,1242,1184,1,0,0,0,1242,1193,1,0,0,0,1242,1200,1,0,0,0,1242,1207,
1,0,0,0,1242,1214,1,0,0,0,1242,1219,1,0,0,0,1242,1224,1,0,0,0,1242,1229,
1,0,0,0,1242,1234,1,0,0,0,1242,1239,1,0,0,0,1242,1240,1,0,0,0,1242,1241,
1,0,0,0,1243,207,1,0,0,0,1244,1245,5,107,0,0,1245,1247,5,136,0,0,1246,1248,
3,210,105,0,1247,1246,1,0,0,0,1247,1248,1,0,0,0,1248,1249,1,0,0,0,1249,1250,
5,137,0,0,1250,1251,5,41,0,0,1251,1252,3,212,106,0,1252,209,1,0,0,0,1253,
1258,3,186,93,0,1254,1255,5,148,0,0,1255,1257,3,186,93,0,1256,1254,1,0,0,
0,1257,1260,1,0,0,0,1258,1256,1,0,0,0,1258,1259,1,0,0,0,1259,211,1,0,0,0,
1260,1258,1,0,0,0,1261,1274,3,180,90,0,1262,1263,5,136,0,0,1263,1268,3,180,
90,0,1264,1265,5,148,0,0,1265,1267,3,180,90,0,1266,1264,1,0,0,0,1267,1270,
1,0,0,0,1268,1266,1,0,0,0,1268,1269,1,0,0,0,1269,1271,1,0,0,0,1270,1268,
1,0,0,0,1271,1272,5,137,0,0,1272,1274,1,0,0,0,1273,1261,1,0,0,0,1273,1262,
1,0,0,0,1274,213,1,0,0,0,1275,1276,5,35,0,0,1276,1277,5,136,0,0,1277,1278,
3,186,93,0,1278,1279,5,148,0,0,1279,1282,3,186,93,0,1280,1281,5,148,0,0,
1281,1283,3,186,93,0,1282,1280,1,0,0,0,1282,1283,1,0,0,0,1283,1284,1,0,0,
0,1284,1285,5,137,0,0,1285,215,1,0,0,0,1286,1287,5,36,0,0,1287,1288,5,136,
0,0,1288,1289,3,186,93,0,1289,1290,5,148,0,0,1290,1293,3,186,93,0,1291,1292,
5,148,0,0,1292,1294,3,186,93,0,1293,1291,1,0,0,0,1293,1294,1,0,0,0,1294,
1295,1,0,0,0,1295,1296,5,137,0,0,1296,217,1,0,0,0,1297,1298,5,67,0,0,1298,
1299,5,136,0,0,1299,1300,3,186,93,0,1300,1301,5,148,0,0,1301,1302,3,186,
93,0,1302,1303,5,148,0,0,1303,1306,3,186,93,0,1304,1305,5,148,0,0,1305,1307,
3,186,93,0,1306,1304,1,0,0,0,1306,1307,1,0,0,0,1307,1308,1,0,0,0,1308,1309,
5,137,0,0,1309,219,1,0,0,0,1310,1311,5,98,0,0,1311,1312,3,54,27,0,1312,221,
1,0,0,0,1313,1314,5,96,0,0,1314,1315,5,98,0,0,1315,1316,3,54,27,0,1316,223,
1,0,0,0,1317,1318,5,89,0,0,1318,1320,5,136,0,0,1319,1321,5,5,0,0,1320,1319,
1,0,0,0,1320,1321,1,0,0,0,1321,1324,1,0,0,0,1322,1325,5,146,0,0,1323,1325,
3,186,93,0,1324,1322,1,0,0,0,1324,1323,1,0,0,0,1325,1326,1,0,0,0,1326,1382,
5,137,0,0,1327,1328,5,90,0,0,1328,1330,5,136,0,0,1329,1331,5,5,0,0,1330,
1329,1,0,0,0,1330,1331,1,0,0,0,1331,1332,1,0,0,0,1332,1333,3,186,93,0,1333,
1334,5,137,0,0,1334,1382,1,0,0,0,1335,1336,5,91,0,0,1336,1338,5,136,0,0,
1337,1339,5,5,0,0,1338,1337,1,0,0,0,1338,1339,1,0,0,0,1339,1340,1,0,0,0,
1340,1341,3,186,93,0,1341,1342,5,137,0,0,1342,1382,1,0,0,0,1343,1344,5,92,
0,0,1344,1346,5,136,0,0,1345,1347,5,5,0,0,1346,1345,1,0,0,0,1346,1347,1,
0,0,0,1347,1348,1,0,0,0,1348,1349,3,186,93,0,1349,1350,5,137,0,0,1350,1382,
1,0,0,0,1351,1352,5,93,0,0,1352,1354,5,136,0,0,1353,1355,5,5,0,0,1354,1353,
1,0,0,0,1354,1355,1,0,0,0,1355,1356,1,0,0,0,1356,1357,3,186,93,0,1357,1358,
5,137,0,0,1358,1382,1,0,0,0,1359,1360,5,94,0,0,1360,1362,5,136,0,0,1361,
1363,5,5,0,0,1362,1361,1,0,0,0,1362,1363,1,0,0,0,1363,1364,1,0,0,0,1364,
1365,3,186,93,0,1365,1366,5,137,0,0,1366,1382,1,0,0,0,1367,1368,5,95,0,0,
1368,1370,5,136,0,0,1369,1371,5,5,0,0,1370,1369,1,0,0,0,1370,1371,1,0,0,
0,1371,1372,1,0,0,0,1372,1377,3,186,93,0,1373,1374,5,142,0,0,1374,1375,5,
99,0,0,1375,1376,5,151,0,0,1376,1378,3,240,120,0,1377,1373,1,0,0,0,1377,
1378,1,0,0,0,1378,1379,1,0,0,0,1379,1380,5,137,0,0,1380,1382,1,0,0,0,1381,
1317,1,0,0,0,1381,1327,1,0,0,0,1381,1335,1,0,0,0,1381,1343,1,0,0,0,1381,
1351,1,0,0,0,1381,1359,1,0,0,0,1381,1367,1,0,0,0,1382,225,1,0,0,0,1383,1385,
3,242,121,0,1384,1386,3,94,47,0,1385,1384,1,0,0,0,1385,1386,1,0,0,0,1386,
227,1,0,0,0,1387,1391,3,240,120,0,1388,1392,5,114,0,0,1389,1390,5,129,0,
0,1390,1392,3,242,121,0,1391,1388,1,0,0,0,1391,1389,1,0,0,0,1391,1392,1,
0,0,0,1392,229,1,0,0,0,1393,1397,3,232,116,0,1394,1397,3,234,117,0,1395,
1397,3,236,118,0,1396,1393,1,0,0,0,1396,1394,1,0,0,0,1396,1395,1,0,0,0,1397,
231,1,0,0,0,1398,1399,7,9,0,0,1399,233,1,0,0,0,1400,1401,7,10,0,0,1401,235,
1,0,0,0,1402,1403,7,11,0,0,1403,237,1,0,0,0,1404,1405,7,12,0,0,1405,239,
1,0,0,0,1406,1407,7,13,0,0,1407,241,1,0,0,0,1408,1411,5,108,0,0,1409,1411,
3,244,122,0,1410,1408,1,0,0,0,1410,1409,1,0,0,0,1411,243,1,0,0,0,1412,1413,
7,14,0,0,1413,245,1,0,0,0,1414,1417,5,111,0,0,1415,1417,3,248,124,0,1416,
1414,1,0,0,0,1416,1415,1,0,0,0,1417,247,1,0,0,0,1418,1419,5,140,0,0,1419,
1420,5,141,0,0,1420,249,1,0,0,0,134,255,261,269,271,285,298,303,306,317,
324,333,339,343,349,352,357,361,369,377,382,387,390,393,396,403,411,416,
422,431,440,444,448,450,460,465,469,475,480,485,490,493,498,502,514,525,
542,549,558,566,575,585,595,607,614,618,627,632,639,643,652,655,663,667,
672,679,690,693,697,702,706,711,718,721,729,738,750,758,763,766,777,783,
805,814,817,820,823,827,833,841,851,859,865,869,873,877,887,899,907,913,
917,922,926,932,940,947,954,958,972,1015,1044,1181,1242,1247,1258,1268,1273,
1282,1293,1306,1320,1324,1330,1338,1346,1354,1362,1370,1377,1381,1385,1391,
1396,1410,1416];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class SparqlQueryParser extends antlr4.Parser {

    static grammarFileName = "SparqlQueryParser.g4";
    static literalNames = [ null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            "'a'", null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, "'^^'", "'<='", "'>='", "'!='", "'&&'", 
                            "'||'", "'^'", "'('", "')'", "'{'", "'}'", "'['", 
                            "']'", "';'", "'.'", "'+'", "'-'", "'*'", "'?'", 
                            "','", "'!'", "'/'", "'='", "'<'", "'>'", "'|'" ];
    static symbolicNames = [ null, "WS", "BASE", "PREFIX", "SELECT", "DISTINCT", 
                             "REDUCED", "CONSTRUCT", "DESCRIBE", "ASK", 
                             "FROM", "NAMED", "WHERE", "ORDER", "BY", "ASC", 
                             "DESC", "LIMIT", "OFFSET", "VALUES", "OPTIONAL", 
                             "GRAPH", "UNION", "FILTER", "A", "STR", "LANG", 
                             "LANGMATCHES", "DATATYPE", "BOUND", "SAMETERM", 
                             "ISIRI", "ISURI", "ISBLANK", "ISLITERAL", "REGEX", 
                             "SUBSTR", "K_TRUE", "K_FALSE", "SILENT", "ALL", 
                             "AS", "GROUP", "HAVING", "UNDEF", "BINDINGS", 
                             "SERVICE", "BIND", "MINUS", "IRI", "URI", "BNODE", 
                             "RAND", "ABS", "CEIL", "FLOOR", "ROUND", "CONCAT", 
                             "STRLEN", "UCASE", "LCASE", "ENCODE_FOR_URI", 
                             "CONTAINS", "STRSTARTS", "STRENDS", "STRBEFORE", 
                             "STRAFTER", "REPLACE", "YEAR", "MONTH", "DAY", 
                             "HOURS", "MINUTES", "SECONDS", "TIMEZONE", 
                             "TZ", "NOW", "UUID", "STRUUID", "MD5", "SHA1", 
                             "SHA256", "SHA384", "SHA512", "COALESCE", "IF", 
                             "STRLANG", "STRDT", "ISNUMERIC", "COUNT", "SUM", 
                             "MIN", "MAX", "AVG", "SAMPLE", "GROUP_CONCAT", 
                             "NOT", "IN", "EXISTS", "SEPARATOR", "ANY", 
                             "SHORTEST", "SIMPLE", "ACYCLIC", "WALKS", "SHOW", 
                             "INDEX", "ALPHANUMERIC_IDENTIFIER", "IRIREF", 
                             "PNAME_NS", "PNAME_LN", "BLANK_NODE_LABEL", 
                             "VAR1", "VAR2", "LANGTAG", "INTEGER", "DECIMAL", 
                             "DOUBLE", "INTEGER_POSITIVE", "DECIMAL_POSITIVE", 
                             "DOUBLE_POSITIVE", "INTEGER_NEGATIVE", "DECIMAL_NEGATIVE", 
                             "DOUBLE_NEGATIVE", "STRING_LITERAL1", "STRING_LITERAL2", 
                             "STRING_LITERAL_LONG1", "STRING_LITERAL_LONG2", 
                             "COMMENT", "REFERENCE", "LESS_EQUAL", "GREATER_EQUAL", 
                             "NOT_EQUAL", "AND", "OR", "INVERSE", "OPEN_BRACE", 
                             "CLOSE_BRACE", "OPEN_CURLY_BRACE", "CLOSE_CURLY_BRACE", 
                             "OPEN_SQUARE_BRACKET", "CLOSE_SQUARE_BRACKET", 
                             "SEMICOLON", "DOT", "PLUS_SIGN", "MINUS_SIGN", 
                             "ASTERISK", "QUESTION_MARK", "COMMA", "NEGATION", 
                             "DIVIDE", "EQUAL", "LESS", "GREATER", "PIPE", 
                             "ANY_OTHER" ];
    static ruleNames = [ "query", "showQuery", "prologue", "baseDecl", "prefixDecl", 
                         "selectQuery", "subSelect", "selectClause", "selectModifier", 
                         "selectVariables", "constructQuery", "describeQuery", 
                         "askQuery", "datasetClause", "whereClause", "solutionModifier", 
                         "groupClause", "groupCondition", "havingClause", 
                         "havingCondition", "orderClause", "orderCondition", 
                         "limitOffsetClauses", "limitClause", "offsetClause", 
                         "valuesClause", "triplesTemplate", "groupGraphPattern", 
                         "groupGraphPatternSub", "groupGraphPatternSubList", 
                         "triplesBlock", "graphPatternNotTriples", "optionalGraphPattern", 
                         "graphGraphPattern", "serviceGraphPattern", "bind", 
                         "inlineData", "dataBlock", "inlineDataOneVar", 
                         "inlineDataFull", "dataBlockValues", "dataBlockValue", 
                         "minusGraphPattern", "groupOrUnionGraphPattern", 
                         "filter", "constraint", "functionCall", "argList", 
                         "expressionList", "constructTemplate", "constructTriples", 
                         "triplesSameSubject", "propertyList", "propertyListNotEmpty", 
                         "verb", "objectList", "object", "triplesSameSubjectPath", 
                         "propertyListPath", "propertyListPathNotEmpty", 
                         "propertyListPathNotEmptyList", "verbPath", "verbSimple", 
                         "objectListPath", "objectPath", "path", "pathAlternative", 
                         "pathSequence", "pathElt", "pathEltOrInverse", 
                         "pathMod", "pathQuantity", "pathQuantityExact", 
                         "pathQuantityRange", "pathQuantityMin", "pathQuantityMax", 
                         "pathPrimary", "pathNegatedPropertySet", "pathOneInPropertySet", 
                         "integer", "triplesNode", "blankNodePropertyList", 
                         "triplesNodePath", "blankNodePropertyListPath", 
                         "collection", "collectionPath", "graphNode", "graphNodePath", 
                         "varOrTerm", "varOrIRI", "var", "graphTerm", "nil", 
                         "expression", "conditionalOrExpression", "conditionalAndExpression", 
                         "relationalExpression", "additiveExpression", "rhsAdditiveExpression", 
                         "rhsAdditiveExpressionSub", "multiplicativeExpression", 
                         "unaryExpression", "primaryExpression", "builtInCall", 
                         "procedure", "procedureArguments", "procedureBindings", 
                         "regexExpression", "subStringExpression", "strReplaceExpression", 
                         "existsFunction", "notExistsFunction", "aggregate", 
                         "iriOrFunction", "rdfLiteral", "numericLiteral", 
                         "numericLiteralUnsigned", "numericLiteralPositive", 
                         "numericLiteralNegative", "booleanLiteral", "string", 
                         "iri", "prefixedName", "blankNode", "anon" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = SparqlQueryParser.ruleNames;
        this.literalNames = SparqlQueryParser.literalNames;
        this.symbolicNames = SparqlQueryParser.symbolicNames;
    }



	query() {
	    let localctx = new QueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, SparqlQueryParser.RULE_query);
	    try {
	        this.state = 261;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	        case 3:
	        case 4:
	        case 7:
	        case 8:
	        case 9:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 250;
	            this.prologue();
	            this.state = 255;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 4:
	                this.state = 251;
	                this.selectQuery();
	                break;
	            case 7:
	                this.state = 252;
	                this.constructQuery();
	                break;
	            case 8:
	                this.state = 253;
	                this.describeQuery();
	                break;
	            case 9:
	                this.state = 254;
	                this.askQuery();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 257;
	            this.valuesClause();
	            this.state = 258;
	            this.match(SparqlQueryParser.EOF);
	            break;
	        case 105:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 260;
	            this.showQuery();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showQuery() {
	    let localctx = new ShowQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, SparqlQueryParser.RULE_showQuery);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 263;
	        this.match(SparqlQueryParser.SHOW);
	        this.state = 264;
	        this.match(SparqlQueryParser.ALPHANUMERIC_IDENTIFIER);
	        this.state = 265;
	        this.match(SparqlQueryParser.INDEX);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prologue() {
	    let localctx = new PrologueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, SparqlQueryParser.RULE_prologue);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 271;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===2 || _la===3) {
	            this.state = 269;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 2:
	                this.state = 267;
	                this.baseDecl();
	                break;
	            case 3:
	                this.state = 268;
	                this.prefixDecl();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 273;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	baseDecl() {
	    let localctx = new BaseDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, SparqlQueryParser.RULE_baseDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 274;
	        this.match(SparqlQueryParser.BASE);
	        this.state = 275;
	        this.match(SparqlQueryParser.IRIREF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prefixDecl() {
	    let localctx = new PrefixDeclContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, SparqlQueryParser.RULE_prefixDecl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 277;
	        this.match(SparqlQueryParser.PREFIX);
	        this.state = 278;
	        this.match(SparqlQueryParser.PNAME_NS);
	        this.state = 279;
	        this.match(SparqlQueryParser.IRIREF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectQuery() {
	    let localctx = new SelectQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, SparqlQueryParser.RULE_selectQuery);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 281;
	        this.selectClause();
	        this.state = 285;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===10) {
	            this.state = 282;
	            this.datasetClause();
	            this.state = 287;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 288;
	        this.whereClause();
	        this.state = 289;
	        this.solutionModifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subSelect() {
	    let localctx = new SubSelectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, SparqlQueryParser.RULE_subSelect);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 291;
	        this.selectClause();
	        this.state = 292;
	        this.whereClause();
	        this.state = 293;
	        this.solutionModifier();
	        this.state = 294;
	        this.valuesClause();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectClause() {
	    let localctx = new SelectClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, SparqlQueryParser.RULE_selectClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 296;
	        this.match(SparqlQueryParser.SELECT);
	        this.state = 298;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===5 || _la===6) {
	            this.state = 297;
	            this.selectModifier();
	        }

	        this.state = 306;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 112:
	        case 113:
	        case 136:
	            this.state = 301; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 300;
	                this.selectVariables();
	                this.state = 303; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(((((_la - 112)) & ~0x1f) === 0 && ((1 << (_la - 112)) & 16777219) !== 0));
	            break;
	        case 146:
	            this.state = 305;
	            this.match(SparqlQueryParser.ASTERISK);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectModifier() {
	    let localctx = new SelectModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, SparqlQueryParser.RULE_selectModifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 308;
	        _la = this._input.LA(1);
	        if(!(_la===5 || _la===6)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectVariables() {
	    let localctx = new SelectVariablesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, SparqlQueryParser.RULE_selectVariables);
	    try {
	        this.state = 317;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 112:
	        case 113:
	            localctx = new SelectSingleVariableContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 310;
	            this.var_();
	            break;
	        case 136:
	            localctx = new SelectExpressionAsVariableContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 311;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 312;
	            this.expression();
	            this.state = 313;
	            this.match(SparqlQueryParser.AS);
	            this.state = 314;
	            this.var_();
	            this.state = 315;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructQuery() {
	    let localctx = new ConstructQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, SparqlQueryParser.RULE_constructQuery);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 319;
	        this.match(SparqlQueryParser.CONSTRUCT);
	        this.state = 343;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 138:
	            this.state = 320;
	            this.constructTemplate();
	            this.state = 324;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===10) {
	                this.state = 321;
	                this.datasetClause();
	                this.state = 326;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 327;
	            this.whereClause();
	            this.state = 328;
	            this.solutionModifier();
	            break;
	        case 10:
	        case 12:
	            this.state = 333;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===10) {
	                this.state = 330;
	                this.datasetClause();
	                this.state = 335;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 336;
	            this.match(SparqlQueryParser.WHERE);
	            this.state = 337;
	            this.match(SparqlQueryParser.OPEN_CURLY_BRACE);
	            this.state = 339;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===37 || _la===38 || ((((_la - 108)) & ~0x1f) === 0 && ((1 << (_la - 108)) & 269483967) !== 0) || _la===140) {
	                this.state = 338;
	                this.triplesTemplate();
	            }

	            this.state = 341;
	            this.match(SparqlQueryParser.CLOSE_CURLY_BRACE);
	            this.state = 342;
	            this.solutionModifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describeQuery() {
	    let localctx = new DescribeQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, SparqlQueryParser.RULE_describeQuery);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 345;
	        this.match(SparqlQueryParser.DESCRIBE);
	        this.state = 352;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 108:
	        case 109:
	        case 110:
	        case 112:
	        case 113:
	            this.state = 347; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 346;
	                this.varOrIRI();
	                this.state = 349; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(((((_la - 108)) & ~0x1f) === 0 && ((1 << (_la - 108)) & 55) !== 0));
	            break;
	        case 146:
	            this.state = 351;
	            this.match(SparqlQueryParser.ASTERISK);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 357;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===10) {
	            this.state = 354;
	            this.datasetClause();
	            this.state = 359;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 361;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===12 || _la===138) {
	            this.state = 360;
	            this.whereClause();
	        }

	        this.state = 363;
	        this.solutionModifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	askQuery() {
	    let localctx = new AskQueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, SparqlQueryParser.RULE_askQuery);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 365;
	        this.match(SparqlQueryParser.ASK);
	        this.state = 369;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===10) {
	            this.state = 366;
	            this.datasetClause();
	            this.state = 371;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 372;
	        this.whereClause();
	        this.state = 373;
	        this.solutionModifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	datasetClause() {
	    let localctx = new DatasetClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, SparqlQueryParser.RULE_datasetClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 375;
	        this.match(SparqlQueryParser.FROM);
	        this.state = 377;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===11) {
	            this.state = 376;
	            this.match(SparqlQueryParser.NAMED);
	        }

	        this.state = 379;
	        this.iri();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whereClause() {
	    let localctx = new WhereClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, SparqlQueryParser.RULE_whereClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 382;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===12) {
	            this.state = 381;
	            this.match(SparqlQueryParser.WHERE);
	        }

	        this.state = 384;
	        this.groupGraphPattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	solutionModifier() {
	    let localctx = new SolutionModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, SparqlQueryParser.RULE_solutionModifier);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 387;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===42) {
	            this.state = 386;
	            this.groupClause();
	        }

	        this.state = 390;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===43) {
	            this.state = 389;
	            this.havingClause();
	        }

	        this.state = 393;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===13) {
	            this.state = 392;
	            this.orderClause();
	        }

	        this.state = 396;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===17 || _la===18) {
	            this.state = 395;
	            this.limitOffsetClauses();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupClause() {
	    let localctx = new GroupClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, SparqlQueryParser.RULE_groupClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 398;
	        this.match(SparqlQueryParser.GROUP);
	        this.state = 399;
	        this.match(SparqlQueryParser.BY);
	        this.state = 401; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 400;
	            this.groupCondition();
	            this.state = 403; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 25)) & ~0x1f) === 0 && ((1 << (_la - 25)) & 4278194175) !== 0) || ((((_la - 57)) & ~0x1f) === 0 && ((1 << (_la - 57)) & 4294967295) !== 0) || ((((_la - 89)) & ~0x1f) === 0 && ((1 << (_la - 89)) & 28836607) !== 0) || _la===136);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupCondition() {
	    let localctx = new GroupConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, SparqlQueryParser.RULE_groupCondition);
	    var _la = 0;
	    try {
	        this.state = 416;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 25:
	        case 26:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 98:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 405;
	            this.builtInCall();
	            break;
	        case 108:
	        case 109:
	        case 110:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 406;
	            this.functionCall();
	            break;
	        case 136:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 407;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 408;
	            this.expression();
	            this.state = 411;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===41) {
	                this.state = 409;
	                this.match(SparqlQueryParser.AS);
	                this.state = 410;
	                this.var_();
	            }

	            this.state = 413;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 112:
	        case 113:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 415;
	            this.var_();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	havingClause() {
	    let localctx = new HavingClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, SparqlQueryParser.RULE_havingClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 418;
	        this.match(SparqlQueryParser.HAVING);
	        this.state = 420; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 419;
	            this.havingCondition();
	            this.state = 422; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 25)) & ~0x1f) === 0 && ((1 << (_la - 25)) & 4278194175) !== 0) || ((((_la - 57)) & ~0x1f) === 0 && ((1 << (_la - 57)) & 4294967295) !== 0) || ((((_la - 89)) & ~0x1f) === 0 && ((1 << (_la - 89)) & 3670783) !== 0) || _la===136);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	havingCondition() {
	    let localctx = new HavingConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, SparqlQueryParser.RULE_havingCondition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 424;
	        this.constraint();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderClause() {
	    let localctx = new OrderClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, SparqlQueryParser.RULE_orderClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 426;
	        this.match(SparqlQueryParser.ORDER);
	        this.state = 427;
	        this.match(SparqlQueryParser.BY);
	        this.state = 429; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 428;
	            this.orderCondition();
	            this.state = 431; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 15)) & ~0x1f) === 0 && ((1 << (_la - 15)) & 4193283) !== 0) || ((((_la - 49)) & ~0x1f) === 0 && ((1 << (_la - 49)) & 4294967295) !== 0) || ((((_la - 81)) & ~0x1f) === 0 && ((1 << (_la - 81)) & 3087204351) !== 0) || _la===113 || _la===136);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderCondition() {
	    let localctx = new OrderConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, SparqlQueryParser.RULE_orderCondition);
	    var _la = 0;
	    try {
	        this.state = 440;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 15:
	        case 16:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 433;
	            _la = this._input.LA(1);
	            if(!(_la===15 || _la===16)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 434;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 435;
	            this.expression();
	            this.state = 436;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 25:
	        case 26:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 98:
	        case 108:
	        case 109:
	        case 110:
	        case 136:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 438;
	            this.constraint();
	            break;
	        case 112:
	        case 113:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 439;
	            this.var_();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limitOffsetClauses() {
	    let localctx = new LimitOffsetClausesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, SparqlQueryParser.RULE_limitOffsetClauses);
	    var _la = 0;
	    try {
	        this.state = 450;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 17:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 442;
	            this.limitClause();
	            this.state = 444;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===18) {
	                this.state = 443;
	                this.offsetClause();
	            }

	            break;
	        case 18:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 446;
	            this.offsetClause();
	            this.state = 448;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===17) {
	                this.state = 447;
	                this.limitClause();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limitClause() {
	    let localctx = new LimitClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, SparqlQueryParser.RULE_limitClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 452;
	        this.match(SparqlQueryParser.LIMIT);
	        this.state = 453;
	        this.match(SparqlQueryParser.INTEGER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	offsetClause() {
	    let localctx = new OffsetClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, SparqlQueryParser.RULE_offsetClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 455;
	        this.match(SparqlQueryParser.OFFSET);
	        this.state = 456;
	        this.match(SparqlQueryParser.INTEGER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valuesClause() {
	    let localctx = new ValuesClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, SparqlQueryParser.RULE_valuesClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 460;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===19) {
	            this.state = 458;
	            this.match(SparqlQueryParser.VALUES);
	            this.state = 459;
	            this.dataBlock();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	triplesTemplate() {
	    let localctx = new TriplesTemplateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, SparqlQueryParser.RULE_triplesTemplate);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 462;
	        this.triplesSameSubject();
	        this.state = 469;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===143) {
	            this.state = 463;
	            this.match(SparqlQueryParser.DOT);
	            this.state = 465;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===37 || _la===38 || ((((_la - 108)) & ~0x1f) === 0 && ((1 << (_la - 108)) & 269483967) !== 0) || _la===140) {
	                this.state = 464;
	                this.triplesSameSubject();
	            }

	            this.state = 471;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupGraphPattern() {
	    let localctx = new GroupGraphPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, SparqlQueryParser.RULE_groupGraphPattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 472;
	        this.match(SparqlQueryParser.OPEN_CURLY_BRACE);
	        this.state = 475;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 4:
	            this.state = 473;
	            this.subSelect();
	            break;
	        case 19:
	        case 20:
	        case 21:
	        case 23:
	        case 37:
	        case 38:
	        case 46:
	        case 47:
	        case 48:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 136:
	        case 138:
	        case 139:
	        case 140:
	            this.state = 474;
	            this.groupGraphPatternSub();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 477;
	        this.match(SparqlQueryParser.CLOSE_CURLY_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupGraphPatternSub() {
	    let localctx = new GroupGraphPatternSubContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, SparqlQueryParser.RULE_groupGraphPatternSub);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 480;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===37 || _la===38 || ((((_la - 108)) & ~0x1f) === 0 && ((1 << (_la - 108)) & 269483967) !== 0) || _la===140) {
	            this.state = 479;
	            this.triplesBlock();
	        }

	        this.state = 485;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 19)) & ~0x1f) === 0 && ((1 << (_la - 19)) & 939524119) !== 0) || _la===107 || _la===138) {
	            this.state = 482;
	            this.groupGraphPatternSubList();
	            this.state = 487;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupGraphPatternSubList() {
	    let localctx = new GroupGraphPatternSubListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, SparqlQueryParser.RULE_groupGraphPatternSubList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 488;
	        this.graphPatternNotTriples();
	        this.state = 490;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===143) {
	            this.state = 489;
	            this.match(SparqlQueryParser.DOT);
	        }

	        this.state = 493;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===37 || _la===38 || ((((_la - 108)) & ~0x1f) === 0 && ((1 << (_la - 108)) & 269483967) !== 0) || _la===140) {
	            this.state = 492;
	            this.triplesBlock();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	triplesBlock() {
	    let localctx = new TriplesBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, SparqlQueryParser.RULE_triplesBlock);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 495;
	        this.triplesSameSubjectPath();
	        this.state = 502;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===143) {
	            this.state = 496;
	            this.match(SparqlQueryParser.DOT);
	            this.state = 498;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===37 || _la===38 || ((((_la - 108)) & ~0x1f) === 0 && ((1 << (_la - 108)) & 269483967) !== 0) || _la===140) {
	                this.state = 497;
	                this.triplesSameSubjectPath();
	            }

	            this.state = 504;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphPatternNotTriples() {
	    let localctx = new GraphPatternNotTriplesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, SparqlQueryParser.RULE_graphPatternNotTriples);
	    try {
	        this.state = 514;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 138:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 505;
	            this.groupOrUnionGraphPattern();
	            break;
	        case 20:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 506;
	            this.optionalGraphPattern();
	            break;
	        case 48:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 507;
	            this.minusGraphPattern();
	            break;
	        case 21:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 508;
	            this.graphGraphPattern();
	            break;
	        case 46:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 509;
	            this.serviceGraphPattern();
	            break;
	        case 23:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 510;
	            this.filter();
	            break;
	        case 47:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 511;
	            this.bind();
	            break;
	        case 19:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 512;
	            this.inlineData();
	            break;
	        case 107:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 513;
	            this.procedure();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionalGraphPattern() {
	    let localctx = new OptionalGraphPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, SparqlQueryParser.RULE_optionalGraphPattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 516;
	        this.match(SparqlQueryParser.OPTIONAL);
	        this.state = 517;
	        this.groupGraphPattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphGraphPattern() {
	    let localctx = new GraphGraphPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, SparqlQueryParser.RULE_graphGraphPattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 519;
	        this.match(SparqlQueryParser.GRAPH);
	        this.state = 520;
	        this.varOrIRI();
	        this.state = 521;
	        this.groupGraphPattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	serviceGraphPattern() {
	    let localctx = new ServiceGraphPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, SparqlQueryParser.RULE_serviceGraphPattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 523;
	        this.match(SparqlQueryParser.SERVICE);
	        this.state = 525;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===39) {
	            this.state = 524;
	            this.match(SparqlQueryParser.SILENT);
	        }

	        this.state = 527;
	        this.varOrIRI();
	        this.state = 528;
	        this.groupGraphPattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bind() {
	    let localctx = new BindContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, SparqlQueryParser.RULE_bind);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 530;
	        this.match(SparqlQueryParser.BIND);
	        this.state = 531;
	        this.match(SparqlQueryParser.OPEN_BRACE);
	        this.state = 532;
	        this.expression();
	        this.state = 533;
	        this.match(SparqlQueryParser.AS);
	        this.state = 534;
	        this.var_();
	        this.state = 535;
	        this.match(SparqlQueryParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inlineData() {
	    let localctx = new InlineDataContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, SparqlQueryParser.RULE_inlineData);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 537;
	        this.match(SparqlQueryParser.VALUES);
	        this.state = 538;
	        this.dataBlock();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataBlock() {
	    let localctx = new DataBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, SparqlQueryParser.RULE_dataBlock);
	    try {
	        this.state = 542;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 112:
	        case 113:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 540;
	            this.inlineDataOneVar();
	            break;
	        case 136:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 541;
	            this.inlineDataFull();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inlineDataOneVar() {
	    let localctx = new InlineDataOneVarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, SparqlQueryParser.RULE_inlineDataOneVar);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 544;
	        this.var_();
	        this.state = 545;
	        this.match(SparqlQueryParser.OPEN_CURLY_BRACE);
	        this.state = 549;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 131) !== 0) || ((((_la - 108)) & ~0x1f) === 0 && ((1 << (_la - 108)) & 1048455) !== 0)) {
	            this.state = 546;
	            this.dataBlockValue();
	            this.state = 551;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 552;
	        this.match(SparqlQueryParser.CLOSE_CURLY_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inlineDataFull() {
	    let localctx = new InlineDataFullContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, SparqlQueryParser.RULE_inlineDataFull);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 554;
	        this.match(SparqlQueryParser.OPEN_BRACE);
	        this.state = 558;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===112 || _la===113) {
	            this.state = 555;
	            this.var_();
	            this.state = 560;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 561;
	        this.match(SparqlQueryParser.CLOSE_BRACE);
	        this.state = 562;
	        this.match(SparqlQueryParser.OPEN_CURLY_BRACE);
	        this.state = 566;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===136) {
	            this.state = 563;
	            this.dataBlockValues();
	            this.state = 568;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 569;
	        this.match(SparqlQueryParser.CLOSE_CURLY_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataBlockValues() {
	    let localctx = new DataBlockValuesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, SparqlQueryParser.RULE_dataBlockValues);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 571;
	        this.match(SparqlQueryParser.OPEN_BRACE);
	        this.state = 575;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 37)) & ~0x1f) === 0 && ((1 << (_la - 37)) & 131) !== 0) || ((((_la - 108)) & ~0x1f) === 0 && ((1 << (_la - 108)) & 1048455) !== 0)) {
	            this.state = 572;
	            this.dataBlockValue();
	            this.state = 577;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 578;
	        this.match(SparqlQueryParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataBlockValue() {
	    let localctx = new DataBlockValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, SparqlQueryParser.RULE_dataBlockValue);
	    try {
	        this.state = 585;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 108:
	        case 109:
	        case 110:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 580;
	            this.iri();
	            break;
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 581;
	            this.rdfLiteral();
	            break;
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 582;
	            this.numericLiteral();
	            break;
	        case 37:
	        case 38:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 583;
	            this.booleanLiteral();
	            break;
	        case 44:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 584;
	            this.match(SparqlQueryParser.UNDEF);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	minusGraphPattern() {
	    let localctx = new MinusGraphPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, SparqlQueryParser.RULE_minusGraphPattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 587;
	        this.match(SparqlQueryParser.MINUS);
	        this.state = 588;
	        this.groupGraphPattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupOrUnionGraphPattern() {
	    let localctx = new GroupOrUnionGraphPatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, SparqlQueryParser.RULE_groupOrUnionGraphPattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 590;
	        this.groupGraphPattern();
	        this.state = 595;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===22) {
	            this.state = 591;
	            this.match(SparqlQueryParser.UNION);
	            this.state = 592;
	            this.groupGraphPattern();
	            this.state = 597;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	filter() {
	    let localctx = new FilterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, SparqlQueryParser.RULE_filter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 598;
	        this.match(SparqlQueryParser.FILTER);
	        this.state = 599;
	        this.constraint();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constraint() {
	    let localctx = new ConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, SparqlQueryParser.RULE_constraint);
	    try {
	        this.state = 607;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 136:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 601;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 602;
	            this.expression();
	            this.state = 603;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 25:
	        case 26:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 98:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 605;
	            this.builtInCall();
	            break;
	        case 108:
	        case 109:
	        case 110:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 606;
	            this.functionCall();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionCall() {
	    let localctx = new FunctionCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, SparqlQueryParser.RULE_functionCall);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 609;
	        this.iri();
	        this.state = 610;
	        this.argList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argList() {
	    let localctx = new ArgListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, SparqlQueryParser.RULE_argList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 612;
	        this.match(SparqlQueryParser.OPEN_BRACE);
	        this.state = 618;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 5:
	        case 25:
	        case 26:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 98:
	        case 108:
	        case 109:
	        case 110:
	        case 112:
	        case 113:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 136:
	        case 144:
	        case 145:
	        case 149:
	            this.state = 614;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5) {
	                this.state = 613;
	                this.match(SparqlQueryParser.DISTINCT);
	            }

	            this.state = 616;
	            this.expressionList();
	            break;
	        case 137:
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 620;
	        this.match(SparqlQueryParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expressionList() {
	    let localctx = new ExpressionListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, SparqlQueryParser.RULE_expressionList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 622;
	        this.expression();
	        this.state = 627;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===148) {
	            this.state = 623;
	            this.match(SparqlQueryParser.COMMA);
	            this.state = 624;
	            this.expression();
	            this.state = 629;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructTemplate() {
	    let localctx = new ConstructTemplateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, SparqlQueryParser.RULE_constructTemplate);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 630;
	        this.match(SparqlQueryParser.OPEN_CURLY_BRACE);
	        this.state = 632;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===37 || _la===38 || ((((_la - 108)) & ~0x1f) === 0 && ((1 << (_la - 108)) & 269483967) !== 0) || _la===140) {
	            this.state = 631;
	            this.constructTriples();
	        }

	        this.state = 634;
	        this.match(SparqlQueryParser.CLOSE_CURLY_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constructTriples() {
	    let localctx = new ConstructTriplesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, SparqlQueryParser.RULE_constructTriples);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 636;
	        this.triplesSameSubject();
	        this.state = 643;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,58,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 637;
	                this.match(SparqlQueryParser.DOT);
	                this.state = 639;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===37 || _la===38 || ((((_la - 108)) & ~0x1f) === 0 && ((1 << (_la - 108)) & 269483967) !== 0) || _la===140) {
	                    this.state = 638;
	                    this.constructTriples();
	                }
	         
	            }
	            this.state = 645;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,58,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	triplesSameSubject() {
	    let localctx = new TriplesSameSubjectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, SparqlQueryParser.RULE_triplesSameSubject);
	    try {
	        this.state = 652;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 646;
	            this.varOrTerm();
	            this.state = 647;
	            this.propertyListNotEmpty();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 649;
	            this.triplesNode();
	            this.state = 650;
	            this.propertyList();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyList() {
	    let localctx = new PropertyListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, SparqlQueryParser.RULE_propertyList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 655;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24 || ((((_la - 108)) & ~0x1f) === 0 && ((1 << (_la - 108)) & 55) !== 0)) {
	            this.state = 654;
	            this.propertyListNotEmpty();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyListNotEmpty() {
	    let localctx = new PropertyListNotEmptyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, SparqlQueryParser.RULE_propertyListNotEmpty);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 657;
	        this.verb();
	        this.state = 658;
	        this.objectList();
	        this.state = 667;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===142) {
	            this.state = 659;
	            this.match(SparqlQueryParser.SEMICOLON);
	            this.state = 663;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===24 || ((((_la - 108)) & ~0x1f) === 0 && ((1 << (_la - 108)) & 55) !== 0)) {
	                this.state = 660;
	                this.verb();
	                this.state = 661;
	                this.objectList();
	            }

	            this.state = 669;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	verb() {
	    let localctx = new VerbContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, SparqlQueryParser.RULE_verb);
	    try {
	        this.state = 672;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 108:
	        case 109:
	        case 110:
	        case 112:
	        case 113:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 670;
	            this.varOrIRI();
	            break;
	        case 24:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 671;
	            this.match(SparqlQueryParser.A);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	objectList() {
	    let localctx = new ObjectListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, SparqlQueryParser.RULE_objectList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 674;
	        this.object();
	        this.state = 679;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===148) {
	            this.state = 675;
	            this.match(SparqlQueryParser.COMMA);
	            this.state = 676;
	            this.object();
	            this.state = 681;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	object() {
	    let localctx = new ObjectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, SparqlQueryParser.RULE_object);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 682;
	        this.graphNode();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	triplesSameSubjectPath() {
	    let localctx = new TriplesSameSubjectPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, SparqlQueryParser.RULE_triplesSameSubjectPath);
	    try {
	        this.state = 690;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 684;
	            this.varOrTerm();
	            this.state = 685;
	            this.propertyListPathNotEmpty();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 687;
	            this.triplesNodePath();
	            this.state = 688;
	            this.propertyListPath();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyListPath() {
	    let localctx = new PropertyListPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, SparqlQueryParser.RULE_propertyListPath);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 693;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===24 || _la===40 || ((((_la - 100)) & ~0x1f) === 0 && ((1 << (_la - 100)) & 14081) !== 0) || ((((_la - 135)) & ~0x1f) === 0 && ((1 << (_la - 135)) & 16387) !== 0)) {
	            this.state = 692;
	            this.propertyListPathNotEmpty();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyListPathNotEmpty() {
	    let localctx = new PropertyListPathNotEmptyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, SparqlQueryParser.RULE_propertyListPathNotEmpty);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 697;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 24:
	        case 40:
	        case 100:
	        case 108:
	        case 109:
	        case 110:
	        case 135:
	        case 136:
	        case 149:
	            this.state = 695;
	            this.verbPath();
	            break;
	        case 112:
	        case 113:
	            this.state = 696;
	            this.verbSimple();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 699;
	        this.objectListPath();
	        this.state = 706;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===142) {
	            this.state = 700;
	            this.match(SparqlQueryParser.SEMICOLON);
	            this.state = 702;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===24 || _la===40 || ((((_la - 100)) & ~0x1f) === 0 && ((1 << (_la - 100)) & 14081) !== 0) || ((((_la - 135)) & ~0x1f) === 0 && ((1 << (_la - 135)) & 16387) !== 0)) {
	                this.state = 701;
	                this.propertyListPathNotEmptyList();
	            }

	            this.state = 708;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	propertyListPathNotEmptyList() {
	    let localctx = new PropertyListPathNotEmptyListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, SparqlQueryParser.RULE_propertyListPathNotEmptyList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 711;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 24:
	        case 40:
	        case 100:
	        case 108:
	        case 109:
	        case 110:
	        case 135:
	        case 136:
	        case 149:
	            this.state = 709;
	            this.verbPath();
	            break;
	        case 112:
	        case 113:
	            this.state = 710;
	            this.verbSimple();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 713;
	        this.objectList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	verbPath() {
	    let localctx = new VerbPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, SparqlQueryParser.RULE_verbPath);
	    var _la = 0;
	    try {
	        this.state = 729;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 24:
	        case 108:
	        case 109:
	        case 110:
	        case 135:
	        case 136:
	        case 149:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 715;
	            this.path();
	            break;
	        case 40:
	        case 100:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 716;
	            _la = this._input.LA(1);
	            if(!(_la===40 || _la===100)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 718;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===101) {
	                this.state = 717;
	                this.match(SparqlQueryParser.SHORTEST);
	            }

	            this.state = 721;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 7) !== 0)) {
	                this.state = 720;
	                _la = this._input.LA(1);
	                if(!(((((_la - 102)) & ~0x1f) === 0 && ((1 << (_la - 102)) & 7) !== 0))) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 723;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 724;
	            this.path();
	            this.state = 725;
	            this.match(SparqlQueryParser.AS);
	            this.state = 726;
	            this.var_();
	            this.state = 727;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	verbSimple() {
	    let localctx = new VerbSimpleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, SparqlQueryParser.RULE_verbSimple);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 731;
	        this.var_();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	objectListPath() {
	    let localctx = new ObjectListPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, SparqlQueryParser.RULE_objectListPath);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 733;
	        this.objectPath();
	        this.state = 738;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===148) {
	            this.state = 734;
	            this.match(SparqlQueryParser.COMMA);
	            this.state = 735;
	            this.objectPath();
	            this.state = 740;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	objectPath() {
	    let localctx = new ObjectPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, SparqlQueryParser.RULE_objectPath);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 741;
	        this.graphNodePath();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	path() {
	    let localctx = new PathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, SparqlQueryParser.RULE_path);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 743;
	        this.pathAlternative();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathAlternative() {
	    let localctx = new PathAlternativeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, SparqlQueryParser.RULE_pathAlternative);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 745;
	        this.pathSequence();
	        this.state = 750;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===154) {
	            this.state = 746;
	            this.match(SparqlQueryParser.PIPE);
	            this.state = 747;
	            this.pathSequence();
	            this.state = 752;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathSequence() {
	    let localctx = new PathSequenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, SparqlQueryParser.RULE_pathSequence);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 753;
	        this.pathEltOrInverse();
	        this.state = 758;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===150) {
	            this.state = 754;
	            this.match(SparqlQueryParser.DIVIDE);
	            this.state = 755;
	            this.pathEltOrInverse();
	            this.state = 760;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathElt() {
	    let localctx = new PathEltContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, SparqlQueryParser.RULE_pathElt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 761;
	        this.pathPrimary();
	        this.state = 763;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 138)) & ~0x1f) === 0 && ((1 << (_la - 138)) & 833) !== 0)) {
	            this.state = 762;
	            this.pathMod();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathEltOrInverse() {
	    let localctx = new PathEltOrInverseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, SparqlQueryParser.RULE_pathEltOrInverse);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 766;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===135) {
	            this.state = 765;
	            this.match(SparqlQueryParser.INVERSE);
	        }

	        this.state = 768;
	        this.pathElt();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathMod() {
	    let localctx = new PathModContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, SparqlQueryParser.RULE_pathMod);
	    try {
	        this.state = 777;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 147:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 770;
	            this.match(SparqlQueryParser.QUESTION_MARK);
	            break;
	        case 146:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 771;
	            this.match(SparqlQueryParser.ASTERISK);
	            break;
	        case 144:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 772;
	            this.match(SparqlQueryParser.PLUS_SIGN);
	            break;
	        case 138:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 773;
	            this.match(SparqlQueryParser.OPEN_CURLY_BRACE);
	            this.state = 774;
	            this.pathQuantity();
	            this.state = 775;
	            this.match(SparqlQueryParser.CLOSE_CURLY_BRACE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathQuantity() {
	    let localctx = new PathQuantityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, SparqlQueryParser.RULE_pathQuantity);
	    try {
	        this.state = 783;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 779;
	            this.pathQuantityExact();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 780;
	            this.pathQuantityRange();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 781;
	            this.pathQuantityMin();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 782;
	            this.pathQuantityMax();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathQuantityExact() {
	    let localctx = new PathQuantityExactContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, SparqlQueryParser.RULE_pathQuantityExact);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 785;
	        this.match(SparqlQueryParser.INTEGER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathQuantityRange() {
	    let localctx = new PathQuantityRangeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, SparqlQueryParser.RULE_pathQuantityRange);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 787;
	        localctx.min = this.match(SparqlQueryParser.INTEGER);
	        this.state = 788;
	        this.match(SparqlQueryParser.COMMA);
	        this.state = 789;
	        localctx.max = this.match(SparqlQueryParser.INTEGER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathQuantityMin() {
	    let localctx = new PathQuantityMinContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, SparqlQueryParser.RULE_pathQuantityMin);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 791;
	        localctx.min = this.match(SparqlQueryParser.INTEGER);
	        this.state = 792;
	        this.match(SparqlQueryParser.COMMA);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathQuantityMax() {
	    let localctx = new PathQuantityMaxContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, SparqlQueryParser.RULE_pathQuantityMax);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 794;
	        this.match(SparqlQueryParser.COMMA);
	        this.state = 795;
	        localctx.max = this.match(SparqlQueryParser.INTEGER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathPrimary() {
	    let localctx = new PathPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, SparqlQueryParser.RULE_pathPrimary);
	    try {
	        this.state = 805;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 108:
	        case 109:
	        case 110:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 797;
	            this.iri();
	            break;
	        case 24:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 798;
	            this.match(SparqlQueryParser.A);
	            break;
	        case 149:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 799;
	            this.match(SparqlQueryParser.NEGATION);
	            this.state = 800;
	            this.pathNegatedPropertySet();
	            break;
	        case 136:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 801;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 802;
	            this.path();
	            this.state = 803;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathNegatedPropertySet() {
	    let localctx = new PathNegatedPropertySetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, SparqlQueryParser.RULE_pathNegatedPropertySet);
	    var _la = 0;
	    try {
	        this.state = 820;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 24:
	        case 108:
	        case 109:
	        case 110:
	        case 135:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 807;
	            this.pathOneInPropertySet();
	            break;
	        case 136:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 808;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 817;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===24 || ((((_la - 108)) & ~0x1f) === 0 && ((1 << (_la - 108)) & 134217735) !== 0)) {
	                this.state = 809;
	                this.pathOneInPropertySet();
	                this.state = 814;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===154) {
	                    this.state = 810;
	                    this.match(SparqlQueryParser.PIPE);
	                    this.state = 811;
	                    this.pathOneInPropertySet();
	                    this.state = 816;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 819;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathOneInPropertySet() {
	    let localctx = new PathOneInPropertySetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, SparqlQueryParser.RULE_pathOneInPropertySet);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 823;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===135) {
	            this.state = 822;
	            this.match(SparqlQueryParser.INVERSE);
	        }

	        this.state = 827;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 108:
	        case 109:
	        case 110:
	            this.state = 825;
	            this.iri();
	            break;
	        case 24:
	            this.state = 826;
	            this.match(SparqlQueryParser.A);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	integer() {
	    let localctx = new IntegerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, SparqlQueryParser.RULE_integer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 829;
	        this.match(SparqlQueryParser.INTEGER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	triplesNode() {
	    let localctx = new TriplesNodeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, SparqlQueryParser.RULE_triplesNode);
	    try {
	        this.state = 833;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 136:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 831;
	            this.collection();
	            break;
	        case 140:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 832;
	            this.blankNodePropertyList();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blankNodePropertyList() {
	    let localctx = new BlankNodePropertyListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, SparqlQueryParser.RULE_blankNodePropertyList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 835;
	        this.match(SparqlQueryParser.OPEN_SQUARE_BRACKET);
	        this.state = 836;
	        this.propertyListNotEmpty();
	        this.state = 837;
	        this.match(SparqlQueryParser.CLOSE_SQUARE_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	triplesNodePath() {
	    let localctx = new TriplesNodePathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, SparqlQueryParser.RULE_triplesNodePath);
	    try {
	        this.state = 841;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 136:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 839;
	            this.collectionPath();
	            break;
	        case 140:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 840;
	            this.blankNodePropertyListPath();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blankNodePropertyListPath() {
	    let localctx = new BlankNodePropertyListPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, SparqlQueryParser.RULE_blankNodePropertyListPath);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 843;
	        this.match(SparqlQueryParser.OPEN_SQUARE_BRACKET);
	        this.state = 844;
	        this.propertyListPathNotEmpty();
	        this.state = 845;
	        this.match(SparqlQueryParser.CLOSE_SQUARE_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	collection() {
	    let localctx = new CollectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, SparqlQueryParser.RULE_collection);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 847;
	        this.match(SparqlQueryParser.OPEN_BRACE);
	        this.state = 849; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 848;
	            this.graphNode();
	            this.state = 851; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===37 || _la===38 || ((((_la - 108)) & ~0x1f) === 0 && ((1 << (_la - 108)) & 269483967) !== 0) || _la===140);
	        this.state = 853;
	        this.match(SparqlQueryParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	collectionPath() {
	    let localctx = new CollectionPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, SparqlQueryParser.RULE_collectionPath);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 855;
	        this.match(SparqlQueryParser.OPEN_BRACE);
	        this.state = 857; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 856;
	            this.graphNodePath();
	            this.state = 859; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===37 || _la===38 || ((((_la - 108)) & ~0x1f) === 0 && ((1 << (_la - 108)) & 269483967) !== 0) || _la===140);
	        this.state = 861;
	        this.match(SparqlQueryParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphNode() {
	    let localctx = new GraphNodeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, SparqlQueryParser.RULE_graphNode);
	    try {
	        this.state = 865;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,91,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 863;
	            this.varOrTerm();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 864;
	            this.triplesNode();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphNodePath() {
	    let localctx = new GraphNodePathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, SparqlQueryParser.RULE_graphNodePath);
	    try {
	        this.state = 869;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 867;
	            this.varOrTerm();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 868;
	            this.triplesNodePath();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varOrTerm() {
	    let localctx = new VarOrTermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, SparqlQueryParser.RULE_varOrTerm);
	    try {
	        this.state = 873;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 112:
	        case 113:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 871;
	            this.var_();
	            break;
	        case 37:
	        case 38:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 136:
	        case 140:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 872;
	            this.graphTerm();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varOrIRI() {
	    let localctx = new VarOrIRIContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, SparqlQueryParser.RULE_varOrIRI);
	    try {
	        this.state = 877;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 112:
	        case 113:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 875;
	            this.var_();
	            break;
	        case 108:
	        case 109:
	        case 110:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 876;
	            this.iri();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	var_() {
	    let localctx = new VarContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, SparqlQueryParser.RULE_var);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 879;
	        _la = this._input.LA(1);
	        if(!(_la===112 || _la===113)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	graphTerm() {
	    let localctx = new GraphTermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, SparqlQueryParser.RULE_graphTerm);
	    try {
	        this.state = 887;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 108:
	        case 109:
	        case 110:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 881;
	            this.iri();
	            break;
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 882;
	            this.rdfLiteral();
	            break;
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 883;
	            this.numericLiteral();
	            break;
	        case 37:
	        case 38:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 884;
	            this.booleanLiteral();
	            break;
	        case 111:
	        case 140:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 885;
	            this.blankNode();
	            break;
	        case 136:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 886;
	            this.nil();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nil() {
	    let localctx = new NilContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, SparqlQueryParser.RULE_nil);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 889;
	        this.match(SparqlQueryParser.OPEN_BRACE);
	        this.state = 890;
	        this.match(SparqlQueryParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, SparqlQueryParser.RULE_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 892;
	        this.conditionalOrExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionalOrExpression() {
	    let localctx = new ConditionalOrExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, SparqlQueryParser.RULE_conditionalOrExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 894;
	        this.conditionalAndExpression();
	        this.state = 899;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===134) {
	            this.state = 895;
	            this.match(SparqlQueryParser.OR);
	            this.state = 896;
	            this.conditionalAndExpression();
	            this.state = 901;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionalAndExpression() {
	    let localctx = new ConditionalAndExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, SparqlQueryParser.RULE_conditionalAndExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 902;
	        this.relationalExpression();
	        this.state = 907;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===133) {
	            this.state = 903;
	            this.match(SparqlQueryParser.AND);
	            this.state = 904;
	            this.relationalExpression();
	            this.state = 909;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	relationalExpression() {
	    let localctx = new RelationalExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, SparqlQueryParser.RULE_relationalExpression);
	    var _la = 0;
	    try {
	        this.state = 926;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 910;
	            this.additiveExpression();
	            this.state = 913;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 130)) & ~0x1f) === 0 && ((1 << (_la - 130)) & 14680071) !== 0)) {
	                this.state = 911;
	                localctx.op = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(((((_la - 130)) & ~0x1f) === 0 && ((1 << (_la - 130)) & 14680071) !== 0))) {
	                    localctx.op = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 912;
	                this.additiveExpression();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 915;
	            this.additiveExpression();
	            this.state = 917;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===96) {
	                this.state = 916;
	                this.match(SparqlQueryParser.NOT);
	            }

	            this.state = 919;
	            this.match(SparqlQueryParser.IN);
	            this.state = 920;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 922;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 25)) & ~0x1f) === 0 && ((1 << (_la - 25)) & 4278206463) !== 0) || ((((_la - 57)) & ~0x1f) === 0 && ((1 << (_la - 57)) & 4294967295) !== 0) || ((((_la - 89)) & ~0x1f) === 0 && ((1 << (_la - 89)) & 4256695039) !== 0) || ((((_la - 121)) & ~0x1f) === 0 && ((1 << (_la - 121)) & 293634175) !== 0)) {
	                this.state = 921;
	                this.expressionList();
	            }

	            this.state = 924;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	additiveExpression() {
	    let localctx = new AdditiveExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, SparqlQueryParser.RULE_additiveExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 928;
	        this.multiplicativeExpression();
	        this.state = 932;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 118)) & ~0x1f) === 0 && ((1 << (_la - 118)) & 201326655) !== 0)) {
	            this.state = 929;
	            this.rhsAdditiveExpression();
	            this.state = 934;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rhsAdditiveExpression() {
	    let localctx = new RhsAdditiveExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, SparqlQueryParser.RULE_rhsAdditiveExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 935;
	        this.rhsAdditiveExpressionSub();
	        this.state = 940;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===146 || _la===150) {
	            this.state = 936;
	            localctx._tset1723 = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===146 || _la===150)) {
	                localctx._tset1723 = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            localctx.op.push(localctx._tset1723);
	            this.state = 937;
	            this.unaryExpression();
	            this.state = 942;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rhsAdditiveExpressionSub() {
	    let localctx = new RhsAdditiveExpressionSubContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, SparqlQueryParser.RULE_rhsAdditiveExpressionSub);
	    var _la = 0;
	    try {
	        this.state = 947;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 144:
	        case 145:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 943;
	            _la = this._input.LA(1);
	            if(!(_la===144 || _la===145)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 944;
	            this.multiplicativeExpression();
	            break;
	        case 118:
	        case 119:
	        case 120:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 945;
	            this.numericLiteralPositive();
	            break;
	        case 121:
	        case 122:
	        case 123:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 946;
	            this.numericLiteralNegative();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	multiplicativeExpression() {
	    let localctx = new MultiplicativeExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, SparqlQueryParser.RULE_multiplicativeExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 949;
	        this.unaryExpression();
	        this.state = 954;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,105,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 950;
	                localctx._tset1766 = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===146 || _la===150)) {
	                    localctx._tset1766 = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                localctx.op.push(localctx._tset1766);
	                this.state = 951;
	                this.unaryExpression(); 
	            }
	            this.state = 956;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,105,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unaryExpression() {
	    let localctx = new UnaryExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, SparqlQueryParser.RULE_unaryExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 958;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 144)) & ~0x1f) === 0 && ((1 << (_la - 144)) & 35) !== 0)) {
	            this.state = 957;
	            localctx.op = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 144)) & ~0x1f) === 0 && ((1 << (_la - 144)) & 35) !== 0))) {
	                localctx.op = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 960;
	        this.primaryExpression();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primaryExpression() {
	    let localctx = new PrimaryExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, SparqlQueryParser.RULE_primaryExpression);
	    try {
	        this.state = 972;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 136:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 962;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 963;
	            this.expression();
	            this.state = 964;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 25:
	        case 26:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 34:
	        case 35:
	        case 36:
	        case 49:
	        case 50:
	        case 51:
	        case 52:
	        case 53:
	        case 54:
	        case 55:
	        case 56:
	        case 57:
	        case 58:
	        case 59:
	        case 60:
	        case 61:
	        case 62:
	        case 63:
	        case 64:
	        case 65:
	        case 66:
	        case 67:
	        case 68:
	        case 69:
	        case 70:
	        case 71:
	        case 72:
	        case 73:
	        case 74:
	        case 75:
	        case 76:
	        case 77:
	        case 78:
	        case 79:
	        case 80:
	        case 81:
	        case 82:
	        case 83:
	        case 84:
	        case 85:
	        case 86:
	        case 87:
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 98:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 966;
	            this.builtInCall();
	            break;
	        case 108:
	        case 109:
	        case 110:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 967;
	            this.iriOrFunction();
	            break;
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 968;
	            this.rdfLiteral();
	            break;
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 969;
	            this.numericLiteral();
	            break;
	        case 37:
	        case 38:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 970;
	            this.booleanLiteral();
	            break;
	        case 112:
	        case 113:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 971;
	            this.var_();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	builtInCall() {
	    let localctx = new BuiltInCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, SparqlQueryParser.RULE_builtInCall);
	    var _la = 0;
	    try {
	        this.state = 1242;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 974;
	            this.aggregate();
	            break;
	        case 25:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 975;
	            this.match(SparqlQueryParser.STR);
	            this.state = 976;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 977;
	            this.expression();
	            this.state = 978;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 26:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 980;
	            this.match(SparqlQueryParser.LANG);
	            this.state = 981;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 982;
	            this.expression();
	            this.state = 983;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 27:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 985;
	            this.match(SparqlQueryParser.LANGMATCHES);
	            this.state = 986;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 987;
	            this.expression();
	            this.state = 988;
	            this.match(SparqlQueryParser.COMMA);
	            this.state = 989;
	            this.expression();
	            this.state = 990;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 28:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 992;
	            this.match(SparqlQueryParser.DATATYPE);
	            this.state = 993;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 994;
	            this.expression();
	            this.state = 995;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 29:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 997;
	            this.match(SparqlQueryParser.BOUND);
	            this.state = 998;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 999;
	            this.var_();
	            this.state = 1000;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 49:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1002;
	            this.match(SparqlQueryParser.IRI);
	            this.state = 1003;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1004;
	            this.expression();
	            this.state = 1005;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 50:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1007;
	            this.match(SparqlQueryParser.URI);
	            this.state = 1008;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1009;
	            this.expression();
	            this.state = 1010;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 51:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1012;
	            this.match(SparqlQueryParser.BNODE);
	            this.state = 1013;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1015;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 25)) & ~0x1f) === 0 && ((1 << (_la - 25)) & 4278206463) !== 0) || ((((_la - 57)) & ~0x1f) === 0 && ((1 << (_la - 57)) & 4294967295) !== 0) || ((((_la - 89)) & ~0x1f) === 0 && ((1 << (_la - 89)) & 4256695039) !== 0) || ((((_la - 121)) & ~0x1f) === 0 && ((1 << (_la - 121)) & 293634175) !== 0)) {
	                this.state = 1014;
	                this.expression();
	            }

	            this.state = 1017;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 52:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1018;
	            this.match(SparqlQueryParser.RAND);
	            this.state = 1019;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1020;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 53:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1021;
	            this.match(SparqlQueryParser.ABS);
	            this.state = 1022;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1023;
	            this.expression();
	            this.state = 1024;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 54:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1026;
	            this.match(SparqlQueryParser.CEIL);
	            this.state = 1027;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1028;
	            this.expression();
	            this.state = 1029;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 55:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1031;
	            this.match(SparqlQueryParser.FLOOR);
	            this.state = 1032;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1033;
	            this.expression();
	            this.state = 1034;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 56:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1036;
	            this.match(SparqlQueryParser.ROUND);
	            this.state = 1037;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1038;
	            this.expression();
	            this.state = 1039;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 57:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1041;
	            this.match(SparqlQueryParser.CONCAT);
	            this.state = 1042;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1044;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 25)) & ~0x1f) === 0 && ((1 << (_la - 25)) & 4278206463) !== 0) || ((((_la - 57)) & ~0x1f) === 0 && ((1 << (_la - 57)) & 4294967295) !== 0) || ((((_la - 89)) & ~0x1f) === 0 && ((1 << (_la - 89)) & 4256695039) !== 0) || ((((_la - 121)) & ~0x1f) === 0 && ((1 << (_la - 121)) & 293634175) !== 0)) {
	                this.state = 1043;
	                this.expressionList();
	            }

	            this.state = 1046;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 36:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 1047;
	            this.subStringExpression();
	            break;
	        case 58:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 1048;
	            this.match(SparqlQueryParser.STRLEN);
	            this.state = 1049;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1050;
	            this.expression();
	            this.state = 1051;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 67:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 1053;
	            this.strReplaceExpression();
	            break;
	        case 59:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 1054;
	            this.match(SparqlQueryParser.UCASE);
	            this.state = 1055;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1056;
	            this.expression();
	            this.state = 1057;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 60:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 1059;
	            this.match(SparqlQueryParser.LCASE);
	            this.state = 1060;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1061;
	            this.expression();
	            this.state = 1062;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 61:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 1064;
	            this.match(SparqlQueryParser.ENCODE_FOR_URI);
	            this.state = 1065;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1066;
	            this.expression();
	            this.state = 1067;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 62:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 1069;
	            this.match(SparqlQueryParser.CONTAINS);
	            this.state = 1070;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1071;
	            this.expression();
	            this.state = 1072;
	            this.match(SparqlQueryParser.COMMA);
	            this.state = 1073;
	            this.expression();
	            this.state = 1074;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 63:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 1076;
	            this.match(SparqlQueryParser.STRSTARTS);
	            this.state = 1077;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1078;
	            this.expression();
	            this.state = 1079;
	            this.match(SparqlQueryParser.COMMA);
	            this.state = 1080;
	            this.expression();
	            this.state = 1081;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 64:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 1083;
	            this.match(SparqlQueryParser.STRENDS);
	            this.state = 1084;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1085;
	            this.expression();
	            this.state = 1086;
	            this.match(SparqlQueryParser.COMMA);
	            this.state = 1087;
	            this.expression();
	            this.state = 1088;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 65:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 1090;
	            this.match(SparqlQueryParser.STRBEFORE);
	            this.state = 1091;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1092;
	            this.expression();
	            this.state = 1093;
	            this.match(SparqlQueryParser.COMMA);
	            this.state = 1094;
	            this.expression();
	            this.state = 1095;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 66:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 1097;
	            this.match(SparqlQueryParser.STRAFTER);
	            this.state = 1098;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1099;
	            this.expression();
	            this.state = 1100;
	            this.match(SparqlQueryParser.COMMA);
	            this.state = 1101;
	            this.expression();
	            this.state = 1102;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 68:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 1104;
	            this.match(SparqlQueryParser.YEAR);
	            this.state = 1105;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1106;
	            this.expression();
	            this.state = 1107;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 69:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 1109;
	            this.match(SparqlQueryParser.MONTH);
	            this.state = 1110;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1111;
	            this.expression();
	            this.state = 1112;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 70:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 1114;
	            this.match(SparqlQueryParser.DAY);
	            this.state = 1115;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1116;
	            this.expression();
	            this.state = 1117;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 71:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 1119;
	            this.match(SparqlQueryParser.HOURS);
	            this.state = 1120;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1121;
	            this.expression();
	            this.state = 1122;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 72:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 1124;
	            this.match(SparqlQueryParser.MINUTES);
	            this.state = 1125;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1126;
	            this.expression();
	            this.state = 1127;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 73:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 1129;
	            this.match(SparqlQueryParser.SECONDS);
	            this.state = 1130;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1131;
	            this.expression();
	            this.state = 1132;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 74:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 1134;
	            this.match(SparqlQueryParser.TIMEZONE);
	            this.state = 1135;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1136;
	            this.expression();
	            this.state = 1137;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 75:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 1139;
	            this.match(SparqlQueryParser.TZ);
	            this.state = 1140;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1141;
	            this.expression();
	            this.state = 1142;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 76:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 1144;
	            this.match(SparqlQueryParser.NOW);
	            this.state = 1145;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1146;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 77:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 1147;
	            this.match(SparqlQueryParser.UUID);
	            this.state = 1148;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1149;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 78:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 1150;
	            this.match(SparqlQueryParser.STRUUID);
	            this.state = 1151;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1152;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 79:
	            this.enterOuterAlt(localctx, 38);
	            this.state = 1153;
	            this.match(SparqlQueryParser.MD5);
	            this.state = 1154;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1155;
	            this.expression();
	            this.state = 1156;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 80:
	            this.enterOuterAlt(localctx, 39);
	            this.state = 1158;
	            this.match(SparqlQueryParser.SHA1);
	            this.state = 1159;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1160;
	            this.expression();
	            this.state = 1161;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 81:
	            this.enterOuterAlt(localctx, 40);
	            this.state = 1163;
	            this.match(SparqlQueryParser.SHA256);
	            this.state = 1164;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1165;
	            this.expression();
	            this.state = 1166;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 82:
	            this.enterOuterAlt(localctx, 41);
	            this.state = 1168;
	            this.match(SparqlQueryParser.SHA384);
	            this.state = 1169;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1170;
	            this.expression();
	            this.state = 1171;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 83:
	            this.enterOuterAlt(localctx, 42);
	            this.state = 1173;
	            this.match(SparqlQueryParser.SHA512);
	            this.state = 1174;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1175;
	            this.expression();
	            this.state = 1176;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 84:
	            this.enterOuterAlt(localctx, 43);
	            this.state = 1178;
	            this.match(SparqlQueryParser.COALESCE);
	            this.state = 1179;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1181;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 25)) & ~0x1f) === 0 && ((1 << (_la - 25)) & 4278206463) !== 0) || ((((_la - 57)) & ~0x1f) === 0 && ((1 << (_la - 57)) & 4294967295) !== 0) || ((((_la - 89)) & ~0x1f) === 0 && ((1 << (_la - 89)) & 4256695039) !== 0) || ((((_la - 121)) & ~0x1f) === 0 && ((1 << (_la - 121)) & 293634175) !== 0)) {
	                this.state = 1180;
	                this.expressionList();
	            }

	            this.state = 1183;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 85:
	            this.enterOuterAlt(localctx, 44);
	            this.state = 1184;
	            this.match(SparqlQueryParser.IF);
	            this.state = 1185;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1186;
	            this.expression();
	            this.state = 1187;
	            this.match(SparqlQueryParser.COMMA);
	            this.state = 1188;
	            this.expression();
	            this.state = 1189;
	            this.match(SparqlQueryParser.COMMA);
	            this.state = 1190;
	            this.expression();
	            this.state = 1191;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 86:
	            this.enterOuterAlt(localctx, 45);
	            this.state = 1193;
	            this.match(SparqlQueryParser.STRLANG);
	            this.state = 1194;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1195;
	            this.expression();
	            this.state = 1196;
	            this.match(SparqlQueryParser.COMMA);
	            this.state = 1197;
	            this.expression();
	            this.state = 1198;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 87:
	            this.enterOuterAlt(localctx, 46);
	            this.state = 1200;
	            this.match(SparqlQueryParser.STRDT);
	            this.state = 1201;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1202;
	            this.expression();
	            this.state = 1203;
	            this.match(SparqlQueryParser.COMMA);
	            this.state = 1204;
	            this.expression();
	            this.state = 1205;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 30:
	            this.enterOuterAlt(localctx, 47);
	            this.state = 1207;
	            this.match(SparqlQueryParser.SAMETERM);
	            this.state = 1208;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1209;
	            this.expression();
	            this.state = 1210;
	            this.match(SparqlQueryParser.COMMA);
	            this.state = 1211;
	            this.expression();
	            this.state = 1212;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 31:
	            this.enterOuterAlt(localctx, 48);
	            this.state = 1214;
	            this.match(SparqlQueryParser.ISIRI);
	            this.state = 1215;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1216;
	            this.expression();
	            this.state = 1217;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 32:
	            this.enterOuterAlt(localctx, 49);
	            this.state = 1219;
	            this.match(SparqlQueryParser.ISURI);
	            this.state = 1220;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1221;
	            this.expression();
	            this.state = 1222;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 33:
	            this.enterOuterAlt(localctx, 50);
	            this.state = 1224;
	            this.match(SparqlQueryParser.ISBLANK);
	            this.state = 1225;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1226;
	            this.expression();
	            this.state = 1227;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 34:
	            this.enterOuterAlt(localctx, 51);
	            this.state = 1229;
	            this.match(SparqlQueryParser.ISLITERAL);
	            this.state = 1230;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1231;
	            this.expression();
	            this.state = 1232;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 88:
	            this.enterOuterAlt(localctx, 52);
	            this.state = 1234;
	            this.match(SparqlQueryParser.ISNUMERIC);
	            this.state = 1235;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1236;
	            this.expression();
	            this.state = 1237;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 35:
	            this.enterOuterAlt(localctx, 53);
	            this.state = 1239;
	            this.regexExpression();
	            break;
	        case 98:
	            this.enterOuterAlt(localctx, 54);
	            this.state = 1240;
	            this.existsFunction();
	            break;
	        case 96:
	            this.enterOuterAlt(localctx, 55);
	            this.state = 1241;
	            this.notExistsFunction();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedure() {
	    let localctx = new ProcedureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, SparqlQueryParser.RULE_procedure);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1244;
	        this.match(SparqlQueryParser.ALPHANUMERIC_IDENTIFIER);
	        this.state = 1245;
	        this.match(SparqlQueryParser.OPEN_BRACE);
	        this.state = 1247;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 25)) & ~0x1f) === 0 && ((1 << (_la - 25)) & 4278206463) !== 0) || ((((_la - 57)) & ~0x1f) === 0 && ((1 << (_la - 57)) & 4294967295) !== 0) || ((((_la - 89)) & ~0x1f) === 0 && ((1 << (_la - 89)) & 4256695039) !== 0) || ((((_la - 121)) & ~0x1f) === 0 && ((1 << (_la - 121)) & 293634175) !== 0)) {
	            this.state = 1246;
	            this.procedureArguments();
	        }

	        this.state = 1249;
	        this.match(SparqlQueryParser.CLOSE_BRACE);
	        this.state = 1250;
	        this.match(SparqlQueryParser.AS);
	        this.state = 1251;
	        this.procedureBindings();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureArguments() {
	    let localctx = new ProcedureArgumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, SparqlQueryParser.RULE_procedureArguments);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1253;
	        this.expression();
	        this.state = 1258;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===148) {
	            this.state = 1254;
	            this.match(SparqlQueryParser.COMMA);
	            this.state = 1255;
	            this.expression();
	            this.state = 1260;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureBindings() {
	    let localctx = new ProcedureBindingsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, SparqlQueryParser.RULE_procedureBindings);
	    var _la = 0;
	    try {
	        this.state = 1273;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 112:
	        case 113:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1261;
	            this.var_();
	            break;
	        case 136:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1262;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1263;
	            this.var_();
	            this.state = 1268;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===148) {
	                this.state = 1264;
	                this.match(SparqlQueryParser.COMMA);
	                this.state = 1265;
	                this.var_();
	                this.state = 1270;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1271;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	regexExpression() {
	    let localctx = new RegexExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, SparqlQueryParser.RULE_regexExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1275;
	        this.match(SparqlQueryParser.REGEX);
	        this.state = 1276;
	        this.match(SparqlQueryParser.OPEN_BRACE);
	        this.state = 1277;
	        this.expression();
	        this.state = 1278;
	        this.match(SparqlQueryParser.COMMA);
	        this.state = 1279;
	        this.expression();
	        this.state = 1282;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===148) {
	            this.state = 1280;
	            this.match(SparqlQueryParser.COMMA);
	            this.state = 1281;
	            this.expression();
	        }

	        this.state = 1284;
	        this.match(SparqlQueryParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subStringExpression() {
	    let localctx = new SubStringExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, SparqlQueryParser.RULE_subStringExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1286;
	        this.match(SparqlQueryParser.SUBSTR);
	        this.state = 1287;
	        this.match(SparqlQueryParser.OPEN_BRACE);
	        this.state = 1288;
	        this.expression();
	        this.state = 1289;
	        this.match(SparqlQueryParser.COMMA);
	        this.state = 1290;
	        this.expression();
	        this.state = 1293;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===148) {
	            this.state = 1291;
	            this.match(SparqlQueryParser.COMMA);
	            this.state = 1292;
	            this.expression();
	        }

	        this.state = 1295;
	        this.match(SparqlQueryParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	strReplaceExpression() {
	    let localctx = new StrReplaceExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, SparqlQueryParser.RULE_strReplaceExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1297;
	        this.match(SparqlQueryParser.REPLACE);
	        this.state = 1298;
	        this.match(SparqlQueryParser.OPEN_BRACE);
	        this.state = 1299;
	        this.expression();
	        this.state = 1300;
	        this.match(SparqlQueryParser.COMMA);
	        this.state = 1301;
	        this.expression();
	        this.state = 1302;
	        this.match(SparqlQueryParser.COMMA);
	        this.state = 1303;
	        this.expression();
	        this.state = 1306;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===148) {
	            this.state = 1304;
	            this.match(SparqlQueryParser.COMMA);
	            this.state = 1305;
	            this.expression();
	        }

	        this.state = 1308;
	        this.match(SparqlQueryParser.CLOSE_BRACE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	existsFunction() {
	    let localctx = new ExistsFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, SparqlQueryParser.RULE_existsFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1310;
	        this.match(SparqlQueryParser.EXISTS);
	        this.state = 1311;
	        this.groupGraphPattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	notExistsFunction() {
	    let localctx = new NotExistsFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, SparqlQueryParser.RULE_notExistsFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1313;
	        this.match(SparqlQueryParser.NOT);
	        this.state = 1314;
	        this.match(SparqlQueryParser.EXISTS);
	        this.state = 1315;
	        this.groupGraphPattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aggregate() {
	    let localctx = new AggregateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, SparqlQueryParser.RULE_aggregate);
	    var _la = 0;
	    try {
	        this.state = 1381;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 89:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1317;
	            this.match(SparqlQueryParser.COUNT);
	            this.state = 1318;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1320;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5) {
	                this.state = 1319;
	                this.match(SparqlQueryParser.DISTINCT);
	            }

	            this.state = 1324;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 146:
	                this.state = 1322;
	                this.match(SparqlQueryParser.ASTERISK);
	                break;
	            case 25:
	            case 26:
	            case 27:
	            case 28:
	            case 29:
	            case 30:
	            case 31:
	            case 32:
	            case 33:
	            case 34:
	            case 35:
	            case 36:
	            case 37:
	            case 38:
	            case 49:
	            case 50:
	            case 51:
	            case 52:
	            case 53:
	            case 54:
	            case 55:
	            case 56:
	            case 57:
	            case 58:
	            case 59:
	            case 60:
	            case 61:
	            case 62:
	            case 63:
	            case 64:
	            case 65:
	            case 66:
	            case 67:
	            case 68:
	            case 69:
	            case 70:
	            case 71:
	            case 72:
	            case 73:
	            case 74:
	            case 75:
	            case 76:
	            case 77:
	            case 78:
	            case 79:
	            case 80:
	            case 81:
	            case 82:
	            case 83:
	            case 84:
	            case 85:
	            case 86:
	            case 87:
	            case 88:
	            case 89:
	            case 90:
	            case 91:
	            case 92:
	            case 93:
	            case 94:
	            case 95:
	            case 96:
	            case 98:
	            case 108:
	            case 109:
	            case 110:
	            case 112:
	            case 113:
	            case 115:
	            case 116:
	            case 117:
	            case 118:
	            case 119:
	            case 120:
	            case 121:
	            case 122:
	            case 123:
	            case 124:
	            case 125:
	            case 126:
	            case 127:
	            case 136:
	            case 144:
	            case 145:
	            case 149:
	                this.state = 1323;
	                this.expression();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1326;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 90:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1327;
	            this.match(SparqlQueryParser.SUM);
	            this.state = 1328;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1330;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5) {
	                this.state = 1329;
	                this.match(SparqlQueryParser.DISTINCT);
	            }

	            this.state = 1332;
	            this.expression();
	            this.state = 1333;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 91:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1335;
	            this.match(SparqlQueryParser.MIN);
	            this.state = 1336;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1338;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5) {
	                this.state = 1337;
	                this.match(SparqlQueryParser.DISTINCT);
	            }

	            this.state = 1340;
	            this.expression();
	            this.state = 1341;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 92:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1343;
	            this.match(SparqlQueryParser.MAX);
	            this.state = 1344;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1346;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5) {
	                this.state = 1345;
	                this.match(SparqlQueryParser.DISTINCT);
	            }

	            this.state = 1348;
	            this.expression();
	            this.state = 1349;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 93:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1351;
	            this.match(SparqlQueryParser.AVG);
	            this.state = 1352;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1354;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5) {
	                this.state = 1353;
	                this.match(SparqlQueryParser.DISTINCT);
	            }

	            this.state = 1356;
	            this.expression();
	            this.state = 1357;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 94:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1359;
	            this.match(SparqlQueryParser.SAMPLE);
	            this.state = 1360;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1362;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5) {
	                this.state = 1361;
	                this.match(SparqlQueryParser.DISTINCT);
	            }

	            this.state = 1364;
	            this.expression();
	            this.state = 1365;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        case 95:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1367;
	            this.match(SparqlQueryParser.GROUP_CONCAT);
	            this.state = 1368;
	            this.match(SparqlQueryParser.OPEN_BRACE);
	            this.state = 1370;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===5) {
	                this.state = 1369;
	                this.match(SparqlQueryParser.DISTINCT);
	            }

	            this.state = 1372;
	            this.expression();
	            this.state = 1377;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===142) {
	                this.state = 1373;
	                this.match(SparqlQueryParser.SEMICOLON);
	                this.state = 1374;
	                this.match(SparqlQueryParser.SEPARATOR);
	                this.state = 1375;
	                this.match(SparqlQueryParser.EQUAL);
	                this.state = 1376;
	                this.string();
	            }

	            this.state = 1379;
	            this.match(SparqlQueryParser.CLOSE_BRACE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iriOrFunction() {
	    let localctx = new IriOrFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, SparqlQueryParser.RULE_iriOrFunction);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1383;
	        this.iri();
	        this.state = 1385;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===136) {
	            this.state = 1384;
	            this.argList();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rdfLiteral() {
	    let localctx = new RdfLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, SparqlQueryParser.RULE_rdfLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1387;
	        this.string();
	        this.state = 1391;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 114:
	        	this.state = 1388;
	        	this.match(SparqlQueryParser.LANGTAG);
	        	break;
	        case 129:
	        	this.state = 1389;
	        	this.match(SparqlQueryParser.REFERENCE);
	        	this.state = 1390;
	        	this.iri();
	        	break;
	        case 19:
	        case 20:
	        case 21:
	        case 23:
	        case 24:
	        case 37:
	        case 38:
	        case 40:
	        case 41:
	        case 44:
	        case 46:
	        case 47:
	        case 48:
	        case 96:
	        case 97:
	        case 100:
	        case 107:
	        case 108:
	        case 109:
	        case 110:
	        case 111:
	        case 112:
	        case 113:
	        case 115:
	        case 116:
	        case 117:
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 122:
	        case 123:
	        case 124:
	        case 125:
	        case 126:
	        case 127:
	        case 130:
	        case 131:
	        case 132:
	        case 133:
	        case 134:
	        case 135:
	        case 136:
	        case 137:
	        case 138:
	        case 139:
	        case 140:
	        case 141:
	        case 142:
	        case 143:
	        case 144:
	        case 145:
	        case 146:
	        case 148:
	        case 149:
	        case 150:
	        case 151:
	        case 152:
	        case 153:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericLiteral() {
	    let localctx = new NumericLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, SparqlQueryParser.RULE_numericLiteral);
	    try {
	        this.state = 1396;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 115:
	        case 116:
	        case 117:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1393;
	            this.numericLiteralUnsigned();
	            break;
	        case 118:
	        case 119:
	        case 120:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1394;
	            this.numericLiteralPositive();
	            break;
	        case 121:
	        case 122:
	        case 123:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1395;
	            this.numericLiteralNegative();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericLiteralUnsigned() {
	    let localctx = new NumericLiteralUnsignedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, SparqlQueryParser.RULE_numericLiteralUnsigned);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1398;
	        _la = this._input.LA(1);
	        if(!(((((_la - 115)) & ~0x1f) === 0 && ((1 << (_la - 115)) & 7) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericLiteralPositive() {
	    let localctx = new NumericLiteralPositiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, SparqlQueryParser.RULE_numericLiteralPositive);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1400;
	        _la = this._input.LA(1);
	        if(!(((((_la - 118)) & ~0x1f) === 0 && ((1 << (_la - 118)) & 7) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numericLiteralNegative() {
	    let localctx = new NumericLiteralNegativeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, SparqlQueryParser.RULE_numericLiteralNegative);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1402;
	        _la = this._input.LA(1);
	        if(!(((((_la - 121)) & ~0x1f) === 0 && ((1 << (_la - 121)) & 7) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	booleanLiteral() {
	    let localctx = new BooleanLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, SparqlQueryParser.RULE_booleanLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1404;
	        _la = this._input.LA(1);
	        if(!(_la===37 || _la===38)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	string() {
	    let localctx = new StringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, SparqlQueryParser.RULE_string);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1406;
	        _la = this._input.LA(1);
	        if(!(((((_la - 124)) & ~0x1f) === 0 && ((1 << (_la - 124)) & 15) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iri() {
	    let localctx = new IriContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, SparqlQueryParser.RULE_iri);
	    try {
	        this.state = 1410;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 108:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1408;
	            this.match(SparqlQueryParser.IRIREF);
	            break;
	        case 109:
	        case 110:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1409;
	            this.prefixedName();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prefixedName() {
	    let localctx = new PrefixedNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, SparqlQueryParser.RULE_prefixedName);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1412;
	        _la = this._input.LA(1);
	        if(!(_la===109 || _la===110)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	blankNode() {
	    let localctx = new BlankNodeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, SparqlQueryParser.RULE_blankNode);
	    try {
	        this.state = 1416;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 111:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1414;
	            this.match(SparqlQueryParser.BLANK_NODE_LABEL);
	            break;
	        case 140:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1415;
	            this.anon();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	anon() {
	    let localctx = new AnonContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, SparqlQueryParser.RULE_anon);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1418;
	        this.match(SparqlQueryParser.OPEN_SQUARE_BRACKET);
	        this.state = 1419;
	        this.match(SparqlQueryParser.CLOSE_SQUARE_BRACKET);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

SparqlQueryParser.EOF = antlr4.Token.EOF;
SparqlQueryParser.WS = 1;
SparqlQueryParser.BASE = 2;
SparqlQueryParser.PREFIX = 3;
SparqlQueryParser.SELECT = 4;
SparqlQueryParser.DISTINCT = 5;
SparqlQueryParser.REDUCED = 6;
SparqlQueryParser.CONSTRUCT = 7;
SparqlQueryParser.DESCRIBE = 8;
SparqlQueryParser.ASK = 9;
SparqlQueryParser.FROM = 10;
SparqlQueryParser.NAMED = 11;
SparqlQueryParser.WHERE = 12;
SparqlQueryParser.ORDER = 13;
SparqlQueryParser.BY = 14;
SparqlQueryParser.ASC = 15;
SparqlQueryParser.DESC = 16;
SparqlQueryParser.LIMIT = 17;
SparqlQueryParser.OFFSET = 18;
SparqlQueryParser.VALUES = 19;
SparqlQueryParser.OPTIONAL = 20;
SparqlQueryParser.GRAPH = 21;
SparqlQueryParser.UNION = 22;
SparqlQueryParser.FILTER = 23;
SparqlQueryParser.A = 24;
SparqlQueryParser.STR = 25;
SparqlQueryParser.LANG = 26;
SparqlQueryParser.LANGMATCHES = 27;
SparqlQueryParser.DATATYPE = 28;
SparqlQueryParser.BOUND = 29;
SparqlQueryParser.SAMETERM = 30;
SparqlQueryParser.ISIRI = 31;
SparqlQueryParser.ISURI = 32;
SparqlQueryParser.ISBLANK = 33;
SparqlQueryParser.ISLITERAL = 34;
SparqlQueryParser.REGEX = 35;
SparqlQueryParser.SUBSTR = 36;
SparqlQueryParser.K_TRUE = 37;
SparqlQueryParser.K_FALSE = 38;
SparqlQueryParser.SILENT = 39;
SparqlQueryParser.ALL = 40;
SparqlQueryParser.AS = 41;
SparqlQueryParser.GROUP = 42;
SparqlQueryParser.HAVING = 43;
SparqlQueryParser.UNDEF = 44;
SparqlQueryParser.BINDINGS = 45;
SparqlQueryParser.SERVICE = 46;
SparqlQueryParser.BIND = 47;
SparqlQueryParser.MINUS = 48;
SparqlQueryParser.IRI = 49;
SparqlQueryParser.URI = 50;
SparqlQueryParser.BNODE = 51;
SparqlQueryParser.RAND = 52;
SparqlQueryParser.ABS = 53;
SparqlQueryParser.CEIL = 54;
SparqlQueryParser.FLOOR = 55;
SparqlQueryParser.ROUND = 56;
SparqlQueryParser.CONCAT = 57;
SparqlQueryParser.STRLEN = 58;
SparqlQueryParser.UCASE = 59;
SparqlQueryParser.LCASE = 60;
SparqlQueryParser.ENCODE_FOR_URI = 61;
SparqlQueryParser.CONTAINS = 62;
SparqlQueryParser.STRSTARTS = 63;
SparqlQueryParser.STRENDS = 64;
SparqlQueryParser.STRBEFORE = 65;
SparqlQueryParser.STRAFTER = 66;
SparqlQueryParser.REPLACE = 67;
SparqlQueryParser.YEAR = 68;
SparqlQueryParser.MONTH = 69;
SparqlQueryParser.DAY = 70;
SparqlQueryParser.HOURS = 71;
SparqlQueryParser.MINUTES = 72;
SparqlQueryParser.SECONDS = 73;
SparqlQueryParser.TIMEZONE = 74;
SparqlQueryParser.TZ = 75;
SparqlQueryParser.NOW = 76;
SparqlQueryParser.UUID = 77;
SparqlQueryParser.STRUUID = 78;
SparqlQueryParser.MD5 = 79;
SparqlQueryParser.SHA1 = 80;
SparqlQueryParser.SHA256 = 81;
SparqlQueryParser.SHA384 = 82;
SparqlQueryParser.SHA512 = 83;
SparqlQueryParser.COALESCE = 84;
SparqlQueryParser.IF = 85;
SparqlQueryParser.STRLANG = 86;
SparqlQueryParser.STRDT = 87;
SparqlQueryParser.ISNUMERIC = 88;
SparqlQueryParser.COUNT = 89;
SparqlQueryParser.SUM = 90;
SparqlQueryParser.MIN = 91;
SparqlQueryParser.MAX = 92;
SparqlQueryParser.AVG = 93;
SparqlQueryParser.SAMPLE = 94;
SparqlQueryParser.GROUP_CONCAT = 95;
SparqlQueryParser.NOT = 96;
SparqlQueryParser.IN = 97;
SparqlQueryParser.EXISTS = 98;
SparqlQueryParser.SEPARATOR = 99;
SparqlQueryParser.ANY = 100;
SparqlQueryParser.SHORTEST = 101;
SparqlQueryParser.SIMPLE = 102;
SparqlQueryParser.ACYCLIC = 103;
SparqlQueryParser.WALKS = 104;
SparqlQueryParser.SHOW = 105;
SparqlQueryParser.INDEX = 106;
SparqlQueryParser.ALPHANUMERIC_IDENTIFIER = 107;
SparqlQueryParser.IRIREF = 108;
SparqlQueryParser.PNAME_NS = 109;
SparqlQueryParser.PNAME_LN = 110;
SparqlQueryParser.BLANK_NODE_LABEL = 111;
SparqlQueryParser.VAR1 = 112;
SparqlQueryParser.VAR2 = 113;
SparqlQueryParser.LANGTAG = 114;
SparqlQueryParser.INTEGER = 115;
SparqlQueryParser.DECIMAL = 116;
SparqlQueryParser.DOUBLE = 117;
SparqlQueryParser.INTEGER_POSITIVE = 118;
SparqlQueryParser.DECIMAL_POSITIVE = 119;
SparqlQueryParser.DOUBLE_POSITIVE = 120;
SparqlQueryParser.INTEGER_NEGATIVE = 121;
SparqlQueryParser.DECIMAL_NEGATIVE = 122;
SparqlQueryParser.DOUBLE_NEGATIVE = 123;
SparqlQueryParser.STRING_LITERAL1 = 124;
SparqlQueryParser.STRING_LITERAL2 = 125;
SparqlQueryParser.STRING_LITERAL_LONG1 = 126;
SparqlQueryParser.STRING_LITERAL_LONG2 = 127;
SparqlQueryParser.COMMENT = 128;
SparqlQueryParser.REFERENCE = 129;
SparqlQueryParser.LESS_EQUAL = 130;
SparqlQueryParser.GREATER_EQUAL = 131;
SparqlQueryParser.NOT_EQUAL = 132;
SparqlQueryParser.AND = 133;
SparqlQueryParser.OR = 134;
SparqlQueryParser.INVERSE = 135;
SparqlQueryParser.OPEN_BRACE = 136;
SparqlQueryParser.CLOSE_BRACE = 137;
SparqlQueryParser.OPEN_CURLY_BRACE = 138;
SparqlQueryParser.CLOSE_CURLY_BRACE = 139;
SparqlQueryParser.OPEN_SQUARE_BRACKET = 140;
SparqlQueryParser.CLOSE_SQUARE_BRACKET = 141;
SparqlQueryParser.SEMICOLON = 142;
SparqlQueryParser.DOT = 143;
SparqlQueryParser.PLUS_SIGN = 144;
SparqlQueryParser.MINUS_SIGN = 145;
SparqlQueryParser.ASTERISK = 146;
SparqlQueryParser.QUESTION_MARK = 147;
SparqlQueryParser.COMMA = 148;
SparqlQueryParser.NEGATION = 149;
SparqlQueryParser.DIVIDE = 150;
SparqlQueryParser.EQUAL = 151;
SparqlQueryParser.LESS = 152;
SparqlQueryParser.GREATER = 153;
SparqlQueryParser.PIPE = 154;
SparqlQueryParser.ANY_OTHER = 155;

SparqlQueryParser.RULE_query = 0;
SparqlQueryParser.RULE_showQuery = 1;
SparqlQueryParser.RULE_prologue = 2;
SparqlQueryParser.RULE_baseDecl = 3;
SparqlQueryParser.RULE_prefixDecl = 4;
SparqlQueryParser.RULE_selectQuery = 5;
SparqlQueryParser.RULE_subSelect = 6;
SparqlQueryParser.RULE_selectClause = 7;
SparqlQueryParser.RULE_selectModifier = 8;
SparqlQueryParser.RULE_selectVariables = 9;
SparqlQueryParser.RULE_constructQuery = 10;
SparqlQueryParser.RULE_describeQuery = 11;
SparqlQueryParser.RULE_askQuery = 12;
SparqlQueryParser.RULE_datasetClause = 13;
SparqlQueryParser.RULE_whereClause = 14;
SparqlQueryParser.RULE_solutionModifier = 15;
SparqlQueryParser.RULE_groupClause = 16;
SparqlQueryParser.RULE_groupCondition = 17;
SparqlQueryParser.RULE_havingClause = 18;
SparqlQueryParser.RULE_havingCondition = 19;
SparqlQueryParser.RULE_orderClause = 20;
SparqlQueryParser.RULE_orderCondition = 21;
SparqlQueryParser.RULE_limitOffsetClauses = 22;
SparqlQueryParser.RULE_limitClause = 23;
SparqlQueryParser.RULE_offsetClause = 24;
SparqlQueryParser.RULE_valuesClause = 25;
SparqlQueryParser.RULE_triplesTemplate = 26;
SparqlQueryParser.RULE_groupGraphPattern = 27;
SparqlQueryParser.RULE_groupGraphPatternSub = 28;
SparqlQueryParser.RULE_groupGraphPatternSubList = 29;
SparqlQueryParser.RULE_triplesBlock = 30;
SparqlQueryParser.RULE_graphPatternNotTriples = 31;
SparqlQueryParser.RULE_optionalGraphPattern = 32;
SparqlQueryParser.RULE_graphGraphPattern = 33;
SparqlQueryParser.RULE_serviceGraphPattern = 34;
SparqlQueryParser.RULE_bind = 35;
SparqlQueryParser.RULE_inlineData = 36;
SparqlQueryParser.RULE_dataBlock = 37;
SparqlQueryParser.RULE_inlineDataOneVar = 38;
SparqlQueryParser.RULE_inlineDataFull = 39;
SparqlQueryParser.RULE_dataBlockValues = 40;
SparqlQueryParser.RULE_dataBlockValue = 41;
SparqlQueryParser.RULE_minusGraphPattern = 42;
SparqlQueryParser.RULE_groupOrUnionGraphPattern = 43;
SparqlQueryParser.RULE_filter = 44;
SparqlQueryParser.RULE_constraint = 45;
SparqlQueryParser.RULE_functionCall = 46;
SparqlQueryParser.RULE_argList = 47;
SparqlQueryParser.RULE_expressionList = 48;
SparqlQueryParser.RULE_constructTemplate = 49;
SparqlQueryParser.RULE_constructTriples = 50;
SparqlQueryParser.RULE_triplesSameSubject = 51;
SparqlQueryParser.RULE_propertyList = 52;
SparqlQueryParser.RULE_propertyListNotEmpty = 53;
SparqlQueryParser.RULE_verb = 54;
SparqlQueryParser.RULE_objectList = 55;
SparqlQueryParser.RULE_object = 56;
SparqlQueryParser.RULE_triplesSameSubjectPath = 57;
SparqlQueryParser.RULE_propertyListPath = 58;
SparqlQueryParser.RULE_propertyListPathNotEmpty = 59;
SparqlQueryParser.RULE_propertyListPathNotEmptyList = 60;
SparqlQueryParser.RULE_verbPath = 61;
SparqlQueryParser.RULE_verbSimple = 62;
SparqlQueryParser.RULE_objectListPath = 63;
SparqlQueryParser.RULE_objectPath = 64;
SparqlQueryParser.RULE_path = 65;
SparqlQueryParser.RULE_pathAlternative = 66;
SparqlQueryParser.RULE_pathSequence = 67;
SparqlQueryParser.RULE_pathElt = 68;
SparqlQueryParser.RULE_pathEltOrInverse = 69;
SparqlQueryParser.RULE_pathMod = 70;
SparqlQueryParser.RULE_pathQuantity = 71;
SparqlQueryParser.RULE_pathQuantityExact = 72;
SparqlQueryParser.RULE_pathQuantityRange = 73;
SparqlQueryParser.RULE_pathQuantityMin = 74;
SparqlQueryParser.RULE_pathQuantityMax = 75;
SparqlQueryParser.RULE_pathPrimary = 76;
SparqlQueryParser.RULE_pathNegatedPropertySet = 77;
SparqlQueryParser.RULE_pathOneInPropertySet = 78;
SparqlQueryParser.RULE_integer = 79;
SparqlQueryParser.RULE_triplesNode = 80;
SparqlQueryParser.RULE_blankNodePropertyList = 81;
SparqlQueryParser.RULE_triplesNodePath = 82;
SparqlQueryParser.RULE_blankNodePropertyListPath = 83;
SparqlQueryParser.RULE_collection = 84;
SparqlQueryParser.RULE_collectionPath = 85;
SparqlQueryParser.RULE_graphNode = 86;
SparqlQueryParser.RULE_graphNodePath = 87;
SparqlQueryParser.RULE_varOrTerm = 88;
SparqlQueryParser.RULE_varOrIRI = 89;
SparqlQueryParser.RULE_var = 90;
SparqlQueryParser.RULE_graphTerm = 91;
SparqlQueryParser.RULE_nil = 92;
SparqlQueryParser.RULE_expression = 93;
SparqlQueryParser.RULE_conditionalOrExpression = 94;
SparqlQueryParser.RULE_conditionalAndExpression = 95;
SparqlQueryParser.RULE_relationalExpression = 96;
SparqlQueryParser.RULE_additiveExpression = 97;
SparqlQueryParser.RULE_rhsAdditiveExpression = 98;
SparqlQueryParser.RULE_rhsAdditiveExpressionSub = 99;
SparqlQueryParser.RULE_multiplicativeExpression = 100;
SparqlQueryParser.RULE_unaryExpression = 101;
SparqlQueryParser.RULE_primaryExpression = 102;
SparqlQueryParser.RULE_builtInCall = 103;
SparqlQueryParser.RULE_procedure = 104;
SparqlQueryParser.RULE_procedureArguments = 105;
SparqlQueryParser.RULE_procedureBindings = 106;
SparqlQueryParser.RULE_regexExpression = 107;
SparqlQueryParser.RULE_subStringExpression = 108;
SparqlQueryParser.RULE_strReplaceExpression = 109;
SparqlQueryParser.RULE_existsFunction = 110;
SparqlQueryParser.RULE_notExistsFunction = 111;
SparqlQueryParser.RULE_aggregate = 112;
SparqlQueryParser.RULE_iriOrFunction = 113;
SparqlQueryParser.RULE_rdfLiteral = 114;
SparqlQueryParser.RULE_numericLiteral = 115;
SparqlQueryParser.RULE_numericLiteralUnsigned = 116;
SparqlQueryParser.RULE_numericLiteralPositive = 117;
SparqlQueryParser.RULE_numericLiteralNegative = 118;
SparqlQueryParser.RULE_booleanLiteral = 119;
SparqlQueryParser.RULE_string = 120;
SparqlQueryParser.RULE_iri = 121;
SparqlQueryParser.RULE_prefixedName = 122;
SparqlQueryParser.RULE_blankNode = 123;
SparqlQueryParser.RULE_anon = 124;

class QueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_query;
    }

	prologue() {
	    return this.getTypedRuleContext(PrologueContext,0);
	};

	valuesClause() {
	    return this.getTypedRuleContext(ValuesClauseContext,0);
	};

	EOF() {
	    return this.getToken(SparqlQueryParser.EOF, 0);
	};

	selectQuery() {
	    return this.getTypedRuleContext(SelectQueryContext,0);
	};

	constructQuery() {
	    return this.getTypedRuleContext(ConstructQueryContext,0);
	};

	describeQuery() {
	    return this.getTypedRuleContext(DescribeQueryContext,0);
	};

	askQuery() {
	    return this.getTypedRuleContext(AskQueryContext,0);
	};

	showQuery() {
	    return this.getTypedRuleContext(ShowQueryContext,0);
	};


}



class ShowQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_showQuery;
    }

	SHOW() {
	    return this.getToken(SparqlQueryParser.SHOW, 0);
	};

	ALPHANUMERIC_IDENTIFIER() {
	    return this.getToken(SparqlQueryParser.ALPHANUMERIC_IDENTIFIER, 0);
	};

	INDEX() {
	    return this.getToken(SparqlQueryParser.INDEX, 0);
	};


}



class PrologueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_prologue;
    }

	baseDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BaseDeclContext);
	    } else {
	        return this.getTypedRuleContext(BaseDeclContext,i);
	    }
	};

	prefixDecl = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrefixDeclContext);
	    } else {
	        return this.getTypedRuleContext(PrefixDeclContext,i);
	    }
	};


}



class BaseDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_baseDecl;
    }

	BASE() {
	    return this.getToken(SparqlQueryParser.BASE, 0);
	};

	IRIREF() {
	    return this.getToken(SparqlQueryParser.IRIREF, 0);
	};


}



class PrefixDeclContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_prefixDecl;
    }

	PREFIX() {
	    return this.getToken(SparqlQueryParser.PREFIX, 0);
	};

	PNAME_NS() {
	    return this.getToken(SparqlQueryParser.PNAME_NS, 0);
	};

	IRIREF() {
	    return this.getToken(SparqlQueryParser.IRIREF, 0);
	};


}



class SelectQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_selectQuery;
    }

	selectClause() {
	    return this.getTypedRuleContext(SelectClauseContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	solutionModifier() {
	    return this.getTypedRuleContext(SolutionModifierContext,0);
	};

	datasetClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DatasetClauseContext);
	    } else {
	        return this.getTypedRuleContext(DatasetClauseContext,i);
	    }
	};


}



class SubSelectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_subSelect;
    }

	selectClause() {
	    return this.getTypedRuleContext(SelectClauseContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	solutionModifier() {
	    return this.getTypedRuleContext(SolutionModifierContext,0);
	};

	valuesClause() {
	    return this.getTypedRuleContext(ValuesClauseContext,0);
	};


}



class SelectClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_selectClause;
    }

	SELECT() {
	    return this.getToken(SparqlQueryParser.SELECT, 0);
	};

	ASTERISK() {
	    return this.getToken(SparqlQueryParser.ASTERISK, 0);
	};

	selectModifier() {
	    return this.getTypedRuleContext(SelectModifierContext,0);
	};

	selectVariables = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectVariablesContext);
	    } else {
	        return this.getTypedRuleContext(SelectVariablesContext,i);
	    }
	};


}



class SelectModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_selectModifier;
    }

	DISTINCT() {
	    return this.getToken(SparqlQueryParser.DISTINCT, 0);
	};

	REDUCED() {
	    return this.getToken(SparqlQueryParser.REDUCED, 0);
	};


}



class SelectVariablesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_selectVariables;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SelectSingleVariableContext extends SelectVariablesContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	var_() {
	    return this.getTypedRuleContext(VarContext,0);
	};


}

SparqlQueryParser.SelectSingleVariableContext = SelectSingleVariableContext;

class SelectExpressionAsVariableContext extends SelectVariablesContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OPEN_BRACE() {
	    return this.getToken(SparqlQueryParser.OPEN_BRACE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	AS() {
	    return this.getToken(SparqlQueryParser.AS, 0);
	};

	var_() {
	    return this.getTypedRuleContext(VarContext,0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SparqlQueryParser.CLOSE_BRACE, 0);
	};


}

SparqlQueryParser.SelectExpressionAsVariableContext = SelectExpressionAsVariableContext;

class ConstructQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_constructQuery;
    }

	CONSTRUCT() {
	    return this.getToken(SparqlQueryParser.CONSTRUCT, 0);
	};

	constructTemplate() {
	    return this.getTypedRuleContext(ConstructTemplateContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	solutionModifier() {
	    return this.getTypedRuleContext(SolutionModifierContext,0);
	};

	WHERE() {
	    return this.getToken(SparqlQueryParser.WHERE, 0);
	};

	OPEN_CURLY_BRACE() {
	    return this.getToken(SparqlQueryParser.OPEN_CURLY_BRACE, 0);
	};

	CLOSE_CURLY_BRACE() {
	    return this.getToken(SparqlQueryParser.CLOSE_CURLY_BRACE, 0);
	};

	datasetClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DatasetClauseContext);
	    } else {
	        return this.getTypedRuleContext(DatasetClauseContext,i);
	    }
	};

	triplesTemplate() {
	    return this.getTypedRuleContext(TriplesTemplateContext,0);
	};


}



class DescribeQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_describeQuery;
    }

	DESCRIBE() {
	    return this.getToken(SparqlQueryParser.DESCRIBE, 0);
	};

	solutionModifier() {
	    return this.getTypedRuleContext(SolutionModifierContext,0);
	};

	ASTERISK() {
	    return this.getToken(SparqlQueryParser.ASTERISK, 0);
	};

	datasetClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DatasetClauseContext);
	    } else {
	        return this.getTypedRuleContext(DatasetClauseContext,i);
	    }
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	varOrIRI = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VarOrIRIContext);
	    } else {
	        return this.getTypedRuleContext(VarOrIRIContext,i);
	    }
	};


}



class AskQueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_askQuery;
    }

	ASK() {
	    return this.getToken(SparqlQueryParser.ASK, 0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	solutionModifier() {
	    return this.getTypedRuleContext(SolutionModifierContext,0);
	};

	datasetClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DatasetClauseContext);
	    } else {
	        return this.getTypedRuleContext(DatasetClauseContext,i);
	    }
	};


}



class DatasetClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_datasetClause;
    }

	FROM() {
	    return this.getToken(SparqlQueryParser.FROM, 0);
	};

	iri() {
	    return this.getTypedRuleContext(IriContext,0);
	};

	NAMED() {
	    return this.getToken(SparqlQueryParser.NAMED, 0);
	};


}



class WhereClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_whereClause;
    }

	groupGraphPattern() {
	    return this.getTypedRuleContext(GroupGraphPatternContext,0);
	};

	WHERE() {
	    return this.getToken(SparqlQueryParser.WHERE, 0);
	};


}



class SolutionModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_solutionModifier;
    }

	groupClause() {
	    return this.getTypedRuleContext(GroupClauseContext,0);
	};

	havingClause() {
	    return this.getTypedRuleContext(HavingClauseContext,0);
	};

	orderClause() {
	    return this.getTypedRuleContext(OrderClauseContext,0);
	};

	limitOffsetClauses() {
	    return this.getTypedRuleContext(LimitOffsetClausesContext,0);
	};


}



class GroupClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_groupClause;
    }

	GROUP() {
	    return this.getToken(SparqlQueryParser.GROUP, 0);
	};

	BY() {
	    return this.getToken(SparqlQueryParser.BY, 0);
	};

	groupCondition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GroupConditionContext);
	    } else {
	        return this.getTypedRuleContext(GroupConditionContext,i);
	    }
	};


}



class GroupConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_groupCondition;
    }

	builtInCall() {
	    return this.getTypedRuleContext(BuiltInCallContext,0);
	};

	functionCall() {
	    return this.getTypedRuleContext(FunctionCallContext,0);
	};

	OPEN_BRACE() {
	    return this.getToken(SparqlQueryParser.OPEN_BRACE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SparqlQueryParser.CLOSE_BRACE, 0);
	};

	AS() {
	    return this.getToken(SparqlQueryParser.AS, 0);
	};

	var_() {
	    return this.getTypedRuleContext(VarContext,0);
	};


}



class HavingClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_havingClause;
    }

	HAVING() {
	    return this.getToken(SparqlQueryParser.HAVING, 0);
	};

	havingCondition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(HavingConditionContext);
	    } else {
	        return this.getTypedRuleContext(HavingConditionContext,i);
	    }
	};


}



class HavingConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_havingCondition;
    }

	constraint() {
	    return this.getTypedRuleContext(ConstraintContext,0);
	};


}



class OrderClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_orderClause;
    }

	ORDER() {
	    return this.getToken(SparqlQueryParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(SparqlQueryParser.BY, 0);
	};

	orderCondition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OrderConditionContext);
	    } else {
	        return this.getTypedRuleContext(OrderConditionContext,i);
	    }
	};


}



class OrderConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_orderCondition;
    }

	OPEN_BRACE() {
	    return this.getToken(SparqlQueryParser.OPEN_BRACE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SparqlQueryParser.CLOSE_BRACE, 0);
	};

	ASC() {
	    return this.getToken(SparqlQueryParser.ASC, 0);
	};

	DESC() {
	    return this.getToken(SparqlQueryParser.DESC, 0);
	};

	constraint() {
	    return this.getTypedRuleContext(ConstraintContext,0);
	};

	var_() {
	    return this.getTypedRuleContext(VarContext,0);
	};


}



class LimitOffsetClausesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_limitOffsetClauses;
    }

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	offsetClause() {
	    return this.getTypedRuleContext(OffsetClauseContext,0);
	};


}



class LimitClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_limitClause;
    }

	LIMIT() {
	    return this.getToken(SparqlQueryParser.LIMIT, 0);
	};

	INTEGER() {
	    return this.getToken(SparqlQueryParser.INTEGER, 0);
	};


}



class OffsetClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_offsetClause;
    }

	OFFSET() {
	    return this.getToken(SparqlQueryParser.OFFSET, 0);
	};

	INTEGER() {
	    return this.getToken(SparqlQueryParser.INTEGER, 0);
	};


}



class ValuesClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_valuesClause;
    }

	VALUES() {
	    return this.getToken(SparqlQueryParser.VALUES, 0);
	};

	dataBlock() {
	    return this.getTypedRuleContext(DataBlockContext,0);
	};


}



class TriplesTemplateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_triplesTemplate;
    }

	triplesSameSubject = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TriplesSameSubjectContext);
	    } else {
	        return this.getTypedRuleContext(TriplesSameSubjectContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SparqlQueryParser.DOT);
	    } else {
	        return this.getToken(SparqlQueryParser.DOT, i);
	    }
	};



}



class GroupGraphPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_groupGraphPattern;
    }

	OPEN_CURLY_BRACE() {
	    return this.getToken(SparqlQueryParser.OPEN_CURLY_BRACE, 0);
	};

	CLOSE_CURLY_BRACE() {
	    return this.getToken(SparqlQueryParser.CLOSE_CURLY_BRACE, 0);
	};

	subSelect() {
	    return this.getTypedRuleContext(SubSelectContext,0);
	};

	groupGraphPatternSub() {
	    return this.getTypedRuleContext(GroupGraphPatternSubContext,0);
	};


}



class GroupGraphPatternSubContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_groupGraphPatternSub;
    }

	triplesBlock() {
	    return this.getTypedRuleContext(TriplesBlockContext,0);
	};

	groupGraphPatternSubList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GroupGraphPatternSubListContext);
	    } else {
	        return this.getTypedRuleContext(GroupGraphPatternSubListContext,i);
	    }
	};


}



class GroupGraphPatternSubListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_groupGraphPatternSubList;
    }

	graphPatternNotTriples() {
	    return this.getTypedRuleContext(GraphPatternNotTriplesContext,0);
	};

	DOT() {
	    return this.getToken(SparqlQueryParser.DOT, 0);
	};

	triplesBlock() {
	    return this.getTypedRuleContext(TriplesBlockContext,0);
	};


}



class TriplesBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_triplesBlock;
    }

	triplesSameSubjectPath = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TriplesSameSubjectPathContext);
	    } else {
	        return this.getTypedRuleContext(TriplesSameSubjectPathContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SparqlQueryParser.DOT);
	    } else {
	        return this.getToken(SparqlQueryParser.DOT, i);
	    }
	};



}



class GraphPatternNotTriplesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_graphPatternNotTriples;
    }

	groupOrUnionGraphPattern() {
	    return this.getTypedRuleContext(GroupOrUnionGraphPatternContext,0);
	};

	optionalGraphPattern() {
	    return this.getTypedRuleContext(OptionalGraphPatternContext,0);
	};

	minusGraphPattern() {
	    return this.getTypedRuleContext(MinusGraphPatternContext,0);
	};

	graphGraphPattern() {
	    return this.getTypedRuleContext(GraphGraphPatternContext,0);
	};

	serviceGraphPattern() {
	    return this.getTypedRuleContext(ServiceGraphPatternContext,0);
	};

	filter() {
	    return this.getTypedRuleContext(FilterContext,0);
	};

	bind() {
	    return this.getTypedRuleContext(BindContext,0);
	};

	inlineData() {
	    return this.getTypedRuleContext(InlineDataContext,0);
	};

	procedure() {
	    return this.getTypedRuleContext(ProcedureContext,0);
	};


}



class OptionalGraphPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_optionalGraphPattern;
    }

	OPTIONAL() {
	    return this.getToken(SparqlQueryParser.OPTIONAL, 0);
	};

	groupGraphPattern() {
	    return this.getTypedRuleContext(GroupGraphPatternContext,0);
	};


}



class GraphGraphPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_graphGraphPattern;
    }

	GRAPH() {
	    return this.getToken(SparqlQueryParser.GRAPH, 0);
	};

	varOrIRI() {
	    return this.getTypedRuleContext(VarOrIRIContext,0);
	};

	groupGraphPattern() {
	    return this.getTypedRuleContext(GroupGraphPatternContext,0);
	};


}



class ServiceGraphPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_serviceGraphPattern;
    }

	SERVICE() {
	    return this.getToken(SparqlQueryParser.SERVICE, 0);
	};

	varOrIRI() {
	    return this.getTypedRuleContext(VarOrIRIContext,0);
	};

	groupGraphPattern() {
	    return this.getTypedRuleContext(GroupGraphPatternContext,0);
	};

	SILENT() {
	    return this.getToken(SparqlQueryParser.SILENT, 0);
	};


}



class BindContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_bind;
    }

	BIND() {
	    return this.getToken(SparqlQueryParser.BIND, 0);
	};

	OPEN_BRACE() {
	    return this.getToken(SparqlQueryParser.OPEN_BRACE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	AS() {
	    return this.getToken(SparqlQueryParser.AS, 0);
	};

	var_() {
	    return this.getTypedRuleContext(VarContext,0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SparqlQueryParser.CLOSE_BRACE, 0);
	};


}



class InlineDataContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_inlineData;
    }

	VALUES() {
	    return this.getToken(SparqlQueryParser.VALUES, 0);
	};

	dataBlock() {
	    return this.getTypedRuleContext(DataBlockContext,0);
	};


}



class DataBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_dataBlock;
    }

	inlineDataOneVar() {
	    return this.getTypedRuleContext(InlineDataOneVarContext,0);
	};

	inlineDataFull() {
	    return this.getTypedRuleContext(InlineDataFullContext,0);
	};


}



class InlineDataOneVarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_inlineDataOneVar;
    }

	var_() {
	    return this.getTypedRuleContext(VarContext,0);
	};

	OPEN_CURLY_BRACE() {
	    return this.getToken(SparqlQueryParser.OPEN_CURLY_BRACE, 0);
	};

	CLOSE_CURLY_BRACE() {
	    return this.getToken(SparqlQueryParser.CLOSE_CURLY_BRACE, 0);
	};

	dataBlockValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataBlockValueContext);
	    } else {
	        return this.getTypedRuleContext(DataBlockValueContext,i);
	    }
	};


}



class InlineDataFullContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_inlineDataFull;
    }

	OPEN_BRACE() {
	    return this.getToken(SparqlQueryParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SparqlQueryParser.CLOSE_BRACE, 0);
	};

	OPEN_CURLY_BRACE() {
	    return this.getToken(SparqlQueryParser.OPEN_CURLY_BRACE, 0);
	};

	CLOSE_CURLY_BRACE() {
	    return this.getToken(SparqlQueryParser.CLOSE_CURLY_BRACE, 0);
	};

	var_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VarContext);
	    } else {
	        return this.getTypedRuleContext(VarContext,i);
	    }
	};

	dataBlockValues = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataBlockValuesContext);
	    } else {
	        return this.getTypedRuleContext(DataBlockValuesContext,i);
	    }
	};


}



class DataBlockValuesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_dataBlockValues;
    }

	OPEN_BRACE() {
	    return this.getToken(SparqlQueryParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SparqlQueryParser.CLOSE_BRACE, 0);
	};

	dataBlockValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DataBlockValueContext);
	    } else {
	        return this.getTypedRuleContext(DataBlockValueContext,i);
	    }
	};


}



class DataBlockValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_dataBlockValue;
    }

	iri() {
	    return this.getTypedRuleContext(IriContext,0);
	};

	rdfLiteral() {
	    return this.getTypedRuleContext(RdfLiteralContext,0);
	};

	numericLiteral() {
	    return this.getTypedRuleContext(NumericLiteralContext,0);
	};

	booleanLiteral() {
	    return this.getTypedRuleContext(BooleanLiteralContext,0);
	};

	UNDEF() {
	    return this.getToken(SparqlQueryParser.UNDEF, 0);
	};


}



class MinusGraphPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_minusGraphPattern;
    }

	MINUS() {
	    return this.getToken(SparqlQueryParser.MINUS, 0);
	};

	groupGraphPattern() {
	    return this.getTypedRuleContext(GroupGraphPatternContext,0);
	};


}



class GroupOrUnionGraphPatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_groupOrUnionGraphPattern;
    }

	groupGraphPattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GroupGraphPatternContext);
	    } else {
	        return this.getTypedRuleContext(GroupGraphPatternContext,i);
	    }
	};

	UNION = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SparqlQueryParser.UNION);
	    } else {
	        return this.getToken(SparqlQueryParser.UNION, i);
	    }
	};



}



class FilterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_filter;
    }

	FILTER() {
	    return this.getToken(SparqlQueryParser.FILTER, 0);
	};

	constraint() {
	    return this.getTypedRuleContext(ConstraintContext,0);
	};


}



class ConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_constraint;
    }

	OPEN_BRACE() {
	    return this.getToken(SparqlQueryParser.OPEN_BRACE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SparqlQueryParser.CLOSE_BRACE, 0);
	};

	builtInCall() {
	    return this.getTypedRuleContext(BuiltInCallContext,0);
	};

	functionCall() {
	    return this.getTypedRuleContext(FunctionCallContext,0);
	};


}



class FunctionCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_functionCall;
    }

	iri() {
	    return this.getTypedRuleContext(IriContext,0);
	};

	argList() {
	    return this.getTypedRuleContext(ArgListContext,0);
	};


}



class ArgListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_argList;
    }

	OPEN_BRACE() {
	    return this.getToken(SparqlQueryParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SparqlQueryParser.CLOSE_BRACE, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	DISTINCT() {
	    return this.getToken(SparqlQueryParser.DISTINCT, 0);
	};


}



class ExpressionListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_expressionList;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SparqlQueryParser.COMMA);
	    } else {
	        return this.getToken(SparqlQueryParser.COMMA, i);
	    }
	};



}



class ConstructTemplateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_constructTemplate;
    }

	OPEN_CURLY_BRACE() {
	    return this.getToken(SparqlQueryParser.OPEN_CURLY_BRACE, 0);
	};

	CLOSE_CURLY_BRACE() {
	    return this.getToken(SparqlQueryParser.CLOSE_CURLY_BRACE, 0);
	};

	constructTriples() {
	    return this.getTypedRuleContext(ConstructTriplesContext,0);
	};


}



class ConstructTriplesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_constructTriples;
    }

	triplesSameSubject() {
	    return this.getTypedRuleContext(TriplesSameSubjectContext,0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SparqlQueryParser.DOT);
	    } else {
	        return this.getToken(SparqlQueryParser.DOT, i);
	    }
	};


	constructTriples = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConstructTriplesContext);
	    } else {
	        return this.getTypedRuleContext(ConstructTriplesContext,i);
	    }
	};


}



class TriplesSameSubjectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_triplesSameSubject;
    }

	varOrTerm() {
	    return this.getTypedRuleContext(VarOrTermContext,0);
	};

	propertyListNotEmpty() {
	    return this.getTypedRuleContext(PropertyListNotEmptyContext,0);
	};

	triplesNode() {
	    return this.getTypedRuleContext(TriplesNodeContext,0);
	};

	propertyList() {
	    return this.getTypedRuleContext(PropertyListContext,0);
	};


}



class PropertyListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_propertyList;
    }

	propertyListNotEmpty() {
	    return this.getTypedRuleContext(PropertyListNotEmptyContext,0);
	};


}



class PropertyListNotEmptyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_propertyListNotEmpty;
    }

	verb = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VerbContext);
	    } else {
	        return this.getTypedRuleContext(VerbContext,i);
	    }
	};

	objectList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ObjectListContext);
	    } else {
	        return this.getTypedRuleContext(ObjectListContext,i);
	    }
	};

	SEMICOLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SparqlQueryParser.SEMICOLON);
	    } else {
	        return this.getToken(SparqlQueryParser.SEMICOLON, i);
	    }
	};



}



class VerbContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_verb;
    }

	varOrIRI() {
	    return this.getTypedRuleContext(VarOrIRIContext,0);
	};

	A() {
	    return this.getToken(SparqlQueryParser.A, 0);
	};


}



class ObjectListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_objectList;
    }

	object = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ObjectContext);
	    } else {
	        return this.getTypedRuleContext(ObjectContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SparqlQueryParser.COMMA);
	    } else {
	        return this.getToken(SparqlQueryParser.COMMA, i);
	    }
	};



}



class ObjectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_object;
    }

	graphNode() {
	    return this.getTypedRuleContext(GraphNodeContext,0);
	};


}



class TriplesSameSubjectPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_triplesSameSubjectPath;
    }

	varOrTerm() {
	    return this.getTypedRuleContext(VarOrTermContext,0);
	};

	propertyListPathNotEmpty() {
	    return this.getTypedRuleContext(PropertyListPathNotEmptyContext,0);
	};

	triplesNodePath() {
	    return this.getTypedRuleContext(TriplesNodePathContext,0);
	};

	propertyListPath() {
	    return this.getTypedRuleContext(PropertyListPathContext,0);
	};


}



class PropertyListPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_propertyListPath;
    }

	propertyListPathNotEmpty() {
	    return this.getTypedRuleContext(PropertyListPathNotEmptyContext,0);
	};


}



class PropertyListPathNotEmptyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_propertyListPathNotEmpty;
    }

	objectListPath() {
	    return this.getTypedRuleContext(ObjectListPathContext,0);
	};

	verbPath() {
	    return this.getTypedRuleContext(VerbPathContext,0);
	};

	verbSimple() {
	    return this.getTypedRuleContext(VerbSimpleContext,0);
	};

	SEMICOLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SparqlQueryParser.SEMICOLON);
	    } else {
	        return this.getToken(SparqlQueryParser.SEMICOLON, i);
	    }
	};


	propertyListPathNotEmptyList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PropertyListPathNotEmptyListContext);
	    } else {
	        return this.getTypedRuleContext(PropertyListPathNotEmptyListContext,i);
	    }
	};


}



class PropertyListPathNotEmptyListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_propertyListPathNotEmptyList;
    }

	objectList() {
	    return this.getTypedRuleContext(ObjectListContext,0);
	};

	verbPath() {
	    return this.getTypedRuleContext(VerbPathContext,0);
	};

	verbSimple() {
	    return this.getTypedRuleContext(VerbSimpleContext,0);
	};


}



class VerbPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_verbPath;
    }

	path() {
	    return this.getTypedRuleContext(PathContext,0);
	};

	OPEN_BRACE() {
	    return this.getToken(SparqlQueryParser.OPEN_BRACE, 0);
	};

	AS() {
	    return this.getToken(SparqlQueryParser.AS, 0);
	};

	var_() {
	    return this.getTypedRuleContext(VarContext,0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SparqlQueryParser.CLOSE_BRACE, 0);
	};

	ANY() {
	    return this.getToken(SparqlQueryParser.ANY, 0);
	};

	ALL() {
	    return this.getToken(SparqlQueryParser.ALL, 0);
	};

	SHORTEST() {
	    return this.getToken(SparqlQueryParser.SHORTEST, 0);
	};

	WALKS() {
	    return this.getToken(SparqlQueryParser.WALKS, 0);
	};

	SIMPLE() {
	    return this.getToken(SparqlQueryParser.SIMPLE, 0);
	};

	ACYCLIC() {
	    return this.getToken(SparqlQueryParser.ACYCLIC, 0);
	};


}



class VerbSimpleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_verbSimple;
    }

	var_() {
	    return this.getTypedRuleContext(VarContext,0);
	};


}



class ObjectListPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_objectListPath;
    }

	objectPath = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ObjectPathContext);
	    } else {
	        return this.getTypedRuleContext(ObjectPathContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SparqlQueryParser.COMMA);
	    } else {
	        return this.getToken(SparqlQueryParser.COMMA, i);
	    }
	};



}



class ObjectPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_objectPath;
    }

	graphNodePath() {
	    return this.getTypedRuleContext(GraphNodePathContext,0);
	};


}



class PathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_path;
    }

	pathAlternative() {
	    return this.getTypedRuleContext(PathAlternativeContext,0);
	};


}



class PathAlternativeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_pathAlternative;
    }

	pathSequence = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathSequenceContext);
	    } else {
	        return this.getTypedRuleContext(PathSequenceContext,i);
	    }
	};

	PIPE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SparqlQueryParser.PIPE);
	    } else {
	        return this.getToken(SparqlQueryParser.PIPE, i);
	    }
	};



}



class PathSequenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_pathSequence;
    }

	pathEltOrInverse = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathEltOrInverseContext);
	    } else {
	        return this.getTypedRuleContext(PathEltOrInverseContext,i);
	    }
	};

	DIVIDE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SparqlQueryParser.DIVIDE);
	    } else {
	        return this.getToken(SparqlQueryParser.DIVIDE, i);
	    }
	};



}



class PathEltContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_pathElt;
    }

	pathPrimary() {
	    return this.getTypedRuleContext(PathPrimaryContext,0);
	};

	pathMod() {
	    return this.getTypedRuleContext(PathModContext,0);
	};


}



class PathEltOrInverseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_pathEltOrInverse;
    }

	pathElt() {
	    return this.getTypedRuleContext(PathEltContext,0);
	};

	INVERSE() {
	    return this.getToken(SparqlQueryParser.INVERSE, 0);
	};


}



class PathModContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_pathMod;
    }

	QUESTION_MARK() {
	    return this.getToken(SparqlQueryParser.QUESTION_MARK, 0);
	};

	ASTERISK() {
	    return this.getToken(SparqlQueryParser.ASTERISK, 0);
	};

	PLUS_SIGN() {
	    return this.getToken(SparqlQueryParser.PLUS_SIGN, 0);
	};

	OPEN_CURLY_BRACE() {
	    return this.getToken(SparqlQueryParser.OPEN_CURLY_BRACE, 0);
	};

	pathQuantity() {
	    return this.getTypedRuleContext(PathQuantityContext,0);
	};

	CLOSE_CURLY_BRACE() {
	    return this.getToken(SparqlQueryParser.CLOSE_CURLY_BRACE, 0);
	};


}



class PathQuantityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_pathQuantity;
    }

	pathQuantityExact() {
	    return this.getTypedRuleContext(PathQuantityExactContext,0);
	};

	pathQuantityRange() {
	    return this.getTypedRuleContext(PathQuantityRangeContext,0);
	};

	pathQuantityMin() {
	    return this.getTypedRuleContext(PathQuantityMinContext,0);
	};

	pathQuantityMax() {
	    return this.getTypedRuleContext(PathQuantityMaxContext,0);
	};


}



class PathQuantityExactContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_pathQuantityExact;
    }

	INTEGER() {
	    return this.getToken(SparqlQueryParser.INTEGER, 0);
	};


}



class PathQuantityRangeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_pathQuantityRange;
        this.min = null;
        this.max = null;
    }

	COMMA() {
	    return this.getToken(SparqlQueryParser.COMMA, 0);
	};

	INTEGER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SparqlQueryParser.INTEGER);
	    } else {
	        return this.getToken(SparqlQueryParser.INTEGER, i);
	    }
	};



}



class PathQuantityMinContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_pathQuantityMin;
        this.min = null;
    }

	COMMA() {
	    return this.getToken(SparqlQueryParser.COMMA, 0);
	};

	INTEGER() {
	    return this.getToken(SparqlQueryParser.INTEGER, 0);
	};


}



class PathQuantityMaxContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_pathQuantityMax;
        this.max = null;
    }

	COMMA() {
	    return this.getToken(SparqlQueryParser.COMMA, 0);
	};

	INTEGER() {
	    return this.getToken(SparqlQueryParser.INTEGER, 0);
	};


}



class PathPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_pathPrimary;
    }

	iri() {
	    return this.getTypedRuleContext(IriContext,0);
	};

	A() {
	    return this.getToken(SparqlQueryParser.A, 0);
	};

	NEGATION() {
	    return this.getToken(SparqlQueryParser.NEGATION, 0);
	};

	pathNegatedPropertySet() {
	    return this.getTypedRuleContext(PathNegatedPropertySetContext,0);
	};

	OPEN_BRACE() {
	    return this.getToken(SparqlQueryParser.OPEN_BRACE, 0);
	};

	path() {
	    return this.getTypedRuleContext(PathContext,0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SparqlQueryParser.CLOSE_BRACE, 0);
	};


}



class PathNegatedPropertySetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_pathNegatedPropertySet;
    }

	pathOneInPropertySet = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathOneInPropertySetContext);
	    } else {
	        return this.getTypedRuleContext(PathOneInPropertySetContext,i);
	    }
	};

	OPEN_BRACE() {
	    return this.getToken(SparqlQueryParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SparqlQueryParser.CLOSE_BRACE, 0);
	};

	PIPE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SparqlQueryParser.PIPE);
	    } else {
	        return this.getToken(SparqlQueryParser.PIPE, i);
	    }
	};



}



class PathOneInPropertySetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_pathOneInPropertySet;
    }

	iri() {
	    return this.getTypedRuleContext(IriContext,0);
	};

	A() {
	    return this.getToken(SparqlQueryParser.A, 0);
	};

	INVERSE() {
	    return this.getToken(SparqlQueryParser.INVERSE, 0);
	};


}



class IntegerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_integer;
    }

	INTEGER() {
	    return this.getToken(SparqlQueryParser.INTEGER, 0);
	};


}



class TriplesNodeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_triplesNode;
    }

	collection() {
	    return this.getTypedRuleContext(CollectionContext,0);
	};

	blankNodePropertyList() {
	    return this.getTypedRuleContext(BlankNodePropertyListContext,0);
	};


}



class BlankNodePropertyListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_blankNodePropertyList;
    }

	OPEN_SQUARE_BRACKET() {
	    return this.getToken(SparqlQueryParser.OPEN_SQUARE_BRACKET, 0);
	};

	propertyListNotEmpty() {
	    return this.getTypedRuleContext(PropertyListNotEmptyContext,0);
	};

	CLOSE_SQUARE_BRACKET() {
	    return this.getToken(SparqlQueryParser.CLOSE_SQUARE_BRACKET, 0);
	};


}



class TriplesNodePathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_triplesNodePath;
    }

	collectionPath() {
	    return this.getTypedRuleContext(CollectionPathContext,0);
	};

	blankNodePropertyListPath() {
	    return this.getTypedRuleContext(BlankNodePropertyListPathContext,0);
	};


}



class BlankNodePropertyListPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_blankNodePropertyListPath;
    }

	OPEN_SQUARE_BRACKET() {
	    return this.getToken(SparqlQueryParser.OPEN_SQUARE_BRACKET, 0);
	};

	propertyListPathNotEmpty() {
	    return this.getTypedRuleContext(PropertyListPathNotEmptyContext,0);
	};

	CLOSE_SQUARE_BRACKET() {
	    return this.getToken(SparqlQueryParser.CLOSE_SQUARE_BRACKET, 0);
	};


}



class CollectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_collection;
    }

	OPEN_BRACE() {
	    return this.getToken(SparqlQueryParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SparqlQueryParser.CLOSE_BRACE, 0);
	};

	graphNode = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GraphNodeContext);
	    } else {
	        return this.getTypedRuleContext(GraphNodeContext,i);
	    }
	};


}



class CollectionPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_collectionPath;
    }

	OPEN_BRACE() {
	    return this.getToken(SparqlQueryParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SparqlQueryParser.CLOSE_BRACE, 0);
	};

	graphNodePath = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GraphNodePathContext);
	    } else {
	        return this.getTypedRuleContext(GraphNodePathContext,i);
	    }
	};


}



class GraphNodeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_graphNode;
    }

	varOrTerm() {
	    return this.getTypedRuleContext(VarOrTermContext,0);
	};

	triplesNode() {
	    return this.getTypedRuleContext(TriplesNodeContext,0);
	};


}



class GraphNodePathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_graphNodePath;
    }

	varOrTerm() {
	    return this.getTypedRuleContext(VarOrTermContext,0);
	};

	triplesNodePath() {
	    return this.getTypedRuleContext(TriplesNodePathContext,0);
	};


}



class VarOrTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_varOrTerm;
    }

	var_() {
	    return this.getTypedRuleContext(VarContext,0);
	};

	graphTerm() {
	    return this.getTypedRuleContext(GraphTermContext,0);
	};


}



class VarOrIRIContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_varOrIRI;
    }

	var_() {
	    return this.getTypedRuleContext(VarContext,0);
	};

	iri() {
	    return this.getTypedRuleContext(IriContext,0);
	};


}



class VarContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_var;
    }

	VAR1() {
	    return this.getToken(SparqlQueryParser.VAR1, 0);
	};

	VAR2() {
	    return this.getToken(SparqlQueryParser.VAR2, 0);
	};


}



class GraphTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_graphTerm;
    }

	iri() {
	    return this.getTypedRuleContext(IriContext,0);
	};

	rdfLiteral() {
	    return this.getTypedRuleContext(RdfLiteralContext,0);
	};

	numericLiteral() {
	    return this.getTypedRuleContext(NumericLiteralContext,0);
	};

	booleanLiteral() {
	    return this.getTypedRuleContext(BooleanLiteralContext,0);
	};

	blankNode() {
	    return this.getTypedRuleContext(BlankNodeContext,0);
	};

	nil() {
	    return this.getTypedRuleContext(NilContext,0);
	};


}



class NilContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_nil;
    }

	OPEN_BRACE() {
	    return this.getToken(SparqlQueryParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SparqlQueryParser.CLOSE_BRACE, 0);
	};


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_expression;
    }

	conditionalOrExpression() {
	    return this.getTypedRuleContext(ConditionalOrExpressionContext,0);
	};


}



class ConditionalOrExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_conditionalOrExpression;
    }

	conditionalAndExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionalAndExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ConditionalAndExpressionContext,i);
	    }
	};

	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SparqlQueryParser.OR);
	    } else {
	        return this.getToken(SparqlQueryParser.OR, i);
	    }
	};



}



class ConditionalAndExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_conditionalAndExpression;
    }

	relationalExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RelationalExpressionContext);
	    } else {
	        return this.getTypedRuleContext(RelationalExpressionContext,i);
	    }
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SparqlQueryParser.AND);
	    } else {
	        return this.getToken(SparqlQueryParser.AND, i);
	    }
	};



}



class RelationalExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_relationalExpression;
        this.op = null;
    }

	additiveExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AdditiveExpressionContext);
	    } else {
	        return this.getTypedRuleContext(AdditiveExpressionContext,i);
	    }
	};

	EQUAL() {
	    return this.getToken(SparqlQueryParser.EQUAL, 0);
	};

	NOT_EQUAL() {
	    return this.getToken(SparqlQueryParser.NOT_EQUAL, 0);
	};

	LESS() {
	    return this.getToken(SparqlQueryParser.LESS, 0);
	};

	GREATER() {
	    return this.getToken(SparqlQueryParser.GREATER, 0);
	};

	LESS_EQUAL() {
	    return this.getToken(SparqlQueryParser.LESS_EQUAL, 0);
	};

	GREATER_EQUAL() {
	    return this.getToken(SparqlQueryParser.GREATER_EQUAL, 0);
	};

	IN() {
	    return this.getToken(SparqlQueryParser.IN, 0);
	};

	OPEN_BRACE() {
	    return this.getToken(SparqlQueryParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SparqlQueryParser.CLOSE_BRACE, 0);
	};

	NOT() {
	    return this.getToken(SparqlQueryParser.NOT, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};


}



class AdditiveExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_additiveExpression;
    }

	multiplicativeExpression() {
	    return this.getTypedRuleContext(MultiplicativeExpressionContext,0);
	};

	rhsAdditiveExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RhsAdditiveExpressionContext);
	    } else {
	        return this.getTypedRuleContext(RhsAdditiveExpressionContext,i);
	    }
	};


}



class RhsAdditiveExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_rhsAdditiveExpression;
        this.s146 = null;
        this.op = [];
        this.s150 = null;
        this._tset1723 = null;
    }

	rhsAdditiveExpressionSub() {
	    return this.getTypedRuleContext(RhsAdditiveExpressionSubContext,0);
	};

	unaryExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnaryExpressionContext);
	    } else {
	        return this.getTypedRuleContext(UnaryExpressionContext,i);
	    }
	};

	ASTERISK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SparqlQueryParser.ASTERISK);
	    } else {
	        return this.getToken(SparqlQueryParser.ASTERISK, i);
	    }
	};


	DIVIDE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SparqlQueryParser.DIVIDE);
	    } else {
	        return this.getToken(SparqlQueryParser.DIVIDE, i);
	    }
	};



}



class RhsAdditiveExpressionSubContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_rhsAdditiveExpressionSub;
    }

	multiplicativeExpression() {
	    return this.getTypedRuleContext(MultiplicativeExpressionContext,0);
	};

	PLUS_SIGN() {
	    return this.getToken(SparqlQueryParser.PLUS_SIGN, 0);
	};

	MINUS_SIGN() {
	    return this.getToken(SparqlQueryParser.MINUS_SIGN, 0);
	};

	numericLiteralPositive() {
	    return this.getTypedRuleContext(NumericLiteralPositiveContext,0);
	};

	numericLiteralNegative() {
	    return this.getTypedRuleContext(NumericLiteralNegativeContext,0);
	};


}



class MultiplicativeExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_multiplicativeExpression;
        this.s146 = null;
        this.op = [];
        this.s150 = null;
        this._tset1766 = null;
    }

	unaryExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnaryExpressionContext);
	    } else {
	        return this.getTypedRuleContext(UnaryExpressionContext,i);
	    }
	};

	ASTERISK = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SparqlQueryParser.ASTERISK);
	    } else {
	        return this.getToken(SparqlQueryParser.ASTERISK, i);
	    }
	};


	DIVIDE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SparqlQueryParser.DIVIDE);
	    } else {
	        return this.getToken(SparqlQueryParser.DIVIDE, i);
	    }
	};



}



class UnaryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_unaryExpression;
        this.op = null;
    }

	primaryExpression() {
	    return this.getTypedRuleContext(PrimaryExpressionContext,0);
	};

	NEGATION() {
	    return this.getToken(SparqlQueryParser.NEGATION, 0);
	};

	PLUS_SIGN() {
	    return this.getToken(SparqlQueryParser.PLUS_SIGN, 0);
	};

	MINUS_SIGN() {
	    return this.getToken(SparqlQueryParser.MINUS_SIGN, 0);
	};


}



class PrimaryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_primaryExpression;
    }

	OPEN_BRACE() {
	    return this.getToken(SparqlQueryParser.OPEN_BRACE, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SparqlQueryParser.CLOSE_BRACE, 0);
	};

	builtInCall() {
	    return this.getTypedRuleContext(BuiltInCallContext,0);
	};

	iriOrFunction() {
	    return this.getTypedRuleContext(IriOrFunctionContext,0);
	};

	rdfLiteral() {
	    return this.getTypedRuleContext(RdfLiteralContext,0);
	};

	numericLiteral() {
	    return this.getTypedRuleContext(NumericLiteralContext,0);
	};

	booleanLiteral() {
	    return this.getTypedRuleContext(BooleanLiteralContext,0);
	};

	var_() {
	    return this.getTypedRuleContext(VarContext,0);
	};


}



class BuiltInCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_builtInCall;
    }

	aggregate() {
	    return this.getTypedRuleContext(AggregateContext,0);
	};

	STR() {
	    return this.getToken(SparqlQueryParser.STR, 0);
	};

	OPEN_BRACE() {
	    return this.getToken(SparqlQueryParser.OPEN_BRACE, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	CLOSE_BRACE() {
	    return this.getToken(SparqlQueryParser.CLOSE_BRACE, 0);
	};

	LANG() {
	    return this.getToken(SparqlQueryParser.LANG, 0);
	};

	LANGMATCHES() {
	    return this.getToken(SparqlQueryParser.LANGMATCHES, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SparqlQueryParser.COMMA);
	    } else {
	        return this.getToken(SparqlQueryParser.COMMA, i);
	    }
	};


	DATATYPE() {
	    return this.getToken(SparqlQueryParser.DATATYPE, 0);
	};

	BOUND() {
	    return this.getToken(SparqlQueryParser.BOUND, 0);
	};

	var_() {
	    return this.getTypedRuleContext(VarContext,0);
	};

	IRI() {
	    return this.getToken(SparqlQueryParser.IRI, 0);
	};

	URI() {
	    return this.getToken(SparqlQueryParser.URI, 0);
	};

	BNODE() {
	    return this.getToken(SparqlQueryParser.BNODE, 0);
	};

	RAND() {
	    return this.getToken(SparqlQueryParser.RAND, 0);
	};

	ABS() {
	    return this.getToken(SparqlQueryParser.ABS, 0);
	};

	CEIL() {
	    return this.getToken(SparqlQueryParser.CEIL, 0);
	};

	FLOOR() {
	    return this.getToken(SparqlQueryParser.FLOOR, 0);
	};

	ROUND() {
	    return this.getToken(SparqlQueryParser.ROUND, 0);
	};

	CONCAT() {
	    return this.getToken(SparqlQueryParser.CONCAT, 0);
	};

	expressionList() {
	    return this.getTypedRuleContext(ExpressionListContext,0);
	};

	subStringExpression() {
	    return this.getTypedRuleContext(SubStringExpressionContext,0);
	};

	STRLEN() {
	    return this.getToken(SparqlQueryParser.STRLEN, 0);
	};

	strReplaceExpression() {
	    return this.getTypedRuleContext(StrReplaceExpressionContext,0);
	};

	UCASE() {
	    return this.getToken(SparqlQueryParser.UCASE, 0);
	};

	LCASE() {
	    return this.getToken(SparqlQueryParser.LCASE, 0);
	};

	ENCODE_FOR_URI() {
	    return this.getToken(SparqlQueryParser.ENCODE_FOR_URI, 0);
	};

	CONTAINS() {
	    return this.getToken(SparqlQueryParser.CONTAINS, 0);
	};

	STRSTARTS() {
	    return this.getToken(SparqlQueryParser.STRSTARTS, 0);
	};

	STRENDS() {
	    return this.getToken(SparqlQueryParser.STRENDS, 0);
	};

	STRBEFORE() {
	    return this.getToken(SparqlQueryParser.STRBEFORE, 0);
	};

	STRAFTER() {
	    return this.getToken(SparqlQueryParser.STRAFTER, 0);
	};

	YEAR() {
	    return this.getToken(SparqlQueryParser.YEAR, 0);
	};

	MONTH() {
	    return this.getToken(SparqlQueryParser.MONTH, 0);
	};

	DAY() {
	    return this.getToken(SparqlQueryParser.DAY, 0);
	};

	HOURS() {
	    return this.getToken(SparqlQueryParser.HOURS, 0);
	};

	MINUTES() {
	    return this.getToken(SparqlQueryParser.MINUTES, 0);
	};

	SECONDS() {
	    return this.getToken(SparqlQueryParser.SECONDS, 0);
	};

	TIMEZONE() {
	    return this.getToken(SparqlQueryParser.TIMEZONE, 0);
	};

	TZ() {
	    return this.getToken(SparqlQueryParser.TZ, 0);
	};

	NOW() {
	    return this.getToken(SparqlQueryParser.NOW, 0);
	};

	UUID() {
	    return this.getToken(SparqlQueryParser.UUID, 0);
	};

	STRUUID() {
	    return this.getToken(SparqlQueryParser.STRUUID, 0);
	};

	MD5() {
	    return this.getToken(SparqlQueryParser.MD5, 0);
	};

	SHA1() {
	    return this.getToken(SparqlQueryParser.SHA1, 0);
	};

	SHA256() {
	    return this.getToken(SparqlQueryParser.SHA256, 0);
	};

	SHA384() {
	    return this.getToken(SparqlQueryParser.SHA384, 0);
	};

	SHA512() {
	    return this.getToken(SparqlQueryParser.SHA512, 0);
	};

	COALESCE() {
	    return this.getToken(SparqlQueryParser.COALESCE, 0);
	};

	IF() {
	    return this.getToken(SparqlQueryParser.IF, 0);
	};

	STRLANG() {
	    return this.getToken(SparqlQueryParser.STRLANG, 0);
	};

	STRDT() {
	    return this.getToken(SparqlQueryParser.STRDT, 0);
	};

	SAMETERM() {
	    return this.getToken(SparqlQueryParser.SAMETERM, 0);
	};

	ISIRI() {
	    return this.getToken(SparqlQueryParser.ISIRI, 0);
	};

	ISURI() {
	    return this.getToken(SparqlQueryParser.ISURI, 0);
	};

	ISBLANK() {
	    return this.getToken(SparqlQueryParser.ISBLANK, 0);
	};

	ISLITERAL() {
	    return this.getToken(SparqlQueryParser.ISLITERAL, 0);
	};

	ISNUMERIC() {
	    return this.getToken(SparqlQueryParser.ISNUMERIC, 0);
	};

	regexExpression() {
	    return this.getTypedRuleContext(RegexExpressionContext,0);
	};

	existsFunction() {
	    return this.getTypedRuleContext(ExistsFunctionContext,0);
	};

	notExistsFunction() {
	    return this.getTypedRuleContext(NotExistsFunctionContext,0);
	};


}



class ProcedureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_procedure;
    }

	ALPHANUMERIC_IDENTIFIER() {
	    return this.getToken(SparqlQueryParser.ALPHANUMERIC_IDENTIFIER, 0);
	};

	OPEN_BRACE() {
	    return this.getToken(SparqlQueryParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SparqlQueryParser.CLOSE_BRACE, 0);
	};

	AS() {
	    return this.getToken(SparqlQueryParser.AS, 0);
	};

	procedureBindings() {
	    return this.getTypedRuleContext(ProcedureBindingsContext,0);
	};

	procedureArguments() {
	    return this.getTypedRuleContext(ProcedureArgumentsContext,0);
	};


}



class ProcedureArgumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_procedureArguments;
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SparqlQueryParser.COMMA);
	    } else {
	        return this.getToken(SparqlQueryParser.COMMA, i);
	    }
	};



}



class ProcedureBindingsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_procedureBindings;
    }

	var_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VarContext);
	    } else {
	        return this.getTypedRuleContext(VarContext,i);
	    }
	};

	OPEN_BRACE() {
	    return this.getToken(SparqlQueryParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SparqlQueryParser.CLOSE_BRACE, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SparqlQueryParser.COMMA);
	    } else {
	        return this.getToken(SparqlQueryParser.COMMA, i);
	    }
	};



}



class RegexExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_regexExpression;
    }

	REGEX() {
	    return this.getToken(SparqlQueryParser.REGEX, 0);
	};

	OPEN_BRACE() {
	    return this.getToken(SparqlQueryParser.OPEN_BRACE, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SparqlQueryParser.COMMA);
	    } else {
	        return this.getToken(SparqlQueryParser.COMMA, i);
	    }
	};


	CLOSE_BRACE() {
	    return this.getToken(SparqlQueryParser.CLOSE_BRACE, 0);
	};


}



class SubStringExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_subStringExpression;
    }

	SUBSTR() {
	    return this.getToken(SparqlQueryParser.SUBSTR, 0);
	};

	OPEN_BRACE() {
	    return this.getToken(SparqlQueryParser.OPEN_BRACE, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SparqlQueryParser.COMMA);
	    } else {
	        return this.getToken(SparqlQueryParser.COMMA, i);
	    }
	};


	CLOSE_BRACE() {
	    return this.getToken(SparqlQueryParser.CLOSE_BRACE, 0);
	};


}



class StrReplaceExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_strReplaceExpression;
    }

	REPLACE() {
	    return this.getToken(SparqlQueryParser.REPLACE, 0);
	};

	OPEN_BRACE() {
	    return this.getToken(SparqlQueryParser.OPEN_BRACE, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(SparqlQueryParser.COMMA);
	    } else {
	        return this.getToken(SparqlQueryParser.COMMA, i);
	    }
	};


	CLOSE_BRACE() {
	    return this.getToken(SparqlQueryParser.CLOSE_BRACE, 0);
	};


}



class ExistsFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_existsFunction;
    }

	EXISTS() {
	    return this.getToken(SparqlQueryParser.EXISTS, 0);
	};

	groupGraphPattern() {
	    return this.getTypedRuleContext(GroupGraphPatternContext,0);
	};


}



class NotExistsFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_notExistsFunction;
    }

	NOT() {
	    return this.getToken(SparqlQueryParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(SparqlQueryParser.EXISTS, 0);
	};

	groupGraphPattern() {
	    return this.getTypedRuleContext(GroupGraphPatternContext,0);
	};


}



class AggregateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_aggregate;
    }

	COUNT() {
	    return this.getToken(SparqlQueryParser.COUNT, 0);
	};

	OPEN_BRACE() {
	    return this.getToken(SparqlQueryParser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(SparqlQueryParser.CLOSE_BRACE, 0);
	};

	ASTERISK() {
	    return this.getToken(SparqlQueryParser.ASTERISK, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	DISTINCT() {
	    return this.getToken(SparqlQueryParser.DISTINCT, 0);
	};

	SUM() {
	    return this.getToken(SparqlQueryParser.SUM, 0);
	};

	MIN() {
	    return this.getToken(SparqlQueryParser.MIN, 0);
	};

	MAX() {
	    return this.getToken(SparqlQueryParser.MAX, 0);
	};

	AVG() {
	    return this.getToken(SparqlQueryParser.AVG, 0);
	};

	SAMPLE() {
	    return this.getToken(SparqlQueryParser.SAMPLE, 0);
	};

	GROUP_CONCAT() {
	    return this.getToken(SparqlQueryParser.GROUP_CONCAT, 0);
	};

	SEMICOLON() {
	    return this.getToken(SparqlQueryParser.SEMICOLON, 0);
	};

	SEPARATOR() {
	    return this.getToken(SparqlQueryParser.SEPARATOR, 0);
	};

	EQUAL() {
	    return this.getToken(SparqlQueryParser.EQUAL, 0);
	};

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};


}



class IriOrFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_iriOrFunction;
    }

	iri() {
	    return this.getTypedRuleContext(IriContext,0);
	};

	argList() {
	    return this.getTypedRuleContext(ArgListContext,0);
	};


}



class RdfLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_rdfLiteral;
    }

	string() {
	    return this.getTypedRuleContext(StringContext,0);
	};

	LANGTAG() {
	    return this.getToken(SparqlQueryParser.LANGTAG, 0);
	};

	REFERENCE() {
	    return this.getToken(SparqlQueryParser.REFERENCE, 0);
	};

	iri() {
	    return this.getTypedRuleContext(IriContext,0);
	};


}



class NumericLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_numericLiteral;
    }

	numericLiteralUnsigned() {
	    return this.getTypedRuleContext(NumericLiteralUnsignedContext,0);
	};

	numericLiteralPositive() {
	    return this.getTypedRuleContext(NumericLiteralPositiveContext,0);
	};

	numericLiteralNegative() {
	    return this.getTypedRuleContext(NumericLiteralNegativeContext,0);
	};


}



class NumericLiteralUnsignedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_numericLiteralUnsigned;
    }

	INTEGER() {
	    return this.getToken(SparqlQueryParser.INTEGER, 0);
	};

	DECIMAL() {
	    return this.getToken(SparqlQueryParser.DECIMAL, 0);
	};

	DOUBLE() {
	    return this.getToken(SparqlQueryParser.DOUBLE, 0);
	};


}



class NumericLiteralPositiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_numericLiteralPositive;
    }

	INTEGER_POSITIVE() {
	    return this.getToken(SparqlQueryParser.INTEGER_POSITIVE, 0);
	};

	DECIMAL_POSITIVE() {
	    return this.getToken(SparqlQueryParser.DECIMAL_POSITIVE, 0);
	};

	DOUBLE_POSITIVE() {
	    return this.getToken(SparqlQueryParser.DOUBLE_POSITIVE, 0);
	};


}



class NumericLiteralNegativeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_numericLiteralNegative;
    }

	INTEGER_NEGATIVE() {
	    return this.getToken(SparqlQueryParser.INTEGER_NEGATIVE, 0);
	};

	DECIMAL_NEGATIVE() {
	    return this.getToken(SparqlQueryParser.DECIMAL_NEGATIVE, 0);
	};

	DOUBLE_NEGATIVE() {
	    return this.getToken(SparqlQueryParser.DOUBLE_NEGATIVE, 0);
	};


}



class BooleanLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_booleanLiteral;
    }

	K_TRUE() {
	    return this.getToken(SparqlQueryParser.K_TRUE, 0);
	};

	K_FALSE() {
	    return this.getToken(SparqlQueryParser.K_FALSE, 0);
	};


}



class StringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_string;
    }

	STRING_LITERAL1() {
	    return this.getToken(SparqlQueryParser.STRING_LITERAL1, 0);
	};

	STRING_LITERAL2() {
	    return this.getToken(SparqlQueryParser.STRING_LITERAL2, 0);
	};

	STRING_LITERAL_LONG1() {
	    return this.getToken(SparqlQueryParser.STRING_LITERAL_LONG1, 0);
	};

	STRING_LITERAL_LONG2() {
	    return this.getToken(SparqlQueryParser.STRING_LITERAL_LONG2, 0);
	};


}



class IriContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_iri;
    }

	IRIREF() {
	    return this.getToken(SparqlQueryParser.IRIREF, 0);
	};

	prefixedName() {
	    return this.getTypedRuleContext(PrefixedNameContext,0);
	};


}



class PrefixedNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_prefixedName;
    }

	PNAME_LN() {
	    return this.getToken(SparqlQueryParser.PNAME_LN, 0);
	};

	PNAME_NS() {
	    return this.getToken(SparqlQueryParser.PNAME_NS, 0);
	};


}



class BlankNodeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_blankNode;
    }

	BLANK_NODE_LABEL() {
	    return this.getToken(SparqlQueryParser.BLANK_NODE_LABEL, 0);
	};

	anon() {
	    return this.getTypedRuleContext(AnonContext,0);
	};


}



class AnonContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = SparqlQueryParser.RULE_anon;
    }

	OPEN_SQUARE_BRACKET() {
	    return this.getToken(SparqlQueryParser.OPEN_SQUARE_BRACKET, 0);
	};

	CLOSE_SQUARE_BRACKET() {
	    return this.getToken(SparqlQueryParser.CLOSE_SQUARE_BRACKET, 0);
	};


}




SparqlQueryParser.QueryContext = QueryContext; 
SparqlQueryParser.ShowQueryContext = ShowQueryContext; 
SparqlQueryParser.PrologueContext = PrologueContext; 
SparqlQueryParser.BaseDeclContext = BaseDeclContext; 
SparqlQueryParser.PrefixDeclContext = PrefixDeclContext; 
SparqlQueryParser.SelectQueryContext = SelectQueryContext; 
SparqlQueryParser.SubSelectContext = SubSelectContext; 
SparqlQueryParser.SelectClauseContext = SelectClauseContext; 
SparqlQueryParser.SelectModifierContext = SelectModifierContext; 
SparqlQueryParser.SelectVariablesContext = SelectVariablesContext; 
SparqlQueryParser.ConstructQueryContext = ConstructQueryContext; 
SparqlQueryParser.DescribeQueryContext = DescribeQueryContext; 
SparqlQueryParser.AskQueryContext = AskQueryContext; 
SparqlQueryParser.DatasetClauseContext = DatasetClauseContext; 
SparqlQueryParser.WhereClauseContext = WhereClauseContext; 
SparqlQueryParser.SolutionModifierContext = SolutionModifierContext; 
SparqlQueryParser.GroupClauseContext = GroupClauseContext; 
SparqlQueryParser.GroupConditionContext = GroupConditionContext; 
SparqlQueryParser.HavingClauseContext = HavingClauseContext; 
SparqlQueryParser.HavingConditionContext = HavingConditionContext; 
SparqlQueryParser.OrderClauseContext = OrderClauseContext; 
SparqlQueryParser.OrderConditionContext = OrderConditionContext; 
SparqlQueryParser.LimitOffsetClausesContext = LimitOffsetClausesContext; 
SparqlQueryParser.LimitClauseContext = LimitClauseContext; 
SparqlQueryParser.OffsetClauseContext = OffsetClauseContext; 
SparqlQueryParser.ValuesClauseContext = ValuesClauseContext; 
SparqlQueryParser.TriplesTemplateContext = TriplesTemplateContext; 
SparqlQueryParser.GroupGraphPatternContext = GroupGraphPatternContext; 
SparqlQueryParser.GroupGraphPatternSubContext = GroupGraphPatternSubContext; 
SparqlQueryParser.GroupGraphPatternSubListContext = GroupGraphPatternSubListContext; 
SparqlQueryParser.TriplesBlockContext = TriplesBlockContext; 
SparqlQueryParser.GraphPatternNotTriplesContext = GraphPatternNotTriplesContext; 
SparqlQueryParser.OptionalGraphPatternContext = OptionalGraphPatternContext; 
SparqlQueryParser.GraphGraphPatternContext = GraphGraphPatternContext; 
SparqlQueryParser.ServiceGraphPatternContext = ServiceGraphPatternContext; 
SparqlQueryParser.BindContext = BindContext; 
SparqlQueryParser.InlineDataContext = InlineDataContext; 
SparqlQueryParser.DataBlockContext = DataBlockContext; 
SparqlQueryParser.InlineDataOneVarContext = InlineDataOneVarContext; 
SparqlQueryParser.InlineDataFullContext = InlineDataFullContext; 
SparqlQueryParser.DataBlockValuesContext = DataBlockValuesContext; 
SparqlQueryParser.DataBlockValueContext = DataBlockValueContext; 
SparqlQueryParser.MinusGraphPatternContext = MinusGraphPatternContext; 
SparqlQueryParser.GroupOrUnionGraphPatternContext = GroupOrUnionGraphPatternContext; 
SparqlQueryParser.FilterContext = FilterContext; 
SparqlQueryParser.ConstraintContext = ConstraintContext; 
SparqlQueryParser.FunctionCallContext = FunctionCallContext; 
SparqlQueryParser.ArgListContext = ArgListContext; 
SparqlQueryParser.ExpressionListContext = ExpressionListContext; 
SparqlQueryParser.ConstructTemplateContext = ConstructTemplateContext; 
SparqlQueryParser.ConstructTriplesContext = ConstructTriplesContext; 
SparqlQueryParser.TriplesSameSubjectContext = TriplesSameSubjectContext; 
SparqlQueryParser.PropertyListContext = PropertyListContext; 
SparqlQueryParser.PropertyListNotEmptyContext = PropertyListNotEmptyContext; 
SparqlQueryParser.VerbContext = VerbContext; 
SparqlQueryParser.ObjectListContext = ObjectListContext; 
SparqlQueryParser.ObjectContext = ObjectContext; 
SparqlQueryParser.TriplesSameSubjectPathContext = TriplesSameSubjectPathContext; 
SparqlQueryParser.PropertyListPathContext = PropertyListPathContext; 
SparqlQueryParser.PropertyListPathNotEmptyContext = PropertyListPathNotEmptyContext; 
SparqlQueryParser.PropertyListPathNotEmptyListContext = PropertyListPathNotEmptyListContext; 
SparqlQueryParser.VerbPathContext = VerbPathContext; 
SparqlQueryParser.VerbSimpleContext = VerbSimpleContext; 
SparqlQueryParser.ObjectListPathContext = ObjectListPathContext; 
SparqlQueryParser.ObjectPathContext = ObjectPathContext; 
SparqlQueryParser.PathContext = PathContext; 
SparqlQueryParser.PathAlternativeContext = PathAlternativeContext; 
SparqlQueryParser.PathSequenceContext = PathSequenceContext; 
SparqlQueryParser.PathEltContext = PathEltContext; 
SparqlQueryParser.PathEltOrInverseContext = PathEltOrInverseContext; 
SparqlQueryParser.PathModContext = PathModContext; 
SparqlQueryParser.PathQuantityContext = PathQuantityContext; 
SparqlQueryParser.PathQuantityExactContext = PathQuantityExactContext; 
SparqlQueryParser.PathQuantityRangeContext = PathQuantityRangeContext; 
SparqlQueryParser.PathQuantityMinContext = PathQuantityMinContext; 
SparqlQueryParser.PathQuantityMaxContext = PathQuantityMaxContext; 
SparqlQueryParser.PathPrimaryContext = PathPrimaryContext; 
SparqlQueryParser.PathNegatedPropertySetContext = PathNegatedPropertySetContext; 
SparqlQueryParser.PathOneInPropertySetContext = PathOneInPropertySetContext; 
SparqlQueryParser.IntegerContext = IntegerContext; 
SparqlQueryParser.TriplesNodeContext = TriplesNodeContext; 
SparqlQueryParser.BlankNodePropertyListContext = BlankNodePropertyListContext; 
SparqlQueryParser.TriplesNodePathContext = TriplesNodePathContext; 
SparqlQueryParser.BlankNodePropertyListPathContext = BlankNodePropertyListPathContext; 
SparqlQueryParser.CollectionContext = CollectionContext; 
SparqlQueryParser.CollectionPathContext = CollectionPathContext; 
SparqlQueryParser.GraphNodeContext = GraphNodeContext; 
SparqlQueryParser.GraphNodePathContext = GraphNodePathContext; 
SparqlQueryParser.VarOrTermContext = VarOrTermContext; 
SparqlQueryParser.VarOrIRIContext = VarOrIRIContext; 
SparqlQueryParser.VarContext = VarContext; 
SparqlQueryParser.GraphTermContext = GraphTermContext; 
SparqlQueryParser.NilContext = NilContext; 
SparqlQueryParser.ExpressionContext = ExpressionContext; 
SparqlQueryParser.ConditionalOrExpressionContext = ConditionalOrExpressionContext; 
SparqlQueryParser.ConditionalAndExpressionContext = ConditionalAndExpressionContext; 
SparqlQueryParser.RelationalExpressionContext = RelationalExpressionContext; 
SparqlQueryParser.AdditiveExpressionContext = AdditiveExpressionContext; 
SparqlQueryParser.RhsAdditiveExpressionContext = RhsAdditiveExpressionContext; 
SparqlQueryParser.RhsAdditiveExpressionSubContext = RhsAdditiveExpressionSubContext; 
SparqlQueryParser.MultiplicativeExpressionContext = MultiplicativeExpressionContext; 
SparqlQueryParser.UnaryExpressionContext = UnaryExpressionContext; 
SparqlQueryParser.PrimaryExpressionContext = PrimaryExpressionContext; 
SparqlQueryParser.BuiltInCallContext = BuiltInCallContext; 
SparqlQueryParser.ProcedureContext = ProcedureContext; 
SparqlQueryParser.ProcedureArgumentsContext = ProcedureArgumentsContext; 
SparqlQueryParser.ProcedureBindingsContext = ProcedureBindingsContext; 
SparqlQueryParser.RegexExpressionContext = RegexExpressionContext; 
SparqlQueryParser.SubStringExpressionContext = SubStringExpressionContext; 
SparqlQueryParser.StrReplaceExpressionContext = StrReplaceExpressionContext; 
SparqlQueryParser.ExistsFunctionContext = ExistsFunctionContext; 
SparqlQueryParser.NotExistsFunctionContext = NotExistsFunctionContext; 
SparqlQueryParser.AggregateContext = AggregateContext; 
SparqlQueryParser.IriOrFunctionContext = IriOrFunctionContext; 
SparqlQueryParser.RdfLiteralContext = RdfLiteralContext; 
SparqlQueryParser.NumericLiteralContext = NumericLiteralContext; 
SparqlQueryParser.NumericLiteralUnsignedContext = NumericLiteralUnsignedContext; 
SparqlQueryParser.NumericLiteralPositiveContext = NumericLiteralPositiveContext; 
SparqlQueryParser.NumericLiteralNegativeContext = NumericLiteralNegativeContext; 
SparqlQueryParser.BooleanLiteralContext = BooleanLiteralContext; 
SparqlQueryParser.StringContext = StringContext; 
SparqlQueryParser.IriContext = IriContext; 
SparqlQueryParser.PrefixedNameContext = PrefixedNameContext; 
SparqlQueryParser.BlankNodeContext = BlankNodeContext; 
SparqlQueryParser.AnonContext = AnonContext; 
