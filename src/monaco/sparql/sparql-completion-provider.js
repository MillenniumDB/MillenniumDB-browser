const keywords = [
  'BASE',
  'SELECT',
  'PREFIX',
  'DISTINCT',
  'REDUCED',
  'CONSTRUCT',
  'DESCRIBE',
  'ASK',
  'FROM',
  'NAMED',
  'WHERE',
  'ORDER',
  'BY',
  'ASC',
  'DESC',
  'LIMIT',
  'OFFSET',
  'VALUES',
  'OPTIONAL',
  'GRAPH',
  'UNION',
  'FILTER',
  'A',
  'STR',
  'LANG',
  'LANGMATCHES',
  'DATATYPE',
  'BOUND',
  'SAMETERM',
  'ISIRI',
  'ISURI',
  'ISBLANK',
  'ISLITERAL',
  'REGEX',
  'SUBSTR',
  'TRUE',
  'FALSE',
  'SILENT',
  'ALL',
  'AS',
  'GROUP',
  'HAVING',
  'UNDEF',
  'BINDINGS',
  'SERVICE',
  'BIND',
  'MINUS',
  'IRI',
  'URI',
  'BNODE',
  'RAND',
  'ABS',
  'CEIL',
  'FLOOR',
  'ROUND',
  'CONCAT',
  'STRLEN',
  'UCASE',
  'LCASE',
  'ENCODE_FOR_URI',
  'CONTAINS',
  'STRSTARTS',
  'STRENDS',
  'STRBEFORE',
  'STRAFTER',
  'REPLACE',
  'YEAR',
  'MONTH',
  'DAY',
  'HOURS',
  'MINUTES',
  'SECONDS',
  'TIMEZONE',
  'TZ',
  'NOW',
  'UUID',
  'STRUUID',
  'MD5',
  'SHA1',
  'SHA256',
  'SHA384',
  'SHA512',
  'COALESCE',
  'IF',
  'STRLANG',
  'STRDT',
  'ISNUMERIC',
  'COUNT',
  'SUM',
  'MIN',
  'MAX',
  'AVG',
  'SAMPLE',
  'GROUP_CONCAT',
  'NOT',
  'IN',
  'EXISTS',
  'SEPARATOR',
  'ANY',
  'SHORTEST',
  'SIMPLE',
  'ACYCLIC',
  'WALKS',
];

function createSuggestions(range) {
  return keywords.map((kw) => ({
    label: kw,
    // Cannot import monaco here right now, so we use 17 === monaco.languages.CompletionItemKind.Keyword
    kind: 17,
    insertText: kw,
    range,
  }));
}

const SPARQLCompletionProvider = {
  provideCompletionItems: (model, position) => {
    const word = model.getWordUntilPosition(position);
    const range = {
      startLineNumber: position.lineNumber,
      endLineNumber: position.lineNumber,
      startColumn: word.startColumn,
      endColumn: word.endColumn,
    };
    return {
      suggestions: createSuggestions(range),
    };
  },
};

export default SPARQLCompletionProvider;
